[
    {
        "label": "difflib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "difflib",
        "description": "difflib",
        "detail": "difflib",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "iglob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "iglob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "NamedTemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "NamedTemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "Cython.Build.Dependencies",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Cython.Build.Dependencies",
        "description": "Cython.Build.Dependencies",
        "detail": "Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "strip_string_literals",
        "importPath": "Cython.Build.Dependencies",
        "description": "Cython.Build.Dependencies",
        "isExtraImport": true,
        "detail": "Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "strip_string_literals",
        "importPath": "Cython.Build.Dependencies",
        "description": "Cython.Build.Dependencies",
        "isExtraImport": true,
        "detail": "Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "Cython.Utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Cython.Utils",
        "description": "Cython.Utils",
        "detail": "Cython.Utils",
        "documentation": {}
    },
    {
        "label": "cached_function",
        "importPath": "Cython.Utils",
        "description": "Cython.Utils",
        "isExtraImport": true,
        "detail": "Cython.Utils",
        "documentation": {}
    },
    {
        "label": "cached_function",
        "importPath": "Cython.Utils",
        "description": "Cython.Utils",
        "isExtraImport": true,
        "detail": "Cython.Utils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "TransformTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "TransformTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "TransformTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "TransformTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "TransformTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "TransformTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "TransformTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "TransformTest",
        "importPath": "Cython.TestUtils",
        "description": "Cython.TestUtils",
        "isExtraImport": true,
        "detail": "Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "inline",
        "importPath": "Cython.Shadow",
        "description": "Cython.Shadow",
        "isExtraImport": true,
        "detail": "Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "inline",
        "importPath": "Cython.Shadow",
        "description": "Cython.Shadow",
        "isExtraImport": true,
        "detail": "Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "safe_type",
        "importPath": "Cython.Build.Inline",
        "description": "Cython.Build.Inline",
        "isExtraImport": true,
        "detail": "Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "safe_type",
        "importPath": "Cython.Build.Inline",
        "description": "Cython.Build.Inline",
        "isExtraImport": true,
        "detail": "Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "platform",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "exit",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stderr",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "platform",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "exit",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stderr",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "closing",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "closing",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "IpythonMagic",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "IpythonMagic",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "ccompiler",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "ccompiler",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Distribution",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Distribution",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Distribution",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Distribution",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "cython",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cython",
        "description": "cython",
        "detail": "cython",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "re,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re.",
        "description": "re.",
        "detail": "re.",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "open",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "open",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "relpath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "relpath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "distutils.extension",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "distutils.extension",
        "description": "distutils.extension",
        "detail": "distutils.extension",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "distutils.extension",
        "description": "distutils.extension",
        "isExtraImport": true,
        "detail": "distutils.extension",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "distutils.extension",
        "description": "distutils.extension",
        "isExtraImport": true,
        "detail": "distutils.extension",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "distutils.extension",
        "description": "distutils.extension",
        "isExtraImport": true,
        "detail": "distutils.extension",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "distutils.extension",
        "description": "distutils.extension",
        "isExtraImport": true,
        "detail": "distutils.extension",
        "documentation": {}
    },
    {
        "label": "strtobool",
        "importPath": "distutils.util",
        "description": "distutils.util",
        "isExtraImport": true,
        "detail": "distutils.util",
        "documentation": {}
    },
    {
        "label": "grok_environment_error",
        "importPath": "distutils.util",
        "description": "distutils.util",
        "isExtraImport": true,
        "detail": "distutils.util",
        "documentation": {}
    },
    {
        "label": "strtobool",
        "importPath": "distutils.util",
        "description": "distutils.util",
        "isExtraImport": true,
        "detail": "distutils.util",
        "documentation": {}
    },
    {
        "label": "grok_environment_error",
        "importPath": "distutils.util",
        "description": "distutils.util",
        "isExtraImport": true,
        "detail": "distutils.util",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "build_ext",
        "importPath": "Cython.Distutils.build_ext",
        "description": "Cython.Distutils.build_ext",
        "isExtraImport": true,
        "detail": "Cython.Distutils.build_ext",
        "documentation": {}
    },
    {
        "label": "build_ext",
        "importPath": "Cython.Distutils.build_ext",
        "description": "Cython.Distutils.build_ext",
        "isExtraImport": true,
        "detail": "Cython.Distutils.build_ext",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "build_ext",
        "importPath": "distutils.command.build_ext",
        "description": "distutils.command.build_ext",
        "isExtraImport": true,
        "detail": "distutils.command.build_ext",
        "documentation": {}
    },
    {
        "label": "build_ext",
        "importPath": "distutils.command.build_ext",
        "description": "distutils.command.build_ext",
        "isExtraImport": true,
        "detail": "distutils.command.build_ext",
        "documentation": {}
    },
    {
        "label": "build_ext",
        "importPath": "distutils.command.build_ext",
        "description": "distutils.command.build_ext",
        "isExtraImport": true,
        "detail": "distutils.command.build_ext",
        "documentation": {}
    },
    {
        "label": "build_ext",
        "importPath": "distutils.command.build_ext",
        "description": "distutils.command.build_ext",
        "isExtraImport": true,
        "detail": "distutils.command.build_ext",
        "documentation": {}
    },
    {
        "label": "Cython",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Cython",
        "description": "Cython",
        "detail": "Cython",
        "documentation": {}
    },
    {
        "label": "StringIOTree",
        "importPath": "Cython",
        "description": "Cython",
        "isExtraImport": true,
        "detail": "Cython",
        "documentation": {}
    },
    {
        "label": "StringIOTree",
        "importPath": "Cython",
        "description": "Cython",
        "isExtraImport": true,
        "detail": "Cython",
        "documentation": {}
    },
    {
        "label": "imp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "imp",
        "description": "imp",
        "detail": "imp",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "distutils.log",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "distutils.log",
        "description": "distutils.log",
        "detail": "distutils.log",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "display",
        "importPath": "IPython.core",
        "description": "IPython.core",
        "isExtraImport": true,
        "detail": "IPython.core",
        "documentation": {}
    },
    {
        "label": "magic_arguments",
        "importPath": "IPython.core",
        "description": "IPython.core",
        "isExtraImport": true,
        "detail": "IPython.core",
        "documentation": {}
    },
    {
        "label": "display",
        "importPath": "IPython.core",
        "description": "IPython.core",
        "isExtraImport": true,
        "detail": "IPython.core",
        "documentation": {}
    },
    {
        "label": "magic_arguments",
        "importPath": "IPython.core",
        "description": "IPython.core",
        "isExtraImport": true,
        "detail": "IPython.core",
        "documentation": {}
    },
    {
        "label": "Magics",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "magics_class",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "cell_magic",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "Magics",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "magics_class",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "cell_magic",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "IPython.utils.text",
        "description": "IPython.utils.text",
        "isExtraImport": true,
        "detail": "IPython.utils.text",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "IPython.utils.text",
        "description": "IPython.utils.text",
        "isExtraImport": true,
        "detail": "IPython.utils.text",
        "documentation": {}
    },
    {
        "label": "Cython.Compiler.Errors",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Cython.Compiler.Errors",
        "description": "Cython.Compiler.Errors",
        "detail": "Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.Nodes",
        "description": "Cython.Compiler.Nodes",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.Nodes",
        "description": "Cython.Compiler.Nodes",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.Nodes",
        "description": "Cython.Compiler.Nodes",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.Nodes",
        "description": "Cython.Compiler.Nodes",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.Nodes",
        "description": "Cython.Compiler.Nodes",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.Nodes",
        "description": "Cython.Compiler.Nodes",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.Nodes",
        "description": "Cython.Compiler.Nodes",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.Nodes",
        "description": "Cython.Compiler.Nodes",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "_calculate_pickle_checksums",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "NormalizeTree",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "AnalyseDeclarationsTransform",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "AnalyseExpressionsTransform",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "InterpretCompilerDirectives",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "NormalizeTree",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "InterpretCompilerDirectives",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "_calculate_pickle_checksums",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "NormalizeTree",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "AnalyseDeclarationsTransform",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "AnalyseExpressionsTransform",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "InterpretCompilerDirectives",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "NormalizeTree",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "InterpretCompilerDirectives",
        "importPath": "Cython.Compiler.ParseTreeTransforms",
        "description": "Cython.Compiler.ParseTreeTransforms",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.Buffer",
        "description": "Cython.Compiler.Buffer",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.Buffer",
        "description": "Cython.Compiler.Buffer",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.Buffer",
        "description": "Cython.Compiler.Buffer",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.Buffer",
        "description": "Cython.Compiler.Buffer",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestResult",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TextTestResult",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TextTestRunner",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestResult",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TextTestResult",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TextTestRunner",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "NameAssignment",
        "importPath": "Cython.Compiler.FlowControl",
        "description": "Cython.Compiler.FlowControl",
        "isExtraImport": true,
        "detail": "Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "StaticAssignment",
        "importPath": "Cython.Compiler.FlowControl",
        "description": "Cython.Compiler.FlowControl",
        "isExtraImport": true,
        "detail": "Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "Argument",
        "importPath": "Cython.Compiler.FlowControl",
        "description": "Cython.Compiler.FlowControl",
        "isExtraImport": true,
        "detail": "Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "NameDeletion",
        "importPath": "Cython.Compiler.FlowControl",
        "description": "Cython.Compiler.FlowControl",
        "isExtraImport": true,
        "detail": "Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "NameAssignment",
        "importPath": "Cython.Compiler.FlowControl",
        "description": "Cython.Compiler.FlowControl",
        "isExtraImport": true,
        "detail": "Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "StaticAssignment",
        "importPath": "Cython.Compiler.FlowControl",
        "description": "Cython.Compiler.FlowControl",
        "isExtraImport": true,
        "detail": "Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "Argument",
        "importPath": "Cython.Compiler.FlowControl",
        "description": "Cython.Compiler.FlowControl",
        "isExtraImport": true,
        "detail": "Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "NameDeletion",
        "importPath": "Cython.Compiler.FlowControl",
        "description": "Cython.Compiler.FlowControl",
        "isExtraImport": true,
        "detail": "Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "Main",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "Symtab",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "PyrexTypes",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "Nodes",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "ExprNodes",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "Code",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "UtilityCode",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "Main",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "Symtab",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "Visitor",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "Main",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "Symtab",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "PyrexTypes",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "Nodes",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "ExprNodes",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "Code",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "UtilityCode",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "Main",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "Symtab",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "Visitor",
        "importPath": "Cython.Compiler",
        "description": "Cython.Compiler",
        "isExtraImport": true,
        "detail": "Cython.Compiler",
        "documentation": {}
    },
    {
        "label": "NameNode",
        "importPath": "Cython.Compiler.ExprNodes",
        "description": "Cython.Compiler.ExprNodes",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NameNode",
        "importPath": "Cython.Compiler.ExprNodes",
        "description": "Cython.Compiler.ExprNodes",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "Cython.Compiler.PyrexTypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Cython.Compiler.PyrexTypes",
        "description": "Cython.Compiler.PyrexTypes",
        "detail": "Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CFuncTypeArg",
        "importPath": "Cython.Compiler.PyrexTypes",
        "description": "Cython.Compiler.PyrexTypes",
        "isExtraImport": true,
        "detail": "Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CFuncTypeArg",
        "importPath": "Cython.Compiler.PyrexTypes",
        "description": "Cython.Compiler.PyrexTypes",
        "isExtraImport": true,
        "detail": "Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "Cython.Compiler.StringEncoding",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Cython.Compiler.StringEncoding",
        "description": "Cython.Compiler.StringEncoding",
        "detail": "Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.TreeFragment",
        "description": "Cython.Compiler.TreeFragment",
        "isExtraImport": true,
        "detail": "Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.TreeFragment",
        "description": "Cython.Compiler.TreeFragment",
        "isExtraImport": true,
        "detail": "Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.UtilNodes",
        "description": "Cython.Compiler.UtilNodes",
        "isExtraImport": true,
        "detail": "Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Cython.Compiler.UtilNodes",
        "description": "Cython.Compiler.UtilNodes",
        "isExtraImport": true,
        "detail": "Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "Cython.Compiler.Naming",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Cython.Compiler.Naming",
        "description": "Cython.Compiler.Naming",
        "detail": "Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "PrintTree",
        "importPath": "Cython.Compiler.Visitor",
        "description": "Cython.Compiler.Visitor",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "MethodDispatcherTransform",
        "importPath": "Cython.Compiler.Visitor",
        "description": "Cython.Compiler.Visitor",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "PrintTree",
        "importPath": "Cython.Compiler.Visitor",
        "description": "Cython.Compiler.Visitor",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "MethodDispatcherTransform",
        "importPath": "Cython.Compiler.Visitor",
        "description": "Cython.Compiler.Visitor",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "find_first",
        "importPath": "Cython.Compiler.TreePath",
        "description": "Cython.Compiler.TreePath",
        "isExtraImport": true,
        "detail": "Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "find_all",
        "importPath": "Cython.Compiler.TreePath",
        "description": "Cython.Compiler.TreePath",
        "isExtraImport": true,
        "detail": "Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "find_first",
        "importPath": "Cython.Compiler.TreePath",
        "description": "Cython.Compiler.TreePath",
        "isExtraImport": true,
        "detail": "Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "find_all",
        "importPath": "Cython.Compiler.TreePath",
        "description": "Cython.Compiler.TreePath",
        "isExtraImport": true,
        "detail": "Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "ModuleNode",
        "importPath": "Cython.Compiler.ModuleNode",
        "description": "Cython.Compiler.ModuleNode",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "ModuleNode",
        "importPath": "Cython.Compiler.ModuleNode",
        "description": "Cython.Compiler.ModuleNode",
        "isExtraImport": true,
        "detail": "Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "ModuleScope",
        "importPath": "Cython.Compiler.Symtab",
        "description": "Cython.Compiler.Symtab",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "ModuleScope",
        "importPath": "Cython.Compiler.Symtab",
        "description": "Cython.Compiler.Symtab",
        "isExtraImport": true,
        "detail": "Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "xml.sax.saxutils",
        "description": "xml.sax.saxutils",
        "isExtraImport": true,
        "detail": "xml.sax.saxutils",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "xml.sax.saxutils",
        "description": "xml.sax.saxutils",
        "isExtraImport": true,
        "detail": "xml.sax.saxutils",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "lookup",
        "importPath": "unicodedata",
        "description": "unicodedata",
        "isExtraImport": true,
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "category",
        "importPath": "unicodedata",
        "description": "unicodedata",
        "isExtraImport": true,
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "lookup",
        "importPath": "unicodedata",
        "description": "unicodedata",
        "isExtraImport": true,
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "category",
        "importPath": "unicodedata",
        "description": "unicodedata",
        "isExtraImport": true,
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "runtests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runtests",
        "description": "runtests",
        "detail": "runtests",
        "documentation": {}
    },
    {
        "label": "Cython.Distutils.extension",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Cython.Distutils.extension",
        "description": "Cython.Distutils.extension",
        "detail": "Cython.Distutils.extension",
        "documentation": {}
    },
    {
        "label": "Cython.Distutils.old_build_ext",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Cython.Distutils.old_build_ext",
        "description": "Cython.Distutils.old_build_ext",
        "detail": "Cython.Distutils.old_build_ext",
        "documentation": {}
    },
    {
        "label": "Cygdb",
        "importPath": "Cython.Debugger",
        "description": "Cython.Debugger",
        "isExtraImport": true,
        "detail": "Cython.Debugger",
        "documentation": {}
    },
    {
        "label": "libcython",
        "importPath": "Cython.Debugger",
        "description": "Cython.Debugger",
        "isExtraImport": true,
        "detail": "Cython.Debugger",
        "documentation": {}
    },
    {
        "label": "libpython",
        "importPath": "Cython.Debugger",
        "description": "Cython.Debugger",
        "isExtraImport": true,
        "detail": "Cython.Debugger",
        "documentation": {}
    },
    {
        "label": "libpython",
        "importPath": "Cython.Debugger",
        "description": "Cython.Debugger",
        "isExtraImport": true,
        "detail": "Cython.Debugger",
        "documentation": {}
    },
    {
        "label": "Cygdb",
        "importPath": "Cython.Debugger",
        "description": "Cython.Debugger",
        "isExtraImport": true,
        "detail": "Cython.Debugger",
        "documentation": {}
    },
    {
        "label": "libcython",
        "importPath": "Cython.Debugger",
        "description": "Cython.Debugger",
        "isExtraImport": true,
        "detail": "Cython.Debugger",
        "documentation": {}
    },
    {
        "label": "libpython",
        "importPath": "Cython.Debugger",
        "description": "Cython.Debugger",
        "isExtraImport": true,
        "detail": "Cython.Debugger",
        "documentation": {}
    },
    {
        "label": "libpython",
        "importPath": "Cython.Debugger",
        "description": "Cython.Debugger",
        "isExtraImport": true,
        "detail": "Cython.Debugger",
        "documentation": {}
    },
    {
        "label": "trace",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "trace",
        "description": "trace",
        "detail": "trace",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "gdb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gdb",
        "description": "gdb",
        "detail": "gdb",
        "documentation": {}
    },
    {
        "label": "optparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "optparse",
        "description": "optparse",
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "errno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "errno",
        "description": "errno",
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "libpython",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "libpython",
        "description": "libpython",
        "detail": "libpython",
        "documentation": {}
    },
    {
        "label": "DistutilsPlatformError",
        "importPath": "distutils.errors",
        "description": "distutils.errors",
        "isExtraImport": true,
        "detail": "distutils.errors",
        "documentation": {}
    },
    {
        "label": "DistutilsArgError",
        "importPath": "distutils.errors",
        "description": "distutils.errors",
        "isExtraImport": true,
        "detail": "distutils.errors",
        "documentation": {}
    },
    {
        "label": "DistutilsError",
        "importPath": "distutils.errors",
        "description": "distutils.errors",
        "isExtraImport": true,
        "detail": "distutils.errors",
        "documentation": {}
    },
    {
        "label": "CCompilerError",
        "importPath": "distutils.errors",
        "description": "distutils.errors",
        "isExtraImport": true,
        "detail": "distutils.errors",
        "documentation": {}
    },
    {
        "label": "DistutilsPlatformError",
        "importPath": "distutils.errors",
        "description": "distutils.errors",
        "isExtraImport": true,
        "detail": "distutils.errors",
        "documentation": {}
    },
    {
        "label": "DistutilsArgError",
        "importPath": "distutils.errors",
        "description": "distutils.errors",
        "isExtraImport": true,
        "detail": "distutils.errors",
        "documentation": {}
    },
    {
        "label": "DistutilsError",
        "importPath": "distutils.errors",
        "description": "distutils.errors",
        "isExtraImport": true,
        "detail": "distutils.errors",
        "documentation": {}
    },
    {
        "label": "CCompilerError",
        "importPath": "distutils.errors",
        "description": "distutils.errors",
        "isExtraImport": true,
        "detail": "distutils.errors",
        "documentation": {}
    },
    {
        "label": "newer",
        "importPath": "distutils.dep_util",
        "description": "distutils.dep_util",
        "isExtraImport": true,
        "detail": "distutils.dep_util",
        "documentation": {}
    },
    {
        "label": "newer_group",
        "importPath": "distutils.dep_util",
        "description": "distutils.dep_util",
        "isExtraImport": true,
        "detail": "distutils.dep_util",
        "documentation": {}
    },
    {
        "label": "newer",
        "importPath": "distutils.dep_util",
        "description": "distutils.dep_util",
        "isExtraImport": true,
        "detail": "distutils.dep_util",
        "documentation": {}
    },
    {
        "label": "newer_group",
        "importPath": "distutils.dep_util",
        "description": "distutils.dep_util",
        "isExtraImport": true,
        "detail": "distutils.dep_util",
        "documentation": {}
    },
    {
        "label": "build_ext",
        "importPath": "distutils.command",
        "description": "distutils.command",
        "isExtraImport": true,
        "detail": "distutils.command",
        "documentation": {}
    },
    {
        "label": "build_ext",
        "importPath": "distutils.command",
        "description": "distutils.command",
        "isExtraImport": true,
        "detail": "distutils.command",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "basestring_",
        "importPath": "Cython.Tempita.compat3",
        "description": "Cython.Tempita.compat3",
        "isExtraImport": true,
        "detail": "Cython.Tempita.compat3",
        "documentation": {}
    },
    {
        "label": "basestring_",
        "importPath": "Cython.Tempita.compat3",
        "description": "Cython.Tempita.compat3",
        "isExtraImport": true,
        "detail": "Cython.Tempita.compat3",
        "documentation": {}
    },
    {
        "label": "cgi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cgi",
        "description": "cgi",
        "detail": "cgi",
        "documentation": {}
    },
    {
        "label": "tokenize",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tokenize",
        "description": "tokenize",
        "detail": "tokenize",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "xmlrunner",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xmlrunner",
        "description": "xmlrunner",
        "detail": "xmlrunner",
        "documentation": {}
    },
    {
        "label": "xml.dom.minidom",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.dom.minidom",
        "description": "xml.dom.minidom",
        "detail": "xml.dom.minidom",
        "documentation": {}
    },
    {
        "label": "CoveragePlugin",
        "importPath": "coverage.plugin",
        "description": "coverage.plugin",
        "isExtraImport": true,
        "detail": "coverage.plugin",
        "documentation": {}
    },
    {
        "label": "FileTracer",
        "importPath": "coverage.plugin",
        "description": "coverage.plugin",
        "isExtraImport": true,
        "detail": "coverage.plugin",
        "documentation": {}
    },
    {
        "label": "FileReporter",
        "importPath": "coverage.plugin",
        "description": "coverage.plugin",
        "isExtraImport": true,
        "detail": "coverage.plugin",
        "documentation": {}
    },
    {
        "label": "CoveragePlugin",
        "importPath": "coverage.plugin",
        "description": "coverage.plugin",
        "isExtraImport": true,
        "detail": "coverage.plugin",
        "documentation": {}
    },
    {
        "label": "FileTracer",
        "importPath": "coverage.plugin",
        "description": "coverage.plugin",
        "isExtraImport": true,
        "detail": "coverage.plugin",
        "documentation": {}
    },
    {
        "label": "FileReporter",
        "importPath": "coverage.plugin",
        "description": "coverage.plugin",
        "isExtraImport": true,
        "detail": "coverage.plugin",
        "documentation": {}
    },
    {
        "label": "canonical_filename",
        "importPath": "coverage.files",
        "description": "coverage.files",
        "isExtraImport": true,
        "detail": "coverage.files",
        "documentation": {}
    },
    {
        "label": "canonical_filename",
        "importPath": "coverage.files",
        "description": "coverage.files",
        "isExtraImport": true,
        "detail": "coverage.files",
        "documentation": {}
    },
    {
        "label": "zipimporter",
        "importPath": "zipimport",
        "description": "zipimport",
        "isExtraImport": true,
        "detail": "zipimport",
        "documentation": {}
    },
    {
        "label": "ZipImportError",
        "importPath": "zipimport",
        "description": "zipimport",
        "isExtraImport": true,
        "detail": "zipimport",
        "documentation": {}
    },
    {
        "label": "zipimporter",
        "importPath": "zipimport",
        "description": "zipimport",
        "isExtraImport": true,
        "detail": "zipimport",
        "documentation": {}
    },
    {
        "label": "ZipImportError",
        "importPath": "zipimport",
        "description": "zipimport",
        "isExtraImport": true,
        "detail": "zipimport",
        "documentation": {}
    },
    {
        "label": "ARCH_REGISTRY",
        "importPath": "basicsr.utils.registry",
        "description": "basicsr.utils.registry",
        "isExtraImport": true,
        "detail": "basicsr.utils.registry",
        "documentation": {}
    },
    {
        "label": "ARCH_REGISTRY",
        "importPath": "basicsr.utils.registry",
        "description": "basicsr.utils.registry",
        "isExtraImport": true,
        "detail": "basicsr.utils.registry",
        "documentation": {}
    },
    {
        "label": "DATASET_REGISTRY",
        "importPath": "basicsr.utils.registry",
        "description": "basicsr.utils.registry",
        "isExtraImport": true,
        "detail": "basicsr.utils.registry",
        "documentation": {}
    },
    {
        "label": "DATASET_REGISTRY",
        "importPath": "basicsr.utils.registry",
        "description": "basicsr.utils.registry",
        "isExtraImport": true,
        "detail": "basicsr.utils.registry",
        "documentation": {}
    },
    {
        "label": "MODEL_REGISTRY",
        "importPath": "basicsr.utils.registry",
        "description": "basicsr.utils.registry",
        "isExtraImport": true,
        "detail": "basicsr.utils.registry",
        "documentation": {}
    },
    {
        "label": "MODEL_REGISTRY",
        "importPath": "basicsr.utils.registry",
        "description": "basicsr.utils.registry",
        "isExtraImport": true,
        "detail": "basicsr.utils.registry",
        "documentation": {}
    },
    {
        "label": "ARCH_REGISTRY",
        "importPath": "basicsr.utils.registry",
        "description": "basicsr.utils.registry",
        "isExtraImport": true,
        "detail": "basicsr.utils.registry",
        "documentation": {}
    },
    {
        "label": "ARCH_REGISTRY",
        "importPath": "basicsr.utils.registry",
        "description": "basicsr.utils.registry",
        "isExtraImport": true,
        "detail": "basicsr.utils.registry",
        "documentation": {}
    },
    {
        "label": "DATASET_REGISTRY",
        "importPath": "basicsr.utils.registry",
        "description": "basicsr.utils.registry",
        "isExtraImport": true,
        "detail": "basicsr.utils.registry",
        "documentation": {}
    },
    {
        "label": "DATASET_REGISTRY",
        "importPath": "basicsr.utils.registry",
        "description": "basicsr.utils.registry",
        "isExtraImport": true,
        "detail": "basicsr.utils.registry",
        "documentation": {}
    },
    {
        "label": "MODEL_REGISTRY",
        "importPath": "basicsr.utils.registry",
        "description": "basicsr.utils.registry",
        "isExtraImport": true,
        "detail": "basicsr.utils.registry",
        "documentation": {}
    },
    {
        "label": "MODEL_REGISTRY",
        "importPath": "basicsr.utils.registry",
        "description": "basicsr.utils.registry",
        "isExtraImport": true,
        "detail": "basicsr.utils.registry",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "functional",
        "importPath": "torch.nn",
        "description": "torch.nn",
        "isExtraImport": true,
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "functional",
        "importPath": "torch.nn",
        "description": "torch.nn",
        "isExtraImport": true,
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "functional",
        "importPath": "torch.nn",
        "description": "torch.nn",
        "isExtraImport": true,
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "functional",
        "importPath": "torch.nn",
        "description": "torch.nn",
        "isExtraImport": true,
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "functional",
        "importPath": "torch.nn",
        "description": "torch.nn",
        "isExtraImport": true,
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "functional",
        "importPath": "torch.nn",
        "description": "torch.nn",
        "isExtraImport": true,
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "functional",
        "importPath": "torch.nn",
        "description": "torch.nn",
        "isExtraImport": true,
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "functional",
        "importPath": "torch.nn",
        "description": "torch.nn",
        "isExtraImport": true,
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "functional",
        "importPath": "torch.nn",
        "description": "torch.nn",
        "isExtraImport": true,
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "functional",
        "importPath": "torch.nn",
        "description": "torch.nn",
        "isExtraImport": true,
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "spectral_norm",
        "importPath": "torch.nn.utils",
        "description": "torch.nn.utils",
        "isExtraImport": true,
        "detail": "torch.nn.utils",
        "documentation": {}
    },
    {
        "label": "spectral_norm",
        "importPath": "torch.nn.utils",
        "description": "torch.nn.utils",
        "isExtraImport": true,
        "detail": "torch.nn.utils",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "circular_lowpass_kernel",
        "importPath": "basicsr.data.degradations",
        "description": "basicsr.data.degradations",
        "isExtraImport": true,
        "detail": "basicsr.data.degradations",
        "documentation": {}
    },
    {
        "label": "random_mixed_kernels",
        "importPath": "basicsr.data.degradations",
        "description": "basicsr.data.degradations",
        "isExtraImport": true,
        "detail": "basicsr.data.degradations",
        "documentation": {}
    },
    {
        "label": "random_add_gaussian_noise_pt",
        "importPath": "basicsr.data.degradations",
        "description": "basicsr.data.degradations",
        "isExtraImport": true,
        "detail": "basicsr.data.degradations",
        "documentation": {}
    },
    {
        "label": "random_add_poisson_noise_pt",
        "importPath": "basicsr.data.degradations",
        "description": "basicsr.data.degradations",
        "isExtraImport": true,
        "detail": "basicsr.data.degradations",
        "documentation": {}
    },
    {
        "label": "random_add_gaussian_noise_pt",
        "importPath": "basicsr.data.degradations",
        "description": "basicsr.data.degradations",
        "isExtraImport": true,
        "detail": "basicsr.data.degradations",
        "documentation": {}
    },
    {
        "label": "random_add_poisson_noise_pt",
        "importPath": "basicsr.data.degradations",
        "description": "basicsr.data.degradations",
        "isExtraImport": true,
        "detail": "basicsr.data.degradations",
        "documentation": {}
    },
    {
        "label": "circular_lowpass_kernel",
        "importPath": "basicsr.data.degradations",
        "description": "basicsr.data.degradations",
        "isExtraImport": true,
        "detail": "basicsr.data.degradations",
        "documentation": {}
    },
    {
        "label": "random_mixed_kernels",
        "importPath": "basicsr.data.degradations",
        "description": "basicsr.data.degradations",
        "isExtraImport": true,
        "detail": "basicsr.data.degradations",
        "documentation": {}
    },
    {
        "label": "random_add_gaussian_noise_pt",
        "importPath": "basicsr.data.degradations",
        "description": "basicsr.data.degradations",
        "isExtraImport": true,
        "detail": "basicsr.data.degradations",
        "documentation": {}
    },
    {
        "label": "random_add_poisson_noise_pt",
        "importPath": "basicsr.data.degradations",
        "description": "basicsr.data.degradations",
        "isExtraImport": true,
        "detail": "basicsr.data.degradations",
        "documentation": {}
    },
    {
        "label": "random_add_gaussian_noise_pt",
        "importPath": "basicsr.data.degradations",
        "description": "basicsr.data.degradations",
        "isExtraImport": true,
        "detail": "basicsr.data.degradations",
        "documentation": {}
    },
    {
        "label": "random_add_poisson_noise_pt",
        "importPath": "basicsr.data.degradations",
        "description": "basicsr.data.degradations",
        "isExtraImport": true,
        "detail": "basicsr.data.degradations",
        "documentation": {}
    },
    {
        "label": "augment",
        "importPath": "basicsr.data.transforms",
        "description": "basicsr.data.transforms",
        "isExtraImport": true,
        "detail": "basicsr.data.transforms",
        "documentation": {}
    },
    {
        "label": "augment",
        "importPath": "basicsr.data.transforms",
        "description": "basicsr.data.transforms",
        "isExtraImport": true,
        "detail": "basicsr.data.transforms",
        "documentation": {}
    },
    {
        "label": "paired_random_crop",
        "importPath": "basicsr.data.transforms",
        "description": "basicsr.data.transforms",
        "isExtraImport": true,
        "detail": "basicsr.data.transforms",
        "documentation": {}
    },
    {
        "label": "paired_random_crop",
        "importPath": "basicsr.data.transforms",
        "description": "basicsr.data.transforms",
        "isExtraImport": true,
        "detail": "basicsr.data.transforms",
        "documentation": {}
    },
    {
        "label": "paired_random_crop",
        "importPath": "basicsr.data.transforms",
        "description": "basicsr.data.transforms",
        "isExtraImport": true,
        "detail": "basicsr.data.transforms",
        "documentation": {}
    },
    {
        "label": "augment",
        "importPath": "basicsr.data.transforms",
        "description": "basicsr.data.transforms",
        "isExtraImport": true,
        "detail": "basicsr.data.transforms",
        "documentation": {}
    },
    {
        "label": "augment",
        "importPath": "basicsr.data.transforms",
        "description": "basicsr.data.transforms",
        "isExtraImport": true,
        "detail": "basicsr.data.transforms",
        "documentation": {}
    },
    {
        "label": "paired_random_crop",
        "importPath": "basicsr.data.transforms",
        "description": "basicsr.data.transforms",
        "isExtraImport": true,
        "detail": "basicsr.data.transforms",
        "documentation": {}
    },
    {
        "label": "paired_random_crop",
        "importPath": "basicsr.data.transforms",
        "description": "basicsr.data.transforms",
        "isExtraImport": true,
        "detail": "basicsr.data.transforms",
        "documentation": {}
    },
    {
        "label": "paired_random_crop",
        "importPath": "basicsr.data.transforms",
        "description": "basicsr.data.transforms",
        "isExtraImport": true,
        "detail": "basicsr.data.transforms",
        "documentation": {}
    },
    {
        "label": "FileClient",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "get_root_logger",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "imfrombytes",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "img2tensor",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "FileClient",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "imfrombytes",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "img2tensor",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "DiffJPEG",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "USMSharp",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "DiffJPEG",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "USMSharp",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "FileClient",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "get_root_logger",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "imfrombytes",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "img2tensor",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "FileClient",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "imfrombytes",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "img2tensor",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "DiffJPEG",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "USMSharp",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "DiffJPEG",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "USMSharp",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "scandir",
        "importPath": "basicsr.utils",
        "description": "basicsr.utils",
        "isExtraImport": true,
        "detail": "basicsr.utils",
        "documentation": {}
    },
    {
        "label": "data",
        "importPath": "torch.utils",
        "description": "torch.utils",
        "isExtraImport": true,
        "detail": "torch.utils",
        "documentation": {}
    },
    {
        "label": "data",
        "importPath": "torch.utils",
        "description": "torch.utils",
        "isExtraImport": true,
        "detail": "torch.utils",
        "documentation": {}
    },
    {
        "label": "data",
        "importPath": "torch.utils",
        "description": "torch.utils",
        "isExtraImport": true,
        "detail": "torch.utils",
        "documentation": {}
    },
    {
        "label": "data",
        "importPath": "torch.utils",
        "description": "torch.utils",
        "isExtraImport": true,
        "detail": "torch.utils",
        "documentation": {}
    },
    {
        "label": "paired_paths_from_folder",
        "importPath": "basicsr.data.data_util",
        "description": "basicsr.data.data_util",
        "isExtraImport": true,
        "detail": "basicsr.data.data_util",
        "documentation": {}
    },
    {
        "label": "paired_paths_from_lmdb",
        "importPath": "basicsr.data.data_util",
        "description": "basicsr.data.data_util",
        "isExtraImport": true,
        "detail": "basicsr.data.data_util",
        "documentation": {}
    },
    {
        "label": "paired_paths_from_folder",
        "importPath": "basicsr.data.data_util",
        "description": "basicsr.data.data_util",
        "isExtraImport": true,
        "detail": "basicsr.data.data_util",
        "documentation": {}
    },
    {
        "label": "paired_paths_from_lmdb",
        "importPath": "basicsr.data.data_util",
        "description": "basicsr.data.data_util",
        "isExtraImport": true,
        "detail": "basicsr.data.data_util",
        "documentation": {}
    },
    {
        "label": "normalize",
        "importPath": "torchvision.transforms.functional",
        "description": "torchvision.transforms.functional",
        "isExtraImport": true,
        "detail": "torchvision.transforms.functional",
        "documentation": {}
    },
    {
        "label": "normalize",
        "importPath": "torchvision.transforms.functional",
        "description": "torchvision.transforms.functional",
        "isExtraImport": true,
        "detail": "torchvision.transforms.functional",
        "documentation": {}
    },
    {
        "label": "SRGANModel",
        "importPath": "basicsr.models.srgan_model",
        "description": "basicsr.models.srgan_model",
        "isExtraImport": true,
        "detail": "basicsr.models.srgan_model",
        "documentation": {}
    },
    {
        "label": "SRGANModel",
        "importPath": "basicsr.models.srgan_model",
        "description": "basicsr.models.srgan_model",
        "isExtraImport": true,
        "detail": "basicsr.models.srgan_model",
        "documentation": {}
    },
    {
        "label": "filter2D",
        "importPath": "basicsr.utils.img_process_util",
        "description": "basicsr.utils.img_process_util",
        "isExtraImport": true,
        "detail": "basicsr.utils.img_process_util",
        "documentation": {}
    },
    {
        "label": "filter2D",
        "importPath": "basicsr.utils.img_process_util",
        "description": "basicsr.utils.img_process_util",
        "isExtraImport": true,
        "detail": "basicsr.utils.img_process_util",
        "documentation": {}
    },
    {
        "label": "filter2D",
        "importPath": "basicsr.utils.img_process_util",
        "description": "basicsr.utils.img_process_util",
        "isExtraImport": true,
        "detail": "basicsr.utils.img_process_util",
        "documentation": {}
    },
    {
        "label": "filter2D",
        "importPath": "basicsr.utils.img_process_util",
        "description": "basicsr.utils.img_process_util",
        "isExtraImport": true,
        "detail": "basicsr.utils.img_process_util",
        "documentation": {}
    },
    {
        "label": "SRModel",
        "importPath": "basicsr.models.sr_model",
        "description": "basicsr.models.sr_model",
        "isExtraImport": true,
        "detail": "basicsr.models.sr_model",
        "documentation": {}
    },
    {
        "label": "SRModel",
        "importPath": "basicsr.models.sr_model",
        "description": "basicsr.models.sr_model",
        "isExtraImport": true,
        "detail": "basicsr.models.sr_model",
        "documentation": {}
    },
    {
        "label": "train_pipeline",
        "importPath": "basicsr.train",
        "description": "basicsr.train",
        "isExtraImport": true,
        "detail": "basicsr.train",
        "documentation": {}
    },
    {
        "label": "train_pipeline",
        "importPath": "basicsr.train",
        "description": "basicsr.train",
        "isExtraImport": true,
        "detail": "basicsr.train",
        "documentation": {}
    },
    {
        "label": "realesrgan.archs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "realesrgan.archs",
        "description": "realesrgan.archs",
        "detail": "realesrgan.archs",
        "documentation": {}
    },
    {
        "label": "realesrgan.data",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "realesrgan.data",
        "description": "realesrgan.data",
        "detail": "realesrgan.data",
        "documentation": {}
    },
    {
        "label": "realesrgan.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "realesrgan.models",
        "description": "realesrgan.models",
        "detail": "realesrgan.models",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "load_file_from_url",
        "importPath": "basicsr.utils.download_util",
        "description": "basicsr.utils.download_util",
        "isExtraImport": true,
        "detail": "basicsr.utils.download_util",
        "documentation": {}
    },
    {
        "label": "load_file_from_url",
        "importPath": "basicsr.utils.download_util",
        "description": "basicsr.utils.download_util",
        "isExtraImport": true,
        "detail": "basicsr.utils.download_util",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "torch.onnx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.onnx",
        "description": "torch.onnx",
        "detail": "torch.onnx",
        "documentation": {}
    },
    {
        "label": "RRDBNet",
        "importPath": "basicsr.archs.rrdbnet_arch",
        "description": "basicsr.archs.rrdbnet_arch",
        "isExtraImport": true,
        "detail": "basicsr.archs.rrdbnet_arch",
        "documentation": {}
    },
    {
        "label": "RRDBNet",
        "importPath": "basicsr.archs.rrdbnet_arch",
        "description": "basicsr.archs.rrdbnet_arch",
        "isExtraImport": true,
        "detail": "basicsr.archs.rrdbnet_arch",
        "documentation": {}
    },
    {
        "label": "RRDBNet",
        "importPath": "basicsr.archs.rrdbnet_arch",
        "description": "basicsr.archs.rrdbnet_arch",
        "isExtraImport": true,
        "detail": "basicsr.archs.rrdbnet_arch",
        "documentation": {}
    },
    {
        "label": "RRDBNet",
        "importPath": "basicsr.archs.rrdbnet_arch",
        "description": "basicsr.archs.rrdbnet_arch",
        "isExtraImport": true,
        "detail": "basicsr.archs.rrdbnet_arch",
        "documentation": {}
    },
    {
        "label": "RRDBNet",
        "importPath": "basicsr.archs.rrdbnet_arch",
        "description": "basicsr.archs.rrdbnet_arch",
        "isExtraImport": true,
        "detail": "basicsr.archs.rrdbnet_arch",
        "documentation": {}
    },
    {
        "label": "RRDBNet",
        "importPath": "basicsr.archs.rrdbnet_arch",
        "description": "basicsr.archs.rrdbnet_arch",
        "isExtraImport": true,
        "detail": "basicsr.archs.rrdbnet_arch",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "RealESRGANDataset",
        "importPath": "realesrgan.data.realesrgan_dataset",
        "description": "realesrgan.data.realesrgan_dataset",
        "isExtraImport": true,
        "detail": "realesrgan.data.realesrgan_dataset",
        "documentation": {}
    },
    {
        "label": "RealESRGANPairedDataset",
        "importPath": "realesrgan.data.realesrgan_paired_dataset",
        "description": "realesrgan.data.realesrgan_paired_dataset",
        "isExtraImport": true,
        "detail": "realesrgan.data.realesrgan_paired_dataset",
        "documentation": {}
    },
    {
        "label": "UNetDiscriminatorSN",
        "importPath": "realesrgan.archs.discriminator_arch",
        "description": "realesrgan.archs.discriminator_arch",
        "isExtraImport": true,
        "detail": "realesrgan.archs.discriminator_arch",
        "documentation": {}
    },
    {
        "label": "UNetDiscriminatorSN",
        "importPath": "realesrgan.archs.discriminator_arch",
        "description": "realesrgan.archs.discriminator_arch",
        "isExtraImport": true,
        "detail": "realesrgan.archs.discriminator_arch",
        "documentation": {}
    },
    {
        "label": "PairedImageDataset",
        "importPath": "basicsr.data.paired_image_dataset",
        "description": "basicsr.data.paired_image_dataset",
        "isExtraImport": true,
        "detail": "basicsr.data.paired_image_dataset",
        "documentation": {}
    },
    {
        "label": "GANLoss",
        "importPath": "basicsr.losses.losses",
        "description": "basicsr.losses.losses",
        "isExtraImport": true,
        "detail": "basicsr.losses.losses",
        "documentation": {}
    },
    {
        "label": "L1Loss",
        "importPath": "basicsr.losses.losses",
        "description": "basicsr.losses.losses",
        "isExtraImport": true,
        "detail": "basicsr.losses.losses",
        "documentation": {}
    },
    {
        "label": "PerceptualLoss",
        "importPath": "basicsr.losses.losses",
        "description": "basicsr.losses.losses",
        "isExtraImport": true,
        "detail": "basicsr.losses.losses",
        "documentation": {}
    },
    {
        "label": "RealESRGANModel",
        "importPath": "realesrgan.models.realesrgan_model",
        "description": "realesrgan.models.realesrgan_model",
        "isExtraImport": true,
        "detail": "realesrgan.models.realesrgan_model",
        "documentation": {}
    },
    {
        "label": "RealESRNetModel",
        "importPath": "realesrgan.models.realesrnet_model",
        "description": "realesrgan.models.realesrnet_model",
        "isExtraImport": true,
        "detail": "realesrgan.models.realesrnet_model",
        "documentation": {}
    },
    {
        "label": "RealESRGANer",
        "importPath": "realesrgan.utils",
        "description": "realesrgan.utils",
        "isExtraImport": true,
        "detail": "realesrgan.utils",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "RealESRGANer",
        "importPath": "realesrgan",
        "description": "realesrgan",
        "isExtraImport": true,
        "detail": "realesrgan",
        "documentation": {}
    },
    {
        "label": "IOConsumer",
        "importPath": "realesrgan",
        "description": "realesrgan",
        "isExtraImport": true,
        "detail": "realesrgan",
        "documentation": {}
    },
    {
        "label": "PrefetchReader",
        "importPath": "realesrgan",
        "description": "realesrgan",
        "isExtraImport": true,
        "detail": "realesrgan",
        "documentation": {}
    },
    {
        "label": "RealESRGANer",
        "importPath": "realesrgan",
        "description": "realesrgan",
        "isExtraImport": true,
        "detail": "realesrgan",
        "documentation": {}
    },
    {
        "label": "RealESRGANer",
        "importPath": "realesrgan",
        "description": "realesrgan",
        "isExtraImport": true,
        "detail": "realesrgan",
        "documentation": {}
    },
    {
        "label": "SRVGGNetCompact",
        "importPath": "realesrgan.archs.srvgg_arch",
        "description": "realesrgan.archs.srvgg_arch",
        "isExtraImport": true,
        "detail": "realesrgan.archs.srvgg_arch",
        "documentation": {}
    },
    {
        "label": "SRVGGNetCompact",
        "importPath": "realesrgan.archs.srvgg_arch",
        "description": "realesrgan.archs.srvgg_arch",
        "isExtraImport": true,
        "detail": "realesrgan.archs.srvgg_arch",
        "documentation": {}
    },
    {
        "label": "SRVGGNetCompact",
        "importPath": "realesrgan.archs.srvgg_arch",
        "description": "realesrgan.archs.srvgg_arch",
        "isExtraImport": true,
        "detail": "realesrgan.archs.srvgg_arch",
        "documentation": {}
    },
    {
        "label": "mimetypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mimetypes",
        "description": "mimetypes",
        "detail": "mimetypes",
        "documentation": {}
    },
    {
        "label": "AvgTimer",
        "importPath": "basicsr.utils.logger",
        "description": "basicsr.utils.logger",
        "isExtraImport": true,
        "detail": "basicsr.utils.logger",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "TestCyCache",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestCyCache",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestCyCache",
        "peekOfCode": "class TestCyCache(CythonTest):\n    def setUp(self):\n        CythonTest.setUp(self)\n        self.temp_dir = tempfile.mkdtemp(\n            prefix='cycache-test',\n            dir='TEST_TMP' if os.path.isdir('TEST_TMP') else None)\n        self.src_dir = tempfile.mkdtemp(prefix='src', dir=self.temp_dir)\n        self.cache_dir = tempfile.mkdtemp(prefix='cache', dir=self.temp_dir)\n    def cache_files(self, file_glob):\n        return glob.glob(os.path.join(self.cache_dir, file_glob))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestCyCache",
        "documentation": {}
    },
    {
        "label": "TestInline",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestInline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestInline",
        "peekOfCode": "class TestInline(CythonTest):\n    def setUp(self):\n        CythonTest.setUp(self)\n        self.test_kwds = dict(test_kwds)\n        if os.path.isdir('TEST_TMP'):\n            lib_dir = os.path.join('TEST_TMP','inline')\n        else:\n            lib_dir = tempfile.mkdtemp(prefix='cython_inline_')\n        self.test_kwds['lib_dir'] = lib_dir\n    def test_simple(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestInline",
        "documentation": {}
    },
    {
        "label": "test_kwds",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestInline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestInline",
        "peekOfCode": "test_kwds = dict(force=True, quiet=True)\nglobal_value = 100\nclass TestInline(CythonTest):\n    def setUp(self):\n        CythonTest.setUp(self)\n        self.test_kwds = dict(test_kwds)\n        if os.path.isdir('TEST_TMP'):\n            lib_dir = os.path.join('TEST_TMP','inline')\n        else:\n            lib_dir = tempfile.mkdtemp(prefix='cython_inline_')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestInline",
        "documentation": {}
    },
    {
        "label": "global_value",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestInline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestInline",
        "peekOfCode": "global_value = 100\nclass TestInline(CythonTest):\n    def setUp(self):\n        CythonTest.setUp(self)\n        self.test_kwds = dict(test_kwds)\n        if os.path.isdir('TEST_TMP'):\n            lib_dir = os.path.join('TEST_TMP','inline')\n        else:\n            lib_dir = tempfile.mkdtemp(prefix='cython_inline_')\n        self.test_kwds['lib_dir'] = lib_dir",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestInline",
        "documentation": {}
    },
    {
        "label": "TestIPythonMagic",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "class TestIPythonMagic(CythonTest):\n    @classmethod\n    def setUpClass(cls):\n        CythonTest.setUpClass()\n        cls._ip = IPython.testing.globalipapp.get_ipython()\n    def setUp(self):\n        CythonTest.setUp(self)\n        self._ip.extension_manager.load_extension('cython')\n    def test_cython_inline(self):\n        ip = self._ip",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "def f(x):\n    return 2*x\n\"\"\"\ncython3_code = u\"\"\"\\\ndef f(int x):\n    return 2 / x\ndef call(x):\n    return f(*(x,))\n\"\"\"\npgo_cython3_code = cython3_code + u\"\"\"\\",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "def f(int x):\n    return 2 / x\ndef call(x):\n    return f(*(x,))\n\"\"\"\npgo_cython3_code = cython3_code + u\"\"\"\\\ndef main():\n    for _ in range(100): call(5)\nmain()\n\"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "call",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "def call(x):\n    return f(*(x,))\n\"\"\"\npgo_cython3_code = cython3_code + u\"\"\"\\\ndef main():\n    for _ in range(100): call(5)\nmain()\n\"\"\"\nif sys.platform == 'win32':\n    # not using IPython's decorators here because they depend on \"nose\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "def main():\n    for _ in range(100): call(5)\nmain()\n\"\"\"\nif sys.platform == 'win32':\n    # not using IPython's decorators here because they depend on \"nose\"\n    try:\n        from unittest import skip as skip_win32\n    except ImportError:\n        # poor dev's silent @unittest.skip()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "code = u\"\"\"\\\ndef f(x):\n    return 2*x\n\"\"\"\ncython3_code = u\"\"\"\\\ndef f(int x):\n    return 2 / x\ndef call(x):\n    return f(*(x,))\n\"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "cython3_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "cython3_code = u\"\"\"\\\ndef f(int x):\n    return 2 / x\ndef call(x):\n    return f(*(x,))\n\"\"\"\npgo_cython3_code = cython3_code + u\"\"\"\\\ndef main():\n    for _ in range(100): call(5)\nmain()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "pgo_cython3_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "pgo_cython3_code = cython3_code + u\"\"\"\\\ndef main():\n    for _ in range(100): call(5)\nmain()\n\"\"\"\nif sys.platform == 'win32':\n    # not using IPython's decorators here because they depend on \"nose\"\n    try:\n        from unittest import skip as skip_win32\n    except ImportError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "x = sin(0.0)\n        \"\"\"\n        ip.user_ns['x'] = 1\n        ip.run_cell_magic('cython', '-l m', code)\n        self.assertEqual(ip.user_ns['x'], 0)\n    def test_cython_verbose(self):\n        ip = self._ip\n        ip.run_cell_magic('cython', '--verbose', code)\n        ip.ex('g = f(10)')\n        self.assertEqual(ip.user_ns['g'], 20.0)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "TestStripLiterals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestStripLiterals",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestStripLiterals",
        "peekOfCode": "class TestStripLiterals(CythonTest):\n    def t(self, before, expected):\n        actual, literals = strip_string_literals(before, prefix=\"_L\")\n        self.assertEqual(expected, actual)\n        for key, value in literals.items():\n            actual = actual.replace(key, value)\n        self.assertEqual(before, actual)\n    def test_empty(self):\n        self.t(\"\", \"\")\n    def test_single_quote(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Tests.TestStripLiterals",
        "documentation": {}
    },
    {
        "label": "get_config_var",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def get_config_var(name, default=''):\n    return sysconfig.get_config_var(name) or default\nINCDIR = sysconfig.get_python_inc()\nLIBDIR1 = get_config_var('LIBDIR')\nLIBDIR2 = get_config_var('LIBPL')\nPYLIB = get_config_var('LIBRARY')\nPYLIB_DYN = get_config_var('LDLIBRARY')\nif PYLIB_DYN == PYLIB:\n    # no shared library\n    PYLIB_DYN = ''",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "dump_config",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def dump_config():\n    _debug('INCDIR: %s', INCDIR)\n    _debug('LIBDIR1: %s', LIBDIR1)\n    _debug('LIBDIR2: %s', LIBDIR2)\n    _debug('PYLIB: %s', PYLIB)\n    _debug('PYLIB_DYN: %s', PYLIB_DYN)\n    _debug('CC: %s', CC)\n    _debug('CFLAGS: %s', CFLAGS)\n    _debug('LINKCC: %s', LINKCC)\n    _debug('LINKFORSHARED: %s', LINKFORSHARED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "runcmd",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def runcmd(cmd, shell=True):\n    if shell:\n        cmd = ' '.join(cmd)\n        _debug(cmd)\n    else:\n        _debug(' '.join(cmd))\n    try:\n        import subprocess\n    except ImportError: # Python 2.3 ...\n        returncode = os.system(cmd)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "clink",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def clink(basename):\n    runcmd([LINKCC, '-o', basename + EXE_EXT, basename+'.o', '-L'+LIBDIR1, '-L'+LIBDIR2]\n           + [PYLIB_DYN and ('-l'+PYLIB_DYN) or os.path.join(LIBDIR1, PYLIB)]\n           + LIBS.split() + SYSLIBS.split() + LINKFORSHARED.split())\ndef ccompile(basename):\n    runcmd([CC, '-c', '-o', basename+'.o', basename+'.c', '-I' + INCDIR] + CFLAGS.split())\ndef cycompile(input_file, options=()):\n    from ..Compiler import Version, CmdLine, Main\n    options, sources = CmdLine.parse_command_line(list(options or ()) + ['--embed', input_file])\n    _debug('Using Cython %s to compile %s', Version.version, input_file)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "ccompile",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def ccompile(basename):\n    runcmd([CC, '-c', '-o', basename+'.o', basename+'.c', '-I' + INCDIR] + CFLAGS.split())\ndef cycompile(input_file, options=()):\n    from ..Compiler import Version, CmdLine, Main\n    options, sources = CmdLine.parse_command_line(list(options or ()) + ['--embed', input_file])\n    _debug('Using Cython %s to compile %s', Version.version, input_file)\n    result = Main.compile(sources, options)\n    if result.num_errors > 0:\n        sys.exit(1)\ndef exec_file(program_name, args=()):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "cycompile",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def cycompile(input_file, options=()):\n    from ..Compiler import Version, CmdLine, Main\n    options, sources = CmdLine.parse_command_line(list(options or ()) + ['--embed', input_file])\n    _debug('Using Cython %s to compile %s', Version.version, input_file)\n    result = Main.compile(sources, options)\n    if result.num_errors > 0:\n        sys.exit(1)\ndef exec_file(program_name, args=()):\n    runcmd([os.path.abspath(program_name)] + list(args), shell=False)\ndef build(input_file, compiler_args=(), force=False):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "exec_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def exec_file(program_name, args=()):\n    runcmd([os.path.abspath(program_name)] + list(args), shell=False)\ndef build(input_file, compiler_args=(), force=False):\n    \"\"\"\n    Build an executable program from a Cython module.\n    Returns the name of the executable file.\n    \"\"\"\n    basename = os.path.splitext(input_file)[0]\n    exe_file = basename + EXE_EXT\n    if not force and os.path.abspath(exe_file) == os.path.abspath(input_file):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "build",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def build(input_file, compiler_args=(), force=False):\n    \"\"\"\n    Build an executable program from a Cython module.\n    Returns the name of the executable file.\n    \"\"\"\n    basename = os.path.splitext(input_file)[0]\n    exe_file = basename + EXE_EXT\n    if not force and os.path.abspath(exe_file) == os.path.abspath(input_file):\n        raise ValueError(\"Input and output file names are the same, refusing to overwrite\")\n    if (not force and os.path.exists(exe_file) and os.path.exists(input_file)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "build_and_run",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def build_and_run(args):\n    \"\"\"\n    Build an executable program from a Cython module and runs it.\n    Arguments after the module name will be passed verbatimely to the\n    program.\n    \"\"\"\n    cy_args = []\n    last_arg = None\n    for i, arg in enumerate(args):\n        if arg.startswith('-'):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "DEBUG = True\nimport sys\nimport os\nfrom distutils import sysconfig\ndef get_config_var(name, default=''):\n    return sysconfig.get_config_var(name) or default\nINCDIR = sysconfig.get_python_inc()\nLIBDIR1 = get_config_var('LIBDIR')\nLIBDIR2 = get_config_var('LIBPL')\nPYLIB = get_config_var('LIBRARY')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "INCDIR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "INCDIR = sysconfig.get_python_inc()\nLIBDIR1 = get_config_var('LIBDIR')\nLIBDIR2 = get_config_var('LIBPL')\nPYLIB = get_config_var('LIBRARY')\nPYLIB_DYN = get_config_var('LDLIBRARY')\nif PYLIB_DYN == PYLIB:\n    # no shared library\n    PYLIB_DYN = ''\nelse:\n    PYLIB_DYN = os.path.splitext(PYLIB_DYN[3:])[0] # 'lib(XYZ).so' -> XYZ",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "LIBDIR1",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "LIBDIR1 = get_config_var('LIBDIR')\nLIBDIR2 = get_config_var('LIBPL')\nPYLIB = get_config_var('LIBRARY')\nPYLIB_DYN = get_config_var('LDLIBRARY')\nif PYLIB_DYN == PYLIB:\n    # no shared library\n    PYLIB_DYN = ''\nelse:\n    PYLIB_DYN = os.path.splitext(PYLIB_DYN[3:])[0] # 'lib(XYZ).so' -> XYZ\nCC = get_config_var('CC', os.environ.get('CC', ''))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "LIBDIR2",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "LIBDIR2 = get_config_var('LIBPL')\nPYLIB = get_config_var('LIBRARY')\nPYLIB_DYN = get_config_var('LDLIBRARY')\nif PYLIB_DYN == PYLIB:\n    # no shared library\n    PYLIB_DYN = ''\nelse:\n    PYLIB_DYN = os.path.splitext(PYLIB_DYN[3:])[0] # 'lib(XYZ).so' -> XYZ\nCC = get_config_var('CC', os.environ.get('CC', ''))\nCFLAGS = get_config_var('CFLAGS') + ' ' + os.environ.get('CFLAGS', '')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "PYLIB",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "PYLIB = get_config_var('LIBRARY')\nPYLIB_DYN = get_config_var('LDLIBRARY')\nif PYLIB_DYN == PYLIB:\n    # no shared library\n    PYLIB_DYN = ''\nelse:\n    PYLIB_DYN = os.path.splitext(PYLIB_DYN[3:])[0] # 'lib(XYZ).so' -> XYZ\nCC = get_config_var('CC', os.environ.get('CC', ''))\nCFLAGS = get_config_var('CFLAGS') + ' ' + os.environ.get('CFLAGS', '')\nLINKCC = get_config_var('LINKCC', os.environ.get('LINKCC', CC))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "PYLIB_DYN",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "PYLIB_DYN = get_config_var('LDLIBRARY')\nif PYLIB_DYN == PYLIB:\n    # no shared library\n    PYLIB_DYN = ''\nelse:\n    PYLIB_DYN = os.path.splitext(PYLIB_DYN[3:])[0] # 'lib(XYZ).so' -> XYZ\nCC = get_config_var('CC', os.environ.get('CC', ''))\nCFLAGS = get_config_var('CFLAGS') + ' ' + os.environ.get('CFLAGS', '')\nLINKCC = get_config_var('LINKCC', os.environ.get('LINKCC', CC))\nLINKFORSHARED = get_config_var('LINKFORSHARED')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "CC",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "CC = get_config_var('CC', os.environ.get('CC', ''))\nCFLAGS = get_config_var('CFLAGS') + ' ' + os.environ.get('CFLAGS', '')\nLINKCC = get_config_var('LINKCC', os.environ.get('LINKCC', CC))\nLINKFORSHARED = get_config_var('LINKFORSHARED')\nLIBS = get_config_var('LIBS')\nSYSLIBS = get_config_var('SYSLIBS')\nEXE_EXT = sysconfig.get_config_var('EXE')\ndef _debug(msg, *args):\n    if DEBUG:\n        if args:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "CFLAGS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "CFLAGS = get_config_var('CFLAGS') + ' ' + os.environ.get('CFLAGS', '')\nLINKCC = get_config_var('LINKCC', os.environ.get('LINKCC', CC))\nLINKFORSHARED = get_config_var('LINKFORSHARED')\nLIBS = get_config_var('LIBS')\nSYSLIBS = get_config_var('SYSLIBS')\nEXE_EXT = sysconfig.get_config_var('EXE')\ndef _debug(msg, *args):\n    if DEBUG:\n        if args:\n            msg = msg % args",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "LINKCC",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "LINKCC = get_config_var('LINKCC', os.environ.get('LINKCC', CC))\nLINKFORSHARED = get_config_var('LINKFORSHARED')\nLIBS = get_config_var('LIBS')\nSYSLIBS = get_config_var('SYSLIBS')\nEXE_EXT = sysconfig.get_config_var('EXE')\ndef _debug(msg, *args):\n    if DEBUG:\n        if args:\n            msg = msg % args\n        sys.stderr.write(msg + '\\n')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "LINKFORSHARED",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "LINKFORSHARED = get_config_var('LINKFORSHARED')\nLIBS = get_config_var('LIBS')\nSYSLIBS = get_config_var('SYSLIBS')\nEXE_EXT = sysconfig.get_config_var('EXE')\ndef _debug(msg, *args):\n    if DEBUG:\n        if args:\n            msg = msg % args\n        sys.stderr.write(msg + '\\n')\ndef dump_config():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "LIBS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "LIBS = get_config_var('LIBS')\nSYSLIBS = get_config_var('SYSLIBS')\nEXE_EXT = sysconfig.get_config_var('EXE')\ndef _debug(msg, *args):\n    if DEBUG:\n        if args:\n            msg = msg % args\n        sys.stderr.write(msg + '\\n')\ndef dump_config():\n    _debug('INCDIR: %s', INCDIR)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "SYSLIBS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "SYSLIBS = get_config_var('SYSLIBS')\nEXE_EXT = sysconfig.get_config_var('EXE')\ndef _debug(msg, *args):\n    if DEBUG:\n        if args:\n            msg = msg % args\n        sys.stderr.write(msg + '\\n')\ndef dump_config():\n    _debug('INCDIR: %s', INCDIR)\n    _debug('LIBDIR1: %s', LIBDIR1)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "EXE_EXT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "EXE_EXT = sysconfig.get_config_var('EXE')\ndef _debug(msg, *args):\n    if DEBUG:\n        if args:\n            msg = msg % args\n        sys.stderr.write(msg + '\\n')\ndef dump_config():\n    _debug('INCDIR: %s', INCDIR)\n    _debug('LIBDIR1: %s', LIBDIR1)\n    _debug('LIBDIR2: %s', LIBDIR2)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "_FakePool",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "peekOfCode": "class _FakePool(object):\n    def map_async(self, func, args):\n        try:\n            from itertools import imap\n        except ImportError:\n            imap=map\n        for _ in imap(func, args):\n            pass\n    def close(self):\n        pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "parse_directives",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "peekOfCode": "def parse_directives(option, name, value, parser):\n    dest = option.dest\n    old_directives = dict(getattr(parser.values, dest,\n                                  Options.get_directive_defaults()))\n    directives = Options.parse_directive_list(\n        value, relaxed_bool=True, current_settings=old_directives)\n    setattr(parser.values, dest, directives)\ndef parse_options(option, name, value, parser):\n    dest = option.dest\n    options = dict(getattr(parser.values, dest, {}))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "parse_options",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "peekOfCode": "def parse_options(option, name, value, parser):\n    dest = option.dest\n    options = dict(getattr(parser.values, dest, {}))\n    for opt in value.split(','):\n        if '=' in opt:\n            n, v = opt.split('=', 1)\n            v = v.lower() not in ('false', 'f', '0', 'no')\n        else:\n            n, v = opt, True\n        options[n] = v",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "parse_compile_time_env",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "peekOfCode": "def parse_compile_time_env(option, name, value, parser):\n    dest = option.dest\n    old_env = dict(getattr(parser.values, dest, {}))\n    new_env = Options.parse_compile_time_env(value, current_settings=old_env)\n    setattr(parser.values, dest, new_env)\ndef find_package_base(path):\n    base_dir, package_path = os.path.split(path)\n    while os.path.isfile(os.path.join(base_dir, '__init__.py')):\n        base_dir, parent = os.path.split(base_dir)\n        package_path = '%s/%s' % (parent, package_path)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "find_package_base",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "peekOfCode": "def find_package_base(path):\n    base_dir, package_path = os.path.split(path)\n    while os.path.isfile(os.path.join(base_dir, '__init__.py')):\n        base_dir, parent = os.path.split(base_dir)\n        package_path = '%s/%s' % (parent, package_path)\n    return base_dir, package_path\ndef cython_compile(path_pattern, options):\n    pool = None\n    all_paths = map(os.path.abspath, extended_iglob(path_pattern))\n    try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "cython_compile",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "peekOfCode": "def cython_compile(path_pattern, options):\n    pool = None\n    all_paths = map(os.path.abspath, extended_iglob(path_pattern))\n    try:\n        for path in all_paths:\n            if options.build_inplace:\n                base_dir = path\n                while not os.path.isdir(base_dir) or is_package_dir(base_dir):\n                    base_dir = os.path.dirname(base_dir)\n            else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "run_distutils",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "peekOfCode": "def run_distutils(args):\n    base_dir, ext_modules = args\n    script_args = ['build_ext', '-i']\n    cwd = os.getcwd()\n    temp_dir = None\n    try:\n        if base_dir:\n            os.chdir(base_dir)\n            temp_dir = tempfile.mkdtemp(dir=base_dir)\n            script_args.extend(['--build-temp', temp_dir])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "parse_args",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "peekOfCode": "def parse_args(args):\n    from optparse import OptionParser\n    parser = OptionParser(usage='%prog [options] [sources and packages]+')\n    parser.add_option('-X', '--directive', metavar='NAME=VALUE,...',\n                      dest='directives', default={}, type=\"str\",\n                      action='callback', callback=parse_directives,\n                      help='set a compiler directive')\n    parser.add_option('-E', '--compile-time-env', metavar='NAME=VALUE,...',\n                      dest='compile_time_env', default={}, type=\"str\",\n                      action='callback', callback=parse_compile_time_env,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "peekOfCode": "def main(args=None):\n    options, paths = parse_args(args)\n    if options.lenient:\n        # increase Python compatibility by ignoring compile time errors\n        Options.error_on_unknown_names = False\n        Options.error_on_uninitialized = False\n    if options.annotate:\n        Options.annotate = True\n    for path in paths:\n        cython_compile(path, options)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "DistutilsInfo",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "class DistutilsInfo(object):\n    def __init__(self, source=None, exn=None):\n        self.values = {}\n        if source is not None:\n            for line in line_iter(source):\n                line = line.lstrip()\n                if not line:\n                    continue\n                if line[0] != '#':\n                    break",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "DependencyTree",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "class DependencyTree(object):\n    def __init__(self, context, quiet=False):\n        self.context = context\n        self.quiet = quiet\n        self._transitive_cache = {}\n    def parse_dependencies(self, source_filename):\n        if path_exists(source_filename):\n            source_filename = os.path.normpath(source_filename)\n        return parse_dependencies(source_filename)\n    @cached_method",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "extended_iglob",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def extended_iglob(pattern):\n    if '{' in pattern:\n        m = re.match('(.*){([^}]+)}(.*)', pattern)\n        if m:\n            before, switch, after = m.groups()\n            for case in switch.split(','):\n                for path in extended_iglob(before + case + after):\n                    yield path\n            return\n    if '**/' in pattern:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "nonempty",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def nonempty(it, error_msg=\"expected non-empty iterator\"):\n    empty = True\n    for value in it:\n        empty = False\n        yield value\n    if empty:\n        raise ValueError(error_msg)\n@cached_function\ndef file_hash(filename):\n    path = os.path.normpath(filename)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "file_hash",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def file_hash(filename):\n    path = os.path.normpath(filename)\n    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n    m = hashlib.md5(prefix)\n    with open(path, 'rb') as f:\n        data = f.read(65000)\n        while data:\n            m.update(data)\n            data = f.read(65000)\n    return m.hexdigest()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "update_pythran_extension",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def update_pythran_extension(ext):\n    if pythran is None:\n        raise RuntimeError(\"You first need to install Pythran to use the np_pythran directive.\")\n    try:\n        pythran_ext = pythran.config.make_extension(python=True)\n    except TypeError:  # older pythran version only\n        pythran_ext = pythran.config.make_extension()\n    ext.include_dirs.extend(pythran_ext['include_dirs'])\n    ext.extra_compile_args.extend(pythran_ext['extra_compile_args'])\n    ext.extra_link_args.extend(pythran_ext['extra_link_args'])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "parse_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def parse_list(s):\n    \"\"\"\n    >>> parse_list(\"\")\n    []\n    >>> parse_list(\"a\")\n    ['a']\n    >>> parse_list(\"a b c\")\n    ['a', 'b', 'c']\n    >>> parse_list(\"[a, b, c]\")\n    ['a', 'b', 'c']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "line_iter",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def line_iter(source):\n    if isinstance(source, basestring):\n        start = 0\n        while True:\n            end = source.find('\\n', start)\n            if end == -1:\n                yield source[start:]\n                return\n            yield source[start:end]\n            start = end+1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "strip_string_literals",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def strip_string_literals(code, prefix='__Pyx_L'):\n    \"\"\"\n    Normalizes every string literal to be of the form '__Pyx_Lxxx',\n    returning the normalized code and a mapping of labels to\n    string literals.\n    \"\"\"\n    new_code = []\n    literals = {}\n    counter = 0\n    start = q = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "normalize_existing",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def normalize_existing(base_path, rel_paths):\n    return normalize_existing0(os.path.dirname(base_path), tuple(set(rel_paths)))\n@cached_function\ndef normalize_existing0(base_dir, rel_paths):\n    \"\"\"\n    Given some base directory ``base_dir`` and a list of path names\n    ``rel_paths``, normalize each relative path name ``rel`` by\n    replacing it by ``os.path.join(base, rel)`` if that file exists.\n    Return a couple ``(normalized, needed_base)`` where ``normalized``\n    if the list of normalized file names and ``needed_base`` is",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "normalize_existing0",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def normalize_existing0(base_dir, rel_paths):\n    \"\"\"\n    Given some base directory ``base_dir`` and a list of path names\n    ``rel_paths``, normalize each relative path name ``rel`` by\n    replacing it by ``os.path.join(base, rel)`` if that file exists.\n    Return a couple ``(normalized, needed_base)`` where ``normalized``\n    if the list of normalized file names and ``needed_base`` is\n    ``base_dir`` if we actually needed ``base_dir``. If no paths were\n    changed (for example, if all paths were already absolute), then\n    ``needed_base`` is ``None``.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "resolve_depends",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def resolve_depends(depends, include_dirs):\n    include_dirs = tuple(include_dirs)\n    resolved = []\n    for depend in depends:\n        path = resolve_depend(depend, include_dirs)\n        if path is not None:\n            resolved.append(path)\n    return resolved\n@cached_function\ndef resolve_depend(depend, include_dirs):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "resolve_depend",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def resolve_depend(depend, include_dirs):\n    if depend[0] == '<' and depend[-1] == '>':\n        return None\n    for dir in include_dirs:\n        path = join_path(dir, depend)\n        if path_exists(path):\n            return os.path.normpath(path)\n    return None\n@cached_function\ndef package(filename):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "package",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def package(filename):\n    dir = os.path.dirname(os.path.abspath(str(filename)))\n    if dir != filename and is_package_dir(dir):\n        return package(dir) + (os.path.basename(dir),)\n    else:\n        return ()\n@cached_function\ndef fully_qualified_name(filename):\n    module = os.path.splitext(os.path.basename(filename))[0]\n    return '.'.join(package(filename) + (module,))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "fully_qualified_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def fully_qualified_name(filename):\n    module = os.path.splitext(os.path.basename(filename))[0]\n    return '.'.join(package(filename) + (module,))\n@cached_function\ndef parse_dependencies(source_filename):\n    # Actual parsing is way too slow, so we use regular expressions.\n    # The only catch is that we must strip comments and string\n    # literals ahead of time.\n    with Utils.open_source_file(source_filename, error_handling='ignore') as fh:\n        source = fh.read()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "parse_dependencies",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def parse_dependencies(source_filename):\n    # Actual parsing is way too slow, so we use regular expressions.\n    # The only catch is that we must strip comments and string\n    # literals ahead of time.\n    with Utils.open_source_file(source_filename, error_handling='ignore') as fh:\n        source = fh.read()\n    distutils_info = DistutilsInfo(source)\n    source, literals = strip_string_literals(source)\n    source = source.replace('\\\\\\n', ' ').replace('\\t', ' ')\n    # TODO: pure mode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "create_dependency_tree",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def create_dependency_tree(ctx=None, quiet=False):\n    global _dep_tree\n    if _dep_tree is None:\n        if ctx is None:\n            ctx = Context([\".\"], CompilationOptions(default_options))\n        _dep_tree = DependencyTree(ctx, quiet=quiet)\n    return _dep_tree\n# If this changes, change also docs/src/reference/compilation.rst\n# which mentions this function\ndef default_create_extension(template, kwds):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "default_create_extension",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def default_create_extension(template, kwds):\n    if 'depends' in kwds:\n        include_dirs = kwds.get('include_dirs', []) + [\".\"]\n        depends = resolve_depends(kwds['depends'], include_dirs)\n        kwds['depends'] = sorted(set(depends + template.depends))\n    t = template.__class__\n    ext = t(**kwds)\n    metadata = dict(distutils=kwds, module_name=kwds['name'])\n    return (ext, metadata)\n# This may be useful for advanced users?",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "create_extension_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def create_extension_list(patterns, exclude=None, ctx=None, aliases=None, quiet=False, language=None,\n                          exclude_failures=False):\n    if language is not None:\n        print('Warning: passing language={0!r} to cythonize() is deprecated. '\n              'Instead, put \"# distutils: language={0}\" in your .pyx or .pxd file(s)'.format(language))\n    if exclude is None:\n        exclude = []\n    if patterns is None:\n        return [], {}\n    elif isinstance(patterns, basestring) or not isinstance(patterns, Iterable):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def cythonize(module_list, exclude=None, nthreads=0, aliases=None, quiet=False, force=False, language=None,\n              exclude_failures=False, **options):\n    \"\"\"\n    Compile a set of source modules into C/C++ files and return a list of distutils\n    Extension objects for them.\n    :param module_list: As module list, pass either a glob pattern, a list of glob\n                        patterns or a list of Extension objects.  The latter\n                        allows you to configure the extensions separately\n                        through the normal distutils options.\n                        You can also pass Extension objects that have",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "cythonize_one",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def cythonize_one(pyx_file, c_file, fingerprint, quiet, options=None,\n                  raise_on_failure=True, embedded_metadata=None, full_module_name=None,\n                  progress=\"\"):\n    from ..Compiler.Main import compile_single, default_options\n    from ..Compiler.Errors import CompileError, PyrexError\n    if fingerprint:\n        if not os.path.exists(options.cache):\n            safe_makedirs(options.cache)\n        # Cython-generated c files are highly compressible.\n        # (E.g. a compression ratio of about 10 for Sage).",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "cythonize_one_helper",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def cythonize_one_helper(m):\n    import traceback\n    try:\n        return cythonize_one(*m)\n    except Exception:\n        traceback.print_exc()\n        raise\ndef _init_multiprocessing_helper():\n    # KeyboardInterrupt kills workers, so don't let them get it\n    import signal",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "cleanup_cache",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "def cleanup_cache(cache, target_size, ratio=.85):\n    try:\n        p = subprocess.Popen(['du', '-s', '-k', os.path.abspath(cache)], stdout=subprocess.PIPE)\n        res = p.wait()\n        if res == 0:\n            total_size = 1024 * int(p.stdout.read().strip().split()[0])\n            if total_size < target_size:\n                return\n    except (OSError, ValueError):\n        pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "join_path",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "join_path = cached_function(os.path.join)\ncopy_once_if_newer = cached_function(copy_file_to_dir_if_newer)\nsafe_makedirs_once = cached_function(safe_makedirs)\nif sys.version_info[0] < 3:\n    # stupid Py2 distutils enforces str type in list of sources\n    _fs_encoding = sys.getfilesystemencoding()\n    if _fs_encoding is None:\n        _fs_encoding = sys.getdefaultencoding()\n    def encode_filename_in_py2(filename):\n        if not isinstance(filename, bytes):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "copy_once_if_newer",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "copy_once_if_newer = cached_function(copy_file_to_dir_if_newer)\nsafe_makedirs_once = cached_function(safe_makedirs)\nif sys.version_info[0] < 3:\n    # stupid Py2 distutils enforces str type in list of sources\n    _fs_encoding = sys.getfilesystemencoding()\n    if _fs_encoding is None:\n        _fs_encoding = sys.getdefaultencoding()\n    def encode_filename_in_py2(filename):\n        if not isinstance(filename, bytes):\n            return filename.encode(_fs_encoding)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "safe_makedirs_once",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "safe_makedirs_once = cached_function(safe_makedirs)\nif sys.version_info[0] < 3:\n    # stupid Py2 distutils enforces str type in list of sources\n    _fs_encoding = sys.getfilesystemencoding()\n    if _fs_encoding is None:\n        _fs_encoding = sys.getdefaultencoding()\n    def encode_filename_in_py2(filename):\n        if not isinstance(filename, bytes):\n            return filename.encode(_fs_encoding)\n        return filename",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "transitive_str",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "transitive_str = object()\ntransitive_list = object()\nbool_or = object()\ndistutils_settings = {\n    'name':                 str,\n    'sources':              list,\n    'define_macros':        list,\n    'undef_macros':         list,\n    'libraries':            transitive_list,\n    'library_dirs':         transitive_list,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "transitive_list",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "transitive_list = object()\nbool_or = object()\ndistutils_settings = {\n    'name':                 str,\n    'sources':              list,\n    'define_macros':        list,\n    'undef_macros':         list,\n    'libraries':            transitive_list,\n    'library_dirs':         transitive_list,\n    'runtime_library_dirs': transitive_list,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "bool_or",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "bool_or = object()\ndistutils_settings = {\n    'name':                 str,\n    'sources':              list,\n    'define_macros':        list,\n    'undef_macros':         list,\n    'libraries':            transitive_list,\n    'library_dirs':         transitive_list,\n    'runtime_library_dirs': transitive_list,\n    'include_dirs':         transitive_list,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "distutils_settings",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "distutils_settings = {\n    'name':                 str,\n    'sources':              list,\n    'define_macros':        list,\n    'undef_macros':         list,\n    'libraries':            transitive_list,\n    'library_dirs':         transitive_list,\n    'runtime_library_dirs': transitive_list,\n    'include_dirs':         transitive_list,\n    'extra_objects':        list,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "dependency_regex",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "dependency_regex = re.compile(r\"(?:^\\s*from +([0-9a-zA-Z_.]+) +cimport)|\"\n                              r\"(?:^\\s*cimport +([0-9a-zA-Z_.]+(?: *, *[0-9a-zA-Z_.]+)*))|\"\n                              r\"(?:^\\s*cdef +extern +from +['\\\"]([^'\\\"]+)['\\\"])|\"\n                              r\"(?:^\\s*include +['\\\"]([^'\\\"]+)['\\\"])\", re.M)\ndependency_after_from_regex = re.compile(\n    r\"(?:^\\s+\\(([0-9a-zA-Z_., ]*)\\)[#\\n])|\"\n    r\"(?:^\\s+([0-9a-zA-Z_., ]*)[#\\n])\",\n    re.M)\ndef normalize_existing(base_path, rel_paths):\n    return normalize_existing0(os.path.dirname(base_path), tuple(set(rel_paths)))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "dependency_after_from_regex",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "dependency_after_from_regex = re.compile(\n    r\"(?:^\\s+\\(([0-9a-zA-Z_., ]*)\\)[#\\n])|\"\n    r\"(?:^\\s+([0-9a-zA-Z_., ]*)[#\\n])\",\n    re.M)\ndef normalize_existing(base_path, rel_paths):\n    return normalize_existing0(os.path.dirname(base_path), tuple(set(rel_paths)))\n@cached_function\ndef normalize_existing0(base_dir, rel_paths):\n    \"\"\"\n    Given some base directory ``base_dir`` and a list of path names",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "_dep_tree",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "peekOfCode": "_dep_tree = None\ndef create_dependency_tree(ctx=None, quiet=False):\n    global _dep_tree\n    if _dep_tree is None:\n        if ctx is None:\n            ctx = Context([\".\"], CompilationOptions(default_options))\n        _dep_tree = DependencyTree(ctx, quiet=quiet)\n    return _dep_tree\n# If this changes, change also docs/src/reference/compilation.rst\n# which mentions this function",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "UnboundSymbols",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "peekOfCode": "class UnboundSymbols(EnvTransform, SkipDeclarations):\n    def __init__(self):\n        CythonTransform.__init__(self, None)\n        self.unbound = set()\n    def visit_NameNode(self, node):\n        if not self.current_env().lookup(node.name):\n            self.unbound.add(node.name)\n        return node\n    def __call__(self, node):\n        super(UnboundSymbols, self).__call__(node)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "RuntimeCompiledFunction",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "peekOfCode": "class RuntimeCompiledFunction(object):\n    def __init__(self, f):\n        self._f = f\n        self._body = get_body(inspect.getsource(f))\n    def __call__(self, *args, **kwds):\n        all = getcallargs(self._f, *args, **kwds)\n        if IS_PY3:\n            return cython_inline(self._body, locals=self._f.__globals__, globals=self._f.__globals__, **all)\n        else:\n            return cython_inline(self._body, locals=self._f.func_globals, globals=self._f.func_globals, **all)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "unbound_symbols",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "peekOfCode": "def unbound_symbols(code, context=None):\n    code = to_unicode(code)\n    if context is None:\n        context = Context([], default_options)\n    from ..Compiler.ParseTreeTransforms import AnalyseDeclarationsTransform\n    tree = parse_from_strings('(tree fragment)', code)\n    for phase in Pipeline.create_pipeline(context, 'pyx'):\n        if phase is None:\n            continue\n        tree = phase(tree)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "unsafe_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "peekOfCode": "def unsafe_type(arg, context=None):\n    py_type = type(arg)\n    if py_type is int:\n        return 'long'\n    else:\n        return safe_type(arg, context)\ndef safe_type(arg, context=None):\n    py_type = type(arg)\n    if py_type in (list, tuple, dict, str):\n        return py_type.__name__",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "safe_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "peekOfCode": "def safe_type(arg, context=None):\n    py_type = type(arg)\n    if py_type in (list, tuple, dict, str):\n        return py_type.__name__\n    elif py_type is complex:\n        return 'double complex'\n    elif py_type is float:\n        return 'double'\n    elif py_type is bool:\n        return 'bint'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "cython_inline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "peekOfCode": "def cython_inline(code, get_type=unsafe_type,\n                  lib_dir=os.path.join(get_cython_cache_dir(), 'inline'),\n                  cython_include_dirs=None, cython_compiler_directives=None,\n                  force=False, quiet=False, locals=None, globals=None, language_level=None, **kwds):\n    if get_type is None:\n        get_type = lambda x: 'object'\n    ctx = _create_context(tuple(cython_include_dirs)) if cython_include_dirs else _cython_inline_default_context\n    cython_compiler_directives = dict(cython_compiler_directives) if cython_compiler_directives else {}\n    if language_level is None and 'language_level' not in cython_compiler_directives:\n        language_level = '3str'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "strip_common_indent",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "peekOfCode": "def strip_common_indent(code):\n    min_indent = None\n    lines = code.splitlines()\n    for line in lines:\n        match = _find_non_space(line)\n        if not match:\n            continue  # blank\n        indent = match.start()\n        if line[indent] == '#':\n            continue  # comment",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "extract_func_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "peekOfCode": "def extract_func_code(code):\n    module = []\n    function = []\n    current = function\n    code = code.replace('\\t', ' ')\n    lines = code.split('\\n')\n    for line in lines:\n        if not line.startswith(' '):\n            if module_statement.match(line):\n                current = module",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "get_body",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "peekOfCode": "def get_body(source):\n    ix = source.index(':')\n    if source[:5] == 'lambda':\n        return \"return %s\" % source[ix+1:]\n    else:\n        return source[ix+1:]\n# Lots to be done here... It would be especially cool if compiled functions\n# could invoke each other quickly.\nclass RuntimeCompiledFunction(object):\n    def __init__(self, f):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "IS_PY3",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "peekOfCode": "IS_PY3 = sys.version_info >= (3,)\n# A utility function to convert user-supplied ASCII strings to unicode.\nif not IS_PY3:\n    def to_unicode(s):\n        if isinstance(s, bytes):\n            return s.decode('ascii')\n        else:\n            return s\nelse:\n    to_unicode = lambda x: x",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "_cython_inline_cache",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "peekOfCode": "_cython_inline_cache = {}\n_cython_inline_default_context = _create_context(('.',))\ndef _populate_unbound(kwds, unbound_symbols, locals=None, globals=None):\n    for symbol in unbound_symbols:\n        if symbol not in kwds:\n            if locals is None or globals is None:\n                calling_frame = inspect.currentframe().f_back.f_back.f_back\n                if locals is None:\n                    locals = calling_frame.f_locals\n                if globals is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "_cython_inline_default_context",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "peekOfCode": "_cython_inline_default_context = _create_context(('.',))\ndef _populate_unbound(kwds, unbound_symbols, locals=None, globals=None):\n    for symbol in unbound_symbols:\n        if symbol not in kwds:\n            if locals is None or globals is None:\n                calling_frame = inspect.currentframe().f_back.f_back.f_back\n                if locals is None:\n                    locals = calling_frame.f_locals\n                if globals is None:\n                    globals = calling_frame.f_globals",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "cython_inline.so_ext",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "peekOfCode": "cython_inline.so_ext = None\n_find_non_space = re.compile('[^ ]').search\ndef strip_common_indent(code):\n    min_indent = None\n    lines = code.splitlines()\n    for line in lines:\n        match = _find_non_space(line)\n        if not match:\n            continue  # blank\n        indent = match.start()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "_find_non_space",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "peekOfCode": "_find_non_space = re.compile('[^ ]').search\ndef strip_common_indent(code):\n    min_indent = None\n    lines = code.splitlines()\n    for line in lines:\n        match = _find_non_space(line)\n        if not match:\n            continue  # blank\n        indent = match.start()\n        if line[indent] == '#':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "module_statement",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "peekOfCode": "module_statement = re.compile(r'^((cdef +(extern|class))|cimport|(from .+ cimport)|(from .+ import +[*]))')\ndef extract_func_code(code):\n    module = []\n    function = []\n    current = function\n    code = code.replace('\\t', ' ')\n    lines = code.split('\\n')\n    for line in lines:\n        if not line.startswith(' '):\n            if module_statement.match(line):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "CythonMagics",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "peekOfCode": "class CythonMagics(Magics):\n    def __init__(self, shell):\n        super(CythonMagics, self).__init__(shell)\n        self._reloads = {}\n        self._code_cache = {}\n        self._pyximport_installed = False\n    def _import_all(self, module):\n        mdict = module.__dict__\n        if '__all__' in mdict:\n            keys = mdict['__all__']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "documentation": {}
    },
    {
        "label": "IO_ENCODING",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "peekOfCode": "IO_ENCODING = sys.getfilesystemencoding()\nIS_PY2 = sys.version_info[0] < 3\ntry:\n    reload\nexcept NameError:   # Python 3\n    from imp import reload\ntry:\n    import hashlib\nexcept ImportError:\n    import md5 as hashlib",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "documentation": {}
    },
    {
        "label": "IS_PY2",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "peekOfCode": "IS_PY2 = sys.version_info[0] < 3\ntry:\n    reload\nexcept NameError:   # Python 3\n    from imp import reload\ntry:\n    import hashlib\nexcept ImportError:\n    import md5 as hashlib\nfrom distutils.core import Distribution, Extension",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "documentation": {}
    },
    {
        "label": "PGO_CONFIG",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "peekOfCode": "PGO_CONFIG = {\n    'gcc': {\n        'gen': ['-fprofile-generate', '-fprofile-dir={TEMPDIR}'],\n        'use': ['-fprofile-use', '-fprofile-correction', '-fprofile-dir={TEMPDIR}'],\n    },\n    # blind copy from 'configure' script in CPython 3.7\n    'icc': {\n        'gen': ['-prof-gen'],\n        'use': ['-prof-use'],\n    }",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "documentation": {}
    },
    {
        "label": "PGO_CONFIG['mingw32']",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "peekOfCode": "PGO_CONFIG['mingw32'] = PGO_CONFIG['gcc']\nif IS_PY2:\n    def encode_fs(name):\n        return name if isinstance(name, bytes) else name.encode(IO_ENCODING)\nelse:\n    def encode_fs(name):\n        return name\n@magics_class\nclass CythonMagics(Magics):\n    def __init__(self, shell):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "documentation": {}
    },
    {
        "label": "__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "peekOfCode": "__doc__ = __doc__.format(\n    # rST doesn't see the -+ flag as part of an option list, so we\n    # hide it from the module-level docstring.\n    CYTHON_DOC=dedent(CythonMagics.cython.__doc__\\\n                                  .replace('-+, --cplus', '--cplus    ')),\n    CYTHON_INLINE_DOC=dedent(CythonMagics.cython_inline.__doc__),\n    CYTHON_PYXIMPORT_DOC=dedent(CythonMagics.cython_pyximport.__doc__),\n)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Build.IpythonMagic",
        "documentation": {}
    },
    {
        "label": "TestBufferParsing",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestBuffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestBuffer",
        "peekOfCode": "class TestBufferParsing(CythonTest):\n    # First, we only test the raw parser, i.e.\n    # the number and contents of arguments are NOT checked.\n    # However \"dtype\"/the first positional argument is special-cased\n    #  to parse a type argument rather than an expression\n    def parse(self, s):\n        return self.should_not_fail(lambda: self.fragment(s)).root\n    def not_parseable(self, expected_error, s):\n        e = self.should_fail(lambda: self.fragment(s),  Errors.CompileError)\n        self.assertEqual(expected_error, e.message_only)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestBuffer",
        "documentation": {}
    },
    {
        "label": "TestBufferOptions",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestBuffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestBuffer",
        "peekOfCode": "class TestBufferOptions(CythonTest):\n    # Tests the full parsing of the options within the brackets\n    def nonfatal_error(self, error):\n        # We're passing self as context to transform to trap this\n        self.error = error\n        self.assertTrue(self.expect_error)\n    def parse_opts(self, opts, expect_error=False):\n        assert opts != \"\"\n        s = u\"def f():\\n  cdef object[%s] x\" % opts\n        self.expect_error = expect_error",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestBuffer",
        "documentation": {}
    },
    {
        "label": "CmdLineParserTest",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestCmdLine",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestCmdLine",
        "peekOfCode": "class CmdLineParserTest(TestCase):\n    def setUp(self):\n        backup = {}\n        for name, value in vars(Options).items():\n            backup[name] = value\n        self._options_backup = backup\n    def tearDown(self):\n        no_value = object()\n        for name, orig_value in self._options_backup.items():\n            if getattr(Options, name, no_value) != orig_value:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestCmdLine",
        "documentation": {}
    },
    {
        "label": "check_global_options",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestCmdLine",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestCmdLine",
        "peekOfCode": "def check_global_options(expected_options, white_list=[]):\n    \"\"\"\n    returns error message of \"\" if check Ok\n    \"\"\"\n    no_value = object()\n    for name, orig_value in expected_options.items():\n        if name not in white_list:\n            if getattr(Options, name, no_value) != orig_value:\n                return \"error in option \" + name\n    return \"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestCmdLine",
        "documentation": {}
    },
    {
        "label": "FakeType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestFlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestFlowControl",
        "peekOfCode": "class FakeType(object):\n    is_pyobject = True\nclass FakeNode(object):\n    pos = ('filename.pyx', 1, 2)\n    cf_state = None\n    type = FakeType()\n    def infer_type(self, scope):\n        return self.type\nclass FakeEntry(object):\n    type = FakeType()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestFlowControl",
        "documentation": {}
    },
    {
        "label": "FakeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestFlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestFlowControl",
        "peekOfCode": "class FakeNode(object):\n    pos = ('filename.pyx', 1, 2)\n    cf_state = None\n    type = FakeType()\n    def infer_type(self, scope):\n        return self.type\nclass FakeEntry(object):\n    type = FakeType()\nclass TestGraph(TestCase):\n    def test_deepcopy(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestFlowControl",
        "documentation": {}
    },
    {
        "label": "FakeEntry",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestFlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestFlowControl",
        "peekOfCode": "class FakeEntry(object):\n    type = FakeType()\nclass TestGraph(TestCase):\n    def test_deepcopy(self):\n        lhs, rhs = FakeNode(), FakeNode()\n        entry = FakeEntry()\n        entry.pos = lhs.pos\n        name_ass = NameAssignment(lhs, rhs, entry)\n        ass = deepcopy(name_ass)\n        self.assertTrue(ass.lhs)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestFlowControl",
        "documentation": {}
    },
    {
        "label": "TestGraph",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestFlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestFlowControl",
        "peekOfCode": "class TestGraph(TestCase):\n    def test_deepcopy(self):\n        lhs, rhs = FakeNode(), FakeNode()\n        entry = FakeEntry()\n        entry.pos = lhs.pos\n        name_ass = NameAssignment(lhs, rhs, entry)\n        ass = deepcopy(name_ass)\n        self.assertTrue(ass.lhs)\n        self.assertTrue(ass.rhs)\n        self.assertTrue(ass.entry)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestFlowControl",
        "documentation": {}
    },
    {
        "label": "TestGrammar",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestGrammar",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestGrammar",
        "peekOfCode": "class TestGrammar(CythonTest):\n    def test_invalid_number_literals(self):\n        for literal in INVALID_UNDERSCORE_LITERALS:\n            for expression in ['%s', '1 + %s', '%s + 1', '2 * %s', '%s * 2']:\n                code = 'x = ' + expression % literal\n                try:\n                    self.fragment(u'''\\\n                    # cython: language_level=3\n                    ''' + code)\n                except CompileError as exc:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestGrammar",
        "documentation": {}
    },
    {
        "label": "VALID_UNDERSCORE_LITERALS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestGrammar",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestGrammar",
        "peekOfCode": "VALID_UNDERSCORE_LITERALS = [\n    '0_0_0',\n    '4_2',\n    '1_0000_0000',\n    '0b1001_0100',\n    '0xffff_ffff',\n    '0o5_7_7',\n    '1_00_00.5',\n    '1_00_00.5j',\n    '1_00_00.5e5',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestGrammar",
        "documentation": {}
    },
    {
        "label": "INVALID_UNDERSCORE_LITERALS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestGrammar",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestGrammar",
        "peekOfCode": "INVALID_UNDERSCORE_LITERALS = [\n    # Trailing underscores:\n    '0_',\n    '42_',\n    '1.4j_',\n    '0b1_',\n    '0xf_',\n    '0o5_',\n    # Underscores in the base selector:\n    '0_b0',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestGrammar",
        "documentation": {}
    },
    {
        "label": "TestMemviewParsing",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestMemView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestMemView",
        "peekOfCode": "class TestMemviewParsing(CythonTest):\n    def parse(self, s):\n        return self.should_not_fail(lambda: self.fragment(s)).root\n    def not_parseable(self, expected_error, s):\n        e = self.should_fail(lambda: self.fragment(s),  Errors.CompileError)\n        self.assertEqual(expected_error, e.message_only)\n    def test_default_1dim(self):\n        self.parse(u\"cdef int[:] x\")\n        self.parse(u\"cdef short int[:] x\")\n    def test_default_ndim(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestMemView",
        "documentation": {}
    },
    {
        "label": "TestNormalizeTree",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "peekOfCode": "class TestNormalizeTree(TransformTest):\n    def test_parserbehaviour_is_what_we_coded_for(self):\n        t = self.fragment(u\"if x: y\").root\n        self.assertLines(u\"\"\"\n(root): StatListNode\n  stats[0]: IfStatNode\n    if_clauses[0]: IfClauseNode\n      condition: NameNode\n      body: ExprStatNode\n        expr: NameNode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "TestWithTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "peekOfCode": "class TestWithTransform(object): # (TransformTest): # Disabled!\n    def test_simplified(self):\n        t = self.run_pipeline([WithTransform(None)], u\"\"\"\n        with x:\n            y = z ** 3\n        \"\"\")\n        self.assertCode(u\"\"\"\n        $0_0 = x\n        $0_2 = $0_0.__exit__\n        $0_0.__enter__()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "TestInterpretCompilerDirectives",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "peekOfCode": "class TestInterpretCompilerDirectives(TransformTest):\n    \"\"\"\n    This class tests the parallel directives AST-rewriting and importing.\n    \"\"\"\n    # Test the parallel directives (c)importing\n    import_code = u\"\"\"\n        cimport cython.parallel\n        cimport cython.parallel as par\n        from cython cimport parallel as par2\n        from cython cimport parallel",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "TestDebugTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "peekOfCode": "class TestDebugTransform(DebuggerTestCase):\n    def elem_hasattrs(self, elem, attrs):\n        return all(attr in elem.attrib for attr in attrs)\n    def test_debug_info(self):\n        try:\n            assert os.path.exists(self.debug_dest)\n            t = DebugWriter.etree.parse(self.debug_dest)\n            # the xpath of the standard ElementTree is primitive, don't use\n            # anything fancy\n            L = list(t.find('/Module/Globals'))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "TestAnalyseDeclarationsTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "peekOfCode": "class TestAnalyseDeclarationsTransform(unittest.TestCase):\n    def test_calculate_pickle_checksums(self):\n        checksums = _calculate_pickle_checksums(['member1', 'member2', 'member3'])\n        assert 2 <= len(checksums) <= 3, checksums  # expecting ['0xc0af380' (MD5), '0x0c75bd4', '0xa7a7b94']\nif __name__ == \"__main__\":\n    import unittest\n    unittest.main()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "SignatureMatcherTest",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "peekOfCode": "class SignatureMatcherTest(unittest.TestCase):\n    \"\"\"\n    Test the signature matching algorithm for overloaded signatures.\n    \"\"\"\n    def assertMatches(self, expected_type, arg_types, functions):\n        match = pt.best_match(arg_types, functions)\n        if expected_type is not None:\n            self.assertNotEqual(None, match)\n        self.assertEqual(expected_type, match.type)\n    def test_cpp_reference_single_arg(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "documentation": {}
    },
    {
        "label": "cfunctype",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "peekOfCode": "def cfunctype(*arg_types):\n    return pt.CFuncType(pt.c_int_type,\n        [ CFuncTypeArg(\"name\", arg_type, None) for arg_type in arg_types ])\ndef cppclasstype(name, base_classes):\n    return pt.CppClassType(name, None, 'CPP_'+name, base_classes)\nclass SignatureMatcherTest(unittest.TestCase):\n    \"\"\"\n    Test the signature matching algorithm for overloaded signatures.\n    \"\"\"\n    def assertMatches(self, expected_type, arg_types, functions):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "documentation": {}
    },
    {
        "label": "cppclasstype",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "peekOfCode": "def cppclasstype(name, base_classes):\n    return pt.CppClassType(name, None, 'CPP_'+name, base_classes)\nclass SignatureMatcherTest(unittest.TestCase):\n    \"\"\"\n    Test the signature matching algorithm for overloaded signatures.\n    \"\"\"\n    def assertMatches(self, expected_type, arg_types, functions):\n        match = pt.best_match(arg_types, functions)\n        if expected_type is not None:\n            self.assertNotEqual(None, match)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "documentation": {}
    },
    {
        "label": "StringEncodingTest",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestStringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestStringEncoding",
        "peekOfCode": "class StringEncodingTest(unittest.TestCase):\n    \"\"\"\n    Test the StringEncoding module.\n    \"\"\"\n    def test_string_contains_lone_surrogates(self):\n        self.assertFalse(StringEncoding.string_contains_lone_surrogates(u\"abc\"))\n        self.assertFalse(StringEncoding.string_contains_lone_surrogates(u\"\\uABCD\"))\n        self.assertFalse(StringEncoding.string_contains_lone_surrogates(u\"\\N{SNOWMAN}\"))\n        # This behaves differently in Py2 when freshly parsed and read from a .pyc file,\n        # but it seems to be a marshalling bug in Py2, which doesn't hurt us in Cython.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestStringEncoding",
        "documentation": {}
    },
    {
        "label": "TestTreeFragments",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestTreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestTreeFragment",
        "peekOfCode": "class TestTreeFragments(CythonTest):\n    def test_basic(self):\n        F = self.fragment(u\"x = 4\")\n        T = F.copy()\n        self.assertCode(u\"x = 4\", T)\n    def test_copy_is_taken(self):\n        F = self.fragment(u\"if True: x = 4\")\n        T1 = F.root\n        T2 = F.copy()\n        self.assertEqual(\"x\", T2.stats[0].if_clauses[0].body.lhs.name)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestTreeFragment",
        "documentation": {}
    },
    {
        "label": "TestTreePath",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestTreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestTreePath",
        "peekOfCode": "class TestTreePath(TransformTest):\n    _tree = None\n    def _build_tree(self):\n        if self._tree is None:\n            self._tree = self.run_pipeline([], u\"\"\"\n            def decorator(fun):  # DefNode\n                return fun       # ReturnStatNode, NameNode\n            @decorator           # NameNode\n            def decorated():     # DefNode\n                pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestTreePath",
        "documentation": {}
    },
    {
        "label": "TestMethodDispatcherTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestTypes",
        "peekOfCode": "class TestMethodDispatcherTransform(unittest.TestCase):\n    def test_widest_numeric_type(self):\n        def assert_widest(type1, type2, widest):\n            self.assertEqual(widest, PT.widest_numeric_type(type1, type2))\n        assert_widest(PT.c_int_type, PT.c_long_type, PT.c_long_type)\n        assert_widest(PT.c_double_type, PT.c_long_type, PT.c_double_type)\n        assert_widest(PT.c_longdouble_type, PT.c_long_type, PT.c_longdouble_type)\n        cenum = PT.CEnumType(\"E\", \"cenum\", typedef_flag=False)\n        assert_widest(PT.c_int_type, cenum, PT.c_int_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestTypes",
        "documentation": {}
    },
    {
        "label": "TestUtilityLoader",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "peekOfCode": "class TestUtilityLoader(unittest.TestCase):\n    \"\"\"\n    Test loading UtilityCodes\n    \"\"\"\n    expected = \"test {{loader}} prototype\", \"test {{loader}} impl\"\n    required = \"req {{loader}} proto\", \"req {{loader}} impl\"\n    context = dict(loader='Loader')\n    name = \"TestUtilityLoader\"\n    filename = \"TestUtilityLoader.c\"\n    cls = Code.UtilityCode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "documentation": {}
    },
    {
        "label": "TestTempitaUtilityLoader",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "peekOfCode": "class TestTempitaUtilityLoader(TestUtilityLoader):\n    \"\"\"\n    Test loading UtilityCodes with Tempita substitution\n    \"\"\"\n    expected_tempita = (TestUtilityLoader.expected[0].replace('{{loader}}', 'Loader'),\n                        TestUtilityLoader.expected[1].replace('{{loader}}', 'Loader'))\n    required_tempita = (TestUtilityLoader.required[0].replace('{{loader}}', 'Loader'),\n                        TestUtilityLoader.required[1].replace('{{loader}}', 'Loader'))\n    cls = Code.TempitaUtilityCode\n    def test_load_as_string(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "documentation": {}
    },
    {
        "label": "TestCythonUtilityLoader",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "peekOfCode": "class TestCythonUtilityLoader(TestTempitaUtilityLoader):\n    \"\"\"\n    Test loading CythonUtilityCodes\n    \"\"\"\n    # Just change the attributes and run the same tests\n    expected = None, \"test {{cy_loader}} impl\"\n    expected_tempita = None, \"test CyLoader impl\"\n    required = None, \"req {{cy_loader}} impl\"\n    required_tempita = None, \"req CyLoader impl\"\n    context = dict(cy_loader='CyLoader')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "documentation": {}
    },
    {
        "label": "strip_2tup",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "peekOfCode": "def strip_2tup(tup):\n    return tup[0] and tup[0].strip(), tup[1] and tup[1].strip()\nclass TestUtilityLoader(unittest.TestCase):\n    \"\"\"\n    Test loading UtilityCodes\n    \"\"\"\n    expected = \"test {{loader}} prototype\", \"test {{loader}} impl\"\n    required = \"req {{loader}} proto\", \"req {{loader}} impl\"\n    context = dict(loader='Loader')\n    name = \"TestUtilityLoader\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "documentation": {}
    },
    {
        "label": "TestMethodDispatcherTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestVisitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestVisitor",
        "peekOfCode": "class TestMethodDispatcherTransform(TransformTest):\n    _tree = None\n    def _build_tree(self):\n        if self._tree is None:\n            context = None\n            def fake_module(node):\n                scope = ModuleScope('test', None, None)\n                return ModuleNode(node.pos, doc=None, body=node,\n                                  scope=scope, full_module_name='test',\n                                  directive_comments={})",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Tests.TestVisitor",
        "documentation": {}
    },
    {
        "label": "AutoTestDictTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.AnalysedTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.AnalysedTreeTransforms",
        "peekOfCode": "class AutoTestDictTransform(ScopeTrackingTransform):\n    # Handles autotestdict directive\n    blacklist = ['__cinit__', '__dealloc__', '__richcmp__',\n                 '__nonzero__', '__bool__',\n                 '__len__', '__contains__']\n    def visit_ModuleNode(self, node):\n        if node.is_pxd:\n            return node\n        self.scope_type = 'module'\n        self.scope_node = node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.AnalysedTreeTransforms",
        "documentation": {}
    },
    {
        "label": "AnnotationCCodeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Annotate",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Annotate",
        "peekOfCode": "class AnnotationCCodeWriter(CCodeWriter):\n    def __init__(self, create_from=None, buffer=None, copy_formatting=True):\n        CCodeWriter.__init__(self, create_from, buffer, copy_formatting=copy_formatting)\n        if create_from is None:\n            self.annotation_buffer = StringIO()\n            self.last_annotated_pos = None\n            # annotations[filename][line] -> [(column, AnnotationItem)*]\n            self.annotations = defaultdict(partial(defaultdict, list))\n            # code[filename][line] -> str\n            self.code = defaultdict(partial(defaultdict, str))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Annotate",
        "documentation": {}
    },
    {
        "label": "AnnotationItem",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Annotate",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Annotate",
        "peekOfCode": "class AnnotationItem(object):\n    def __init__(self, style, text, tag=\"\", size=0):\n        self.style = style\n        self.text = text\n        self.tag = tag\n        self.size = size\n    def start(self):\n        return u\"<span class='cython tag %s' title='%s'>%s\" % (self.style, self.text, self.tag)\n    def end(self):\n        return self.size, u\"</span>\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Annotate",
        "documentation": {}
    },
    {
        "label": "_parse_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Annotate",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Annotate",
        "peekOfCode": "_parse_code = re.compile((\n    br'(?P<refnanny>__Pyx_X?(?:GOT|GIVE)REF|__Pyx_RefNanny[A-Za-z]+)|'\n    br'(?P<trace>__Pyx_Trace[A-Za-z]+)|'\n    br'(?:'\n    br'(?P<pyx_macro_api>__Pyx_[A-Z][A-Z_]+)|'\n    br'(?P<pyx_c_api>(?:__Pyx_[A-Z][a-z_][A-Za-z_]*)|__pyx_convert_[A-Za-z_]*)|'\n    br'(?P<py_macro_api>Py[A-Z][a-z]+_[A-Z][A-Z_]+)|'\n    br'(?P<py_c_api>Py[A-Z][a-z]+_[A-Z][a-z][A-Za-z_]*)'\n    br')(?=\\()|'       # look-ahead to exclude subsequent '(' from replacement\n    br'(?P<error_goto>(?:(?<=;) *if [^;]* +)?__PYX_ERR\\([^)]+\\))'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Annotate",
        "documentation": {}
    },
    {
        "label": "_replace_pos_comment",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Annotate",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Annotate",
        "peekOfCode": "_replace_pos_comment = re.compile(\n    # this matches what Cython generates as code line marker comment\n    br'^\\s*/\\*(?:(?:[^*]|\\*[^/])*\\n)+\\s*\\*/\\s*\\n'.decode('ascii'),\n    re.M\n).sub\nclass AnnotationItem(object):\n    def __init__(self, style, text, tag=\"\", size=0):\n        self.style = style\n        self.text = text\n        self.tag = tag",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Annotate",
        "documentation": {}
    },
    {
        "label": "AnnotationWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.AutoDocTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.AutoDocTransforms",
        "peekOfCode": "class AnnotationWriter(ExpressionWriter):\n    def visit_Node(self, node):\n        self.put(u\"<???>\")\n    def visit_LambdaNode(self, node):\n        # XXX Should we do better?\n        self.put(\"<lambda>\")\nclass EmbedSignature(CythonTransform):\n    def __init__(self, context):\n        super(EmbedSignature, self).__init__(context)\n        self.class_name = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.AutoDocTransforms",
        "documentation": {}
    },
    {
        "label": "EmbedSignature",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.AutoDocTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.AutoDocTransforms",
        "peekOfCode": "class EmbedSignature(CythonTransform):\n    def __init__(self, context):\n        super(EmbedSignature, self).__init__(context)\n        self.class_name = None\n        self.class_node = None\n    def _fmt_expr(self, node):\n        writer = AnnotationWriter()\n        result = writer.write(node)\n        # print(type(node).__name__, '-->', result)\n        return result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.AutoDocTransforms",
        "documentation": {}
    },
    {
        "label": "IntroduceBufferAuxiliaryVars",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "class IntroduceBufferAuxiliaryVars(CythonTransform):\n    #\n    # Entry point\n    #\n    buffers_exists = False\n    using_memoryview = False\n    def __call__(self, node):\n        assert isinstance(node, ModuleNode)\n        self.max_ndim = 0\n        result = super(IntroduceBufferAuxiliaryVars, self).__call__(node)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "BufferEntry",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "class BufferEntry(object):\n    def __init__(self, entry):\n        self.entry = entry\n        self.type = entry.type\n        self.cname = entry.buffer_aux.buflocal_nd_var.cname\n        self.buf_ptr = \"%s.rcbuffer->pybuffer.buf\" % self.cname\n        self.buf_ptr_type = entry.type.buffer_ptr_type\n        self.init_attributes()\n    def init_attributes(self):\n        self.shape = self.get_buf_shapevars()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "GetAndReleaseBufferUtilityCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "class GetAndReleaseBufferUtilityCode(object):\n    # Emulation of PyObject_GetBuffer and PyBuffer_Release for Python 2.\n    # For >= 2.6 we do double mode -- use the new buffer interface on objects\n    # which has the right tp_flags set, but emulation otherwise.\n    requires = None\n    is_cython_utility = False\n    def __init__(self):\n        pass\n    def __eq__(self, other):\n        return isinstance(other, GetAndReleaseBufferUtilityCode)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "dedent",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def dedent(text, reindent=0):\n    from textwrap import dedent\n    text = dedent(text)\n    if reindent > 0:\n        indent = \" \" * reindent\n        text = '\\n'.join([indent + x for x in text.split('\\n')])\n    return text\nclass IntroduceBufferAuxiliaryVars(CythonTransform):\n    #\n    # Entry point",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "analyse_buffer_options",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called\n    on the dtype argument.\n    posargs and dictargs should consist of a list and a dict\n    of tuples (value, pos). Defaults should be a dict of values.\n    Returns a dict containing all the options a buffer can have and\n    its value (with the positions stripped).\n    \"\"\"\n    if defaults is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "get_flags",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def get_flags(buffer_aux, buffer_type):\n    flags = 'PyBUF_FORMAT'\n    mode = buffer_type.mode\n    if mode == 'full':\n        flags += '| PyBUF_INDIRECT'\n    elif mode == 'strided':\n        flags += '| PyBUF_STRIDES'\n    elif mode == 'c':\n        flags += '| PyBUF_C_CONTIGUOUS'\n    elif mode == 'fortran':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "used_buffer_aux_vars",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def used_buffer_aux_vars(entry):\n    buffer_aux = entry.buffer_aux\n    buffer_aux.buflocal_nd_var.used = True\n    buffer_aux.rcbuf_var.used = True\ndef put_unpack_buffer_aux_into_scope(buf_entry, code):\n    # Generate code to copy the needed struct info into local\n    # variables.\n    buffer_aux, mode = buf_entry.buffer_aux, buf_entry.type.mode\n    pybuffernd_struct = buffer_aux.buflocal_nd_var.cname\n    fldnames = ['strides', 'shape']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "put_unpack_buffer_aux_into_scope",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def put_unpack_buffer_aux_into_scope(buf_entry, code):\n    # Generate code to copy the needed struct info into local\n    # variables.\n    buffer_aux, mode = buf_entry.buffer_aux, buf_entry.type.mode\n    pybuffernd_struct = buffer_aux.buflocal_nd_var.cname\n    fldnames = ['strides', 'shape']\n    if mode == 'full':\n        fldnames.append('suboffsets')\n    ln = []\n    for i in range(buf_entry.type.ndim):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "put_init_vars",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def put_init_vars(entry, code):\n    bufaux = entry.buffer_aux\n    pybuffernd_struct = bufaux.buflocal_nd_var.cname\n    pybuffer_struct = bufaux.rcbuf_var.cname\n    # init pybuffer_struct\n    code.putln(\"%s.pybuffer.buf = NULL;\" % pybuffer_struct)\n    code.putln(\"%s.refcount = 0;\" % pybuffer_struct)\n    # init the buffer object\n    # code.put_init_var_to_py_none(entry)\n    # init the pybuffernd_struct",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "put_acquire_arg_buffer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def put_acquire_arg_buffer(entry, code, pos):\n    buffer_aux = entry.buffer_aux\n    getbuffer = get_getbuffer_call(code, entry.cname, buffer_aux, entry.type)\n    # Acquire any new buffer\n    code.putln(\"{\")\n    code.putln(\"__Pyx_BufFmt_StackElem __pyx_stack[%d];\" % entry.type.dtype.struct_nesting_depth())\n    code.putln(code.error_goto_if(\"%s == -1\" % getbuffer, pos))\n    code.putln(\"}\")\n    # An exception raised in arg parsing cannot be caught, so no\n    # need to care about the buffer then.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "put_release_buffer_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def put_release_buffer_code(code, entry):\n    code.globalstate.use_utility_code(acquire_utility_code)\n    code.putln(\"__Pyx_SafeReleaseBuffer(&%s.rcbuffer->pybuffer);\" % entry.buffer_aux.buflocal_nd_var.cname)\ndef get_getbuffer_call(code, obj_cname, buffer_aux, buffer_type):\n    ndim = buffer_type.ndim\n    cast = int(buffer_type.cast)\n    flags = get_flags(buffer_aux, buffer_type)\n    pybuffernd_struct = buffer_aux.buflocal_nd_var.cname\n    dtype_typeinfo = get_type_information_cname(code, buffer_type.dtype)\n    code.globalstate.use_utility_code(acquire_utility_code)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "get_getbuffer_call",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def get_getbuffer_call(code, obj_cname, buffer_aux, buffer_type):\n    ndim = buffer_type.ndim\n    cast = int(buffer_type.cast)\n    flags = get_flags(buffer_aux, buffer_type)\n    pybuffernd_struct = buffer_aux.buflocal_nd_var.cname\n    dtype_typeinfo = get_type_information_cname(code, buffer_type.dtype)\n    code.globalstate.use_utility_code(acquire_utility_code)\n    return (\"__Pyx_GetBufferAndValidate(&%(pybuffernd_struct)s.rcbuffer->pybuffer, \"\n            \"(PyObject*)%(obj_cname)s, &%(dtype_typeinfo)s, %(flags)s, %(ndim)d, \"\n            \"%(cast)d, __pyx_stack)\" % locals())",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "put_assign_to_buffer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def put_assign_to_buffer(lhs_cname, rhs_cname, buf_entry,\n                         is_initialized, pos, code):\n    \"\"\"\n    Generate code for reassigning a buffer variables. This only deals with getting\n    the buffer auxiliary structure and variables set up correctly, the assignment\n    itself and refcounting is the responsibility of the caller.\n    However, the assignment operation may throw an exception so that the reassignment\n    never happens.\n    Depending on the circumstances there are two possible outcomes:\n    - Old buffer released, new acquired, rhs assigned to lhs",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "put_buffer_lookup_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def put_buffer_lookup_code(entry, index_signeds, index_cnames, directives,\n                           pos, code, negative_indices, in_nogil_context):\n    \"\"\"\n    Generates code to process indices and calculate an offset into\n    a buffer. Returns a C string which gives a pointer which can be\n    read from or written to at will (it is an expression so caller should\n    store it in a temporary if it is used more than once).\n    As the bounds checking can have any number of combinations of unsigned\n    arguments, smart optimizations etc. we insert it directly in the function\n    body. The lookup however is delegated to a inline function that is instantiated",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "use_bufstruct_declare_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def use_bufstruct_declare_code(env):\n    env.use_utility_code(buffer_struct_declare_code)\ndef buf_lookup_full_code(proto, defin, name, nd):\n    \"\"\"\n    Generates a buffer lookup function for the right number\n    of dimensions. The function gives back a void* at the right location.\n    \"\"\"\n    # _i_ndex, _s_tride, sub_o_ffset\n    macroargs = \", \".join([\"i%d, s%d, o%d\" % (i, i, i) for i in range(nd)])\n    proto.putln(\"#define %s(type, buf, %s) (type)(%s_imp(buf, %s))\" % (name, macroargs, name, macroargs))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buf_lookup_full_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def buf_lookup_full_code(proto, defin, name, nd):\n    \"\"\"\n    Generates a buffer lookup function for the right number\n    of dimensions. The function gives back a void* at the right location.\n    \"\"\"\n    # _i_ndex, _s_tride, sub_o_ffset\n    macroargs = \", \".join([\"i%d, s%d, o%d\" % (i, i, i) for i in range(nd)])\n    proto.putln(\"#define %s(type, buf, %s) (type)(%s_imp(buf, %s))\" % (name, macroargs, name, macroargs))\n    funcargs = \", \".join([\"Py_ssize_t i%d, Py_ssize_t s%d, Py_ssize_t o%d\" % (i, i, i) for i in range(nd)])\n    proto.putln(\"static CYTHON_INLINE void* %s_imp(void* buf, %s);\" % (name, funcargs))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buf_lookup_strided_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def buf_lookup_strided_code(proto, defin, name, nd):\n    \"\"\"\n    Generates a buffer lookup function for the right number\n    of dimensions. The function gives back a void* at the right location.\n    \"\"\"\n    # _i_ndex, _s_tride\n    args = \", \".join([\"i%d, s%d\" % (i, i) for i in range(nd)])\n    offset = \" + \".join([\"i%d * s%d\" % (i, i) for i in range(nd)])\n    proto.putln(\"#define %s(type, buf, %s) (type)((char*)buf + %s)\" % (name, args, offset))\ndef buf_lookup_c_code(proto, defin, name, nd):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buf_lookup_c_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def buf_lookup_c_code(proto, defin, name, nd):\n    \"\"\"\n    Similar to strided lookup, but can assume that the last dimension\n    doesn't need a multiplication as long as.\n    Still we keep the same signature for now.\n    \"\"\"\n    if nd == 1:\n        proto.putln(\"#define %s(type, buf, i0, s0) ((type)buf + i0)\" % name)\n    else:\n        args = \", \".join([\"i%d, s%d\" % (i, i) for i in range(nd)])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buf_lookup_fortran_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def buf_lookup_fortran_code(proto, defin, name, nd):\n    \"\"\"\n    Like C lookup, but the first index is optimized instead.\n    \"\"\"\n    if nd == 1:\n        proto.putln(\"#define %s(type, buf, i0, s0) ((type)buf + i0)\" % name)\n    else:\n        args = \", \".join([\"i%d, s%d\" % (i, i) for i in range(nd)])\n        offset = \" + \".join([\"i%d * s%d\" % (i, i) for i in range(1, nd)])\n        proto.putln(\"#define %s(type, buf, %s) ((type)((char*)buf + %s) + i%d)\" % (name, args, offset, 0))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "use_py2_buffer_functions",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def use_py2_buffer_functions(env):\n    env.use_utility_code(GetAndReleaseBufferUtilityCode())\nclass GetAndReleaseBufferUtilityCode(object):\n    # Emulation of PyObject_GetBuffer and PyBuffer_Release for Python 2.\n    # For >= 2.6 we do double mode -- use the new buffer interface on objects\n    # which has the right tp_flags set, but emulation otherwise.\n    requires = None\n    is_cython_utility = False\n    def __init__(self):\n        pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "mangle_dtype_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def mangle_dtype_name(dtype):\n    # Use prefixes to separate user defined types from builtins\n    # (consider \"typedef float unsigned_int\")\n    if dtype.is_pyobject:\n        return \"object\"\n    elif dtype.is_ptr:\n        return \"ptr\"\n    else:\n        if dtype.is_typedef or dtype.is_struct_or_union:\n            prefix = \"nn_\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "get_type_information_cname",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def get_type_information_cname(code, dtype, maxdepth=None):\n    \"\"\"\n    Output the run-time type information (__Pyx_TypeInfo) for given dtype,\n    and return the name of the type info struct.\n    Structs with two floats of the same size are encoded as complex numbers.\n    One can separate between complex numbers declared as struct or with native\n    encoding by inspecting to see if the fields field of the type is\n    filled in.\n    \"\"\"\n    namesuffix = mangle_dtype_name(dtype)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "load_buffer_utility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def load_buffer_utility(util_code_name, context=None, **kwargs):\n    if context is None:\n        return UtilityCode.load(util_code_name, \"Buffer.c\", **kwargs)\n    else:\n        return TempitaUtilityCode.load(util_code_name, \"Buffer.c\", context=context, **kwargs)\ncontext = dict(max_dims=Options.buffer_max_dims)\nbuffer_struct_declare_code = load_buffer_utility(\"BufferStructDeclare\", context=context)\nbuffer_formats_declare_code = load_buffer_utility(\"BufferFormatStructs\")\n# Utility function to set the right exception\n# The caller should immediately goto_error",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buffer_options",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "buffer_options = (\"dtype\", \"ndim\", \"mode\", \"negative_indices\", \"cast\") # ordered!\nbuffer_defaults = {\"ndim\": 1, \"mode\": \"full\", \"negative_indices\": True, \"cast\": False}\nbuffer_positional_options_count = 1 # anything beyond this needs keyword argument\nERR_BUF_OPTION_UNKNOWN = '\"%s\" is not a buffer option'\nERR_BUF_TOO_MANY = 'Too many buffer options'\nERR_BUF_DUP = '\"%s\" buffer option already supplied'\nERR_BUF_MISSING = '\"%s\" missing'\nERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buffer_defaults",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "buffer_defaults = {\"ndim\": 1, \"mode\": \"full\", \"negative_indices\": True, \"cast\": False}\nbuffer_positional_options_count = 1 # anything beyond this needs keyword argument\nERR_BUF_OPTION_UNKNOWN = '\"%s\" is not a buffer option'\nERR_BUF_TOO_MANY = 'Too many buffer options'\nERR_BUF_DUP = '\"%s\" buffer option already supplied'\nERR_BUF_MISSING = '\"%s\" missing'\nERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buffer_positional_options_count",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "buffer_positional_options_count = 1 # anything beyond this needs keyword argument\nERR_BUF_OPTION_UNKNOWN = '\"%s\" is not a buffer option'\nERR_BUF_TOO_MANY = 'Too many buffer options'\nERR_BUF_DUP = '\"%s\" buffer option already supplied'\nERR_BUF_MISSING = '\"%s\" missing'\nERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_OPTION_UNKNOWN",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_OPTION_UNKNOWN = '\"%s\" is not a buffer option'\nERR_BUF_TOO_MANY = 'Too many buffer options'\nERR_BUF_DUP = '\"%s\" buffer option already supplied'\nERR_BUF_MISSING = '\"%s\" missing'\nERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_TOO_MANY",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_TOO_MANY = 'Too many buffer options'\nERR_BUF_DUP = '\"%s\" buffer option already supplied'\nERR_BUF_MISSING = '\"%s\" missing'\nERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_DUP",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_DUP = '\"%s\" buffer option already supplied'\nERR_BUF_MISSING = '\"%s\" missing'\nERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called\n    on the dtype argument.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_MISSING",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_MISSING = '\"%s\" missing'\nERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called\n    on the dtype argument.\n    posargs and dictargs should consist of a list and a dict",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_MODE",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called\n    on the dtype argument.\n    posargs and dictargs should consist of a list and a dict\n    of tuples (value, pos). Defaults should be a dict of values.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_NDIM",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called\n    on the dtype argument.\n    posargs and dictargs should consist of a list and a dict\n    of tuples (value, pos). Defaults should be a dict of values.\n    Returns a dict containing all the options a buffer can have and",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_DTYPE",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called\n    on the dtype argument.\n    posargs and dictargs should consist of a list and a dict\n    of tuples (value, pos). Defaults should be a dict of values.\n    Returns a dict containing all the options a buffer can have and\n    its value (with the positions stripped).",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_BOOL",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called\n    on the dtype argument.\n    posargs and dictargs should consist of a list and a dict\n    of tuples (value, pos). Defaults should be a dict of values.\n    Returns a dict containing all the options a buffer can have and\n    its value (with the positions stripped).\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "context",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "context = dict(max_dims=Options.buffer_max_dims)\nbuffer_struct_declare_code = load_buffer_utility(\"BufferStructDeclare\", context=context)\nbuffer_formats_declare_code = load_buffer_utility(\"BufferFormatStructs\")\n# Utility function to set the right exception\n# The caller should immediately goto_error\nraise_indexerror_code = load_buffer_utility(\"BufferIndexError\")\nraise_indexerror_nogil = load_buffer_utility(\"BufferIndexErrorNogil\")\nraise_buffer_fallback_code = load_buffer_utility(\"BufferFallbackError\")\nacquire_utility_code = load_buffer_utility(\"BufferGetAndValidate\", context=context)\nbuffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buffer_struct_declare_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "buffer_struct_declare_code = load_buffer_utility(\"BufferStructDeclare\", context=context)\nbuffer_formats_declare_code = load_buffer_utility(\"BufferFormatStructs\")\n# Utility function to set the right exception\n# The caller should immediately goto_error\nraise_indexerror_code = load_buffer_utility(\"BufferIndexError\")\nraise_indexerror_nogil = load_buffer_utility(\"BufferIndexErrorNogil\")\nraise_buffer_fallback_code = load_buffer_utility(\"BufferFallbackError\")\nacquire_utility_code = load_buffer_utility(\"BufferGetAndValidate\", context=context)\nbuffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)\n# See utility code BufferFormatFromTypeInfo",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buffer_formats_declare_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "buffer_formats_declare_code = load_buffer_utility(\"BufferFormatStructs\")\n# Utility function to set the right exception\n# The caller should immediately goto_error\nraise_indexerror_code = load_buffer_utility(\"BufferIndexError\")\nraise_indexerror_nogil = load_buffer_utility(\"BufferIndexErrorNogil\")\nraise_buffer_fallback_code = load_buffer_utility(\"BufferFallbackError\")\nacquire_utility_code = load_buffer_utility(\"BufferGetAndValidate\", context=context)\nbuffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)\n# See utility code BufferFormatFromTypeInfo\n_typeinfo_to_format_code = load_buffer_utility(\"TypeInfoToFormat\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "raise_indexerror_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "raise_indexerror_code = load_buffer_utility(\"BufferIndexError\")\nraise_indexerror_nogil = load_buffer_utility(\"BufferIndexErrorNogil\")\nraise_buffer_fallback_code = load_buffer_utility(\"BufferFallbackError\")\nacquire_utility_code = load_buffer_utility(\"BufferGetAndValidate\", context=context)\nbuffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)\n# See utility code BufferFormatFromTypeInfo\n_typeinfo_to_format_code = load_buffer_utility(\"TypeInfoToFormat\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "raise_indexerror_nogil",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "raise_indexerror_nogil = load_buffer_utility(\"BufferIndexErrorNogil\")\nraise_buffer_fallback_code = load_buffer_utility(\"BufferFallbackError\")\nacquire_utility_code = load_buffer_utility(\"BufferGetAndValidate\", context=context)\nbuffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)\n# See utility code BufferFormatFromTypeInfo\n_typeinfo_to_format_code = load_buffer_utility(\"TypeInfoToFormat\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "raise_buffer_fallback_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "raise_buffer_fallback_code = load_buffer_utility(\"BufferFallbackError\")\nacquire_utility_code = load_buffer_utility(\"BufferGetAndValidate\", context=context)\nbuffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)\n# See utility code BufferFormatFromTypeInfo\n_typeinfo_to_format_code = load_buffer_utility(\"TypeInfoToFormat\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "acquire_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "acquire_utility_code = load_buffer_utility(\"BufferGetAndValidate\", context=context)\nbuffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)\n# See utility code BufferFormatFromTypeInfo\n_typeinfo_to_format_code = load_buffer_utility(\"TypeInfoToFormat\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buffer_format_check_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "buffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)\n# See utility code BufferFormatFromTypeInfo\n_typeinfo_to_format_code = load_buffer_utility(\"TypeInfoToFormat\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "_typeinfo_to_format_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "peekOfCode": "_typeinfo_to_format_code = load_buffer_utility(\"TypeInfoToFormat\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "_BuiltinOverride",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "class _BuiltinOverride(object):\n    def __init__(self, py_name, args, ret_type, cname, py_equiv=\"*\",\n                 utility_code=None, sig=None, func_type=None,\n                 is_strict_signature=False, builtin_return_type=None):\n        self.py_name, self.cname, self.py_equiv = py_name, cname, py_equiv\n        self.args, self.ret_type = args, ret_type\n        self.func_type, self.sig = func_type, sig\n        self.builtin_return_type = builtin_return_type\n        self.is_strict_signature = is_strict_signature\n        self.utility_code = utility_code",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "BuiltinAttribute",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "class BuiltinAttribute(object):\n    def __init__(self, py_name, cname=None, field_type=None, field_type_name=None):\n        self.py_name = py_name\n        self.cname = cname or py_name\n        self.field_type_name = field_type_name # can't do the lookup before the type is declared!\n        self.field_type = field_type\n    def declare_in_type(self, self_type):\n        if self.field_type_name is not None:\n            # lazy type lookup\n            field_type = builtin_scope.lookup(self.field_type_name).type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "BuiltinFunction",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "class BuiltinFunction(_BuiltinOverride):\n    def declare_in_scope(self, scope):\n        func_type, sig = self.func_type, self.sig\n        if func_type is None:\n            func_type = self.build_func_type(sig)\n        scope.declare_builtin_cfunction(self.py_name, func_type, self.cname,\n                                        self.py_equiv, self.utility_code)\nclass BuiltinMethod(_BuiltinOverride):\n    def declare_in_type(self, self_type):\n        method_type, sig = self.func_type, self.sig",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "BuiltinMethod",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "class BuiltinMethod(_BuiltinOverride):\n    def declare_in_type(self, self_type):\n        method_type, sig = self.func_type, self.sig\n        if method_type is None:\n            # override 'self' type (first argument)\n            self_arg = PyrexTypes.CFuncTypeArg(\"\", self_type, None)\n            self_arg.not_none = True\n            self_arg.accept_builtin_subtypes = True\n            method_type = self.build_func_type(sig, self_arg)\n        self_type.scope.declare_builtin_cfunction(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "init_builtin_funcs",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "def init_builtin_funcs():\n    for bf in builtin_function_table:\n        bf.declare_in_scope(builtin_scope)\nbuiltin_types = {}\ndef init_builtin_types():\n    global builtin_types\n    for name, cname, methods in builtin_types_table:\n        utility = builtin_utility_code.get(name)\n        if name == 'frozenset':\n            objstruct_cname = 'PySetObject'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "init_builtin_types",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "def init_builtin_types():\n    global builtin_types\n    for name, cname, methods in builtin_types_table:\n        utility = builtin_utility_code.get(name)\n        if name == 'frozenset':\n            objstruct_cname = 'PySetObject'\n        elif name == 'bytearray':\n            objstruct_cname = 'PyByteArrayObject'\n        elif name == 'bool':\n            objstruct_cname = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "init_builtin_structs",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "def init_builtin_structs():\n    for name, cname, attribute_types in builtin_structs_table:\n        scope = StructOrUnionScope(name)\n        for attribute_name, attribute_type in attribute_types:\n            scope.declare_var(attribute_name, attribute_type, None,\n                              attribute_name, allow_pyobject=True)\n        builtin_scope.declare_struct_or_union(\n            name, \"struct\", scope, 1, None, cname = cname)\ndef init_builtins():\n    init_builtin_structs()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "init_builtins",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "def init_builtins():\n    init_builtin_structs()\n    init_builtin_types()\n    init_builtin_funcs()\n    builtin_scope.declare_var(\n        '__debug__', PyrexTypes.c_const_type(PyrexTypes.c_bint_type),\n        pos=None, cname='(!Py_OptimizeFlag)', is_cdef=True)\n    global list_type, tuple_type, dict_type, set_type, frozenset_type\n    global bytes_type, str_type, unicode_type, basestring_type, slice_type\n    global float_type, bool_type, type_type, complex_type, bytearray_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "iter_next_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "iter_next_utility_code = UtilityCode.load(\"IterNext\", \"ObjectHandling.c\")\ngetattr_utility_code = UtilityCode.load(\"GetAttr\", \"ObjectHandling.c\")\ngetattr3_utility_code = UtilityCode.load(\"GetAttr3\", \"Builtins.c\")\npyexec_utility_code = UtilityCode.load(\"PyExec\", \"Builtins.c\")\npyexec_globals_utility_code = UtilityCode.load(\"PyExecGlobals\", \"Builtins.c\")\nglobals_utility_code = UtilityCode.load(\"Globals\", \"Builtins.c\")\nbuiltin_utility_code = {\n    'StopAsyncIteration': UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"),\n}\n# mapping from builtins to their C-level equivalents",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "getattr_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "getattr_utility_code = UtilityCode.load(\"GetAttr\", \"ObjectHandling.c\")\ngetattr3_utility_code = UtilityCode.load(\"GetAttr3\", \"Builtins.c\")\npyexec_utility_code = UtilityCode.load(\"PyExec\", \"Builtins.c\")\npyexec_globals_utility_code = UtilityCode.load(\"PyExecGlobals\", \"Builtins.c\")\nglobals_utility_code = UtilityCode.load(\"Globals\", \"Builtins.c\")\nbuiltin_utility_code = {\n    'StopAsyncIteration': UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"),\n}\n# mapping from builtins to their C-level equivalents\nclass _BuiltinOverride(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "getattr3_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "getattr3_utility_code = UtilityCode.load(\"GetAttr3\", \"Builtins.c\")\npyexec_utility_code = UtilityCode.load(\"PyExec\", \"Builtins.c\")\npyexec_globals_utility_code = UtilityCode.load(\"PyExecGlobals\", \"Builtins.c\")\nglobals_utility_code = UtilityCode.load(\"Globals\", \"Builtins.c\")\nbuiltin_utility_code = {\n    'StopAsyncIteration': UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"),\n}\n# mapping from builtins to their C-level equivalents\nclass _BuiltinOverride(object):\n    def __init__(self, py_name, args, ret_type, cname, py_equiv=\"*\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "pyexec_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "pyexec_utility_code = UtilityCode.load(\"PyExec\", \"Builtins.c\")\npyexec_globals_utility_code = UtilityCode.load(\"PyExecGlobals\", \"Builtins.c\")\nglobals_utility_code = UtilityCode.load(\"Globals\", \"Builtins.c\")\nbuiltin_utility_code = {\n    'StopAsyncIteration': UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"),\n}\n# mapping from builtins to their C-level equivalents\nclass _BuiltinOverride(object):\n    def __init__(self, py_name, args, ret_type, cname, py_equiv=\"*\",\n                 utility_code=None, sig=None, func_type=None,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "pyexec_globals_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "pyexec_globals_utility_code = UtilityCode.load(\"PyExecGlobals\", \"Builtins.c\")\nglobals_utility_code = UtilityCode.load(\"Globals\", \"Builtins.c\")\nbuiltin_utility_code = {\n    'StopAsyncIteration': UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"),\n}\n# mapping from builtins to their C-level equivalents\nclass _BuiltinOverride(object):\n    def __init__(self, py_name, args, ret_type, cname, py_equiv=\"*\",\n                 utility_code=None, sig=None, func_type=None,\n                 is_strict_signature=False, builtin_return_type=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "globals_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "globals_utility_code = UtilityCode.load(\"Globals\", \"Builtins.c\")\nbuiltin_utility_code = {\n    'StopAsyncIteration': UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"),\n}\n# mapping from builtins to their C-level equivalents\nclass _BuiltinOverride(object):\n    def __init__(self, py_name, args, ret_type, cname, py_equiv=\"*\",\n                 utility_code=None, sig=None, func_type=None,\n                 is_strict_signature=False, builtin_return_type=None):\n        self.py_name, self.cname, self.py_equiv = py_name, cname, py_equiv",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "builtin_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "builtin_utility_code = {\n    'StopAsyncIteration': UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"),\n}\n# mapping from builtins to their C-level equivalents\nclass _BuiltinOverride(object):\n    def __init__(self, py_name, args, ret_type, cname, py_equiv=\"*\",\n                 utility_code=None, sig=None, func_type=None,\n                 is_strict_signature=False, builtin_return_type=None):\n        self.py_name, self.cname, self.py_equiv = py_name, cname, py_equiv\n        self.args, self.ret_type = args, ret_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "builtin_function_table",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "builtin_function_table = [\n    # name,        args,   return,  C API func,           py equiv = \"*\"\n    BuiltinFunction('abs',        \"d\",    \"d\",     \"fabs\",\n                    is_strict_signature = True),\n    BuiltinFunction('abs',        \"f\",    \"f\",     \"fabsf\",\n                    is_strict_signature = True),\n    BuiltinFunction('abs',        \"i\",    \"i\",     \"abs\",\n                    is_strict_signature = True),\n    BuiltinFunction('abs',        \"l\",    \"l\",     \"labs\",\n                    is_strict_signature = True),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "builtin_types_table",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "builtin_types_table = [\n    (\"type\",    \"PyType_Type\",     []),\n# This conflicts with the C++ bool type, and unfortunately\n# C++ is too liberal about PyObject* <-> bool conversions,\n# resulting in unintuitive runtime behavior and segfaults.\n#    (\"bool\",    \"PyBool_Type\",     []),\n    (\"int\",     \"PyInt_Type\",      []),\n    (\"long\",    \"PyLong_Type\",     []),\n    (\"float\",   \"PyFloat_Type\",    []),\n    (\"complex\", \"PyComplex_Type\",  [BuiltinAttribute('cval', field_type_name = 'Py_complex'),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "types_that_construct_their_instance",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "types_that_construct_their_instance = set([\n    # some builtin types do not always return an instance of\n    # themselves - these do:\n    'type', 'bool', 'long', 'float', 'complex',\n    'bytes', 'unicode', 'bytearray',\n    'tuple', 'list', 'dict', 'set', 'frozenset'\n    # 'str',             # only in Py3.x\n    # 'file',            # only in Py2.x\n])\nbuiltin_structs_table = [",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "builtin_structs_table",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "builtin_structs_table = [\n    ('Py_buffer', 'Py_buffer',\n     [(\"buf\",        PyrexTypes.c_void_ptr_type),\n      (\"obj\",        PyrexTypes.py_object_type),\n      (\"len\",        PyrexTypes.c_py_ssize_t_type),\n      (\"itemsize\",   PyrexTypes.c_py_ssize_t_type),\n      (\"readonly\",   PyrexTypes.c_bint_type),\n      (\"ndim\",       PyrexTypes.c_int_type),\n      (\"format\",     PyrexTypes.c_char_ptr_type),\n      (\"shape\",      PyrexTypes.c_py_ssize_t_ptr_type),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "builtin_scope",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "builtin_scope = BuiltinScope()\ndef init_builtin_funcs():\n    for bf in builtin_function_table:\n        bf.declare_in_scope(builtin_scope)\nbuiltin_types = {}\ndef init_builtin_types():\n    global builtin_types\n    for name, cname, methods in builtin_types_table:\n        utility = builtin_utility_code.get(name)\n        if name == 'frozenset':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "builtin_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "peekOfCode": "builtin_types = {}\ndef init_builtin_types():\n    global builtin_types\n    for name, cname, methods in builtin_types_table:\n        utility = builtin_utility_code.get(name)\n        if name == 'frozenset':\n            objstruct_cname = 'PySetObject'\n        elif name == 'bytearray':\n            objstruct_cname = 'PyByteArrayObject'\n        elif name == 'bool':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "bad_usage",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CmdLine",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CmdLine",
        "peekOfCode": "def bad_usage():\n    sys.stderr.write(usage)\n    sys.exit(1)\ndef parse_command_line(args):\n    from .Main import CompilationOptions, default_options\n    pending_arg = []\n    def pop_arg():\n        if not args or pending_arg:\n            bad_usage()\n        if '=' in args[0] and args[0].startswith('--'):  # allow \"--long-option=xyz\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CmdLine",
        "documentation": {}
    },
    {
        "label": "parse_command_line",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CmdLine",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CmdLine",
        "peekOfCode": "def parse_command_line(args):\n    from .Main import CompilationOptions, default_options\n    pending_arg = []\n    def pop_arg():\n        if not args or pending_arg:\n            bad_usage()\n        if '=' in args[0] and args[0].startswith('--'):  # allow \"--long-option=xyz\"\n            name, value = args.pop(0).split('=', 1)\n            pending_arg.append(value)\n            return name",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CmdLine",
        "documentation": {}
    },
    {
        "label": "usage",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CmdLine",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CmdLine",
        "peekOfCode": "usage = \"\"\"\\\nCython (http://cython.org) is a compiler for code written in the\nCython language.  Cython is based on Pyrex by Greg Ewing.\nUsage: cython [options] sourcefile.{pyx,py} ...\nOptions:\n  -V, --version                  Display version number of cython compiler\n  -l, --create-listing           Write error messages to a listing file\n  -I, --include-dir <directory>  Search for include files in named directory\n                                 (multiple include directories are allowed).\n  -o, --output-file <filename>   Specify name of generated C file",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CmdLine",
        "documentation": {}
    },
    {
        "label": "IncludeCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class IncludeCode(object):\n    \"\"\"\n    An include file and/or verbatim C code to be included in the\n    generated sources.\n    \"\"\"\n    # attributes:\n    #\n    #  pieces    {order: unicode}: pieces of C code to be generated.\n    #            For the included file, the key \"order\" is zero.\n    #            For verbatim include code, the \"order\" is the \"order\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "UtilityCodeBase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class UtilityCodeBase(object):\n    \"\"\"\n    Support for loading utility code from a file.\n    Code sections in the file can be specified as follows:\n        ##### MyUtility.proto #####\n        [proto declarations]\n        ##### MyUtility.init #####\n        [code run at module initialization]\n        ##### MyUtility #####\n        #@requires: MyOtherUtility",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "UtilityCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class UtilityCode(UtilityCodeBase):\n    \"\"\"\n    Stores utility code to add during code generation.\n    See GlobalState.put_utility_code.\n    hashes/equals by instance\n    proto           C prototypes\n    impl            implementation code\n    init            code to call on module initialization\n    requires        utility code dependencies\n    proto_block     the place in the resulting file where the prototype should",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "TempitaUtilityCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class TempitaUtilityCode(UtilityCode):\n    def __init__(self, name=None, proto=None, impl=None, init=None, file=None, context=None, **kwargs):\n        if context is None:\n            context = {}\n        proto = sub_tempita(proto, context, file, name)\n        impl = sub_tempita(impl, context, file, name)\n        init = sub_tempita(init, context, file, name)\n        super(TempitaUtilityCode, self).__init__(\n            proto, impl, init=init, name=name, file=file, **kwargs)\n    @classmethod",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "LazyUtilityCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class LazyUtilityCode(UtilityCodeBase):\n    \"\"\"\n    Utility code that calls a callback with the root code writer when\n    available. Useful when you only have 'env' but not 'code'.\n    \"\"\"\n    __name__ = '<lazy>'\n    requires = None\n    def __init__(self, callback):\n        self.callback = callback\n    def put_code(self, globalstate):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "FunctionState",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class FunctionState(object):\n    # return_label     string          function return point label\n    # error_label      string          error catch point label\n    # continue_label   string          loop continue point label\n    # break_label      string          loop break point label\n    # return_from_error_cleanup_label string\n    # label_counter    integer         counter for naming labels\n    # in_try_finally   boolean         inside try of try...finally\n    # exc_vars         (string * 3)    exception variables for reraise, or None\n    # can_trace        boolean         line tracing is supported in the current context",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "NumConst",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class NumConst(object):\n    \"\"\"Global info about a Python number constant held by GlobalState.\n    cname       string\n    value       string\n    py_type     string     int, long, float\n    value_code  string     evaluation code if different from value\n    \"\"\"\n    def __init__(self, cname, value, py_type, value_code=None):\n        self.cname = cname\n        self.value = value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "PyObjectConst",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class PyObjectConst(object):\n    \"\"\"Global info about a generic constant held by GlobalState.\n    \"\"\"\n    # cname       string\n    # type        PyrexType\n    def __init__(self, cname, type):\n        self.cname = cname\n        self.type = type\ncython.declare(possible_unicode_identifier=object, possible_bytes_identifier=object,\n               replace_identifier=object, find_alphanums=object)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "StringConst",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class StringConst(object):\n    \"\"\"Global info about a C string constant held by GlobalState.\n    \"\"\"\n    # cname            string\n    # text             EncodedString or BytesLiteral\n    # py_strings       {(identifier, encoding) : PyStringConst}\n    def __init__(self, cname, text, byte_string):\n        self.cname = cname\n        self.text = text\n        self.escaped_value = StringEncoding.escape_byte_string(byte_string)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "PyStringConst",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class PyStringConst(object):\n    \"\"\"Global info about a Python string constant held by GlobalState.\n    \"\"\"\n    # cname       string\n    # py3str_cstring string\n    # encoding    string\n    # intern      boolean\n    # is_unicode  boolean\n    # is_str      boolean\n    def __init__(self, cname, encoding, is_unicode, is_str=False,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "GlobalState",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class GlobalState(object):\n    # filename_table   {string : int}  for finding filename table indexes\n    # filename_list    [string]        filenames in filename table order\n    # input_file_contents dict         contents (=list of lines) of any file that was used as input\n    #                                  to create this output C code.  This is\n    #                                  used to annotate the comments.\n    #\n    # utility_codes   set                IDs of used utility code (to avoid reinsertion)\n    #\n    # declared_cnames  {string:Entry}  used in a transition phase to merge pxd-declared",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "CCodeConfig",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class CCodeConfig(object):\n    # emit_linenums       boolean         write #line pragmas?\n    # emit_code_comments  boolean         copy the original code into C comments?\n    # c_line_in_traceback boolean         append the c file and line number to the traceback for exceptions?\n    def __init__(self, emit_linenums=True, emit_code_comments=True, c_line_in_traceback=True):\n        self.emit_code_comments = emit_code_comments\n        self.emit_linenums = emit_linenums\n        self.c_line_in_traceback = c_line_in_traceback\nclass CCodeWriter(object):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "CCodeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class CCodeWriter(object):\n    \"\"\"\n    Utility class to output C code.\n    When creating an insertion point one must care about the state that is\n    kept:\n    - formatting state (level, bol) is cloned and used in insertion points\n      as well\n    - labels, temps, exc_vars: One must construct a scope in which these can\n      exist by calling enter_cfunc_scope/exit_cfunc_scope (these are for\n      sanity checking and forward compatibility). Created insertion points",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "PyrexCodeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class PyrexCodeWriter(object):\n    # f                file      output file\n    # level            int       indentation level\n    def __init__(self, outfile_name):\n        self.f = Utils.open_new_file(outfile_name)\n        self.level = 0\n    def putln(self, code):\n        self.f.write(\"%s%s\\n\" % (\" \" * self.level, code))\n    def indent(self):\n        self.level += 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "PyxCodeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class PyxCodeWriter(object):\n    \"\"\"\n    Can be used for writing out some Cython code. To use the indenter\n    functionality, the Cython.Compiler.Importer module will have to be used\n    to load the code to support python 2.4\n    \"\"\"\n    def __init__(self, buffer=None, indent_level=0, context=None, encoding='ascii'):\n        self.buffer = buffer or StringIOTree()\n        self.level = indent_level\n        self.context = context",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "ClosureTempAllocator",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "class ClosureTempAllocator(object):\n    def __init__(self, klass):\n        self.klass = klass\n        self.temps_allocated = {}\n        self.temps_free = {}\n        self.temps_count = 0\n    def reset(self):\n        for type, cnames in self.temps_allocated.items():\n            self.temps_free[type] = list(cnames)\n    def allocate_temp(self, type):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "get_utility_dir",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "def get_utility_dir():\n    # make this a function and not global variables:\n    # http://trac.cython.org/cython_trac/ticket/475\n    Cython_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    return os.path.join(Cython_dir, \"Utility\")\nclass UtilityCodeBase(object):\n    \"\"\"\n    Support for loading utility code from a file.\n    Code sections in the file can be specified as follows:\n        ##### MyUtility.proto #####",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "sub_tempita",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "def sub_tempita(s, context, file=None, name=None):\n    \"Run tempita on string s with given context.\"\n    if not s:\n        return None\n    if file:\n        context['__name'] = \"%s:%s\" % (file, name)\n    elif name:\n        context['__name'] = name\n    from ..Tempita import sub\n    return sub(s, **context)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "funccontext_property",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "def funccontext_property(func):\n    name = func.__name__\n    attribute_of = operator.attrgetter(name)\n    def get(self):\n        return attribute_of(self.funcstate)\n    def set(self, value):\n        setattr(self.funcstate, name, value)\n    return property(get, set)\nclass CCodeConfig(object):\n    # emit_linenums       boolean         write #line pragmas?",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "KEYWORDS_MUST_BE_BYTES",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "KEYWORDS_MUST_BE_BYTES = sys.version_info < (2, 7)\nnon_portable_builtins_map = {\n    # builtins that have different names in different Python versions\n    'bytes'         : ('PY_MAJOR_VERSION < 3',  'str'),\n    'unicode'       : ('PY_MAJOR_VERSION >= 3', 'str'),\n    'basestring'    : ('PY_MAJOR_VERSION >= 3', 'str'),\n    'xrange'        : ('PY_MAJOR_VERSION >= 3', 'range'),\n    'raw_input'     : ('PY_MAJOR_VERSION >= 3', 'input'),\n}\nctypedef_builtins_map = {",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "non_portable_builtins_map",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "non_portable_builtins_map = {\n    # builtins that have different names in different Python versions\n    'bytes'         : ('PY_MAJOR_VERSION < 3',  'str'),\n    'unicode'       : ('PY_MAJOR_VERSION >= 3', 'str'),\n    'basestring'    : ('PY_MAJOR_VERSION >= 3', 'str'),\n    'xrange'        : ('PY_MAJOR_VERSION >= 3', 'range'),\n    'raw_input'     : ('PY_MAJOR_VERSION >= 3', 'input'),\n}\nctypedef_builtins_map = {\n    # types of builtins in \"ctypedef class\" statements which we don't",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "ctypedef_builtins_map",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "ctypedef_builtins_map = {\n    # types of builtins in \"ctypedef class\" statements which we don't\n    # import either because the names conflict with C types or because\n    # the type simply is not exposed.\n    'py_int'             : '&PyInt_Type',\n    'py_long'            : '&PyLong_Type',\n    'py_float'           : '&PyFloat_Type',\n    'wrapper_descriptor' : '&PyWrapperDescr_Type',\n}\nbasicsize_builtins_map = {",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "basicsize_builtins_map",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "basicsize_builtins_map = {\n    # builtins whose type has a different tp_basicsize than sizeof(...)\n    'PyTypeObject': 'PyHeapTypeObject',\n}\nuncachable_builtins = [\n    # Global/builtin names that cannot be cached because they may or may not\n    # be available at import time, for various reasons:\n    ## - Py3.7+\n    'breakpoint',  # might deserve an implementation in Cython\n    ## - Py3.4+",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "uncachable_builtins",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "uncachable_builtins = [\n    # Global/builtin names that cannot be cached because they may or may not\n    # be available at import time, for various reasons:\n    ## - Py3.7+\n    'breakpoint',  # might deserve an implementation in Cython\n    ## - Py3.4+\n    '__loader__',\n    '__spec__',\n    ## - Py3+\n    'BlockingIOError',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "special_py_methods",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "special_py_methods = set([\n    '__cinit__', '__dealloc__', '__richcmp__', '__next__',\n    '__await__', '__aiter__', '__anext__',\n    '__getreadbuffer__', '__getwritebuffer__', '__getsegcount__',\n    '__getcharbuffer__', '__getbuffer__', '__releasebuffer__'\n])\nmodifier_output_mapper = {\n    'inline': 'CYTHON_INLINE'\n}.get\nclass IncludeCode(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "modifier_output_mapper",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "modifier_output_mapper = {\n    'inline': 'CYTHON_INLINE'\n}.get\nclass IncludeCode(object):\n    \"\"\"\n    An include file and/or verbatim C code to be included in the\n    generated sources.\n    \"\"\"\n    # attributes:\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "possible_unicode_identifier",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "possible_unicode_identifier = re.compile(br\"(?![0-9])\\w+$\".decode('ascii'), re.U).match\npossible_bytes_identifier = re.compile(r\"(?![0-9])\\w+$\".encode('ASCII')).match\nreplace_identifier = re.compile(r'[^a-zA-Z0-9_]+').sub\nfind_alphanums = re.compile('([a-zA-Z0-9]+)').findall\nclass StringConst(object):\n    \"\"\"Global info about a C string constant held by GlobalState.\n    \"\"\"\n    # cname            string\n    # text             EncodedString or BytesLiteral\n    # py_strings       {(identifier, encoding) : PyStringConst}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "possible_bytes_identifier",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "possible_bytes_identifier = re.compile(r\"(?![0-9])\\w+$\".encode('ASCII')).match\nreplace_identifier = re.compile(r'[^a-zA-Z0-9_]+').sub\nfind_alphanums = re.compile('([a-zA-Z0-9]+)').findall\nclass StringConst(object):\n    \"\"\"Global info about a C string constant held by GlobalState.\n    \"\"\"\n    # cname            string\n    # text             EncodedString or BytesLiteral\n    # py_strings       {(identifier, encoding) : PyStringConst}\n    def __init__(self, cname, text, byte_string):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "replace_identifier",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "replace_identifier = re.compile(r'[^a-zA-Z0-9_]+').sub\nfind_alphanums = re.compile('([a-zA-Z0-9]+)').findall\nclass StringConst(object):\n    \"\"\"Global info about a C string constant held by GlobalState.\n    \"\"\"\n    # cname            string\n    # text             EncodedString or BytesLiteral\n    # py_strings       {(identifier, encoding) : PyStringConst}\n    def __init__(self, cname, text, byte_string):\n        self.cname = cname",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "find_alphanums",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "peekOfCode": "find_alphanums = re.compile('([a-zA-Z0-9]+)').findall\nclass StringConst(object):\n    \"\"\"Global info about a C string constant held by GlobalState.\n    \"\"\"\n    # cname            string\n    # text             EncodedString or BytesLiteral\n    # py_strings       {(identifier, encoding) : PyStringConst}\n    def __init__(self, cname, text, byte_string):\n        self.cname = cname\n        self.text = text",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "ExtractPxdCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CodeGeneration",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CodeGeneration",
        "peekOfCode": "class ExtractPxdCode(VisitorTransform):\n    \"\"\"\n    Finds nodes in a pxd file that should generate code, and\n    returns them in a StatListNode.\n    The result is a tuple (StatListNode, ModuleScope), i.e.\n    everything that is needed from the pxd after it is processed.\n    A purer approach would be to separately compile the pxd code,\n    but the result would have to be slightly more sophisticated\n    than pure strings (functions + wanted interned strings +\n    wanted utility code + wanted cached objects) so for now this",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CodeGeneration",
        "documentation": {}
    },
    {
        "label": "CythonScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "class CythonScope(ModuleScope):\n    is_cython_builtin = 1\n    _cythonscope_initialized = False\n    def __init__(self, context):\n        ModuleScope.__init__(self, u'cython', None, None)\n        self.pxd_file_loaded = True\n        self.populate_cython_scope()\n        # The Main.Context object\n        self.context = context\n        for fused_type in (cy_integral_type, cy_floating_type, cy_numeric_type):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "create_cython_scope",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "def create_cython_scope(context):\n    # One could in fact probably make it a singleton,\n    # but not sure yet whether any code mutates it (which would kill reusing\n    # it across different contexts)\n    return CythonScope(context)\n# Load test utilities for the cython scope\ndef load_testscope_utility(cy_util_name, **kwargs):\n    return CythonUtilityCode.load(cy_util_name, \"TestCythonScope.pyx\", **kwargs)\nundecorated_methods_protos = UtilityCode(proto=u\"\"\"\n    /* These methods are undecorated and have therefore no prototype */",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "load_testscope_utility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "def load_testscope_utility(cy_util_name, **kwargs):\n    return CythonUtilityCode.load(cy_util_name, \"TestCythonScope.pyx\", **kwargs)\nundecorated_methods_protos = UtilityCode(proto=u\"\"\"\n    /* These methods are undecorated and have therefore no prototype */\n    static PyObject *__pyx_TestClass_cdef_method(\n            struct __pyx_TestClass_obj *self, int value);\n    static PyObject *__pyx_TestClass_cpdef_method(\n            struct __pyx_TestClass_obj *self, int value, int skip_dispatch);\n    static PyObject *__pyx_TestClass_def_method(\n            PyObject *self, PyObject *value);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "undecorated_methods_protos",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "undecorated_methods_protos = UtilityCode(proto=u\"\"\"\n    /* These methods are undecorated and have therefore no prototype */\n    static PyObject *__pyx_TestClass_cdef_method(\n            struct __pyx_TestClass_obj *self, int value);\n    static PyObject *__pyx_TestClass_cpdef_method(\n            struct __pyx_TestClass_obj *self, int value, int skip_dispatch);\n    static PyObject *__pyx_TestClass_def_method(\n            PyObject *self, PyObject *value);\n\"\"\")\ncython_testscope_utility_code = load_testscope_utility(\"TestScope\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "cython_testscope_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "cython_testscope_utility_code = load_testscope_utility(\"TestScope\")\ntest_cython_utility_dep = load_testscope_utility(\"TestDep\")\ncython_test_extclass_utility_code = \\\n    load_testscope_utility(\"TestClass\", name=\"TestClass\",\n                           requires=[undecorated_methods_protos,\n                                     test_cython_utility_dep])\ncythonview_testscope_utility_code = load_testscope_utility(\"View.TestScope\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "test_cython_utility_dep",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "test_cython_utility_dep = load_testscope_utility(\"TestDep\")\ncython_test_extclass_utility_code = \\\n    load_testscope_utility(\"TestClass\", name=\"TestClass\",\n                           requires=[undecorated_methods_protos,\n                                     test_cython_utility_dep])\ncythonview_testscope_utility_code = load_testscope_utility(\"View.TestScope\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "cython_test_extclass_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "cython_test_extclass_utility_code = \\\n    load_testscope_utility(\"TestClass\", name=\"TestClass\",\n                           requires=[undecorated_methods_protos,\n                                     test_cython_utility_dep])\ncythonview_testscope_utility_code = load_testscope_utility(\"View.TestScope\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "cythonview_testscope_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "cythonview_testscope_utility_code = load_testscope_utility(\"View.TestScope\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "debug_disposal_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_disposal_code = 0\ndebug_temp_alloc = 0\ndebug_coercion = 0\n# Write comments into the C code that show where temporary variables\n# are allocated and released.\ndebug_temp_code_comments = 0\n# Write a call trace of the code generation phase into the C code.\ndebug_trace_code_generation = 0\n# Do not replace exceptions with user-friendly error messages.\ndebug_no_exception_intercept = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "debug_temp_alloc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_temp_alloc = 0\ndebug_coercion = 0\n# Write comments into the C code that show where temporary variables\n# are allocated and released.\ndebug_temp_code_comments = 0\n# Write a call trace of the code generation phase into the C code.\ndebug_trace_code_generation = 0\n# Do not replace exceptions with user-friendly error messages.\ndebug_no_exception_intercept = 0\n# Print a message each time a new stage in the pipeline is entered.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "debug_coercion",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_coercion = 0\n# Write comments into the C code that show where temporary variables\n# are allocated and released.\ndebug_temp_code_comments = 0\n# Write a call trace of the code generation phase into the C code.\ndebug_trace_code_generation = 0\n# Do not replace exceptions with user-friendly error messages.\ndebug_no_exception_intercept = 0\n# Print a message each time a new stage in the pipeline is entered.\ndebug_verbose_pipeline = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "debug_temp_code_comments",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_temp_code_comments = 0\n# Write a call trace of the code generation phase into the C code.\ndebug_trace_code_generation = 0\n# Do not replace exceptions with user-friendly error messages.\ndebug_no_exception_intercept = 0\n# Print a message each time a new stage in the pipeline is entered.\ndebug_verbose_pipeline = 0\n# Raise an exception when an error is encountered.\ndebug_exception_on_error = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "debug_trace_code_generation",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_trace_code_generation = 0\n# Do not replace exceptions with user-friendly error messages.\ndebug_no_exception_intercept = 0\n# Print a message each time a new stage in the pipeline is entered.\ndebug_verbose_pipeline = 0\n# Raise an exception when an error is encountered.\ndebug_exception_on_error = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "debug_no_exception_intercept",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_no_exception_intercept = 0\n# Print a message each time a new stage in the pipeline is entered.\ndebug_verbose_pipeline = 0\n# Raise an exception when an error is encountered.\ndebug_exception_on_error = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "debug_verbose_pipeline",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_verbose_pipeline = 0\n# Raise an exception when an error is encountered.\ndebug_exception_on_error = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "debug_exception_on_error",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_exception_on_error = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "PyrexError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "class PyrexError(Exception):\n    pass\nclass PyrexWarning(Exception):\n    pass\ndef context(position):\n    source = position[0]\n    assert not (isinstance(source, any_string_type)), (\n        \"Please replace filename strings with Scanning.FileSourceDescriptor instances %r\" % source)\n    try:\n        F = source.get_lines()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "PyrexWarning",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "class PyrexWarning(Exception):\n    pass\ndef context(position):\n    source = position[0]\n    assert not (isinstance(source, any_string_type)), (\n        \"Please replace filename strings with Scanning.FileSourceDescriptor instances %r\" % source)\n    try:\n        F = source.get_lines()\n    except UnicodeDecodeError:\n        # file has an encoding problem",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "CompileError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "class CompileError(PyrexError):\n    def __init__(self, position = None, message = u\"\"):\n        self.position = position\n        self.message_only = message\n        self.formatted_message = format_error(message, position)\n        self.reported = False\n    # Deprecated and withdrawn in 2.6:\n    #   self.message = message\n        Exception.__init__(self, self.formatted_message)\n        # Python Exception subclass pickling is broken,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "CompileWarning",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "class CompileWarning(PyrexWarning):\n    def __init__(self, position = None, message = \"\"):\n        self.position = position\n    # Deprecated and withdrawn in 2.6:\n    #   self.message = message\n        Exception.__init__(self, format_position(position) + message)\nclass InternalError(Exception):\n    # If this is ever raised, there is a bug in the compiler.\n    def __init__(self, message):\n        self.message_only = message",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "InternalError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "class InternalError(Exception):\n    # If this is ever raised, there is a bug in the compiler.\n    def __init__(self, message):\n        self.message_only = message\n        Exception.__init__(self, u\"Internal compiler error: %s\"\n            % message)\nclass AbortError(Exception):\n    # Throw this to stop the compilation immediately.\n    def __init__(self, message):\n        self.message_only = message",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "AbortError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "class AbortError(Exception):\n    # Throw this to stop the compilation immediately.\n    def __init__(self, message):\n        self.message_only = message\n        Exception.__init__(self, u\"Abort error: %s\" % message)\nclass CompilerCrash(CompileError):\n    # raised when an unexpected exception occurs in a transform\n    def __init__(self, pos, context, message, cause, stacktrace=None):\n        if message:\n            message = u'\\n' + message",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "CompilerCrash",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "class CompilerCrash(CompileError):\n    # raised when an unexpected exception occurs in a transform\n    def __init__(self, pos, context, message, cause, stacktrace=None):\n        if message:\n            message = u'\\n' + message\n        else:\n            message = u'\\n'\n        self.message_only = message\n        if context:\n            message = u\"Compiler crash in %s%s\" % (context, message)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "NoElementTreeInstalledException",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "class NoElementTreeInstalledException(PyrexError):\n    \"\"\"raised when the user enabled options.gdb_debug but no ElementTree\n    implementation was found\n    \"\"\"\nlisting_file = None\nnum_errors = 0\necho_file = None\ndef open_listing_file(path, echo_to_stderr = 1):\n    # Begin a new error listing. If path is None, no file\n    # is opened, the error counter is just reset.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "context",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "def context(position):\n    source = position[0]\n    assert not (isinstance(source, any_string_type)), (\n        \"Please replace filename strings with Scanning.FileSourceDescriptor instances %r\" % source)\n    try:\n        F = source.get_lines()\n    except UnicodeDecodeError:\n        # file has an encoding problem\n        s = u\"[unprintable code]\\n\"\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "format_position",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "def format_position(position):\n    if position:\n        return u\"%s:%d:%d: \" % (position[0].get_error_description(),\n                                position[1], position[2])\n    return u''\ndef format_error(message, position):\n    if position:\n        pos_str = format_position(position)\n        cont = context(position)\n        message = u'\\nError compiling Cython file:\\n%s\\n%s%s' % (cont, pos_str, message or u'')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "format_error",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "def format_error(message, position):\n    if position:\n        pos_str = format_position(position)\n        cont = context(position)\n        message = u'\\nError compiling Cython file:\\n%s\\n%s%s' % (cont, pos_str, message or u'')\n    return message\nclass CompileError(PyrexError):\n    def __init__(self, position = None, message = u\"\"):\n        self.position = position\n        self.message_only = message",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "open_listing_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "def open_listing_file(path, echo_to_stderr = 1):\n    # Begin a new error listing. If path is None, no file\n    # is opened, the error counter is just reset.\n    global listing_file, num_errors, echo_file\n    if path is not None:\n        listing_file = open_new_file(path)\n    else:\n        listing_file = None\n    if echo_to_stderr:\n        echo_file = sys.stderr",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "close_listing_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "def close_listing_file():\n    global listing_file\n    if listing_file:\n        listing_file.close()\n        listing_file = None\ndef report_error(err, use_stack=True):\n    if error_stack and use_stack:\n        error_stack[-1].append(err)\n    else:\n        global num_errors",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "report_error",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "def report_error(err, use_stack=True):\n    if error_stack and use_stack:\n        error_stack[-1].append(err)\n    else:\n        global num_errors\n        # See Main.py for why dual reporting occurs. Quick fix for now.\n        if err.reported: return\n        err.reported = True\n        try: line = u\"%s\\n\" % err\n        except UnicodeEncodeError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "def error(position, message):\n    #print(\"Errors.error:\", repr(position), repr(message)) ###\n    if position is None:\n        raise InternalError(message)\n    err = CompileError(position, message)\n    if DebugFlags.debug_exception_on_error: raise Exception(err) # debug\n    report_error(err)\n    return err\nLEVEL = 1 # warn about all errors level 1 or higher\ndef message(position, message, level=1):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "def message(position, message, level=1):\n    if level < LEVEL:\n        return\n    warn = CompileWarning(position, message)\n    line = \"note: %s\\n\" % warn\n    if listing_file:\n        listing_file.write(line)\n    if echo_file:\n        echo_file.write(line)\n    return warn",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "warning",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "def warning(position, message, level=0):\n    if level < LEVEL:\n        return\n    if Options.warning_errors and position:\n        return error(position, message)\n    warn = CompileWarning(position, message)\n    line = \"warning: %s\\n\" % warn\n    if listing_file:\n        listing_file.write(line)\n    if echo_file:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "warn_once",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "def warn_once(position, message, level=0):\n    if level < LEVEL or message in _warn_once_seen:\n        return\n    warn = CompileWarning(position, message)\n    line = \"warning: %s\\n\" % warn\n    if listing_file:\n        listing_file.write(line)\n    if echo_file:\n        echo_file.write(line)\n    _warn_once_seen[message] = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "hold_errors",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "def hold_errors():\n    error_stack.append([])\ndef release_errors(ignore=False):\n    held_errors = error_stack.pop()\n    if not ignore:\n        for err in held_errors:\n            report_error(err)\ndef held_errors():\n    return error_stack[-1]\n# same as context manager:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "release_errors",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "def release_errors(ignore=False):\n    held_errors = error_stack.pop()\n    if not ignore:\n        for err in held_errors:\n            report_error(err)\ndef held_errors():\n    return error_stack[-1]\n# same as context manager:\n@contextmanager\ndef local_errors(ignore=False):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "held_errors",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "def held_errors():\n    return error_stack[-1]\n# same as context manager:\n@contextmanager\ndef local_errors(ignore=False):\n    errors = []\n    error_stack.append(errors)\n    try:\n        yield errors\n    finally:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "local_errors",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "def local_errors(ignore=False):\n    errors = []\n    error_stack.append(errors)\n    try:\n        yield errors\n    finally:\n        release_errors(ignore=ignore)\n# this module needs a redesign to support parallel cythonisation, but\n# for now, the following works at least in sequential compiler runs\ndef reset():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "reset",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "def reset():\n    _warn_once_seen.clear()\n    del error_stack[:]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "listing_file",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "listing_file = None\nnum_errors = 0\necho_file = None\ndef open_listing_file(path, echo_to_stderr = 1):\n    # Begin a new error listing. If path is None, no file\n    # is opened, the error counter is just reset.\n    global listing_file, num_errors, echo_file\n    if path is not None:\n        listing_file = open_new_file(path)\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "num_errors",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "num_errors = 0\necho_file = None\ndef open_listing_file(path, echo_to_stderr = 1):\n    # Begin a new error listing. If path is None, no file\n    # is opened, the error counter is just reset.\n    global listing_file, num_errors, echo_file\n    if path is not None:\n        listing_file = open_new_file(path)\n    else:\n        listing_file = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "echo_file",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "echo_file = None\ndef open_listing_file(path, echo_to_stderr = 1):\n    # Begin a new error listing. If path is None, no file\n    # is opened, the error counter is just reset.\n    global listing_file, num_errors, echo_file\n    if path is not None:\n        listing_file = open_new_file(path)\n    else:\n        listing_file = None\n    if echo_to_stderr:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "LEVEL",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "LEVEL = 1 # warn about all errors level 1 or higher\ndef message(position, message, level=1):\n    if level < LEVEL:\n        return\n    warn = CompileWarning(position, message)\n    line = \"note: %s\\n\" % warn\n    if listing_file:\n        listing_file.write(line)\n    if echo_file:\n        echo_file.write(line)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "_warn_once_seen",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "_warn_once_seen = {}\ndef warn_once(position, message, level=0):\n    if level < LEVEL or message in _warn_once_seen:\n        return\n    warn = CompileWarning(position, message)\n    line = \"warning: %s\\n\" % warn\n    if listing_file:\n        listing_file.write(line)\n    if echo_file:\n        echo_file.write(line)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "error_stack",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "peekOfCode": "error_stack = []\ndef hold_errors():\n    error_stack.append([])\ndef release_errors(ignore=False):\n    held_errors = error_stack.pop()\n    if not ignore:\n        for err in held_errors:\n            report_error(err)\ndef held_errors():\n    return error_stack[-1]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "NotConstant",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NotConstant(object):\n    _obj = None\n    def __new__(cls):\n        if NotConstant._obj is None:\n            NotConstant._obj = super(NotConstant, cls).__new__(cls)\n        return NotConstant._obj\n    def __repr__(self):\n        return \"<NOT CONSTANT>\"\nnot_a_constant = NotConstant()\nconstant_value_not_set = object()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ExprNode(Node):\n    #  subexprs     [string]     Class var holding names of subexpr node attrs\n    #  type         PyrexType    Type of the result\n    #  result_code  string       Code fragment\n    #  result_ctype string       C type of result_code if different from type\n    #  is_temp      boolean      Result is in a temporary variable\n    #  is_sequence_constructor\n    #               boolean      Is a list or tuple constructor expression\n    #  is_starred   boolean      Is a starred expression (e.g. '*a')\n    #  saved_subexpr_nodes",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AtomicExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AtomicExprNode(ExprNode):\n    #  Abstract base class for expression nodes which have\n    #  no sub-expressions.\n    subexprs = []\n    # Override to optimize -- we know we have no children\n    def generate_subexpr_evaluation_code(self, code):\n        pass\n    def generate_subexpr_disposal_code(self, code):\n        pass\nclass PyConstNode(AtomicExprNode):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyConstNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyConstNode(AtomicExprNode):\n    #  Abstract base class for constant Python values.\n    is_literal = 1\n    type = py_object_type\n    def is_simple(self):\n        return 1\n    def may_be_none(self):\n        return False\n    def analyse_types(self, env):\n        return self",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NoneNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NoneNode(PyConstNode):\n    #  The constant value None\n    is_none = 1\n    value = \"Py_None\"\n    constant_result = None\n    nogil_check = None\n    def compile_time_value(self, denv):\n        return None\n    def may_be_none(self):\n        return True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "EllipsisNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class EllipsisNode(PyConstNode):\n    #  '...' in a subscript list.\n    value = \"Py_Ellipsis\"\n    constant_result = Ellipsis\n    def compile_time_value(self, denv):\n        return Ellipsis\nclass ConstNode(AtomicExprNode):\n    # Abstract base type for literal constant nodes.\n    #\n    # value     string      C code fragment",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ConstNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ConstNode(AtomicExprNode):\n    # Abstract base type for literal constant nodes.\n    #\n    # value     string      C code fragment\n    is_literal = 1\n    nogil_check = None\n    def is_simple(self):\n        return 1\n    def nonlocally_immutable(self):\n        return 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "BoolNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class BoolNode(ConstNode):\n    type = PyrexTypes.c_bint_type\n    #  The constant value True or False\n    def calculate_constant_result(self):\n        self.constant_result = self.value\n    def compile_time_value(self, denv):\n        return self.value\n    def calculate_result_code(self):\n        if self.type.is_pyobject:\n            return self.value and 'Py_True' or 'Py_False'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NullNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NullNode(ConstNode):\n    type = PyrexTypes.c_null_ptr_type\n    value = \"NULL\"\n    constant_result = 0\n    def get_constant_c_result_code(self):\n        return self.value\nclass CharNode(ConstNode):\n    type = PyrexTypes.c_char_type\n    def calculate_constant_result(self):\n        self.constant_result = ord(self.value)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CharNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CharNode(ConstNode):\n    type = PyrexTypes.c_char_type\n    def calculate_constant_result(self):\n        self.constant_result = ord(self.value)\n    def compile_time_value(self, denv):\n        return ord(self.value)\n    def calculate_result_code(self):\n        return \"'%s'\" % StringEncoding.escape_char(self.value)\nclass IntNode(ConstNode):\n    # unsigned     \"\" or \"U\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "IntNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class IntNode(ConstNode):\n    # unsigned     \"\" or \"U\"\n    # longness     \"\" or \"L\" or \"LL\"\n    # is_c_literal   True/False/None   creator considers this a C integer literal\n    unsigned = \"\"\n    longness = \"\"\n    is_c_literal = None # unknown\n    def __init__(self, pos, **kwds):\n        ExprNode.__init__(self, pos, **kwds)\n        if 'type' not in kwds:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "FloatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class FloatNode(ConstNode):\n    type = PyrexTypes.c_double_type\n    def calculate_constant_result(self):\n        self.constant_result = float(self.value)\n    def compile_time_value(self, denv):\n        return float(self.value)\n    def coerce_to(self, dst_type, env):\n        if dst_type.is_pyobject and self.type.is_float:\n            return FloatNode(\n                self.pos, value=self.value,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "BytesNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class BytesNode(ConstNode):\n    # A char* or bytes literal\n    #\n    # value      BytesLiteral\n    is_string_literal = True\n    # start off as Python 'bytes' to support len() in O(1)\n    type = bytes_type\n    def calculate_constant_result(self):\n        self.constant_result = self.value\n    def as_sliced_node(self, start, stop, step=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "UnicodeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class UnicodeNode(ConstNode):\n    # A Py_UNICODE* or unicode literal\n    #\n    # value        EncodedString\n    # bytes_value  BytesLiteral    the literal parsed as bytes string\n    #                              ('-3' unicode literals only)\n    is_string_literal = True\n    bytes_value = None\n    type = unicode_type\n    def calculate_constant_result(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "StringNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class StringNode(PyConstNode):\n    # A Python str object, i.e. a byte string in Python 2.x and a\n    # unicode string in Python 3.x\n    #\n    # value          BytesLiteral (or EncodedString with ASCII content)\n    # unicode_value  EncodedString or None\n    # is_identifier  boolean\n    type = str_type\n    is_string_literal = True\n    is_identifier = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "IdentifierStringNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class IdentifierStringNode(StringNode):\n    # A special str value that represents an identifier (bytes in Py2,\n    # unicode in Py3).\n    is_identifier = True\nclass ImagNode(AtomicExprNode):\n    #  Imaginary number literal\n    #\n    #  value   string    imaginary part (float value)\n    type = PyrexTypes.c_double_complex_type\n    def calculate_constant_result(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ImagNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ImagNode(AtomicExprNode):\n    #  Imaginary number literal\n    #\n    #  value   string    imaginary part (float value)\n    type = PyrexTypes.c_double_complex_type\n    def calculate_constant_result(self):\n        self.constant_result = complex(0.0, float(self.value))\n    def compile_time_value(self, denv):\n        return complex(0.0, float(self.value))\n    def analyse_types(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NewExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NewExprNode(AtomicExprNode):\n    # C++ new statement\n    #\n    # cppclass              node                 c++ class to create\n    type = None\n    def infer_type(self, env):\n        type = self.cppclass.analyse_as_type(env)\n        if type is None or not type.is_cpp_class:\n            error(self.pos, \"new operator can only be applied to a C++ class\")\n            self.type = error_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NameNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NameNode(AtomicExprNode):\n    #  Reference to a local or global variable name.\n    #\n    #  name            string    Python name of the variable\n    #  entry           Entry     Symbol table entry\n    #  type_entry      Entry     For extension type names, the original type entry\n    #  cf_is_null      boolean   Is uninitialized before this node\n    #  cf_maybe_null   boolean   Maybe uninitialized before this node\n    #  allow_null      boolean   Don't raise UnboundLocalError\n    #  nogil           boolean   Whether it is used in a nogil context",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "BackquoteNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class BackquoteNode(ExprNode):\n    #  `expr`\n    #\n    #  arg    ExprNode\n    type = py_object_type\n    subexprs = ['arg']\n    def analyse_types(self, env):\n        self.arg = self.arg.analyse_types(env)\n        self.arg = self.arg.coerce_to_pyobject(env)\n        self.is_temp = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ImportNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ImportNode(ExprNode):\n    #  Used as part of import statement implementation.\n    #  Implements result =\n    #    __import__(module_name, globals(), None, name_list, level)\n    #\n    #  module_name   StringNode            dotted name of module. Empty module\n    #                       name means importing the parent package according\n    #                       to level\n    #  name_list     ListNode or None      list of names to be imported\n    #  level         int                   relative import level:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "IteratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class IteratorNode(ExprNode):\n    #  Used as part of for statement implementation.\n    #\n    #  Implements result = iter(sequence)\n    #\n    #  sequence   ExprNode\n    type = py_object_type\n    iter_func_ptr = None\n    counter_cname = None\n    cpp_iterator_cname = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NextNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NextNode(AtomicExprNode):\n    #  Used as part of for statement implementation.\n    #  Implements result = next(iterator)\n    #  Created during analyse_types phase.\n    #  The iterator is not owned by this node.\n    #\n    #  iterator   IteratorNode\n    def __init__(self, iterator):\n        AtomicExprNode.__init__(self, iterator.pos)\n        self.iterator = iterator",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AsyncIteratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AsyncIteratorNode(ExprNode):\n    #  Used as part of 'async for' statement implementation.\n    #\n    #  Implements result = sequence.__aiter__()\n    #\n    #  sequence   ExprNode\n    subexprs = ['sequence']\n    is_async = True\n    type = py_object_type\n    is_temp = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AsyncNextNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AsyncNextNode(AtomicExprNode):\n    #  Used as part of 'async for' statement implementation.\n    #  Implements result = iterator.__anext__()\n    #  Created during analyse_types phase.\n    #  The iterator is not owned by this node.\n    #\n    #  iterator   IteratorNode\n    type = py_object_type\n    is_temp = 1\n    def __init__(self, iterator):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "WithExitCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class WithExitCallNode(ExprNode):\n    # The __exit__() call of a 'with' statement.  Used in both the\n    # except and finally clauses.\n    # with_stat   WithStatNode                the surrounding 'with' statement\n    # args        TupleNode or ResultStatNode the exception info tuple\n    # await_expr  AwaitExprNode               the await expression of an 'async with' statement\n    subexprs = ['args', 'await_expr']\n    test_if_run = True\n    await_expr = None\n    def analyse_types(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ExcValueNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ExcValueNode(AtomicExprNode):\n    #  Node created during analyse_types phase\n    #  of an ExceptClauseNode to fetch the current\n    #  exception value.\n    type = py_object_type\n    def __init__(self, pos):\n        ExprNode.__init__(self, pos)\n    def set_var(self, var):\n        self.var = var\n    def calculate_result_code(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "TempNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class TempNode(ExprNode):\n    # Node created during analyse_types phase\n    # of some nodes to hold a temporary value.\n    #\n    # Note: One must call \"allocate\" and \"release\" on\n    # the node during code generation to get/release the temp.\n    # This is because the temp result is often used outside of\n    # the regular cycle.\n    subexprs = []\n    def __init__(self, pos, type, env=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyTempNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyTempNode(TempNode):\n    #  TempNode holding a Python value.\n    def __init__(self, pos, env):\n        TempNode.__init__(self, pos, PyrexTypes.py_object_type, env)\nclass RawCNameExprNode(ExprNode):\n    subexprs = []\n    def __init__(self, pos, type=None, cname=None):\n        ExprNode.__init__(self, pos, type=type)\n        if cname is not None:\n            self.cname = cname",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "RawCNameExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class RawCNameExprNode(ExprNode):\n    subexprs = []\n    def __init__(self, pos, type=None, cname=None):\n        ExprNode.__init__(self, pos, type=type)\n        if cname is not None:\n            self.cname = cname\n    def analyse_types(self, env):\n        return self\n    def set_cname(self, cname):\n        self.cname = cname",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "JoinedStrNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class JoinedStrNode(ExprNode):\n    # F-strings\n    #\n    # values   [UnicodeNode|FormattedValueNode]   Substrings of the f-string\n    #\n    type = unicode_type\n    is_temp = True\n    subexprs = ['values']\n    def analyse_types(self, env):\n        self.values = [v.analyse_types(env).coerce_to_pyobject(env) for v in self.values]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "FormattedValueNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class FormattedValueNode(ExprNode):\n    # {}-delimited portions of an f-string\n    #\n    # value           ExprNode                The expression itself\n    # conversion_char str or None             Type conversion (!s, !r, !a, or none, or 'd' for integer conversion)\n    # format_spec     JoinedStrNode or None   Format string passed to __format__\n    # c_format_spec   str or None             If not None, formatting can be done at the C level\n    subexprs = ['value', 'format_spec']\n    type = unicode_type\n    is_temp = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ParallelThreadsAvailableNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ParallelThreadsAvailableNode(AtomicExprNode):\n    \"\"\"\n    Note: this is disabled and not a valid directive at this moment\n    Implements cython.parallel.threadsavailable(). If we are called from the\n    sequential part of the application, we need to call omp_get_max_threads(),\n    and in the parallel part we can just call omp_get_num_threads()\n    \"\"\"\n    type = PyrexTypes.c_int_type\n    def analyse_types(self, env):\n        self.is_temp = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ParallelThreadIdNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ParallelThreadIdNode(AtomicExprNode): #, Nodes.ParallelNode):\n    \"\"\"\n    Implements cython.parallel.threadid()\n    \"\"\"\n    type = PyrexTypes.c_int_type\n    def analyse_types(self, env):\n        self.is_temp = True\n        # env.add_include_file(\"omp.h\")\n        return self\n    def generate_result_code(self, code):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "_IndexingBaseNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class _IndexingBaseNode(ExprNode):\n    # Base class for indexing nodes.\n    #\n    # base   ExprNode   the value being indexed\n    def is_ephemeral(self):\n        # in most cases, indexing will return a safe reference to an object in a container,\n        # so we consider the result safe if the base object is\n        return self.base.is_ephemeral() or self.base.type in (\n            basestring_type, str_type, bytes_type, bytearray_type, unicode_type)\n    def check_const_addr(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "IndexNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class IndexNode(_IndexingBaseNode):\n    #  Sequence indexing.\n    #\n    #  base     ExprNode\n    #  index    ExprNode\n    #  type_indices  [PyrexType]\n    #\n    #  is_fused_index boolean   Whether the index is used to specialize a\n    #                           c(p)def function\n    subexprs = ['base', 'index']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "BufferIndexNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class BufferIndexNode(_IndexingBaseNode):\n    \"\"\"\n    Indexing of buffers and memoryviews. This node is created during type\n    analysis from IndexNode and replaces it.\n    Attributes:\n        base - base node being indexed\n        indices - list of indexing expressions\n    \"\"\"\n    subexprs = ['base', 'indices']\n    is_buffer_access = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MemoryViewIndexNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MemoryViewIndexNode(BufferIndexNode):\n    is_memview_index = True\n    is_buffer_access = False\n    warned_untyped_idx = False\n    def analyse_types(self, env, getting=True):\n        # memoryviewslice indexing or slicing\n        from . import MemoryView\n        self.is_pythran_mode = has_np_pythran(env)\n        indices = self.indices\n        have_slices, indices, newaxes = MemoryView.unellipsify(indices, self.base.type.ndim)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MemoryViewSliceNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MemoryViewSliceNode(MemoryViewIndexNode):\n    is_memview_slice = True\n    # No-op slicing operation, this node will be replaced\n    is_ellipsis_noop = False\n    is_memview_scalar_assignment = False\n    is_memview_index = False\n    is_memview_broadcast = False\n    def analyse_ellipsis_noop(self, env, getting):\n        \"\"\"Slicing operations needing no evaluation, i.e. m[...] or m[:, :]\"\"\"\n        ### FIXME: replace directly",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MemoryCopyNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MemoryCopyNode(ExprNode):\n    \"\"\"\n    Wraps a memoryview slice for slice assignment.\n        dst: destination mememoryview slice\n    \"\"\"\n    subexprs = ['dst']\n    def __init__(self, pos, dst):\n        super(MemoryCopyNode, self).__init__(pos)\n        self.dst = dst\n        self.type = dst.type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MemoryCopySlice",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MemoryCopySlice(MemoryCopyNode):\n    \"\"\"\n    Copy the contents of slice src to slice dst. Does not support indirect\n    slices.\n        memslice1[...] = memslice2\n        memslice1[:] = memslice2\n    \"\"\"\n    is_memview_copy_assignment = True\n    copy_slice_cname = \"__pyx_memoryview_copy_contents\"\n    def _generate_assignment_code(self, src, code):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MemoryCopyScalar",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MemoryCopyScalar(MemoryCopyNode):\n    \"\"\"\n    Assign a scalar to a slice. dst must be simple, scalar will be assigned\n    to a correct type and not just something assignable.\n        memslice1[...] = 0.0\n        memslice1[:] = 0.0\n    \"\"\"\n    def __init__(self, pos, dst):\n        super(MemoryCopyScalar, self).__init__(pos, dst)\n        self.type = dst.type.dtype",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SliceIndexNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SliceIndexNode(ExprNode):\n    #  2-element slice indexing\n    #\n    #  base      ExprNode\n    #  start     ExprNode or None\n    #  stop      ExprNode or None\n    #  slice     ExprNode or None   constant slice object\n    subexprs = ['base', 'start', 'stop', 'slice']\n    slice = None\n    def infer_type(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SliceNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SliceNode(ExprNode):\n    #  start:stop:step in subscript list\n    #\n    #  start     ExprNode\n    #  stop      ExprNode\n    #  step      ExprNode\n    subexprs = ['start', 'stop', 'step']\n    is_slice = True\n    type = slice_type\n    is_temp = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SliceIntNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SliceIntNode(SliceNode):\n    #  start:stop:step in subscript list\n    # This is just a node to hold start,stop and step nodes that can be\n    # converted to integers. This does not generate a slice python object.\n    #\n    #  start     ExprNode\n    #  stop      ExprNode\n    #  step      ExprNode\n    is_temp = 0\n    def calculate_constant_result(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CallNode(ExprNode):\n    # allow overriding the default 'may_be_none' behaviour\n    may_return_none = None\n    def infer_type(self, env):\n        # TODO(robertwb): Reduce redundancy with analyse_types.\n        function = self.function\n        func_type = function.infer_type(env)\n        if isinstance(function, NewExprNode):\n            # note: needs call to infer_type() above\n            return PyrexTypes.CPtrType(function.class_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SimpleCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SimpleCallNode(CallNode):\n    #  Function call without keyword, * or ** args.\n    #\n    #  function       ExprNode\n    #  args           [ExprNode]\n    #  arg_tuple      ExprNode or None     used internally\n    #  self           ExprNode or None     used internally\n    #  coerced_self   ExprNode or None     used internally\n    #  wrapper_call   bool                 used internally\n    #  has_optional_args   bool            used internally",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NumPyMethodCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NumPyMethodCallNode(ExprNode):\n    # Pythran call to a NumPy function or method.\n    #\n    # function_cname  string      the function/method to call\n    # arg_tuple       TupleNode   the arguments as an args tuple\n    subexprs = ['arg_tuple']\n    is_temp = True\n    may_return_none = True\n    def generate_evaluation_code(self, code):\n        code.mark_pos(self.pos)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyMethodCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyMethodCallNode(SimpleCallNode):\n    # Specialised call to a (potential) PyMethodObject with non-constant argument tuple.\n    # Allows the self argument to be injected directly instead of repacking a tuple for it.\n    #\n    # function    ExprNode      the function/method object to call\n    # arg_tuple   TupleNode     the arguments for the args tuple\n    subexprs = ['function', 'arg_tuple']\n    is_temp = True\n    def generate_evaluation_code(self, code):\n        code.mark_pos(self.pos)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "InlinedDefNodeCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class InlinedDefNodeCallNode(CallNode):\n    #  Inline call to defnode\n    #\n    #  function       PyCFunctionNode\n    #  function_name  NameNode\n    #  args           [ExprNode]\n    subexprs = ['args', 'function_name']\n    is_temp = 1\n    type = py_object_type\n    function = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PythonCapiFunctionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PythonCapiFunctionNode(ExprNode):\n    subexprs = []\n    def __init__(self, pos, py_name, cname, func_type, utility_code = None):\n        ExprNode.__init__(self, pos, name=py_name, cname=cname,\n                          type=func_type, utility_code=utility_code)\n    def analyse_types(self, env):\n        return self\n    def generate_result_code(self, code):\n        if self.utility_code:\n            code.globalstate.use_utility_code(self.utility_code)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PythonCapiCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PythonCapiCallNode(SimpleCallNode):\n    # Python C-API Function call (only created in transforms)\n    # By default, we assume that the call never returns None, as this\n    # is true for most C-API functions in CPython.  If this does not\n    # apply to a call, set the following to True (or None to inherit\n    # the default behaviour).\n    may_return_none = False\n    def __init__(self, pos, function_name, func_type,\n                 utility_code = None, py_name=None, **kwargs):\n        self.type = func_type.return_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CachedBuiltinMethodCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CachedBuiltinMethodCallNode(CallNode):\n    # Python call to a method of a known Python builtin (only created in transforms)\n    subexprs = ['obj', 'args']\n    is_temp = True\n    def __init__(self, call_node, obj, method_name, args):\n        super(CachedBuiltinMethodCallNode, self).__init__(\n            call_node.pos,\n            obj=obj, method_name=method_name, args=args,\n            may_return_none=call_node.may_return_none,\n            type=call_node.type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "GeneralCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class GeneralCallNode(CallNode):\n    #  General Python function call, including keyword,\n    #  * and ** arguments.\n    #\n    #  function         ExprNode\n    #  positional_args  ExprNode          Tuple of positional arguments\n    #  keyword_args     ExprNode or None  Dict of keyword arguments\n    type = py_object_type\n    subexprs = ['function', 'positional_args', 'keyword_args']\n    nogil_check = Node.gil_error",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AsTupleNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AsTupleNode(ExprNode):\n    #  Convert argument to tuple. Used for normalising\n    #  the * argument of a function call.\n    #\n    #  arg    ExprNode\n    subexprs = ['arg']\n    is_temp = 1\n    def calculate_constant_result(self):\n        self.constant_result = tuple(self.arg.constant_result)\n    def compile_time_value(self, denv):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MergedDictNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MergedDictNode(ExprNode):\n    #  Helper class for keyword arguments and other merged dicts.\n    #\n    #  keyword_args      [DictNode or other ExprNode]\n    subexprs = ['keyword_args']\n    is_temp = 1\n    type = dict_type\n    reject_duplicates = True\n    def calculate_constant_result(self):\n        result = {}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AttributeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AttributeNode(ExprNode):\n    #  obj.attribute\n    #\n    #  obj          ExprNode\n    #  attribute    string\n    #  needs_none_check boolean        Used if obj is an extension type.\n    #                                  If set to True, it is known that the type is not None.\n    #\n    #  Used internally:\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "StarredUnpackingNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class StarredUnpackingNode(ExprNode):\n    #  A starred expression like \"*a\"\n    #\n    #  This is only allowed in sequence assignment or construction such as\n    #\n    #      a, *b = (1,2,3,4)    =>     a = 1 ; b = [2,3,4]\n    #\n    #  and will be special cased during type analysis (or generate an error\n    #  if it's found at unexpected places).\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SequenceNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SequenceNode(ExprNode):\n    #  Base class for list and tuple constructor nodes.\n    #  Contains common code for performing sequence unpacking.\n    #\n    #  args                    [ExprNode]\n    #  unpacked_items          [ExprNode] or None\n    #  coerced_unpacked_items  [ExprNode] or None\n    # mult_factor              ExprNode     the integer number of content repetitions ([1,2]*3)\n    subexprs = ['args', 'mult_factor']\n    is_sequence_constructor = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "TupleNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class TupleNode(SequenceNode):\n    #  Tuple constructor.\n    type = tuple_type\n    is_partly_literal = False\n    gil_message = \"Constructing Python tuple\"\n    def infer_type(self, env):\n        if self.mult_factor or not self.args:\n            return tuple_type\n        arg_types = [arg.infer_type(env) for arg in self.args]\n        if any(type.is_pyobject or type.is_memoryviewslice or type.is_unspecified or type.is_fused",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ListNode(SequenceNode):\n    #  List constructor.\n    # obj_conversion_errors    [PyrexError]   used internally\n    # orignial_args            [ExprNode]     used internally\n    obj_conversion_errors = []\n    type = list_type\n    in_module_scope = False\n    gil_message = \"Constructing Python list\"\n    def type_dependencies(self, env):\n        return ()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ScopedExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ScopedExprNode(ExprNode):\n    # Abstract base class for ExprNodes that have their own local\n    # scope, such as generator expressions.\n    #\n    # expr_scope    Scope  the inner scope of the expression\n    subexprs = []\n    expr_scope = None\n    # does this node really have a local scope, e.g. does it leak loop\n    # variables or not?  non-leaking Py3 behaviour is default, except\n    # for list comprehensions where the behaviour differs in Py2 and",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ComprehensionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ComprehensionNode(ScopedExprNode):\n    # A list/set/dict comprehension\n    child_attrs = [\"loop\"]\n    is_temp = True\n    constant_result = not_a_constant\n    def infer_type(self, env):\n        return self.type\n    def analyse_declarations(self, env):\n        self.append.target = self # this is used in the PyList_Append of the inner loop\n        self.init_scope(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ComprehensionAppendNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ComprehensionAppendNode(Node):\n    # Need to be careful to avoid infinite recursion:\n    # target must not be in child_attrs/subexprs\n    child_attrs = ['expr']\n    target = None\n    type = PyrexTypes.c_int_type\n    def analyse_expressions(self, env):\n        self.expr = self.expr.analyse_expressions(env)\n        if not self.expr.type.is_pyobject:\n            self.expr = self.expr.coerce_to_pyobject(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DictComprehensionAppendNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DictComprehensionAppendNode(ComprehensionAppendNode):\n    child_attrs = ['key_expr', 'value_expr']\n    def analyse_expressions(self, env):\n        self.key_expr = self.key_expr.analyse_expressions(env)\n        if not self.key_expr.type.is_pyobject:\n            self.key_expr = self.key_expr.coerce_to_pyobject(env)\n        self.value_expr = self.value_expr.analyse_expressions(env)\n        if not self.value_expr.type.is_pyobject:\n            self.value_expr = self.value_expr.coerce_to_pyobject(env)\n        return self",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "InlinedGeneratorExpressionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class InlinedGeneratorExpressionNode(ExprNode):\n    # An inlined generator expression for which the result is calculated\n    # inside of the loop and returned as a single, first and only Generator\n    # return value.\n    # This will only be created by transforms when replacing safe builtin\n    # calls on generator expressions.\n    #\n    # gen            GeneratorExpressionNode      the generator, not containing any YieldExprNodes\n    # orig_func      String                       the name of the builtin function this node replaces\n    # target         ExprNode or None             a 'target' for a ComprehensionAppend node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MergedSequenceNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MergedSequenceNode(ExprNode):\n    \"\"\"\n    Merge a sequence of iterables into a set/list/tuple.\n    The target collection is determined by self.type, which must be set externally.\n    args    [ExprNode]\n    \"\"\"\n    subexprs = ['args']\n    is_temp = True\n    gil_message = \"Constructing Python collection\"\n    def __init__(self, pos, args, type):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SetNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SetNode(ExprNode):\n    \"\"\"\n    Set constructor.\n    \"\"\"\n    subexprs = ['args']\n    type = set_type\n    is_set_literal = True\n    gil_message = \"Constructing Python set\"\n    def analyse_types(self, env):\n        for i in range(len(self.args)):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DictNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DictNode(ExprNode):\n    #  Dictionary constructor.\n    #\n    #  key_value_pairs     [DictItemNode]\n    #  exclude_null_values [boolean]          Do not add NULL values to dict\n    #\n    # obj_conversion_errors    [PyrexError]   used internally\n    subexprs = ['key_value_pairs']\n    is_temp = 1\n    exclude_null_values = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DictItemNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DictItemNode(ExprNode):\n    # Represents a single item in a DictNode\n    #\n    # key          ExprNode\n    # value        ExprNode\n    subexprs = ['key', 'value']\n    nogil_check = None # Parent DictNode takes care of it\n    def calculate_constant_result(self):\n        self.constant_result = (\n            self.key.constant_result, self.value.constant_result)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SortedDictKeysNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SortedDictKeysNode(ExprNode):\n    # build sorted list of dict keys, e.g. for dir()\n    subexprs = ['arg']\n    is_temp = True\n    def __init__(self, arg):\n        ExprNode.__init__(self, arg.pos, arg=arg)\n        self.type = Builtin.list_type\n    def analyse_types(self, env):\n        arg = self.arg.analyse_types(env)\n        if arg.type is Builtin.dict_type:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ModuleNameMixin",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ModuleNameMixin(object):\n    def get_py_mod_name(self, code):\n        return code.get_py_string_const(\n            self.module_name, identifier=True)\n    def get_py_qualified_name(self, code):\n        return code.get_py_string_const(\n            self.qualname, identifier=True)\nclass ClassNode(ExprNode, ModuleNameMixin):\n    #  Helper class used in the implementation of Python\n    #  class definitions. Constructs a class object given",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ClassNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ClassNode(ExprNode, ModuleNameMixin):\n    #  Helper class used in the implementation of Python\n    #  class definitions. Constructs a class object given\n    #  a name, tuple of bases and class dictionary.\n    #\n    #  name         EncodedString      Name of the class\n    #  class_def_node  PyClassDefNode  PyClassDefNode defining this class\n    #  doc          ExprNode or None   Doc string\n    #  module_name  EncodedString      Name of defining module\n    subexprs = ['doc']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "Py3ClassNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class Py3ClassNode(ExprNode):\n    #  Helper class used in the implementation of Python3+\n    #  class definitions. Constructs a class object given\n    #  a name, tuple of bases and class dictionary.\n    #\n    #  name         EncodedString      Name of the class\n    #  module_name  EncodedString      Name of defining module\n    #  class_def_node  PyClassDefNode  PyClassDefNode defining this class\n    #  calculate_metaclass  bool       should call CalculateMetaclass()\n    #  allow_py2_metaclass  bool       should look for Py2 metaclass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyClassMetaclassNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyClassMetaclassNode(ExprNode):\n    # Helper class holds Python3 metaclass object\n    #\n    #  class_def_node  PyClassDefNode  PyClassDefNode defining this class\n    subexprs = []\n    def analyse_types(self, env):\n        self.type = py_object_type\n        self.is_temp = True\n        return self\n    def may_be_none(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyClassNamespaceNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyClassNamespaceNode(ExprNode, ModuleNameMixin):\n    # Helper class holds Python3 namespace object\n    #\n    # All this are not owned by this node\n    #  class_def_node  PyClassDefNode  PyClassDefNode defining this class\n    #  doc          ExprNode or None   Doc string (owned)\n    subexprs = ['doc']\n    def analyse_types(self, env):\n        if self.doc:\n            self.doc = self.doc.analyse_types(env).coerce_to_pyobject(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ClassCellInjectorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ClassCellInjectorNode(ExprNode):\n    # Initialize CyFunction.func_classobj\n    is_temp = True\n    type = py_object_type\n    subexprs = []\n    is_active = False\n    def analyse_expressions(self, env):\n        return self\n    def generate_result_code(self, code):\n        assert self.is_active",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ClassCellNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ClassCellNode(ExprNode):\n    # Class Cell for noargs super()\n    subexprs = []\n    is_temp = True\n    is_generator = False\n    type = py_object_type\n    def analyse_types(self, env):\n        return self\n    def generate_result_code(self, code):\n        if not self.is_generator:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyCFunctionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyCFunctionNode(ExprNode, ModuleNameMixin):\n    #  Helper class used in the implementation of Python\n    #  functions.  Constructs a PyCFunction object\n    #  from a PyMethodDef struct.\n    #\n    #  pymethdef_cname   string             PyMethodDef structure\n    #  self_object       ExprNode or None\n    #  binding           bool\n    #  def_node          DefNode            the Python function node\n    #  module_name       EncodedString      Name of defining module",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "InnerFunctionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class InnerFunctionNode(PyCFunctionNode):\n    # Special PyCFunctionNode that depends on a closure class\n    #\n    binding = True\n    needs_self_code = True\n    def self_result_code(self):\n        if self.needs_self_code:\n            return \"((PyObject*)%s)\" % Naming.cur_scope_cname\n        return \"NULL\"\nclass CodeObjectNode(ExprNode):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CodeObjectNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CodeObjectNode(ExprNode):\n    # Create a PyCodeObject for a CyFunction instance.\n    #\n    # def_node   DefNode    the Python function node\n    # varnames   TupleNode  a tuple with all local variable names\n    subexprs = ['varnames']\n    is_temp = False\n    result_code = None\n    def __init__(self, def_node):\n        ExprNode.__init__(self, def_node.pos, def_node=def_node)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DefaultLiteralArgNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DefaultLiteralArgNode(ExprNode):\n    # CyFunction's literal argument default value\n    #\n    # Evaluate literal only once.\n    subexprs = []\n    is_literal = True\n    is_temp = False\n    def __init__(self, pos, arg):\n        super(DefaultLiteralArgNode, self).__init__(pos)\n        self.arg = arg",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DefaultNonLiteralArgNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DefaultNonLiteralArgNode(ExprNode):\n    # CyFunction's non-literal argument default value\n    subexprs = []\n    def __init__(self, pos, arg, defaults_struct):\n        super(DefaultNonLiteralArgNode, self).__init__(pos)\n        self.arg = arg\n        self.defaults_struct = defaults_struct\n    def analyse_types(self, env):\n        self.type = self.arg.type\n        self.is_temp = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DefaultsTupleNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DefaultsTupleNode(TupleNode):\n    # CyFunction's __defaults__ tuple\n    def __init__(self, pos, defaults, defaults_struct):\n        args = []\n        for arg in defaults:\n            if not arg.default.is_literal:\n                arg = DefaultNonLiteralArgNode(pos, arg, defaults_struct)\n            else:\n                arg = arg.default\n            args.append(arg)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DefaultsKwDictNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DefaultsKwDictNode(DictNode):\n    # CyFunction's __kwdefaults__ dict\n    def __init__(self, pos, defaults, defaults_struct):\n        items = []\n        for arg in defaults:\n            name = IdentifierStringNode(arg.pos, value=arg.name)\n            if not arg.default.is_literal:\n                arg = DefaultNonLiteralArgNode(pos, arg, defaults_struct)\n            else:\n                arg = arg.default",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "LambdaNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class LambdaNode(InnerFunctionNode):\n    # Lambda expression node (only used as a function reference)\n    #\n    # args          [CArgDeclNode]         formal arguments\n    # star_arg      PyArgDeclNode or None  * argument\n    # starstar_arg  PyArgDeclNode or None  ** argument\n    # lambda_name   string                 a module-globally unique lambda name\n    # result_expr   ExprNode\n    # def_node      DefNode                the underlying function 'def' node\n    child_attrs = ['def_node']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "GeneratorExpressionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class GeneratorExpressionNode(LambdaNode):\n    # A generator expression, e.g.  (i for i in range(10))\n    #\n    # Result is a generator.\n    #\n    # loop      ForStatNode   the for-loop, containing a YieldExprNode\n    # def_node  DefNode       the underlying generator 'def' node\n    name = StringEncoding.EncodedString('genexpr')\n    binding = False\n    def analyse_declarations(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "YieldExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class YieldExprNode(ExprNode):\n    # Yield expression node\n    #\n    # arg         ExprNode   the value to return from the generator\n    # label_num   integer    yield label number\n    # is_yield_from  boolean is a YieldFromExprNode to delegate to another generator\n    subexprs = ['arg']\n    type = py_object_type\n    label_num = 0\n    is_yield_from = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "_YieldDelegationExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class _YieldDelegationExprNode(YieldExprNode):\n    def yield_from_func(self, code):\n        raise NotImplementedError()\n    def generate_evaluation_code(self, code, source_cname=None, decref_source=False):\n        if source_cname is None:\n            self.arg.generate_evaluation_code(code)\n        code.putln(\"%s = %s(%s, %s);\" % (\n            Naming.retval_cname,\n            self.yield_from_func(code),\n            Naming.generator_cname,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "YieldFromExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class YieldFromExprNode(_YieldDelegationExprNode):\n    # \"yield from GEN\" expression\n    is_yield_from = True\n    expr_keyword = 'yield from'\n    def coerce_yield_argument(self, env):\n        if not self.arg.type.is_string:\n            # FIXME: support C arrays and C++ iterators?\n            error(self.pos, \"yielding from non-Python object not supported\")\n        self.arg = self.arg.coerce_to_pyobject(env)\n    def yield_from_func(self, code):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AwaitExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AwaitExprNode(_YieldDelegationExprNode):\n    # 'await' expression node\n    #\n    # arg         ExprNode   the Awaitable value to await\n    # label_num   integer    yield label number\n    is_await = True\n    expr_keyword = 'await'\n    def coerce_yield_argument(self, env):\n        if self.arg is not None:\n            # FIXME: use same check as in YieldFromExprNode.coerce_yield_argument() ?",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AwaitIterNextExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AwaitIterNextExprNode(AwaitExprNode):\n    # 'await' expression node as part of 'async for' iteration\n    #\n    # Breaks out of loop on StopAsyncIteration exception.\n    def _generate_break(self, code):\n        code.globalstate.use_utility_code(UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"))\n        code.putln(\"PyObject* exc_type = __Pyx_PyErr_Occurred();\")\n        code.putln(\"if (unlikely(exc_type && (exc_type == __Pyx_PyExc_StopAsyncIteration || (\"\n                   \" exc_type != PyExc_StopIteration && exc_type != PyExc_GeneratorExit &&\"\n                   \" __Pyx_PyErr_GivenExceptionMatches(exc_type, __Pyx_PyExc_StopAsyncIteration))))) {\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "GlobalsExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class GlobalsExprNode(AtomicExprNode):\n    type = dict_type\n    is_temp = 1\n    def analyse_types(self, env):\n        env.use_utility_code(Builtin.globals_utility_code)\n        return self\n    gil_message = \"Constructing globals dict\"\n    def may_be_none(self):\n        return False\n    def generate_result_code(self, code):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "LocalsDictItemNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class LocalsDictItemNode(DictItemNode):\n    def analyse_types(self, env):\n        self.key = self.key.analyse_types(env)\n        self.value = self.value.analyse_types(env)\n        self.key = self.key.coerce_to_pyobject(env)\n        if self.value.type.can_coerce_to_pyobject(env):\n            self.value = self.value.coerce_to_pyobject(env)\n        else:\n            self.value = None\n        return self",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "FuncLocalsExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class FuncLocalsExprNode(DictNode):\n    def __init__(self, pos, env):\n        local_vars = sorted([\n            entry.name for entry in env.entries.values() if entry.name])\n        items = [LocalsDictItemNode(\n            pos, key=IdentifierStringNode(pos, value=var),\n            value=NameNode(pos, name=var, allow_null=True))\n                 for var in local_vars]\n        DictNode.__init__(self, pos, key_value_pairs=items,\n                          exclude_null_values=True)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyClassLocalsExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyClassLocalsExprNode(AtomicExprNode):\n    def __init__(self, pos, pyclass_dict):\n        AtomicExprNode.__init__(self, pos)\n        self.pyclass_dict = pyclass_dict\n    def analyse_types(self, env):\n        self.type = self.pyclass_dict.type\n        self.is_temp = False\n        return self\n    def may_be_none(self):\n        return False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "UnopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class UnopNode(ExprNode):\n    #  operator     string\n    #  operand      ExprNode\n    #\n    #  Processing during analyse_expressions phase:\n    #\n    #    analyse_c_operation\n    #      Called when the operand is not a pyobject.\n    #      - Check operand type and coerce if needed.\n    #      - Determine result type and result code fragment.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NotNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NotNode(UnopNode):\n    #  'not' operator\n    #\n    #  operand   ExprNode\n    operator = '!'\n    type = PyrexTypes.c_bint_type\n    def calculate_constant_result(self):\n        self.constant_result = not self.operand.constant_result\n    def compile_time_value(self, denv):\n        operand = self.operand.compile_time_value(denv)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "UnaryPlusNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class UnaryPlusNode(UnopNode):\n    #  unary '+' operator\n    operator = '+'\n    def analyse_c_operation(self, env):\n        self.type = PyrexTypes.widest_numeric_type(\n            self.operand.type, PyrexTypes.c_int_type)\n    def py_operation_function(self, code):\n        return \"PyNumber_Positive\"\n    def calculate_result_code(self):\n        if self.is_cpp_operation():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "UnaryMinusNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class UnaryMinusNode(UnopNode):\n    #  unary '-' operator\n    operator = '-'\n    def analyse_c_operation(self, env):\n        if self.operand.type.is_numeric:\n            self.type = PyrexTypes.widest_numeric_type(\n                self.operand.type, PyrexTypes.c_int_type)\n        elif self.operand.type.is_enum:\n            self.type = PyrexTypes.c_int_type\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "TildeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class TildeNode(UnopNode):\n    #  unary '~' operator\n    def analyse_c_operation(self, env):\n        if self.operand.type.is_int:\n            self.type = PyrexTypes.widest_numeric_type(\n                self.operand.type, PyrexTypes.c_int_type)\n        elif self.operand.type.is_enum:\n            self.type = PyrexTypes.c_int_type\n        else:\n            self.type_error()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CUnopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CUnopNode(UnopNode):\n    def is_py_operation(self):\n        return False\nclass DereferenceNode(CUnopNode):\n    #  unary * operator\n    operator = '*'\n    def infer_unop_type(self, env, operand_type):\n        if operand_type.is_ptr:\n            return operand_type.base_type\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DereferenceNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DereferenceNode(CUnopNode):\n    #  unary * operator\n    operator = '*'\n    def infer_unop_type(self, env, operand_type):\n        if operand_type.is_ptr:\n            return operand_type.base_type\n        else:\n            return PyrexTypes.error_type\n    def analyse_c_operation(self, env):\n        if self.operand.type.is_ptr:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DecrementIncrementNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DecrementIncrementNode(CUnopNode):\n    #  unary ++/-- operator\n    def analyse_c_operation(self, env):\n        if self.operand.type.is_numeric:\n            self.type = PyrexTypes.widest_numeric_type(\n                self.operand.type, PyrexTypes.c_int_type)\n        elif self.operand.type.is_ptr:\n            self.type = self.operand.type\n        else:\n            self.type_error()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AmpersandNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AmpersandNode(CUnopNode):\n    #  The C address-of operator.\n    #\n    #  operand  ExprNode\n    operator = '&'\n    def infer_unop_type(self, env, operand_type):\n        return PyrexTypes.c_ptr_type(operand_type)\n    def analyse_types(self, env):\n        self.operand = self.operand.analyse_types(env)\n        argtype = self.operand.type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "TypecastNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class TypecastNode(ExprNode):\n    #  C type cast\n    #\n    #  operand      ExprNode\n    #  base_type    CBaseTypeNode\n    #  declarator   CDeclaratorNode\n    #  typecheck    boolean\n    #\n    #  If used from a transform, one can if wanted specify the attribute\n    #  \"type\" directly and leave base_type and declarator to None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CythonArrayNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CythonArrayNode(ExprNode):\n    \"\"\"\n    Used when a pointer of base_type is cast to a memoryviewslice with that\n    base type. i.e.\n        <int[:M:1, :N]> p\n    creates a fortran-contiguous cython.array.\n    We leave the type set to object so coercions to object are more efficient\n    and less work. Acquiring a memoryviewslice from this will be just as\n    efficient. ExprNode.coerce_to() will do the additional typecheck on\n    self.compile_time_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SizeofNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SizeofNode(ExprNode):\n    #  Abstract base class for sizeof(x) expression nodes.\n    type = PyrexTypes.c_size_t_type\n    def check_const(self):\n        return True\n    def generate_result_code(self, code):\n        pass\nclass SizeofTypeNode(SizeofNode):\n    #  C sizeof function applied to a type\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SizeofTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SizeofTypeNode(SizeofNode):\n    #  C sizeof function applied to a type\n    #\n    #  base_type   CBaseTypeNode\n    #  declarator  CDeclaratorNode\n    subexprs = []\n    arg_type = None\n    def analyse_types(self, env):\n        # we may have incorrectly interpreted a dotted name as a type rather than an attribute\n        # this could be better handled by more uniformly treating types as runtime-available objects",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SizeofVarNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SizeofVarNode(SizeofNode):\n    #  C sizeof function applied to a variable\n    #\n    #  operand   ExprNode\n    subexprs = ['operand']\n    def analyse_types(self, env):\n        # We may actually be looking at a type rather than a variable...\n        # If we are, traditional analysis would fail...\n        operand_as_type = self.operand.analyse_as_type(env)\n        if operand_as_type:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "TypeidNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class TypeidNode(ExprNode):\n    #  C++ typeid operator applied to a type or variable\n    #\n    #  operand       ExprNode\n    #  arg_type      ExprNode\n    #  is_variable   boolean\n    type = PyrexTypes.error_type\n    subexprs = ['operand']\n    arg_type = None\n    is_variable = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "TypeofNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class TypeofNode(ExprNode):\n    #  Compile-time type of an expression, as a string.\n    #\n    #  operand   ExprNode\n    #  literal   StringNode # internal\n    literal = None\n    type = py_object_type\n    subexprs = ['literal'] # 'operand' will be ignored after type analysis!\n    def analyse_types(self, env):\n        self.operand = self.operand.analyse_types(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "BinopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class BinopNode(ExprNode):\n    #  operator     string\n    #  operand1     ExprNode\n    #  operand2     ExprNode\n    #\n    #  Processing during analyse_expressions phase:\n    #\n    #    analyse_c_operation\n    #      Called when neither operand is a pyobject.\n    #      - Check operand types and coerce if needed.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CBinopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CBinopNode(BinopNode):\n    def analyse_types(self, env):\n        node = BinopNode.analyse_types(self, env)\n        if node.is_py_operation():\n            node.type = PyrexTypes.error_type\n        return node\n    def py_operation_function(self, code):\n        return \"\"\n    def calculate_result_code(self):\n        return \"(%s %s %s)\" % (",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NumBinopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NumBinopNode(BinopNode):\n    #  Binary operation taking numeric arguments.\n    infix = True\n    overflow_check = False\n    overflow_bit_node = None\n    def analyse_c_operation(self, env):\n        type1 = self.operand1.type\n        type2 = self.operand2.type\n        self.type = self.compute_c_result_type(type1, type2)\n        if not self.type:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "IntBinopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class IntBinopNode(NumBinopNode):\n    #  Binary operation taking integer arguments.\n    def c_types_okay(self, type1, type2):\n        #print \"IntBinopNode.c_types_okay:\", type1, type2 ###\n        return (type1.is_int or type1.is_enum) \\\n            and (type2.is_int or type2.is_enum)\nclass AddNode(NumBinopNode):\n    #  '+' operator.\n    def is_py_operation_types(self, type1, type2):\n        if type1.is_string and type2.is_string or type1.is_pyunicode_ptr and type2.is_pyunicode_ptr:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AddNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AddNode(NumBinopNode):\n    #  '+' operator.\n    def is_py_operation_types(self, type1, type2):\n        if type1.is_string and type2.is_string or type1.is_pyunicode_ptr and type2.is_pyunicode_ptr:\n            return 1\n        else:\n            return NumBinopNode.is_py_operation_types(self, type1, type2)\n    def infer_builtin_types_operation(self, type1, type2):\n        # b'abc' + 'abc' raises an exception in Py3,\n        # so we can safely infer the Py2 type for bytes here",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SubNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SubNode(NumBinopNode):\n    #  '-' operator.\n    def compute_c_result_type(self, type1, type2):\n        if (type1.is_ptr or type1.is_array) and (type2.is_int or type2.is_enum):\n            return type1\n        elif (type1.is_ptr or type1.is_array) and (type2.is_ptr or type2.is_array):\n            return PyrexTypes.c_ptrdiff_t_type\n        else:\n            return NumBinopNode.compute_c_result_type(\n                self, type1, type2)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MulNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MulNode(NumBinopNode):\n    #  '*' operator.\n    def is_py_operation_types(self, type1, type2):\n        if ((type1.is_string and type2.is_int) or\n                (type2.is_string and type1.is_int)):\n            return 1\n        else:\n            return NumBinopNode.is_py_operation_types(self, type1, type2)\n    def infer_builtin_types_operation(self, type1, type2):\n        # let's assume that whatever builtin type you multiply a string with",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MatMultNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MatMultNode(NumBinopNode):\n    #  '@' operator.\n    def is_py_operation_types(self, type1, type2):\n        return True\n    def generate_evaluation_code(self, code):\n        code.globalstate.use_utility_code(UtilityCode.load_cached(\"MatrixMultiply\", \"ObjectHandling.c\"))\n        super(MatMultNode, self).generate_evaluation_code(code)\nclass DivNode(NumBinopNode):\n    #  '/' or '//' operator.\n    cdivision = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DivNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DivNode(NumBinopNode):\n    #  '/' or '//' operator.\n    cdivision = None\n    truedivision = None   # == \"unknown\" if operator == '/'\n    ctruedivision = False\n    cdivision_warnings = False\n    zerodivision_check = None\n    def find_compile_time_binary_operator(self, op1, op2):\n        func = compile_time_binary_operators[self.operator]\n        if self.operator == '/' and self.truedivision is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ModNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ModNode(DivNode):\n    #  '%' operator.\n    def is_py_operation_types(self, type1, type2):\n        return (type1.is_string\n                or type2.is_string\n                or NumBinopNode.is_py_operation_types(self, type1, type2))\n    def infer_builtin_types_operation(self, type1, type2):\n        # b'%s' % xyz  raises an exception in Py3<3.5, so it's safe to infer the type for Py2 and later Py3's.\n        if type1 is unicode_type:\n            # None + xyz  may be implemented by RHS",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PowNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PowNode(NumBinopNode):\n    #  '**' operator.\n    def analyse_c_operation(self, env):\n        NumBinopNode.analyse_c_operation(self, env)\n        if self.type.is_complex:\n            if self.type.real_type.is_float:\n                self.operand1 = self.operand1.coerce_to(self.type, env)\n                self.operand2 = self.operand2.coerce_to(self.type, env)\n                self.pow_func = self.type.binary_op('**')\n            else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "BoolBinopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class BoolBinopNode(ExprNode):\n    \"\"\"\n    Short-circuiting boolean operation.\n    Note that this node provides the same code generation method as\n    BoolBinopResultNode to simplify expression nesting.\n    operator  string                              \"and\"/\"or\"\n    operand1  BoolBinopNode/BoolBinopResultNode   left operand\n    operand2  BoolBinopNode/BoolBinopResultNode   right operand\n    \"\"\"\n    subexprs = ['operand1', 'operand2']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "BoolBinopResultNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class BoolBinopResultNode(ExprNode):\n    \"\"\"\n    Intermediate result of a short-circuiting and/or expression.\n    Tests the result for 'truthiness' and takes care of coercing the final result\n    of the overall expression to the target type.\n    Note that this node provides the same code generation method as\n    BoolBinopNode to simplify expression nesting.\n    arg     ExprNode    the argument to test\n    value   ExprNode    the coerced result value node\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CondExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CondExprNode(ExprNode):\n    #  Short-circuiting conditional expression.\n    #\n    #  test        ExprNode\n    #  true_val    ExprNode\n    #  false_val   ExprNode\n    true_val = None\n    false_val = None\n    is_temp = True\n    subexprs = ['test', 'true_val', 'false_val']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CmpNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CmpNode(object):\n    #  Mixin class containing code common to PrimaryCmpNodes\n    #  and CascadedCmpNodes.\n    special_bool_cmp_function = None\n    special_bool_cmp_utility_code = None\n    def infer_type(self, env):\n        # TODO: Actually implement this (after merging with -unstable).\n        return py_object_type\n    def calculate_cascaded_constant_result(self, operand1_result):\n        func = compile_time_binary_operators[self.operator]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PrimaryCmpNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PrimaryCmpNode(ExprNode, CmpNode):\n    #  Non-cascaded comparison or first comparison of\n    #  a cascaded sequence.\n    #\n    #  operator      string\n    #  operand1      ExprNode\n    #  operand2      ExprNode\n    #  cascade       CascadedCmpNode\n    #  We don't use the subexprs mechanism, because\n    #  things here are too complicated for it to handle.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CascadedCmpNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CascadedCmpNode(Node, CmpNode):\n    #  A CascadedCmpNode is not a complete expression node. It\n    #  hangs off the side of another comparison node, shares\n    #  its left operand with that node, and shares its result\n    #  with the PrimaryCmpNode at the head of the chain.\n    #\n    #  operator      string\n    #  operand2      ExprNode\n    #  cascade       CascadedCmpNode\n    child_attrs = ['operand2', 'coerced_operand2', 'cascade']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoercionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoercionNode(ExprNode):\n    #  Abstract base class for coercion nodes.\n    #\n    #  arg       ExprNode       node being coerced\n    subexprs = ['arg']\n    constant_result = not_a_constant\n    def __init__(self, arg):\n        super(CoercionNode, self).__init__(arg.pos)\n        self.arg = arg\n        if debug_coercion:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoerceToMemViewSliceNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoerceToMemViewSliceNode(CoercionNode):\n    \"\"\"\n    Coerce an object to a memoryview slice. This holds a new reference in\n    a managed temp.\n    \"\"\"\n    def __init__(self, arg, dst_type, env):\n        assert dst_type.is_memoryviewslice\n        assert not arg.type.is_memoryviewslice\n        CoercionNode.__init__(self, arg)\n        self.type = dst_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CastNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CastNode(CoercionNode):\n    #  Wrap a node in a C type cast.\n    def __init__(self, arg, new_type):\n        CoercionNode.__init__(self, arg)\n        self.type = new_type\n    def may_be_none(self):\n        return self.arg.may_be_none()\n    def calculate_result_code(self):\n        return self.arg.result_as(self.type)\n    def generate_result_code(self, code):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyTypeTestNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyTypeTestNode(CoercionNode):\n    #  This node is used to check that a generic Python\n    #  object is an instance of a particular extension type.\n    #  This node borrows the result of its argument node.\n    exact_builtin_type = True\n    def __init__(self, arg, dst_type, env, notnone=False):\n        #  The arg is know to be a Python object, and\n        #  the dst_type is known to be an extension type.\n        assert dst_type.is_extension_type or dst_type.is_builtin_type, \"PyTypeTest on non extension type\"\n        CoercionNode.__init__(self, arg)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NoneCheckNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NoneCheckNode(CoercionNode):\n    # This node is used to check that a Python object is not None and\n    # raises an appropriate exception (as specified by the creating\n    # transform).\n    is_nonecheck = True\n    def __init__(self, arg, exception_type_cname, exception_message,\n                 exception_format_args=()):\n        CoercionNode.__init__(self, arg)\n        self.type = arg.type\n        self.result_ctype = arg.ctype()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoerceToPyTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoerceToPyTypeNode(CoercionNode):\n    #  This node is used to convert a C data type\n    #  to a Python object.\n    type = py_object_type\n    target_type = py_object_type\n    is_temp = 1\n    def __init__(self, arg, env, type=py_object_type):\n        if not arg.type.create_to_py_utility_code(env):\n            error(arg.pos, \"Cannot convert '%s' to Python object\" % arg.type)\n        elif arg.type.is_complex:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoerceIntToBytesNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoerceIntToBytesNode(CoerceToPyTypeNode):\n    #  This node is used to convert a C int type to a Python bytes\n    #  object.\n    is_temp = 1\n    def __init__(self, arg, env):\n        arg = arg.coerce_to_simple(env)\n        CoercionNode.__init__(self, arg)\n        self.type = Builtin.bytes_type\n    def generate_result_code(self, code):\n        arg = self.arg",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoerceFromPyTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoerceFromPyTypeNode(CoercionNode):\n    #  This node is used to convert a Python object\n    #  to a C data type.\n    def __init__(self, result_type, arg, env):\n        CoercionNode.__init__(self, arg)\n        self.type = result_type\n        self.is_temp = 1\n        if not result_type.create_from_py_utility_code(env):\n            error(arg.pos,\n                  \"Cannot convert Python object to '%s'\" % result_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoerceToBooleanNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoerceToBooleanNode(CoercionNode):\n    #  This node is used when a result needs to be used\n    #  in a boolean context.\n    type = PyrexTypes.c_bint_type\n    _special_builtins = {\n        Builtin.list_type:       'PyList_GET_SIZE',\n        Builtin.tuple_type:      'PyTuple_GET_SIZE',\n        Builtin.set_type:        'PySet_GET_SIZE',\n        Builtin.frozenset_type:  'PySet_GET_SIZE',\n        Builtin.bytes_type:      'PyBytes_GET_SIZE',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoerceToComplexNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoerceToComplexNode(CoercionNode):\n    def __init__(self, arg, dst_type, env):\n        if arg.type.is_complex:\n            arg = arg.coerce_to_simple(env)\n        self.type = dst_type\n        CoercionNode.__init__(self, arg)\n        dst_type.create_declaration_utility_code(env)\n    def calculate_result_code(self):\n        if self.arg.type.is_complex:\n            real_part = \"__Pyx_CREAL(%s)\" % self.arg.result()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoerceToTempNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoerceToTempNode(CoercionNode):\n    #  This node is used to force the result of another node\n    #  to be stored in a temporary. It is only used if the\n    #  argument node's result is not already in a temporary.\n    def __init__(self, arg, env):\n        CoercionNode.__init__(self, arg)\n        self.type = self.arg.type.as_argument_type()\n        self.constant_result = self.arg.constant_result\n        self.is_temp = 1\n        if self.type.is_pyobject:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ProxyNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ProxyNode(CoercionNode):\n    \"\"\"\n    A node that should not be replaced by transforms or other means,\n    and hence can be useful to wrap the argument to a clone node\n    MyNode    -> ProxyNode -> ArgNode\n    CloneNode -^\n    \"\"\"\n    nogil_check = None\n    def __init__(self, arg):\n        super(ProxyNode, self).__init__(arg)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CloneNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CloneNode(CoercionNode):\n    #  This node is employed when the result of another node needs\n    #  to be used multiple times. The argument node's result must\n    #  be in a temporary. This node \"borrows\" the result from the\n    #  argument node, and does not generate any evaluation or\n    #  disposal code for it. The original owner of the argument\n    #  node is responsible for doing those things.\n    subexprs = [] # Arg is not considered a subexpr\n    nogil_check = None\n    def __init__(self, arg):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CMethodSelfCloneNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CMethodSelfCloneNode(CloneNode):\n    # Special CloneNode for the self argument of builtin C methods\n    # that accepts subtypes of the builtin type.  This is safe only\n    # for 'final' subtypes, as subtypes of the declared type may\n    # override the C method.\n    def coerce_to(self, dst_type, env):\n        if dst_type.is_builtin_type and self.type.subtype_of(dst_type):\n            return self\n        return CloneNode.coerce_to(self, dst_type, env)\nclass ModuleRefNode(ExprNode):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ModuleRefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ModuleRefNode(ExprNode):\n    # Simple returns the module object\n    type = py_object_type\n    is_temp = False\n    subexprs = []\n    def analyse_types(self, env):\n        return self\n    def may_be_none(self):\n        return False\n    def calculate_result_code(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DocstringRefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DocstringRefNode(ExprNode):\n    # Extracts the docstring of the body element\n    subexprs = ['body']\n    type = py_object_type\n    is_temp = True\n    def __init__(self, pos, body):\n        ExprNode.__init__(self, pos)\n        assert body.type.is_pyobject\n        self.body = body\n    def analyse_types(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "find_coercion_error",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def find_coercion_error(type_tuple, default, env):\n    err = coercion_error_dict.get(type_tuple)\n    if err is None:\n        return default\n    elif (env.directives['c_string_encoding'] and\n              any(t in type_tuple for t in (PyrexTypes.c_char_ptr_type, PyrexTypes.c_uchar_ptr_type,\n                                            PyrexTypes.c_const_char_ptr_type, PyrexTypes.c_const_uchar_ptr_type))):\n        if type_tuple[1].is_pyobject:\n            return default\n        elif env.directives['c_string_encoding'] in ('ascii', 'default'):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "default_str_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def default_str_type(env):\n    return {\n        'bytes': bytes_type,\n        'bytearray': bytearray_type,\n        'str': str_type,\n        'unicode': unicode_type\n    }.get(env.directives['c_string_type'])\ndef check_negative_indices(*nodes):\n    \"\"\"\n    Raise a warning on nodes that are known to have negative numeric values.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "check_negative_indices",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def check_negative_indices(*nodes):\n    \"\"\"\n    Raise a warning on nodes that are known to have negative numeric values.\n    Used to find (potential) bugs inside of \"wraparound=False\" sections.\n    \"\"\"\n    for node in nodes:\n        if node is None or (\n                not isinstance(node.constant_result, _py_int_types) and\n                not isinstance(node.constant_result, float)):\n            continue",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "infer_sequence_item_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def infer_sequence_item_type(env, seq_node, index_node=None, seq_type=None):\n    if not seq_node.is_sequence_constructor:\n        if seq_type is None:\n            seq_type = seq_node.infer_type(env)\n        if seq_type is tuple_type:\n            # tuples are immutable => we can safely follow assignments\n            if seq_node.cf_state and len(seq_node.cf_state) == 1:\n                try:\n                    seq_node = seq_node.cf_state[0].rhs\n                except AttributeError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "make_dedup_key",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def make_dedup_key(outer_type, item_nodes):\n    \"\"\"\n    Recursively generate a deduplication key from a sequence of values.\n    Includes Cython node types to work around the fact that (1, 2.0) == (1.0, 2), for example.\n    @param outer_type: The type of the outer container.\n    @param item_nodes: A sequence of constant nodes that will be traversed recursively.\n    @return: A tuple that can be used as a dict key for deduplication.\n    \"\"\"\n    item_keys = [\n        (py_object_type, None, type(None)) if node is None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "get_exception_handler",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def get_exception_handler(exception_value):\n    if exception_value is None:\n        return \"__Pyx_CppExn2PyErr();\", False\n    elif (exception_value.type == PyrexTypes.c_char_type\n          and exception_value.value == '*'):\n        return \"__Pyx_CppExn2PyErr();\", True\n    elif exception_value.type.is_pyobject:\n        return (\n            'try { throw; } catch(const std::exception& exn) {'\n            'PyErr_SetString(%s, exn.what());'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "maybe_check_py_error",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def maybe_check_py_error(code, check_py_exception, pos, nogil):\n    if check_py_exception:\n        if nogil:\n            code.putln(code.error_goto_if(\"__Pyx_ErrOccurredWithGIL()\", pos))\n        else:\n            code.putln(code.error_goto_if(\"PyErr_Occurred()\", pos))\ndef translate_cpp_exception(code, pos, inside, py_result, exception_value, nogil):\n    raise_py_exception, check_py_exception = get_exception_handler(exception_value)\n    code.putln(\"try {\")\n    code.putln(\"%s\" % inside)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "translate_cpp_exception",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def translate_cpp_exception(code, pos, inside, py_result, exception_value, nogil):\n    raise_py_exception, check_py_exception = get_exception_handler(exception_value)\n    code.putln(\"try {\")\n    code.putln(\"%s\" % inside)\n    if py_result:\n      code.putln(code.error_goto_if_null(py_result, pos))\n    maybe_check_py_error(code, check_py_exception, pos, nogil)\n    code.putln(\"} catch(...) {\")\n    if nogil:\n        code.put_ensure_gil(declare_gilstate=True)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "translate_double_cpp_exception",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def translate_double_cpp_exception(code, pos, lhs_type, lhs_code, rhs_code,\n    lhs_exc_val, assign_exc_val, nogil):\n    handle_lhs_exc, lhc_check_py_exc = get_exception_handler(lhs_exc_val)\n    handle_assignment_exc, assignment_check_py_exc = get_exception_handler(assign_exc_val)\n    code.putln(\"try {\")\n    code.putln(lhs_type.declaration_code(\"__pyx_local_lvalue = %s;\" % lhs_code))\n    maybe_check_py_error(code, lhc_check_py_exc, pos, nogil)\n    code.putln(\"try {\")\n    code.putln(\"__pyx_local_lvalue = %s;\" % rhs_code)\n    maybe_check_py_error(code, assignment_check_py_exc, pos, nogil)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "LocalsExprNode",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def LocalsExprNode(pos, scope_node, env):\n    if env.is_module_scope:\n        return GlobalsExprNode(pos)\n    if env.is_py_class_scope:\n        return PyClassLocalsExprNode(pos, scope_node.dict)\n    return FuncLocalsExprNode(pos, env)\n#-------------------------------------------------------------------\n#\n#  Unary operator nodes\n#",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "inc_dec_constructor",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def inc_dec_constructor(is_prefix, operator):\n    return lambda pos, **kwds: DecrementIncrementNode(pos, is_prefix=is_prefix, operator=operator, **kwds)\nclass AmpersandNode(CUnopNode):\n    #  The C address-of operator.\n    #\n    #  operand  ExprNode\n    operator = '&'\n    def infer_unop_type(self, env, operand_type):\n        return PyrexTypes.c_ptr_type(operand_type)\n    def analyse_types(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "unop_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def unop_node(pos, operator, operand):\n    # Construct unnop node of appropriate class for\n    # given operator.\n    if isinstance(operand, IntNode) and operator == '-':\n        return IntNode(pos = operand.pos, value = str(-Utils.str_to_number(operand.value)),\n                       longness=operand.longness, unsigned=operand.unsigned)\n    elif isinstance(operand, UnopNode) and operand.operator == operator in '+-':\n        warning(pos, \"Python has no increment/decrement operator: %s%sx == %s(%sx) == x\" % ((operator,)*4), 5)\n    return unop_node_classes[operator](pos,\n        operator = operator,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "get_compile_time_binop",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def get_compile_time_binop(node):\n    func = compile_time_binary_operators.get(node.operator)\n    if not func:\n        error(node.pos,\n            \"Binary '%s' not supported in compile-time expression\"\n                % node.operator)\n    return func\nclass BinopNode(ExprNode):\n    #  operator     string\n    #  operand1     ExprNode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "c_binop_constructor",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def c_binop_constructor(operator):\n    def make_binop_node(pos, **operands):\n        return CBinopNode(pos, operator=operator, **operands)\n    return make_binop_node\nclass NumBinopNode(BinopNode):\n    #  Binary operation taking numeric arguments.\n    infix = True\n    overflow_check = False\n    overflow_bit_node = None\n    def analyse_c_operation(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "binop_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def binop_node(pos, operator, operand1, operand2, inplace=False, **kwargs):\n    # Construct binop node of appropriate class for\n    # given operator.\n    return binop_node_classes[operator](\n        pos,\n        operator=operator,\n        operand1=operand1,\n        operand2=operand2,\n        inplace=inplace,\n        **kwargs)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "not_a_constant",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "not_a_constant = NotConstant()\nconstant_value_not_set = object()\n# error messages when coercing from key[0] to key[1]\ncoercion_error_dict = {\n    # string related errors\n    (unicode_type, str_type): (\"Cannot convert Unicode string to 'str' implicitly.\"\n                               \" This is not portable and requires explicit encoding.\"),\n    (unicode_type, bytes_type): \"Cannot convert Unicode string to 'bytes' implicitly, encoding required.\",\n    (unicode_type, PyrexTypes.c_char_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",\n    (unicode_type, PyrexTypes.c_const_char_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "constant_value_not_set",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "constant_value_not_set = object()\n# error messages when coercing from key[0] to key[1]\ncoercion_error_dict = {\n    # string related errors\n    (unicode_type, str_type): (\"Cannot convert Unicode string to 'str' implicitly.\"\n                               \" This is not portable and requires explicit encoding.\"),\n    (unicode_type, bytes_type): \"Cannot convert Unicode string to 'bytes' implicitly, encoding required.\",\n    (unicode_type, PyrexTypes.c_char_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",\n    (unicode_type, PyrexTypes.c_const_char_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",\n    (unicode_type, PyrexTypes.c_uchar_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "coercion_error_dict",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "coercion_error_dict = {\n    # string related errors\n    (unicode_type, str_type): (\"Cannot convert Unicode string to 'str' implicitly.\"\n                               \" This is not portable and requires explicit encoding.\"),\n    (unicode_type, bytes_type): \"Cannot convert Unicode string to 'bytes' implicitly, encoding required.\",\n    (unicode_type, PyrexTypes.c_char_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",\n    (unicode_type, PyrexTypes.c_const_char_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",\n    (unicode_type, PyrexTypes.c_uchar_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",\n    (unicode_type, PyrexTypes.c_const_uchar_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",\n    (bytes_type, unicode_type): \"Cannot convert 'bytes' object to unicode implicitly, decoding required\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "compile_time_unary_operators",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "compile_time_unary_operators = {\n    'not': operator.not_,\n    '~': operator.inv,\n    '-': operator.neg,\n    '+': operator.pos,\n}\nclass UnopNode(ExprNode):\n    #  operator     string\n    #  operand      ExprNode\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "unop_node_classes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "unop_node_classes = {\n    \"+\":  UnaryPlusNode,\n    \"-\":  UnaryMinusNode,\n    \"~\":  TildeNode,\n}\ndef unop_node(pos, operator, operand):\n    # Construct unnop node of appropriate class for\n    # given operator.\n    if isinstance(operand, IntNode) and operator == '-':\n        return IntNode(pos = operand.pos, value = str(-Utils.str_to_number(operand.value)),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ERR_START",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "ERR_START = \"Start may not be given\"\nERR_NOT_STOP = \"Stop must be provided to indicate shape\"\nERR_STEPS = (\"Strides may only be given to indicate contiguity. \"\n             \"Consider slicing it after conversion\")\nERR_NOT_POINTER = \"Can only create cython.array from pointer or array\"\nERR_BASE_TYPE = \"Pointer base type does not match cython.array base type\"\nclass CythonArrayNode(ExprNode):\n    \"\"\"\n    Used when a pointer of base_type is cast to a memoryviewslice with that\n    base type. i.e.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ERR_NOT_STOP",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "ERR_NOT_STOP = \"Stop must be provided to indicate shape\"\nERR_STEPS = (\"Strides may only be given to indicate contiguity. \"\n             \"Consider slicing it after conversion\")\nERR_NOT_POINTER = \"Can only create cython.array from pointer or array\"\nERR_BASE_TYPE = \"Pointer base type does not match cython.array base type\"\nclass CythonArrayNode(ExprNode):\n    \"\"\"\n    Used when a pointer of base_type is cast to a memoryviewslice with that\n    base type. i.e.\n        <int[:M:1, :N]> p",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ERR_STEPS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "ERR_STEPS = (\"Strides may only be given to indicate contiguity. \"\n             \"Consider slicing it after conversion\")\nERR_NOT_POINTER = \"Can only create cython.array from pointer or array\"\nERR_BASE_TYPE = \"Pointer base type does not match cython.array base type\"\nclass CythonArrayNode(ExprNode):\n    \"\"\"\n    Used when a pointer of base_type is cast to a memoryviewslice with that\n    base type. i.e.\n        <int[:M:1, :N]> p\n    creates a fortran-contiguous cython.array.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ERR_NOT_POINTER",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "ERR_NOT_POINTER = \"Can only create cython.array from pointer or array\"\nERR_BASE_TYPE = \"Pointer base type does not match cython.array base type\"\nclass CythonArrayNode(ExprNode):\n    \"\"\"\n    Used when a pointer of base_type is cast to a memoryviewslice with that\n    base type. i.e.\n        <int[:M:1, :N]> p\n    creates a fortran-contiguous cython.array.\n    We leave the type set to object so coercions to object are more efficient\n    and less work. Acquiring a memoryviewslice from this will be just as",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ERR_BASE_TYPE",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "ERR_BASE_TYPE = \"Pointer base type does not match cython.array base type\"\nclass CythonArrayNode(ExprNode):\n    \"\"\"\n    Used when a pointer of base_type is cast to a memoryviewslice with that\n    base type. i.e.\n        <int[:M:1, :N]> p\n    creates a fortran-contiguous cython.array.\n    We leave the type set to object so coercions to object are more efficient\n    and less work. Acquiring a memoryviewslice from this will be just as\n    efficient. ExprNode.coerce_to() will do the additional typecheck on",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "compile_time_binary_operators",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "compile_time_binary_operators = {\n    '<': operator.lt,\n    '<=': operator.le,\n    '==': operator.eq,\n    '!=': operator.ne,\n    '>=': operator.ge,\n    '>': operator.gt,\n    'is': operator.is_,\n    'is_not': operator.is_not,\n    '+': operator.add,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "_find_formatting_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "_find_formatting_types = re.compile(\n    br\"%\"\n    br\"(?:%|\"  # %%\n    br\"(?:\\([^)]+\\))?\"  # %(name)\n    br\"[-+#,0-9 ]*([a-z])\"  # %.2f  etc.\n    br\")\").findall\n# These format conversion types can never trigger a Unicode string conversion in Py2.\n_safe_bytes_formats = set([\n    # Excludes 's' and 'r', which can generate non-bytes strings.\n    b'd', b'i', b'o', b'u', b'x', b'X', b'e', b'E', b'f', b'F', b'g', b'G', b'c', b'b', b'a',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "_safe_bytes_formats",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "_safe_bytes_formats = set([\n    # Excludes 's' and 'r', which can generate non-bytes strings.\n    b'd', b'i', b'o', b'u', b'x', b'X', b'e', b'E', b'f', b'F', b'g', b'G', b'c', b'b', b'a',\n])\nclass ModNode(DivNode):\n    #  '%' operator.\n    def is_py_operation_types(self, type1, type2):\n        return (type1.is_string\n                or type2.is_string\n                or NumBinopNode.is_py_operation_types(self, type1, type2))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "richcmp_constants",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "richcmp_constants = {\n    \"<\" : \"Py_LT\",\n    \"<=\": \"Py_LE\",\n    \"==\": \"Py_EQ\",\n    \"!=\": \"Py_NE\",\n    \"<>\": \"Py_NE\",\n    \">\" : \"Py_GT\",\n    \">=\": \"Py_GE\",\n    # the following are faked by special compare functions\n    \"in\"    : \"Py_EQ\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "binop_node_classes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "binop_node_classes = {\n    \"or\":       BoolBinopNode,\n    \"and\":      BoolBinopNode,\n    \"|\":        IntBinopNode,\n    \"^\":        IntBinopNode,\n    \"&\":        IntBinopNode,\n    \"<<\":       IntBinopNode,\n    \">>\":       IntBinopNode,\n    \"+\":        AddNode,\n    \"-\":        SubNode,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "proto",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "proto = \"\"\"\nstatic CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void); /* proto */\n\"\"\",\nimpl = \"\"\"\nstatic CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {\n  int err;\n  #ifdef WITH_THREAD\n  PyGILState_STATE _save = PyGILState_Ensure();\n  #endif\n  err = !!PyErr_Occurred();",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "impl",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "impl = \"\"\"\nstatic CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {\n  int err;\n  #ifdef WITH_THREAD\n  PyGILState_STATE _save = PyGILState_Ensure();\n  #endif\n  err = !!PyErr_Occurred();\n  #ifdef WITH_THREAD\n  PyGILState_Release(_save);\n  #endif",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "raise_unbound_local_error_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "raise_unbound_local_error_utility_code = UtilityCode(\nproto = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);\n\"\"\",\nimpl = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {\n    PyErr_Format(PyExc_UnboundLocalError, \"local variable '%s' referenced before assignment\", varname);\n}\n\"\"\")\nraise_closure_name_error_utility_code = UtilityCode(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "proto",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "proto = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);\n\"\"\",\nimpl = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {\n    PyErr_Format(PyExc_UnboundLocalError, \"local variable '%s' referenced before assignment\", varname);\n}\n\"\"\")\nraise_closure_name_error_utility_code = UtilityCode(\nproto = \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "impl",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "impl = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {\n    PyErr_Format(PyExc_UnboundLocalError, \"local variable '%s' referenced before assignment\", varname);\n}\n\"\"\")\nraise_closure_name_error_utility_code = UtilityCode(\nproto = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);\n\"\"\",\nimpl = \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "raise_closure_name_error_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "raise_closure_name_error_utility_code = UtilityCode(\nproto = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);\n\"\"\",\nimpl = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {\n    PyErr_Format(PyExc_NameError, \"free variable '%s' referenced before assignment in enclosing scope\", varname);\n}\n\"\"\")\n# Don't inline the function, it should really never be called in production",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "proto",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "proto = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);\n\"\"\",\nimpl = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {\n    PyErr_Format(PyExc_NameError, \"free variable '%s' referenced before assignment in enclosing scope\", varname);\n}\n\"\"\")\n# Don't inline the function, it should really never be called in production\nraise_unbound_memoryview_utility_code_nogil = UtilityCode(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "impl",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "impl = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {\n    PyErr_Format(PyExc_NameError, \"free variable '%s' referenced before assignment in enclosing scope\", varname);\n}\n\"\"\")\n# Don't inline the function, it should really never be called in production\nraise_unbound_memoryview_utility_code_nogil = UtilityCode(\nproto = \"\"\"\nstatic void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname);\n\"\"\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "raise_unbound_memoryview_utility_code_nogil",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "raise_unbound_memoryview_utility_code_nogil = UtilityCode(\nproto = \"\"\"\nstatic void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname);\n\"\"\",\nimpl = \"\"\"\nstatic void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname) {\n    #ifdef WITH_THREAD\n    PyGILState_STATE gilstate = PyGILState_Ensure();\n    #endif\n    __Pyx_RaiseUnboundLocalError(varname);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "proto",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "proto = \"\"\"\nstatic void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname);\n\"\"\",\nimpl = \"\"\"\nstatic void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname) {\n    #ifdef WITH_THREAD\n    PyGILState_STATE gilstate = PyGILState_Ensure();\n    #endif\n    __Pyx_RaiseUnboundLocalError(varname);\n    #ifdef WITH_THREAD",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "impl",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "impl = \"\"\"\nstatic void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname) {\n    #ifdef WITH_THREAD\n    PyGILState_STATE gilstate = PyGILState_Ensure();\n    #endif\n    __Pyx_RaiseUnboundLocalError(varname);\n    #ifdef WITH_THREAD\n    PyGILState_Release(gilstate);\n    #endif\n}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "requires",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "requires = [raise_unbound_local_error_utility_code])\n#------------------------------------------------------------------------------------\nraise_too_many_values_to_unpack = UtilityCode.load_cached(\"RaiseTooManyValuesToUnpack\", \"ObjectHandling.c\")\nraise_need_more_values_to_unpack = UtilityCode.load_cached(\"RaiseNeedMoreValuesToUnpack\", \"ObjectHandling.c\")\ntuple_unpacking_error_code = UtilityCode.load_cached(\"UnpackTupleError\", \"ObjectHandling.c\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "raise_too_many_values_to_unpack",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "raise_too_many_values_to_unpack = UtilityCode.load_cached(\"RaiseTooManyValuesToUnpack\", \"ObjectHandling.c\")\nraise_need_more_values_to_unpack = UtilityCode.load_cached(\"RaiseNeedMoreValuesToUnpack\", \"ObjectHandling.c\")\ntuple_unpacking_error_code = UtilityCode.load_cached(\"UnpackTupleError\", \"ObjectHandling.c\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "raise_need_more_values_to_unpack",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "raise_need_more_values_to_unpack = UtilityCode.load_cached(\"RaiseNeedMoreValuesToUnpack\", \"ObjectHandling.c\")\ntuple_unpacking_error_code = UtilityCode.load_cached(\"UnpackTupleError\", \"ObjectHandling.c\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "tuple_unpacking_error_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "tuple_unpacking_error_code = UtilityCode.load_cached(\"UnpackTupleError\", \"ObjectHandling.c\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "TypedExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class TypedExprNode(ExprNodes.ExprNode):\n    # Used for declaring assignments of a specified type without a known entry.\n    def __init__(self, type, may_be_none=None, pos=None):\n        super(TypedExprNode, self).__init__(pos)\n        self.type = type\n        self._may_be_none = may_be_none\n    def may_be_none(self):\n        return self._may_be_none != False\nobject_expr = TypedExprNode(py_object_type, may_be_none=True)\n# Fake rhs to silence \"unused variable\" warning",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "ControlBlock",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class ControlBlock(object):\n    \"\"\"Control flow graph node. Sequence of assignments and name references.\n       children  set of children nodes\n       parents   set of parent nodes\n       positions set of position markers\n       stats     list of block statements\n       gen       dict of assignments generated by this block\n       bounded   set  of entries that are definitely bounded in this block\n       Example:\n        a = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "ExitBlock",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class ExitBlock(ControlBlock):\n    \"\"\"Non-empty exit point block.\"\"\"\n    def empty(self):\n        return False\nclass AssignmentList(object):\n    def __init__(self):\n        self.stats = []\nclass ControlFlow(object):\n    \"\"\"Control-flow graph.\n       entry_point ControlBlock entry point for this graph",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "AssignmentList",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class AssignmentList(object):\n    def __init__(self):\n        self.stats = []\nclass ControlFlow(object):\n    \"\"\"Control-flow graph.\n       entry_point ControlBlock entry point for this graph\n       exit_point  ControlBlock normal exit point\n       block       ControlBlock current block\n       blocks      set    children nodes\n       entries     set    tracked entries",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "ControlFlow",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class ControlFlow(object):\n    \"\"\"Control-flow graph.\n       entry_point ControlBlock entry point for this graph\n       exit_point  ControlBlock normal exit point\n       block       ControlBlock current block\n       blocks      set    children nodes\n       entries     set    tracked entries\n       loops       list   stack for loop descriptors\n       exceptions  list   stack for exception descriptors\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "LoopDescr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class LoopDescr(object):\n    def __init__(self, next_block, loop_block):\n        self.next_block = next_block\n        self.loop_block = loop_block\n        self.exceptions = []\nclass ExceptionDescr(object):\n    \"\"\"Exception handling helper.\n    entry_point   ControlBlock Exception handling entry point\n    finally_enter ControlBlock Normal finally clause entry point\n    finally_exit  ControlBlock Normal finally clause exit point",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "ExceptionDescr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class ExceptionDescr(object):\n    \"\"\"Exception handling helper.\n    entry_point   ControlBlock Exception handling entry point\n    finally_enter ControlBlock Normal finally clause entry point\n    finally_exit  ControlBlock Normal finally clause exit point\n    \"\"\"\n    def __init__(self, entry_point, finally_enter=None, finally_exit=None):\n        self.entry_point = entry_point\n        self.finally_enter = finally_enter\n        self.finally_exit = finally_exit",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "NameAssignment",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class NameAssignment(object):\n    def __init__(self, lhs, rhs, entry):\n        if lhs.cf_state is None:\n            lhs.cf_state = set()\n        self.lhs = lhs\n        self.rhs = rhs\n        self.entry = entry\n        self.pos = lhs.pos\n        self.refs = set()\n        self.is_arg = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "StaticAssignment",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class StaticAssignment(NameAssignment):\n    \"\"\"Initialised at declaration time, e.g. stack allocation.\"\"\"\n    def __init__(self, entry):\n        if not entry.type.is_pyobject:\n            may_be_none = False\n        else:\n            may_be_none = None  # unknown\n        lhs = TypedExprNode(\n            entry.type, may_be_none=may_be_none, pos=entry.pos)\n        super(StaticAssignment, self).__init__(lhs, lhs, entry)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "Argument",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class Argument(NameAssignment):\n    def __init__(self, lhs, rhs, entry):\n        NameAssignment.__init__(self, lhs, rhs, entry)\n        self.is_arg = True\nclass NameDeletion(NameAssignment):\n    def __init__(self, lhs, entry):\n        NameAssignment.__init__(self, lhs, lhs, entry)\n        self.is_deletion = True\n    def infer_type(self):\n        inferred_type = self.rhs.infer_type(self.entry.scope)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "NameDeletion",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class NameDeletion(NameAssignment):\n    def __init__(self, lhs, entry):\n        NameAssignment.__init__(self, lhs, lhs, entry)\n        self.is_deletion = True\n    def infer_type(self):\n        inferred_type = self.rhs.infer_type(self.entry.scope)\n        if (not inferred_type.is_pyobject and\n            inferred_type.can_coerce_to_pyobject(self.entry.scope)):\n            return py_object_type\n        self.inferred_type = inferred_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "Uninitialized",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class Uninitialized(object):\n    \"\"\"Definitely not initialised yet.\"\"\"\nclass Unknown(object):\n    \"\"\"Coming from outer closure, might be initialised or not.\"\"\"\nclass NameReference(object):\n    def __init__(self, node, entry):\n        if node.cf_state is None:\n            node.cf_state = set()\n        self.node = node\n        self.entry = entry",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "Unknown",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class Unknown(object):\n    \"\"\"Coming from outer closure, might be initialised or not.\"\"\"\nclass NameReference(object):\n    def __init__(self, node, entry):\n        if node.cf_state is None:\n            node.cf_state = set()\n        self.node = node\n        self.entry = entry\n        self.pos = node.pos\n    def __repr__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "NameReference",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class NameReference(object):\n    def __init__(self, node, entry):\n        if node.cf_state is None:\n            node.cf_state = set()\n        self.node = node\n        self.entry = entry\n        self.pos = node.pos\n    def __repr__(self):\n        return '%s(entry=%r)' % (self.__class__.__name__, self.entry)\nclass ControlFlowState(list):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "ControlFlowState",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class ControlFlowState(list):\n    # Keeps track of Node's entry assignments\n    #\n    # cf_is_null        [boolean] It is uninitialized\n    # cf_maybe_null     [boolean] May be uninitialized\n    # is_single         [boolean] Has only one assignment at this point\n    cf_maybe_null = False\n    cf_is_null = False\n    is_single = False\n    def __init__(self, state):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "GVContext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class GVContext(object):\n    \"\"\"Graphviz subgraph object.\"\"\"\n    def __init__(self):\n        self.blockids = {}\n        self.nextid = 0\n        self.children = []\n        self.sources = {}\n    def add(self, child):\n        self.children.append(child)\n    def nodeid(self, block):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "GV",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class GV(object):\n    \"\"\"Graphviz DOT renderer.\"\"\"\n    def __init__(self, name, flow):\n        self.name = name\n        self.flow = flow\n    def render(self, fp, ctx, annotate_defs=False):\n        fp.write(' subgraph %s {\\n' % self.name)\n        for block in self.flow.blocks:\n            label = ctx.extract_sources(block)\n            if annotate_defs:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "MessageCollection",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class MessageCollection(object):\n    \"\"\"Collect error/warnings messages first then sort\"\"\"\n    def __init__(self):\n        self.messages = set()\n    def error(self, pos, message):\n        self.messages.add((pos, True, message))\n    def warning(self, pos, message):\n        self.messages.add((pos, False, message))\n    def report(self):\n        for pos, is_error, message in sorted(self.messages):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "AssignmentCollector",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class AssignmentCollector(TreeVisitor):\n    def __init__(self):\n        super(AssignmentCollector, self).__init__()\n        self.assignments = []\n    def visit_Node(self):\n        self._visitchildren(self, None)\n    def visit_SingleAssignmentNode(self, node):\n        self.assignments.append((node.lhs, node.rhs))\n    def visit_CascadedAssignmentNode(self, node):\n        for lhs in node.lhs_list:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "ControlFlowAnalysis",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class ControlFlowAnalysis(CythonTransform):\n    def visit_ModuleNode(self, node):\n        self.gv_ctx = GVContext()\n        self.constant_folder = ConstantFolding()\n        # Set of NameNode reductions\n        self.reductions = set()\n        self.in_inplace_assignment = False\n        self.env_stack = []\n        self.env = node.scope\n        self.stack = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "check_definitions",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "def check_definitions(flow, compiler_directives):\n    flow.initialize()\n    flow.reaching_definitions()\n    # Track down state\n    assignments = set()\n    # Node to entry map\n    references = {}\n    assmt_nodes = set()\n    for block in flow.blocks:\n        i_state = block.i_input",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "object_expr",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "object_expr = TypedExprNode(py_object_type, may_be_none=True)\n# Fake rhs to silence \"unused variable\" warning\nfake_rhs_expr = TypedExprNode(unspecified_type)\nclass ControlBlock(object):\n    \"\"\"Control flow graph node. Sequence of assignments and name references.\n       children  set of children nodes\n       parents   set of parent nodes\n       positions set of position markers\n       stats     list of block statements\n       gen       dict of assignments generated by this block",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "fake_rhs_expr",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "fake_rhs_expr = TypedExprNode(unspecified_type)\nclass ControlBlock(object):\n    \"\"\"Control flow graph node. Sequence of assignments and name references.\n       children  set of children nodes\n       parents   set of parent nodes\n       positions set of position markers\n       stats     list of block statements\n       gen       dict of assignments generated by this block\n       bounded   set  of entries that are definitely bounded in this block\n       Example:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "FusedCFuncDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FusedNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FusedNode",
        "peekOfCode": "class FusedCFuncDefNode(StatListNode):\n    \"\"\"\n    This node replaces a function with fused arguments. It deep-copies the\n    function for every permutation of fused types, and allocates a new local\n    scope for it. It keeps track of the original function in self.node, and\n    the entry of the original function in the symbol table is given the\n    'fused_cfunction' attribute which points back to us.\n    Then when a function lookup occurs (to e.g. call it), the call can be\n    dispatched to the right function.\n    node    FuncDefNode    the original function",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.FusedNode",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "peekOfCode": "unicode_literals = _get_feature(\"unicode_literals\")\nwith_statement = _get_feature(\"with_statement\")  # dummy\ndivision = _get_feature(\"division\")\nprint_function = _get_feature(\"print_function\")\nabsolute_import = _get_feature(\"absolute_import\")\nnested_scopes = _get_feature(\"nested_scopes\")  # dummy\ngenerators = _get_feature(\"generators\")  # dummy\ngenerator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "with_statement",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "peekOfCode": "with_statement = _get_feature(\"with_statement\")  # dummy\ndivision = _get_feature(\"division\")\nprint_function = _get_feature(\"print_function\")\nabsolute_import = _get_feature(\"absolute_import\")\nnested_scopes = _get_feature(\"nested_scopes\")  # dummy\ngenerators = _get_feature(\"generators\")  # dummy\ngenerator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "division",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "peekOfCode": "division = _get_feature(\"division\")\nprint_function = _get_feature(\"print_function\")\nabsolute_import = _get_feature(\"absolute_import\")\nnested_scopes = _get_feature(\"nested_scopes\")  # dummy\ngenerators = _get_feature(\"generators\")  # dummy\ngenerator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "print_function",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "peekOfCode": "print_function = _get_feature(\"print_function\")\nabsolute_import = _get_feature(\"absolute_import\")\nnested_scopes = _get_feature(\"nested_scopes\")  # dummy\ngenerators = _get_feature(\"generators\")  # dummy\ngenerator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "peekOfCode": "absolute_import = _get_feature(\"absolute_import\")\nnested_scopes = _get_feature(\"nested_scopes\")  # dummy\ngenerators = _get_feature(\"generators\")  # dummy\ngenerator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "nested_scopes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "peekOfCode": "nested_scopes = _get_feature(\"nested_scopes\")  # dummy\ngenerators = _get_feature(\"generators\")  # dummy\ngenerator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "generators",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "peekOfCode": "generators = _get_feature(\"generators\")  # dummy\ngenerator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "generator_stop",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "peekOfCode": "generator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "EmptyScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Interpreter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Interpreter",
        "peekOfCode": "class EmptyScope(object):\n    def lookup(self, name):\n        return None\nempty_scope = EmptyScope()\ndef interpret_compiletime_options(optlist, optdict, type_env=None, type_args=()):\n    \"\"\"\n    Tries to interpret a list of compile time option nodes.\n    The result will be a tuple (optlist, optdict) but where\n    all expression nodes have been interpreted. The result is\n    in the form of tuples (value, pos).",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Interpreter",
        "documentation": {}
    },
    {
        "label": "interpret_compiletime_options",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Interpreter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Interpreter",
        "peekOfCode": "def interpret_compiletime_options(optlist, optdict, type_env=None, type_args=()):\n    \"\"\"\n    Tries to interpret a list of compile time option nodes.\n    The result will be a tuple (optlist, optdict) but where\n    all expression nodes have been interpreted. The result is\n    in the form of tuples (value, pos).\n    optlist is a list of nodes, while optdict is a DictNode (the\n    result optdict is a dict)\n    If type_env is set, all type nodes will be analysed and the resulting\n    type set. Otherwise only interpretateable ExprNodes",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Interpreter",
        "documentation": {}
    },
    {
        "label": "empty_scope",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Interpreter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Interpreter",
        "peekOfCode": "empty_scope = EmptyScope()\ndef interpret_compiletime_options(optlist, optdict, type_env=None, type_args=()):\n    \"\"\"\n    Tries to interpret a list of compile time option nodes.\n    The result will be a tuple (optlist, optdict) but where\n    all expression nodes have been interpreted. The result is\n    in the form of tuples (value, pos).\n    optlist is a list of nodes, while optdict is a DictNode (the\n    result optdict is a dict)\n    If type_env is set, all type nodes will be analysed and the resulting",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Interpreter",
        "documentation": {}
    },
    {
        "label": "make_lexicon",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "peekOfCode": "def make_lexicon():\n    from ..Plex import \\\n        Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \\\n        TEXT, IGNORE, State, Lexicon\n    from .Scanning import Method\n    letter = Any(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_\")\n    digit = Any(\"0123456789\")\n    bindigit = Any(\"01\")\n    octdigit = Any(\"01234567\")\n    hexdigit = Any(\"0123456789ABCDEFabcdef\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "documentation": {}
    },
    {
        "label": "raw_prefixes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "peekOfCode": "raw_prefixes = \"rR\"\nbytes_prefixes = \"bB\"\nstring_prefixes = \"fFuU\" + bytes_prefixes\nchar_prefixes = \"cC\"\nany_string_prefix = raw_prefixes + string_prefixes + char_prefixes\nIDENT = 'IDENT'\ndef make_lexicon():\n    from ..Plex import \\\n        Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \\\n        TEXT, IGNORE, State, Lexicon",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "documentation": {}
    },
    {
        "label": "bytes_prefixes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "peekOfCode": "bytes_prefixes = \"bB\"\nstring_prefixes = \"fFuU\" + bytes_prefixes\nchar_prefixes = \"cC\"\nany_string_prefix = raw_prefixes + string_prefixes + char_prefixes\nIDENT = 'IDENT'\ndef make_lexicon():\n    from ..Plex import \\\n        Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \\\n        TEXT, IGNORE, State, Lexicon\n    from .Scanning import Method",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "documentation": {}
    },
    {
        "label": "string_prefixes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "peekOfCode": "string_prefixes = \"fFuU\" + bytes_prefixes\nchar_prefixes = \"cC\"\nany_string_prefix = raw_prefixes + string_prefixes + char_prefixes\nIDENT = 'IDENT'\ndef make_lexicon():\n    from ..Plex import \\\n        Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \\\n        TEXT, IGNORE, State, Lexicon\n    from .Scanning import Method\n    letter = Any(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "documentation": {}
    },
    {
        "label": "char_prefixes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "peekOfCode": "char_prefixes = \"cC\"\nany_string_prefix = raw_prefixes + string_prefixes + char_prefixes\nIDENT = 'IDENT'\ndef make_lexicon():\n    from ..Plex import \\\n        Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \\\n        TEXT, IGNORE, State, Lexicon\n    from .Scanning import Method\n    letter = Any(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_\")\n    digit = Any(\"0123456789\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "documentation": {}
    },
    {
        "label": "any_string_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "peekOfCode": "any_string_prefix = raw_prefixes + string_prefixes + char_prefixes\nIDENT = 'IDENT'\ndef make_lexicon():\n    from ..Plex import \\\n        Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \\\n        TEXT, IGNORE, State, Lexicon\n    from .Scanning import Method\n    letter = Any(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_\")\n    digit = Any(\"0123456789\")\n    bindigit = Any(\"01\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "documentation": {}
    },
    {
        "label": "IDENT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "peekOfCode": "IDENT = 'IDENT'\ndef make_lexicon():\n    from ..Plex import \\\n        Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \\\n        TEXT, IGNORE, State, Lexicon\n    from .Scanning import Method\n    letter = Any(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_\")\n    digit = Any(\"0123456789\")\n    bindigit = Any(\"01\")\n    octdigit = Any(\"01234567\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Lexicon",
        "documentation": {}
    },
    {
        "label": "CompilationData",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "class CompilationData(object):\n    #  Bundles the information that is passed from transform to transform.\n    #  (For now, this is only)\n    #  While Context contains every pxd ever loaded, path information etc.,\n    #  this only contains the data related to a single compilation pass\n    #\n    #  pyx                   ModuleNode              Main code tree of this compilation.\n    #  pxds                  {string : ModuleNode}   Trees for the pxds used in the pyx.\n    #  codewriter            CCodeWriter             Where to output final code.\n    #  options               CompilationOptions",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "Context",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "class Context(object):\n    #  This class encapsulates the context needed for compiling\n    #  one or more Cython implementation files along with their\n    #  associated and imported declaration files. It includes\n    #  the root of the module import namespace and the list\n    #  of directories to search for include files.\n    #\n    #  modules               {string : ModuleScope}\n    #  include_directories   [string]\n    #  future_directives     [object]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "CompilationSource",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "class CompilationSource(object):\n    \"\"\"\n    Contains the data necessary to start up a compilation pipeline for\n    a single compilation unit.\n    \"\"\"\n    def __init__(self, source_desc, full_module_name, cwd):\n        self.source_desc = source_desc\n        self.full_module_name = full_module_name\n        self.cwd = cwd\nclass CompilationOptions(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "CompilationOptions",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "class CompilationOptions(object):\n    r\"\"\"\n    See default_options at the end of this module for a list of all possible\n    options and CmdLine.usage and CmdLine.parse_command_line() for their\n    meaning.\n    \"\"\"\n    def __init__(self, defaults=None, **kw):\n        self.include_path = []\n        if defaults:\n            if isinstance(defaults, CompilationOptions):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "CompilationResult",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "class CompilationResult(object):\n    \"\"\"\n    Results from the Cython compiler:\n    c_file           string or None   The generated C source file\n    h_file           string or None   The generated C header file\n    i_file           string or None   The generated .pxi file\n    api_file         string or None   The generated C API .h file\n    listing_file     string or None   File of error messages\n    object_file      string or None   Result of compiling the C file\n    extension_file   string or None   Result of linking the object file",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "CompilationResultSet",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "class CompilationResultSet(dict):\n    \"\"\"\n    Results from compiling multiple Pyrex source files. A mapping\n    from source file paths to CompilationResult instances. Also\n    has the following attributes:\n    num_errors   integer   Total number of compilation errors\n    \"\"\"\n    num_errors = 0\n    def add(self, source, result):\n        self[source] = result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "get_output_filename",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "def get_output_filename(source_filename, cwd, options):\n    if options.cplus:\n        c_suffix = \".cpp\"\n    else:\n        c_suffix = \".c\"\n    suggested_file_name = Utils.replace_suffix(source_filename, c_suffix)\n    if options.output_file:\n        out_path = os.path.join(cwd, options.output_file)\n        if os.path.isdir(out_path):\n            return os.path.join(out_path, os.path.basename(suggested_file_name))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "create_default_resultobj",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "def create_default_resultobj(compilation_source, options):\n    result = CompilationResult()\n    result.main_source_file = compilation_source.source_desc.filename\n    result.compilation_source = compilation_source\n    source_desc = compilation_source.source_desc\n    result.c_file = get_output_filename(source_desc.filename,\n                        compilation_source.cwd, options)\n    result.embedded_metadata = options.embedded_metadata\n    return result\ndef run_pipeline(source, options, full_module_name=None, context=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "run_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "def run_pipeline(source, options, full_module_name=None, context=None):\n    from . import Pipeline\n    source_ext = os.path.splitext(source)[1]\n    options.configure_language_defaults(source_ext[1:]) # py/pyx\n    if context is None:\n        context = options.create_context()\n    # Set up source object\n    cwd = os.getcwd()\n    abs_path = os.path.abspath(source)\n    full_module_name = full_module_name or context.extract_module_name(source, options)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "compile_single",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "def compile_single(source, options, full_module_name = None):\n    \"\"\"\n    compile_single(source, options, full_module_name)\n    Compile the given Pyrex implementation file and return a CompilationResult.\n    Always compiles a single file; does not perform timestamp checking or\n    recursion.\n    \"\"\"\n    return run_pipeline(source, options, full_module_name)\ndef compile_multiple(sources, options):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "compile_multiple",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "def compile_multiple(sources, options):\n    \"\"\"\n    compile_multiple(sources, options)\n    Compiles the given sequence of Pyrex implementation files and returns\n    a CompilationResultSet. Performs timestamp checking and/or recursion\n    if these are specified in the options.\n    \"\"\"\n    if options.module_name and len(sources) > 1:\n        raise RuntimeError('Full module name can only be set '\n                           'for single source compilation')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "compile",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "def compile(source, options = None, full_module_name = None, **kwds):\n    \"\"\"\n    compile(source [, options], [, <option> = <value>]...)\n    Compile one or more Pyrex implementation files, with optional timestamp\n    checking and recursing on dependencies.  The source argument may be a string\n    or a sequence of strings.  If it is a string and no recursion or timestamp\n    checking is requested, a CompilationResult is returned, otherwise a\n    CompilationResultSet is returned.\n    \"\"\"\n    options = CompilationOptions(defaults = options, **kwds)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "search_include_directories",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "def search_include_directories(dirs, qualified_name, suffix, pos, include=False):\n    \"\"\"\n    Search the list of include directories for the given file name.\n    If a source file position is given, first searches the directory\n    containing that file. Returns None if not found, but does not\n    report an error.\n    The 'include' option will disable package dereferencing.\n    \"\"\"\n    if pos:\n        file_desc = pos[0]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "setuptools_main",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "def setuptools_main():\n    return main(command_line = 1)\ndef main(command_line = 0):\n    args = sys.argv[1:]\n    any_failures = 0\n    if command_line:\n        from .CmdLine import parse_command_line\n        options, sources = parse_command_line(args)\n    else:\n        options = CompilationOptions(default_options)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "def main(command_line = 0):\n    args = sys.argv[1:]\n    any_failures = 0\n    if command_line:\n        from .CmdLine import parse_command_line\n        options, sources = parse_command_line(args)\n    else:\n        options = CompilationOptions(default_options)\n        sources = args\n    if options.show_version:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "version = Version.version  # legacy attribute - use \"Cython.__version__\" instead\nmodule_name_pattern = re.compile(r\"[A-Za-z_][A-Za-z0-9_]*(\\.[A-Za-z_][A-Za-z0-9_]*)*$\")\nverbose = 0\nstandard_include_path = os.path.abspath(os.path.join(os.path.dirname(__file__),\n                                        os.path.pardir, 'Includes'))\nclass CompilationData(object):\n    #  Bundles the information that is passed from transform to transform.\n    #  (For now, this is only)\n    #  While Context contains every pxd ever loaded, path information etc.,\n    #  this only contains the data related to a single compilation pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "module_name_pattern",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "module_name_pattern = re.compile(r\"[A-Za-z_][A-Za-z0-9_]*(\\.[A-Za-z_][A-Za-z0-9_]*)*$\")\nverbose = 0\nstandard_include_path = os.path.abspath(os.path.join(os.path.dirname(__file__),\n                                        os.path.pardir, 'Includes'))\nclass CompilationData(object):\n    #  Bundles the information that is passed from transform to transform.\n    #  (For now, this is only)\n    #  While Context contains every pxd ever loaded, path information etc.,\n    #  this only contains the data related to a single compilation pass\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "verbose = 0\nstandard_include_path = os.path.abspath(os.path.join(os.path.dirname(__file__),\n                                        os.path.pardir, 'Includes'))\nclass CompilationData(object):\n    #  Bundles the information that is passed from transform to transform.\n    #  (For now, this is only)\n    #  While Context contains every pxd ever loaded, path information etc.,\n    #  this only contains the data related to a single compilation pass\n    #\n    #  pyx                   ModuleNode              Main code tree of this compilation.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "standard_include_path",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "standard_include_path = os.path.abspath(os.path.join(os.path.dirname(__file__),\n                                        os.path.pardir, 'Includes'))\nclass CompilationData(object):\n    #  Bundles the information that is passed from transform to transform.\n    #  (For now, this is only)\n    #  While Context contains every pxd ever loaded, path information etc.,\n    #  this only contains the data related to a single compilation pass\n    #\n    #  pyx                   ModuleNode              Main code tree of this compilation.\n    #  pxds                  {string : ModuleNode}   Trees for the pxds used in the pyx.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "default_options",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "peekOfCode": "default_options = dict(\n    show_version = 0,\n    use_listing_file = 0,\n    errors_to_stderr = 1,\n    cplus = 0,\n    output_file = None,\n    annotate = None,\n    annotate_coverage_xml = None,\n    generate_pxi = 0,\n    capi_reexport_cincludes = 0,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "MemoryViewSliceBufferEntry",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "class MemoryViewSliceBufferEntry(Buffer.BufferEntry):\n    \"\"\"\n    May be used during code generation time to be queried for\n    shape/strides/suboffsets attributes, or to perform indexing or slicing.\n    \"\"\"\n    def __init__(self, entry):\n        self.entry = entry\n        self.type = entry.type\n        self.cname = entry.cname\n        self.buf_ptr = \"%s.data\" % self.cname",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "SliceIter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "class SliceIter(object):\n    def __init__(self, slice_type, slice_result, ndim, code):\n        self.slice_type = slice_type\n        self.slice_result = slice_result\n        self.code = code\n        self.ndim = ndim\nclass ContigSliceIter(SliceIter):\n    def start_loops(self):\n        code = self.code\n        code.begin_block()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "ContigSliceIter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "class ContigSliceIter(SliceIter):\n    def start_loops(self):\n        code = self.code\n        code.begin_block()\n        type_decl = self.slice_type.dtype.empty_declaration_code()\n        total_size = ' * '.join(\"%s.shape[%d]\" % (self.slice_result, i)\n                                for i in range(self.ndim))\n        code.putln(\"Py_ssize_t __pyx_temp_extent = %s;\" % total_size)\n        code.putln(\"Py_ssize_t __pyx_temp_idx;\")\n        code.putln(\"%s *__pyx_temp_pointer = (%s *) %s.data;\" % (",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "StridedSliceIter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "class StridedSliceIter(SliceIter):\n    def start_loops(self):\n        code = self.code\n        code.begin_block()\n        for i in range(self.ndim):\n            t = i, self.slice_result, i\n            code.putln(\"Py_ssize_t __pyx_temp_extent_%d = %s.shape[%d];\" % t)\n            code.putln(\"Py_ssize_t __pyx_temp_stride_%d = %s.strides[%d];\" % t)\n            code.putln(\"char *__pyx_temp_pointer_%d;\" % i)\n            code.putln(\"Py_ssize_t __pyx_temp_idx_%d;\" % i)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "concat_flags",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)\nformat_flag = \"PyBUF_FORMAT\"\nmemview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_full_access = \"PyBUF_FULL_RO\"\n#memview_strided_access = \"PyBUF_STRIDED_RO\"\nmemview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "put_init_entry",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def put_init_entry(mv_cname, code):\n    code.putln(\"%s.data = NULL;\" % mv_cname)\n    code.putln(\"%s.memview = NULL;\" % mv_cname)\n#def axes_to_str(axes):\n#    return \"\".join([access[0].upper()+packing[0] for (access, packing) in axes])\ndef put_acquire_memoryviewslice(lhs_cname, lhs_type, lhs_pos, rhs, code,\n                                have_gil=False, first_assignment=True):\n    \"We can avoid decreffing the lhs if we know it is the first assignment\"\n    assert rhs.type.is_memoryviewslice\n    pretty_rhs = rhs.result_in_temp() or rhs.is_simple()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "put_acquire_memoryviewslice",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def put_acquire_memoryviewslice(lhs_cname, lhs_type, lhs_pos, rhs, code,\n                                have_gil=False, first_assignment=True):\n    \"We can avoid decreffing the lhs if we know it is the first assignment\"\n    assert rhs.type.is_memoryviewslice\n    pretty_rhs = rhs.result_in_temp() or rhs.is_simple()\n    if pretty_rhs:\n        rhstmp = rhs.result()\n    else:\n        rhstmp = code.funcstate.allocate_temp(lhs_type, manage_ref=False)\n        code.putln(\"%s = %s;\" % (rhstmp, rhs.result_as(lhs_type)))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "put_assign_to_memviewslice",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def put_assign_to_memviewslice(lhs_cname, rhs, rhs_cname, memviewslicetype, code,\n                               have_gil=False, first_assignment=False):\n    if not first_assignment:\n        code.put_xdecref_memoryviewslice(lhs_cname, have_gil=have_gil)\n    if not rhs.result_in_temp():\n        rhs.make_owned_memoryviewslice(code)\n    code.putln(\"%s = %s;\" % (lhs_cname, rhs_cname))\ndef get_buf_flags(specs):\n    is_c_contig, is_f_contig = is_cf_contig(specs)\n    if is_c_contig:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "get_buf_flags",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def get_buf_flags(specs):\n    is_c_contig, is_f_contig = is_cf_contig(specs)\n    if is_c_contig:\n        return memview_c_contiguous\n    elif is_f_contig:\n        return memview_f_contiguous\n    access, packing = zip(*specs)\n    if 'full' in access or 'ptr' in access:\n        return memview_full_access\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "insert_newaxes",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def insert_newaxes(memoryviewtype, n):\n    axes = [('direct', 'strided')] * n\n    axes.extend(memoryviewtype.axes)\n    return PyrexTypes.MemoryViewSliceType(memoryviewtype.dtype, axes)\ndef broadcast_types(src, dst):\n    n = abs(src.ndim - dst.ndim)\n    if src.ndim < dst.ndim:\n        return insert_newaxes(src, n), dst\n    else:\n        return src, insert_newaxes(dst, n)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "broadcast_types",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def broadcast_types(src, dst):\n    n = abs(src.ndim - dst.ndim)\n    if src.ndim < dst.ndim:\n        return insert_newaxes(src, n), dst\n    else:\n        return src, insert_newaxes(dst, n)\ndef valid_memslice_dtype(dtype, i=0):\n    \"\"\"\n    Return whether type dtype can be used as the base type of a\n    memoryview slice.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "valid_memslice_dtype",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def valid_memslice_dtype(dtype, i=0):\n    \"\"\"\n    Return whether type dtype can be used as the base type of a\n    memoryview slice.\n    We support structs, numeric types and objects\n    \"\"\"\n    if dtype.is_complex and dtype.real_type.is_int:\n        return False\n    if dtype is PyrexTypes.c_bint_type:\n        return False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "empty_slice",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def empty_slice(pos):\n    none = ExprNodes.NoneNode(pos)\n    return ExprNodes.SliceNode(pos, start=none,\n                               stop=none, step=none)\ndef unellipsify(indices, ndim):\n    result = []\n    seen_ellipsis = False\n    have_slices = False\n    newaxes = [newaxis for newaxis in indices if newaxis.is_none]\n    n_indices = len(indices) - len(newaxes)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "unellipsify",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def unellipsify(indices, ndim):\n    result = []\n    seen_ellipsis = False\n    have_slices = False\n    newaxes = [newaxis for newaxis in indices if newaxis.is_none]\n    n_indices = len(indices) - len(newaxes)\n    for index in indices:\n        if isinstance(index, ExprNodes.EllipsisNode):\n            have_slices = True\n            full_slice = empty_slice(index.pos)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "get_memoryview_flag",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def get_memoryview_flag(access, packing):\n    if access == 'full' and packing in ('strided', 'follow'):\n        return 'generic'\n    elif access == 'full' and packing == 'contig':\n        return 'generic_contiguous'\n    elif access == 'ptr' and packing in ('strided', 'follow'):\n        return 'indirect'\n    elif access == 'ptr' and packing == 'contig':\n        return 'indirect_contiguous'\n    elif access == 'direct' and packing in ('strided', 'follow'):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "get_is_contig_func_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def get_is_contig_func_name(contig_type, ndim):\n    assert contig_type in ('C', 'F')\n    return \"__pyx_memviewslice_is_contig_%s%d\" % (contig_type, ndim)\ndef get_is_contig_utility(contig_type, ndim):\n    assert contig_type in ('C', 'F')\n    C = dict(context, ndim=ndim, contig_type=contig_type)\n    utility = load_memview_c_utility(\"MemviewSliceCheckContig\", C, requires=[is_contig_utility])\n    return utility\ndef slice_iter(slice_type, slice_result, ndim, code):\n    if slice_type.is_c_contig or slice_type.is_f_contig:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "get_is_contig_utility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def get_is_contig_utility(contig_type, ndim):\n    assert contig_type in ('C', 'F')\n    C = dict(context, ndim=ndim, contig_type=contig_type)\n    utility = load_memview_c_utility(\"MemviewSliceCheckContig\", C, requires=[is_contig_utility])\n    return utility\ndef slice_iter(slice_type, slice_result, ndim, code):\n    if slice_type.is_c_contig or slice_type.is_f_contig:\n        return ContigSliceIter(slice_type, slice_result, ndim, code)\n    else:\n        return StridedSliceIter(slice_type, slice_result, ndim, code)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "slice_iter",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def slice_iter(slice_type, slice_result, ndim, code):\n    if slice_type.is_c_contig or slice_type.is_f_contig:\n        return ContigSliceIter(slice_type, slice_result, ndim, code)\n    else:\n        return StridedSliceIter(slice_type, slice_result, ndim, code)\nclass SliceIter(object):\n    def __init__(self, slice_type, slice_result, ndim, code):\n        self.slice_type = slice_type\n        self.slice_result = slice_result\n        self.code = code",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "copy_c_or_fortran_cname",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def copy_c_or_fortran_cname(memview):\n    if memview.is_c_contig:\n        c_or_f = 'c'\n    else:\n        c_or_f = 'f'\n    return \"__pyx_memoryview_copy_slice_%s_%s\" % (\n            memview.specialization_suffix(), c_or_f)\ndef get_copy_new_utility(pos, from_memview, to_memview):\n    if (from_memview.dtype != to_memview.dtype and\n            not (from_memview.dtype.is_const and from_memview.dtype.const_base_type == to_memview.dtype)):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "get_copy_new_utility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def get_copy_new_utility(pos, from_memview, to_memview):\n    if (from_memview.dtype != to_memview.dtype and\n            not (from_memview.dtype.is_const and from_memview.dtype.const_base_type == to_memview.dtype)):\n        error(pos, \"dtypes must be the same!\")\n        return\n    if len(from_memview.axes) != len(to_memview.axes):\n        error(pos, \"number of dimensions must be same\")\n        return\n    if not (to_memview.is_c_contig or to_memview.is_f_contig):\n        error(pos, \"to_memview must be c or f contiguous.\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "get_axes_specs",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def get_axes_specs(env, axes):\n    '''\n    get_axes_specs(env, axes) -> list of (access, packing) specs for each axis.\n    access is one of 'full', 'ptr' or 'direct'\n    packing is one of 'contig', 'strided' or 'follow'\n    '''\n    cythonscope = env.global_scope().context.cython_scope\n    cythonscope.load_cythonscope()\n    viewscope = cythonscope.viewscope\n    access_specs = tuple([viewscope.lookup(name)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "validate_axes",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def validate_axes(pos, axes):\n    if len(axes) >= Options.buffer_max_dims:\n        error(pos, \"More dimensions than the maximum number\"\n                   \" of buffer dimensions were used.\")\n        return False\n    return True\ndef is_cf_contig(specs):\n    is_c_contig = is_f_contig = False\n    if len(specs) == 1 and specs == [('direct', 'contig')]:\n        is_c_contig = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "is_cf_contig",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def is_cf_contig(specs):\n    is_c_contig = is_f_contig = False\n    if len(specs) == 1 and specs == [('direct', 'contig')]:\n        is_c_contig = True\n    elif (specs[-1] == ('direct','contig') and\n          all(axis == ('direct','follow') for axis in specs[:-1])):\n        # c_contiguous: 'follow', 'follow', ..., 'follow', 'contig'\n        is_c_contig = True\n    elif (len(specs) > 1 and\n        specs[0] == ('direct','contig') and",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "get_mode",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def get_mode(specs):\n    is_c_contig, is_f_contig = is_cf_contig(specs)\n    if is_c_contig:\n        return 'c'\n    elif is_f_contig:\n        return 'fortran'\n    for access, packing in specs:\n        if access in ('ptr', 'full'):\n            return 'full'\n    return 'strided'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "validate_axes_specs",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def validate_axes_specs(positions, specs, is_c_contig, is_f_contig):\n    packing_specs = ('contig', 'strided', 'follow')\n    access_specs = ('direct', 'ptr', 'full')\n    # is_c_contig, is_f_contig = is_cf_contig(specs)\n    has_contig = has_follow = has_strided = has_generic_contig = False\n    last_indirect_dimension = -1\n    for idx, (access, packing) in enumerate(specs):\n        if access == 'ptr':\n            last_indirect_dimension = idx\n    for idx, (pos, (access, packing)) in enumerate(zip(positions, specs)):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "load_memview_cy_utility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def load_memview_cy_utility(util_code_name, context=None, **kwargs):\n    return CythonUtilityCode.load(util_code_name, \"MemoryView.pyx\",\n                                  context=context, **kwargs)\ndef load_memview_c_utility(util_code_name, context=None, **kwargs):\n    if context is None:\n        return UtilityCode.load(util_code_name, \"MemoryView_C.c\", **kwargs)\n    else:\n        return TempitaUtilityCode.load(util_code_name, \"MemoryView_C.c\",\n                                       context=context, **kwargs)\ndef use_cython_array_utility_code(env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "load_memview_c_utility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def load_memview_c_utility(util_code_name, context=None, **kwargs):\n    if context is None:\n        return UtilityCode.load(util_code_name, \"MemoryView_C.c\", **kwargs)\n    else:\n        return TempitaUtilityCode.load(util_code_name, \"MemoryView_C.c\",\n                                       context=context, **kwargs)\ndef use_cython_array_utility_code(env):\n    cython_scope = env.global_scope().context.cython_scope\n    cython_scope.load_cythonscope()\n    cython_scope.viewscope.lookup('array_cwrapper').used = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "use_cython_array_utility_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def use_cython_array_utility_code(env):\n    cython_scope = env.global_scope().context.cython_scope\n    cython_scope.load_cythonscope()\n    cython_scope.viewscope.lookup('array_cwrapper').used = True\ncontext = {\n    'memview_struct_name': memview_objstruct_cname,\n    'max_dims': Options.buffer_max_dims,\n    'memviewslice_name': memviewslice_cname,\n    'memslice_init': memslice_entry_init,\n}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "START_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "START_ERR = \"Start must not be given.\"\nSTOP_ERR = \"Axis specification only allowed in the 'step' slot.\"\nSTEP_ERR = \"Step must be omitted, 1, or a valid specifier.\"\nBOTH_CF_ERR = \"Cannot specify an array that is both C and Fortran contiguous.\"\nINVALID_ERR = \"Invalid axis specification.\"\nNOT_CIMPORTED_ERR = \"Variable was not cimported from cython.view\"\nEXPR_ERR = \"no expressions allowed in axis spec, only names and literals.\"\nCF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "STOP_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "STOP_ERR = \"Axis specification only allowed in the 'step' slot.\"\nSTEP_ERR = \"Step must be omitted, 1, or a valid specifier.\"\nBOTH_CF_ERR = \"Cannot specify an array that is both C and Fortran contiguous.\"\nINVALID_ERR = \"Invalid axis specification.\"\nNOT_CIMPORTED_ERR = \"Variable was not cimported from cython.view\"\nEXPR_ERR = \"no expressions allowed in axis spec, only names and literals.\"\nCF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "STEP_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "STEP_ERR = \"Step must be omitted, 1, or a valid specifier.\"\nBOTH_CF_ERR = \"Cannot specify an array that is both C and Fortran contiguous.\"\nINVALID_ERR = \"Invalid axis specification.\"\nNOT_CIMPORTED_ERR = \"Variable was not cimported from cython.view\"\nEXPR_ERR = \"no expressions allowed in axis spec, only names and literals.\"\nCF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "BOTH_CF_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "BOTH_CF_ERR = \"Cannot specify an array that is both C and Fortran contiguous.\"\nINVALID_ERR = \"Invalid axis specification.\"\nNOT_CIMPORTED_ERR = \"Variable was not cimported from cython.view\"\nEXPR_ERR = \"no expressions allowed in axis spec, only names and literals.\"\nCF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)\nformat_flag = \"PyBUF_FORMAT\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "INVALID_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "INVALID_ERR = \"Invalid axis specification.\"\nNOT_CIMPORTED_ERR = \"Variable was not cimported from cython.view\"\nEXPR_ERR = \"no expressions allowed in axis spec, only names and literals.\"\nCF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)\nformat_flag = \"PyBUF_FORMAT\"\nmemview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "NOT_CIMPORTED_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "NOT_CIMPORTED_ERR = \"Variable was not cimported from cython.view\"\nEXPR_ERR = \"no expressions allowed in axis spec, only names and literals.\"\nCF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)\nformat_flag = \"PyBUF_FORMAT\"\nmemview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "EXPR_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "EXPR_ERR = \"no expressions allowed in axis spec, only names and literals.\"\nCF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)\nformat_flag = \"PyBUF_FORMAT\"\nmemview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "CF_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "CF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)\nformat_flag = \"PyBUF_FORMAT\"\nmemview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_full_access = \"PyBUF_FULL_RO\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "ERR_UNINITIALIZED",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "ERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)\nformat_flag = \"PyBUF_FORMAT\"\nmemview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_full_access = \"PyBUF_FULL_RO\"\n#memview_strided_access = \"PyBUF_STRIDED_RO\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "format_flag",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "format_flag = \"PyBUF_FORMAT\"\nmemview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_full_access = \"PyBUF_FULL_RO\"\n#memview_strided_access = \"PyBUF_STRIDED_RO\"\nmemview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_c_contiguous",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_full_access = \"PyBUF_FULL_RO\"\n#memview_strided_access = \"PyBUF_STRIDED_RO\"\nmemview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'\nMEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_f_contiguous",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_full_access = \"PyBUF_FULL_RO\"\n#memview_strided_access = \"PyBUF_STRIDED_RO\"\nmemview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'\nMEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'\nMEMVIEW_STRIDED= '__Pyx_MEMVIEW_STRIDED'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_any_contiguous",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_full_access = \"PyBUF_FULL_RO\"\n#memview_strided_access = \"PyBUF_STRIDED_RO\"\nmemview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'\nMEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'\nMEMVIEW_STRIDED= '__Pyx_MEMVIEW_STRIDED'\nMEMVIEW_FOLLOW = '__Pyx_MEMVIEW_FOLLOW'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_full_access",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_full_access = \"PyBUF_FULL_RO\"\n#memview_strided_access = \"PyBUF_STRIDED_RO\"\nmemview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'\nMEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'\nMEMVIEW_STRIDED= '__Pyx_MEMVIEW_STRIDED'\nMEMVIEW_FOLLOW = '__Pyx_MEMVIEW_FOLLOW'\n_spec_to_const = {",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "#memview_strided_access",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "#memview_strided_access = \"PyBUF_STRIDED_RO\"\nmemview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'\nMEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'\nMEMVIEW_STRIDED= '__Pyx_MEMVIEW_STRIDED'\nMEMVIEW_FOLLOW = '__Pyx_MEMVIEW_FOLLOW'\n_spec_to_const = {\n        'direct' : MEMVIEW_DIRECT,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_strided_access",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'\nMEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'\nMEMVIEW_STRIDED= '__Pyx_MEMVIEW_STRIDED'\nMEMVIEW_FOLLOW = '__Pyx_MEMVIEW_FOLLOW'\n_spec_to_const = {\n        'direct' : MEMVIEW_DIRECT,\n        'ptr'    : MEMVIEW_PTR,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "MEMVIEW_DIRECT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "MEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'\nMEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'\nMEMVIEW_STRIDED= '__Pyx_MEMVIEW_STRIDED'\nMEMVIEW_FOLLOW = '__Pyx_MEMVIEW_FOLLOW'\n_spec_to_const = {\n        'direct' : MEMVIEW_DIRECT,\n        'ptr'    : MEMVIEW_PTR,\n        'full'   : MEMVIEW_FULL,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "MEMVIEW_CONTIG",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "MEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'\nMEMVIEW_STRIDED= '__Pyx_MEMVIEW_STRIDED'\nMEMVIEW_FOLLOW = '__Pyx_MEMVIEW_FOLLOW'\n_spec_to_const = {\n        'direct' : MEMVIEW_DIRECT,\n        'ptr'    : MEMVIEW_PTR,\n        'full'   : MEMVIEW_FULL,\n        'contig' : MEMVIEW_CONTIG,\n        'strided': MEMVIEW_STRIDED,\n        'follow' : MEMVIEW_FOLLOW,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "MEMVIEW_FOLLOW",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "MEMVIEW_FOLLOW = '__Pyx_MEMVIEW_FOLLOW'\n_spec_to_const = {\n        'direct' : MEMVIEW_DIRECT,\n        'ptr'    : MEMVIEW_PTR,\n        'full'   : MEMVIEW_FULL,\n        'contig' : MEMVIEW_CONTIG,\n        'strided': MEMVIEW_STRIDED,\n        'follow' : MEMVIEW_FOLLOW,\n        }\n_spec_to_abbrev = {",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "_spec_to_const",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "_spec_to_const = {\n        'direct' : MEMVIEW_DIRECT,\n        'ptr'    : MEMVIEW_PTR,\n        'full'   : MEMVIEW_FULL,\n        'contig' : MEMVIEW_CONTIG,\n        'strided': MEMVIEW_STRIDED,\n        'follow' : MEMVIEW_FOLLOW,\n        }\n_spec_to_abbrev = {\n    'direct'  : 'd',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "_spec_to_abbrev",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "_spec_to_abbrev = {\n    'direct'  : 'd',\n    'ptr'     : 'p',\n    'full'    : 'f',\n    'contig'  : 'c',\n    'strided' : 's',\n    'follow'  : '_',\n}\nmemslice_entry_init = \"{ 0, 0, { 0 }, { 0 }, { 0 } }\"\nmemview_name = u'memoryview'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memslice_entry_init",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memslice_entry_init = \"{ 0, 0, { 0 }, { 0 }, { 0 } }\"\nmemview_name = u'memoryview'\nmemview_typeptr_cname = '__pyx_memoryview_type'\nmemview_objstruct_cname = '__pyx_memoryview_obj'\nmemviewslice_cname = u'__Pyx_memviewslice'\ndef put_init_entry(mv_cname, code):\n    code.putln(\"%s.data = NULL;\" % mv_cname)\n    code.putln(\"%s.memview = NULL;\" % mv_cname)\n#def axes_to_str(axes):\n#    return \"\".join([access[0].upper()+packing[0] for (access, packing) in axes])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_name",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_name = u'memoryview'\nmemview_typeptr_cname = '__pyx_memoryview_type'\nmemview_objstruct_cname = '__pyx_memoryview_obj'\nmemviewslice_cname = u'__Pyx_memviewslice'\ndef put_init_entry(mv_cname, code):\n    code.putln(\"%s.data = NULL;\" % mv_cname)\n    code.putln(\"%s.memview = NULL;\" % mv_cname)\n#def axes_to_str(axes):\n#    return \"\".join([access[0].upper()+packing[0] for (access, packing) in axes])\ndef put_acquire_memoryviewslice(lhs_cname, lhs_type, lhs_pos, rhs, code,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_typeptr_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_typeptr_cname = '__pyx_memoryview_type'\nmemview_objstruct_cname = '__pyx_memoryview_obj'\nmemviewslice_cname = u'__Pyx_memviewslice'\ndef put_init_entry(mv_cname, code):\n    code.putln(\"%s.data = NULL;\" % mv_cname)\n    code.putln(\"%s.memview = NULL;\" % mv_cname)\n#def axes_to_str(axes):\n#    return \"\".join([access[0].upper()+packing[0] for (access, packing) in axes])\ndef put_acquire_memoryviewslice(lhs_cname, lhs_type, lhs_pos, rhs, code,\n                                have_gil=False, first_assignment=True):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_objstruct_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_objstruct_cname = '__pyx_memoryview_obj'\nmemviewslice_cname = u'__Pyx_memviewslice'\ndef put_init_entry(mv_cname, code):\n    code.putln(\"%s.data = NULL;\" % mv_cname)\n    code.putln(\"%s.memview = NULL;\" % mv_cname)\n#def axes_to_str(axes):\n#    return \"\".join([access[0].upper()+packing[0] for (access, packing) in axes])\ndef put_acquire_memoryviewslice(lhs_cname, lhs_type, lhs_pos, rhs, code,\n                                have_gil=False, first_assignment=True):\n    \"We can avoid decreffing the lhs if we know it is the first assignment\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memviewslice_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memviewslice_cname = u'__Pyx_memviewslice'\ndef put_init_entry(mv_cname, code):\n    code.putln(\"%s.data = NULL;\" % mv_cname)\n    code.putln(\"%s.memview = NULL;\" % mv_cname)\n#def axes_to_str(axes):\n#    return \"\".join([access[0].upper()+packing[0] for (access, packing) in axes])\ndef put_acquire_memoryviewslice(lhs_cname, lhs_type, lhs_pos, rhs, code,\n                                have_gil=False, first_assignment=True):\n    \"We can avoid decreffing the lhs if we know it is the first assignment\"\n    assert rhs.type.is_memoryviewslice",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "view_constant_to_access_packing",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "view_constant_to_access_packing = {\n    'generic':              ('full',   'strided'),\n    'strided':              ('direct', 'strided'),\n    'indirect':             ('ptr',    'strided'),\n    'generic_contiguous':   ('full',   'contig'),\n    'contiguous':           ('direct', 'contig'),\n    'indirect_contiguous':  ('ptr',    'contig'),\n}\ndef validate_axes_specs(positions, specs, is_c_contig, is_f_contig):\n    packing_specs = ('contig', 'strided', 'follow')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "context",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "context = {\n    'memview_struct_name': memview_objstruct_cname,\n    'max_dims': Options.buffer_max_dims,\n    'memviewslice_name': memviewslice_cname,\n    'memslice_init': memslice_entry_init,\n}\nmemviewslice_declare_code = load_memview_c_utility(\n        \"MemviewSliceStruct\",\n        context=context,\n        requires=[])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memviewslice_declare_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memviewslice_declare_code = load_memview_c_utility(\n        \"MemviewSliceStruct\",\n        context=context,\n        requires=[])\natomic_utility = load_memview_c_utility(\"Atomics\", context)\nmemviewslice_init_code = load_memview_c_utility(\n    \"MemviewSliceInit\",\n    context=dict(context, BUF_MAX_NDIMS=Options.buffer_max_dims),\n    requires=[memviewslice_declare_code,\n              atomic_utility],",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "atomic_utility",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "atomic_utility = load_memview_c_utility(\"Atomics\", context)\nmemviewslice_init_code = load_memview_c_utility(\n    \"MemviewSliceInit\",\n    context=dict(context, BUF_MAX_NDIMS=Options.buffer_max_dims),\n    requires=[memviewslice_declare_code,\n              atomic_utility],\n)\nmemviewslice_index_helpers = load_memview_c_utility(\"MemviewSliceIndex\")\ntypeinfo_to_format_code = load_memview_cy_utility(\n        \"BufferFormatFromTypeInfo\", requires=[Buffer._typeinfo_to_format_code])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memviewslice_init_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memviewslice_init_code = load_memview_c_utility(\n    \"MemviewSliceInit\",\n    context=dict(context, BUF_MAX_NDIMS=Options.buffer_max_dims),\n    requires=[memviewslice_declare_code,\n              atomic_utility],\n)\nmemviewslice_index_helpers = load_memview_c_utility(\"MemviewSliceIndex\")\ntypeinfo_to_format_code = load_memview_cy_utility(\n        \"BufferFormatFromTypeInfo\", requires=[Buffer._typeinfo_to_format_code])\nis_contig_utility = load_memview_c_utility(\"MemviewSliceIsContig\", context)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memviewslice_index_helpers",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memviewslice_index_helpers = load_memview_c_utility(\"MemviewSliceIndex\")\ntypeinfo_to_format_code = load_memview_cy_utility(\n        \"BufferFormatFromTypeInfo\", requires=[Buffer._typeinfo_to_format_code])\nis_contig_utility = load_memview_c_utility(\"MemviewSliceIsContig\", context)\noverlapping_utility = load_memview_c_utility(\"OverlappingSlices\", context)\ncopy_contents_new_utility = load_memview_c_utility(\n    \"MemviewSliceCopyTemplate\",\n    context,\n    requires=[], # require cython_array_utility_code\n)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "typeinfo_to_format_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "typeinfo_to_format_code = load_memview_cy_utility(\n        \"BufferFormatFromTypeInfo\", requires=[Buffer._typeinfo_to_format_code])\nis_contig_utility = load_memview_c_utility(\"MemviewSliceIsContig\", context)\noverlapping_utility = load_memview_c_utility(\"OverlappingSlices\", context)\ncopy_contents_new_utility = load_memview_c_utility(\n    \"MemviewSliceCopyTemplate\",\n    context,\n    requires=[], # require cython_array_utility_code\n)\nview_utility_code = load_memview_cy_utility(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "is_contig_utility",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "is_contig_utility = load_memview_c_utility(\"MemviewSliceIsContig\", context)\noverlapping_utility = load_memview_c_utility(\"OverlappingSlices\", context)\ncopy_contents_new_utility = load_memview_c_utility(\n    \"MemviewSliceCopyTemplate\",\n    context,\n    requires=[], # require cython_array_utility_code\n)\nview_utility_code = load_memview_cy_utility(\n        \"View.MemoryView\",\n        context=context,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "overlapping_utility",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "overlapping_utility = load_memview_c_utility(\"OverlappingSlices\", context)\ncopy_contents_new_utility = load_memview_c_utility(\n    \"MemviewSliceCopyTemplate\",\n    context,\n    requires=[], # require cython_array_utility_code\n)\nview_utility_code = load_memview_cy_utility(\n        \"View.MemoryView\",\n        context=context,\n        requires=[Buffer.GetAndReleaseBufferUtilityCode(),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "copy_contents_new_utility",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "copy_contents_new_utility = load_memview_c_utility(\n    \"MemviewSliceCopyTemplate\",\n    context,\n    requires=[], # require cython_array_utility_code\n)\nview_utility_code = load_memview_cy_utility(\n        \"View.MemoryView\",\n        context=context,\n        requires=[Buffer.GetAndReleaseBufferUtilityCode(),\n                  Buffer.buffer_struct_declare_code,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "view_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "view_utility_code = load_memview_cy_utility(\n        \"View.MemoryView\",\n        context=context,\n        requires=[Buffer.GetAndReleaseBufferUtilityCode(),\n                  Buffer.buffer_struct_declare_code,\n                  Buffer.buffer_formats_declare_code,\n                  memviewslice_init_code,\n                  is_contig_utility,\n                  overlapping_utility,\n                  copy_contents_new_utility,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "view_utility_whitelist",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "view_utility_whitelist = ('array', 'memoryview', 'array_cwrapper',\n                          'generic', 'strided', 'indirect', 'contiguous',\n                          'indirect_contiguous')\nmemviewslice_declare_code.requires.append(view_utility_code)\ncopy_contents_new_utility.requires.append(view_utility_code)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "ModuleNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "class ModuleNode(Nodes.Node, Nodes.BlockNode):\n    #  doc       string or None\n    #  body      StatListNode\n    #\n    #  referenced_modules   [ModuleScope]\n    #  full_module_name     string\n    #\n    #  scope                The module scope.\n    #  compilation_source   A CompilationSource (see Main)\n    #  directives           Top-level compiler directives",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "ModuleImportGenerator",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "class ModuleImportGenerator(object):\n    \"\"\"\n    Helper to generate module import while importing external types.\n    This is used to avoid excessive re-imports of external modules when multiple types are looked up.\n    \"\"\"\n    def __init__(self, code, imported_modules=None):\n        self.code = code\n        self.imported = {}\n        if imported_modules:\n            for name, cname in imported_modules.items():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "check_c_declarations_pxd",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "def check_c_declarations_pxd(module_node):\n    module_node.scope.check_c_classes_pxd()\n    return module_node\ndef check_c_declarations(module_node):\n    module_node.scope.check_c_classes()\n    module_node.scope.check_c_functions()\n    return module_node\ndef generate_c_code_config(env, options):\n    if Options.annotate or options.annotate:\n        emit_linenums = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "check_c_declarations",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "def check_c_declarations(module_node):\n    module_node.scope.check_c_classes()\n    module_node.scope.check_c_functions()\n    return module_node\ndef generate_c_code_config(env, options):\n    if Options.annotate or options.annotate:\n        emit_linenums = False\n    else:\n        emit_linenums = options.emit_linenums\n    return Code.CCodeConfig(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "generate_c_code_config",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "def generate_c_code_config(env, options):\n    if Options.annotate or options.annotate:\n        emit_linenums = False\n    else:\n        emit_linenums = options.emit_linenums\n    return Code.CCodeConfig(\n        emit_linenums=emit_linenums,\n        emit_code_comments=env.directives['emit_code_comments'],\n        c_line_in_traceback=options.c_line_in_traceback)\nclass ModuleNode(Nodes.Node, Nodes.BlockNode):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "generate_cfunction_declaration",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "def generate_cfunction_declaration(entry, env, code, definition):\n    from_cy_utility = entry.used and entry.utility_code_definition\n    if entry.used and entry.inline_func_in_pxd or (not entry.in_cinclude and (\n            definition or entry.defined_in_pxd or entry.visibility == 'extern' or from_cy_utility)):\n        if entry.visibility == 'extern':\n            storage_class = Naming.extern_c_macro\n            dll_linkage = \"DL_IMPORT\"\n        elif entry.visibility == 'public':\n            storage_class = Naming.extern_c_macro\n            dll_linkage = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "refnanny_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "refnanny_utility_code = UtilityCode.load(\"Refnanny\", \"ModuleSetupCode.c\")\npacked_struct_utility_code = UtilityCode(proto=\"\"\"\n#if defined(__GNUC__)\n#define __Pyx_PACKED __attribute__((__packed__))\n#else\n#define __Pyx_PACKED\n#endif\n\"\"\", impl=\"\", proto_block='utility_code_proto_before_types')\ncapsule_utility_code = UtilityCode.load(\"Capsule\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "packed_struct_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "packed_struct_utility_code = UtilityCode(proto=\"\"\"\n#if defined(__GNUC__)\n#define __Pyx_PACKED __attribute__((__packed__))\n#else\n#define __Pyx_PACKED\n#endif\n\"\"\", impl=\"\", proto_block='utility_code_proto_before_types')\ncapsule_utility_code = UtilityCode.load(\"Capsule\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "capsule_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "capsule_utility_code = UtilityCode.load(\"Capsule\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "py_version_hex",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "def py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):\n    return (major << 24) | (minor << 16) | (micro << 8) | (release_level << 4) | (release_serial)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "codewriter_temp_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "codewriter_temp_prefix = pyrex_prefix + \"t_\"\ntemp_prefix       = u\"__cyt_\"\nbuiltin_prefix    = pyrex_prefix + \"builtin_\"\narg_prefix        = pyrex_prefix + \"arg_\"\nfuncdoc_prefix    = pyrex_prefix + \"doc_\"\nenum_prefix       = pyrex_prefix + \"e_\"\nfunc_prefix       = pyrex_prefix + \"f_\"\nfunc_prefix_api   = pyrex_prefix + \"api_f_\"\npyfunc_prefix     = pyrex_prefix + \"pf_\"\npywrap_prefix     = pyrex_prefix + \"pw_\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "method_wrapper_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "method_wrapper_prefix = pyrex_prefix + \"specialmethod_\"\nmethtab_prefix    = pyrex_prefix + \"methods_\"\nmemtab_prefix     = pyrex_prefix + \"members_\"\nobjstruct_prefix  = pyrex_prefix + \"obj_\"\ntypeptr_prefix    = pyrex_prefix + \"ptype_\"\nprop_set_prefix   = pyrex_prefix + \"setprop_\"\ntype_prefix       = pyrex_prefix + \"t_\"\ntypeobj_prefix    = pyrex_prefix + \"type_\"\nvar_prefix        = pyrex_prefix + \"v_\"\nvarptr_prefix     = pyrex_prefix + \"vp_\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "varptr_prefix_api",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "varptr_prefix_api = pyrex_prefix + \"api_vp_\"\nwrapperbase_prefix= pyrex_prefix + \"wrapperbase_\"\npybuffernd_prefix   = pyrex_prefix + \"pybuffernd_\"\npybufferstruct_prefix  = pyrex_prefix + \"pybuffer_\"\nvtable_prefix     = pyrex_prefix + \"vtable_\"\nvtabptr_prefix    = pyrex_prefix + \"vtabptr_\"\nvtabstruct_prefix = pyrex_prefix + \"vtabstruct_\"\nopt_arg_prefix    = pyrex_prefix + \"opt_args_\"\nconvert_func_prefix = pyrex_prefix + \"convert_\"\nclosure_scope_prefix = pyrex_prefix + \"scope_\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "vtabstruct_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "vtabstruct_prefix = pyrex_prefix + \"vtabstruct_\"\nopt_arg_prefix    = pyrex_prefix + \"opt_args_\"\nconvert_func_prefix = pyrex_prefix + \"convert_\"\nclosure_scope_prefix = pyrex_prefix + \"scope_\"\nclosure_class_prefix = pyrex_prefix + \"scope_struct_\"\nlambda_func_prefix = pyrex_prefix + \"lambda_\"\nmodule_is_main   = pyrex_prefix + \"module_is_main_\"\ndefaults_struct_prefix = pyrex_prefix + \"defaults\"\ndynamic_args_cname = pyrex_prefix + \"dynamic_args\"\ninterned_prefixes = {",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "convert_func_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "convert_func_prefix = pyrex_prefix + \"convert_\"\nclosure_scope_prefix = pyrex_prefix + \"scope_\"\nclosure_class_prefix = pyrex_prefix + \"scope_struct_\"\nlambda_func_prefix = pyrex_prefix + \"lambda_\"\nmodule_is_main   = pyrex_prefix + \"module_is_main_\"\ndefaults_struct_prefix = pyrex_prefix + \"defaults\"\ndynamic_args_cname = pyrex_prefix + \"dynamic_args\"\ninterned_prefixes = {\n    'str': pyrex_prefix + \"n_\",\n    'int': pyrex_prefix + \"int_\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "closure_scope_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "closure_scope_prefix = pyrex_prefix + \"scope_\"\nclosure_class_prefix = pyrex_prefix + \"scope_struct_\"\nlambda_func_prefix = pyrex_prefix + \"lambda_\"\nmodule_is_main   = pyrex_prefix + \"module_is_main_\"\ndefaults_struct_prefix = pyrex_prefix + \"defaults\"\ndynamic_args_cname = pyrex_prefix + \"dynamic_args\"\ninterned_prefixes = {\n    'str': pyrex_prefix + \"n_\",\n    'int': pyrex_prefix + \"int_\",\n    'float': pyrex_prefix + \"float_\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "closure_class_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "closure_class_prefix = pyrex_prefix + \"scope_struct_\"\nlambda_func_prefix = pyrex_prefix + \"lambda_\"\nmodule_is_main   = pyrex_prefix + \"module_is_main_\"\ndefaults_struct_prefix = pyrex_prefix + \"defaults\"\ndynamic_args_cname = pyrex_prefix + \"dynamic_args\"\ninterned_prefixes = {\n    'str': pyrex_prefix + \"n_\",\n    'int': pyrex_prefix + \"int_\",\n    'float': pyrex_prefix + \"float_\",\n    'tuple': pyrex_prefix + \"tuple_\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "lambda_func_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "lambda_func_prefix = pyrex_prefix + \"lambda_\"\nmodule_is_main   = pyrex_prefix + \"module_is_main_\"\ndefaults_struct_prefix = pyrex_prefix + \"defaults\"\ndynamic_args_cname = pyrex_prefix + \"dynamic_args\"\ninterned_prefixes = {\n    'str': pyrex_prefix + \"n_\",\n    'int': pyrex_prefix + \"int_\",\n    'float': pyrex_prefix + \"float_\",\n    'tuple': pyrex_prefix + \"tuple_\",\n    'codeobj': pyrex_prefix + \"codeobj_\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "defaults_struct_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "defaults_struct_prefix = pyrex_prefix + \"defaults\"\ndynamic_args_cname = pyrex_prefix + \"dynamic_args\"\ninterned_prefixes = {\n    'str': pyrex_prefix + \"n_\",\n    'int': pyrex_prefix + \"int_\",\n    'float': pyrex_prefix + \"float_\",\n    'tuple': pyrex_prefix + \"tuple_\",\n    'codeobj': pyrex_prefix + \"codeobj_\",\n    'slice': pyrex_prefix + \"slice_\",\n    'ustring': pyrex_prefix + \"ustring_\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "dynamic_args_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "dynamic_args_cname = pyrex_prefix + \"dynamic_args\"\ninterned_prefixes = {\n    'str': pyrex_prefix + \"n_\",\n    'int': pyrex_prefix + \"int_\",\n    'float': pyrex_prefix + \"float_\",\n    'tuple': pyrex_prefix + \"tuple_\",\n    'codeobj': pyrex_prefix + \"codeobj_\",\n    'slice': pyrex_prefix + \"slice_\",\n    'ustring': pyrex_prefix + \"ustring_\",\n    'umethod': pyrex_prefix + \"umethod_\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "interned_prefixes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "interned_prefixes = {\n    'str': pyrex_prefix + \"n_\",\n    'int': pyrex_prefix + \"int_\",\n    'float': pyrex_prefix + \"float_\",\n    'tuple': pyrex_prefix + \"tuple_\",\n    'codeobj': pyrex_prefix + \"codeobj_\",\n    'slice': pyrex_prefix + \"slice_\",\n    'ustring': pyrex_prefix + \"ustring_\",\n    'umethod': pyrex_prefix + \"umethod_\",\n}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "ctuple_type_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "ctuple_type_prefix = pyrex_prefix + \"ctuple_\"\nargs_cname       = pyrex_prefix + \"args\"\ngenerator_cname  = pyrex_prefix + \"generator\"\nsent_value_cname = pyrex_prefix + \"sent_value\"\npykwdlist_cname  = pyrex_prefix + \"pyargnames\"\nobj_base_cname   = pyrex_prefix + \"base\"\nbuiltins_cname   = pyrex_prefix + \"b\"\npreimport_cname  = pyrex_prefix + \"i\"\nmoddict_cname    = pyrex_prefix + \"d\"\ndummy_cname      = pyrex_prefix + \"dummy\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "sent_value_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "sent_value_cname = pyrex_prefix + \"sent_value\"\npykwdlist_cname  = pyrex_prefix + \"pyargnames\"\nobj_base_cname   = pyrex_prefix + \"base\"\nbuiltins_cname   = pyrex_prefix + \"b\"\npreimport_cname  = pyrex_prefix + \"i\"\nmoddict_cname    = pyrex_prefix + \"d\"\ndummy_cname      = pyrex_prefix + \"dummy\"\nfilename_cname   = pyrex_prefix + \"filename\"\nmodulename_cname = pyrex_prefix + \"modulename\"\nfiletable_cname  = pyrex_prefix + \"f\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "modulename_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "modulename_cname = pyrex_prefix + \"modulename\"\nfiletable_cname  = pyrex_prefix + \"f\"\nintern_tab_cname = pyrex_prefix + \"intern_tab\"\nkwds_cname       = pyrex_prefix + \"kwds\"\nlineno_cname     = pyrex_prefix + \"lineno\"\nclineno_cname    = pyrex_prefix + \"clineno\"\ncfilenm_cname    = pyrex_prefix + \"cfilenm\"\nlocal_tstate_cname = pyrex_prefix + \"tstate\"\nmodule_cname     = pyrex_prefix + \"m\"\nmoddoc_cname     = pyrex_prefix + \"mdoc\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "intern_tab_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "intern_tab_cname = pyrex_prefix + \"intern_tab\"\nkwds_cname       = pyrex_prefix + \"kwds\"\nlineno_cname     = pyrex_prefix + \"lineno\"\nclineno_cname    = pyrex_prefix + \"clineno\"\ncfilenm_cname    = pyrex_prefix + \"cfilenm\"\nlocal_tstate_cname = pyrex_prefix + \"tstate\"\nmodule_cname     = pyrex_prefix + \"m\"\nmoddoc_cname     = pyrex_prefix + \"mdoc\"\nmethtable_cname  = pyrex_prefix + \"methods\"\nretval_cname     = pyrex_prefix + \"r\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "local_tstate_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "local_tstate_cname = pyrex_prefix + \"tstate\"\nmodule_cname     = pyrex_prefix + \"m\"\nmoddoc_cname     = pyrex_prefix + \"mdoc\"\nmethtable_cname  = pyrex_prefix + \"methods\"\nretval_cname     = pyrex_prefix + \"r\"\nreqd_kwds_cname  = pyrex_prefix + \"reqd_kwds\"\nself_cname       = pyrex_prefix + \"self\"\nstringtab_cname  = pyrex_prefix + \"string_tab\"\nvtabslot_cname   = pyrex_prefix + \"vtab\"\nc_api_tab_cname  = pyrex_prefix + \"c_api_tab\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "skip_dispatch_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "skip_dispatch_cname = pyrex_prefix + \"skip_dispatch\"\nempty_tuple      = pyrex_prefix + \"empty_tuple\"\nempty_bytes      = pyrex_prefix + \"empty_bytes\"\nempty_unicode\t = pyrex_prefix + \"empty_unicode\"\nprint_function   = pyrex_prefix + \"print\"\nprint_function_kwargs   = pyrex_prefix + \"print_kwargs\"\ncleanup_cname    = pyrex_prefix + \"module_cleanup\"\npymoduledef_cname = pyrex_prefix + \"moduledef\"\npymoduledef_slots_cname = pyrex_prefix + \"moduledef_slots\"\npymodinit_module_arg = pyrex_prefix + \"pyinit_module\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "empty_unicode\t",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "empty_unicode\t = pyrex_prefix + \"empty_unicode\"\nprint_function   = pyrex_prefix + \"print\"\nprint_function_kwargs   = pyrex_prefix + \"print_kwargs\"\ncleanup_cname    = pyrex_prefix + \"module_cleanup\"\npymoduledef_cname = pyrex_prefix + \"moduledef\"\npymoduledef_slots_cname = pyrex_prefix + \"moduledef_slots\"\npymodinit_module_arg = pyrex_prefix + \"pyinit_module\"\npymodule_create_func_cname = pyrex_prefix + \"pymod_create\"\npymodule_exec_func_cname = pyrex_prefix + \"pymod_exec\"\noptional_args_cname = pyrex_prefix + \"optional_args\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "pymoduledef_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "pymoduledef_cname = pyrex_prefix + \"moduledef\"\npymoduledef_slots_cname = pyrex_prefix + \"moduledef_slots\"\npymodinit_module_arg = pyrex_prefix + \"pyinit_module\"\npymodule_create_func_cname = pyrex_prefix + \"pymod_create\"\npymodule_exec_func_cname = pyrex_prefix + \"pymod_exec\"\noptional_args_cname = pyrex_prefix + \"optional_args\"\nimport_star      = pyrex_prefix + \"import_star\"\nimport_star_set  = pyrex_prefix + \"import_star_set\"\nouter_scope_cname= pyrex_prefix + \"outer_scope\"\ncur_scope_cname  = pyrex_prefix + \"cur_scope\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "pymoduledef_slots_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "pymoduledef_slots_cname = pyrex_prefix + \"moduledef_slots\"\npymodinit_module_arg = pyrex_prefix + \"pyinit_module\"\npymodule_create_func_cname = pyrex_prefix + \"pymod_create\"\npymodule_exec_func_cname = pyrex_prefix + \"pymod_exec\"\noptional_args_cname = pyrex_prefix + \"optional_args\"\nimport_star      = pyrex_prefix + \"import_star\"\nimport_star_set  = pyrex_prefix + \"import_star_set\"\nouter_scope_cname= pyrex_prefix + \"outer_scope\"\ncur_scope_cname  = pyrex_prefix + \"cur_scope\"\nenc_scope_cname  = pyrex_prefix + \"enc_scope\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "pymodinit_module_arg",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "pymodinit_module_arg = pyrex_prefix + \"pyinit_module\"\npymodule_create_func_cname = pyrex_prefix + \"pymod_create\"\npymodule_exec_func_cname = pyrex_prefix + \"pymod_exec\"\noptional_args_cname = pyrex_prefix + \"optional_args\"\nimport_star      = pyrex_prefix + \"import_star\"\nimport_star_set  = pyrex_prefix + \"import_star_set\"\nouter_scope_cname= pyrex_prefix + \"outer_scope\"\ncur_scope_cname  = pyrex_prefix + \"cur_scope\"\nenc_scope_cname  = pyrex_prefix + \"enc_scope\"\nframe_cname      = pyrex_prefix + \"frame\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "pymodule_create_func_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "pymodule_create_func_cname = pyrex_prefix + \"pymod_create\"\npymodule_exec_func_cname = pyrex_prefix + \"pymod_exec\"\noptional_args_cname = pyrex_prefix + \"optional_args\"\nimport_star      = pyrex_prefix + \"import_star\"\nimport_star_set  = pyrex_prefix + \"import_star_set\"\nouter_scope_cname= pyrex_prefix + \"outer_scope\"\ncur_scope_cname  = pyrex_prefix + \"cur_scope\"\nenc_scope_cname  = pyrex_prefix + \"enc_scope\"\nframe_cname      = pyrex_prefix + \"frame\"\nframe_code_cname = pyrex_prefix + \"frame_code\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "pymodule_exec_func_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "pymodule_exec_func_cname = pyrex_prefix + \"pymod_exec\"\noptional_args_cname = pyrex_prefix + \"optional_args\"\nimport_star      = pyrex_prefix + \"import_star\"\nimport_star_set  = pyrex_prefix + \"import_star_set\"\nouter_scope_cname= pyrex_prefix + \"outer_scope\"\ncur_scope_cname  = pyrex_prefix + \"cur_scope\"\nenc_scope_cname  = pyrex_prefix + \"enc_scope\"\nframe_cname      = pyrex_prefix + \"frame\"\nframe_code_cname = pyrex_prefix + \"frame_code\"\nbinding_cfunc    = pyrex_prefix + \"binding_PyCFunctionType\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "optional_args_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "optional_args_cname = pyrex_prefix + \"optional_args\"\nimport_star      = pyrex_prefix + \"import_star\"\nimport_star_set  = pyrex_prefix + \"import_star_set\"\nouter_scope_cname= pyrex_prefix + \"outer_scope\"\ncur_scope_cname  = pyrex_prefix + \"cur_scope\"\nenc_scope_cname  = pyrex_prefix + \"enc_scope\"\nframe_cname      = pyrex_prefix + \"frame\"\nframe_code_cname = pyrex_prefix + \"frame_code\"\nbinding_cfunc    = pyrex_prefix + \"binding_PyCFunctionType\"\nfused_func_prefix = pyrex_prefix + 'fuse_'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "frame_code_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "frame_code_cname = pyrex_prefix + \"frame_code\"\nbinding_cfunc    = pyrex_prefix + \"binding_PyCFunctionType\"\nfused_func_prefix = pyrex_prefix + 'fuse_'\nquick_temp_cname = pyrex_prefix + \"temp\" # temp variable for quick'n'dirty temping\ntp_dict_version_temp = pyrex_prefix + \"tp_dict_version\"\nobj_dict_version_temp = pyrex_prefix + \"obj_dict_version\"\ntype_dict_guard_temp = pyrex_prefix + \"type_dict_guard\"\ncython_runtime_cname   = pyrex_prefix + \"cython_runtime\"\nglobal_code_object_cache_find = pyrex_prefix + 'find_code_object'\nglobal_code_object_cache_insert = pyrex_prefix + 'insert_code_object'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "fused_func_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "fused_func_prefix = pyrex_prefix + 'fuse_'\nquick_temp_cname = pyrex_prefix + \"temp\" # temp variable for quick'n'dirty temping\ntp_dict_version_temp = pyrex_prefix + \"tp_dict_version\"\nobj_dict_version_temp = pyrex_prefix + \"obj_dict_version\"\ntype_dict_guard_temp = pyrex_prefix + \"type_dict_guard\"\ncython_runtime_cname   = pyrex_prefix + \"cython_runtime\"\nglobal_code_object_cache_find = pyrex_prefix + 'find_code_object'\nglobal_code_object_cache_insert = pyrex_prefix + 'insert_code_object'\ngenexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "quick_temp_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "quick_temp_cname = pyrex_prefix + \"temp\" # temp variable for quick'n'dirty temping\ntp_dict_version_temp = pyrex_prefix + \"tp_dict_version\"\nobj_dict_version_temp = pyrex_prefix + \"obj_dict_version\"\ntype_dict_guard_temp = pyrex_prefix + \"type_dict_guard\"\ncython_runtime_cname   = pyrex_prefix + \"cython_runtime\"\nglobal_code_object_cache_find = pyrex_prefix + 'find_code_object'\nglobal_code_object_cache_insert = pyrex_prefix + 'insert_code_object'\ngenexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'\nfreecount_name = 'freecount'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "tp_dict_version_temp",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "tp_dict_version_temp = pyrex_prefix + \"tp_dict_version\"\nobj_dict_version_temp = pyrex_prefix + \"obj_dict_version\"\ntype_dict_guard_temp = pyrex_prefix + \"type_dict_guard\"\ncython_runtime_cname   = pyrex_prefix + \"cython_runtime\"\nglobal_code_object_cache_find = pyrex_prefix + 'find_code_object'\nglobal_code_object_cache_insert = pyrex_prefix + 'insert_code_object'\ngenexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'\nfreecount_name = 'freecount'\nline_c_macro = \"__LINE__\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "obj_dict_version_temp",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "obj_dict_version_temp = pyrex_prefix + \"obj_dict_version\"\ntype_dict_guard_temp = pyrex_prefix + \"type_dict_guard\"\ncython_runtime_cname   = pyrex_prefix + \"cython_runtime\"\nglobal_code_object_cache_find = pyrex_prefix + 'find_code_object'\nglobal_code_object_cache_insert = pyrex_prefix + 'insert_code_object'\ngenexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'\nfreecount_name = 'freecount'\nline_c_macro = \"__LINE__\"\nfile_c_macro = \"__FILE__\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "type_dict_guard_temp",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "type_dict_guard_temp = pyrex_prefix + \"type_dict_guard\"\ncython_runtime_cname   = pyrex_prefix + \"cython_runtime\"\nglobal_code_object_cache_find = pyrex_prefix + 'find_code_object'\nglobal_code_object_cache_insert = pyrex_prefix + 'insert_code_object'\ngenexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'\nfreecount_name = 'freecount'\nline_c_macro = \"__LINE__\"\nfile_c_macro = \"__FILE__\"\nextern_c_macro  = pyrex_prefix.upper() + \"EXTERN_C\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "global_code_object_cache_find",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "global_code_object_cache_find = pyrex_prefix + 'find_code_object'\nglobal_code_object_cache_insert = pyrex_prefix + 'insert_code_object'\ngenexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'\nfreecount_name = 'freecount'\nline_c_macro = \"__LINE__\"\nfile_c_macro = \"__FILE__\"\nextern_c_macro  = pyrex_prefix.upper() + \"EXTERN_C\"\nexc_type_name   = pyrex_prefix + \"exc_type\"\nexc_value_name  = pyrex_prefix + \"exc_value\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "global_code_object_cache_insert",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "global_code_object_cache_insert = pyrex_prefix + 'insert_code_object'\ngenexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'\nfreecount_name = 'freecount'\nline_c_macro = \"__LINE__\"\nfile_c_macro = \"__FILE__\"\nextern_c_macro  = pyrex_prefix.upper() + \"EXTERN_C\"\nexc_type_name   = pyrex_prefix + \"exc_type\"\nexc_value_name  = pyrex_prefix + \"exc_value\"\nexc_tb_name     = pyrex_prefix + \"exc_tb\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "genexpr_id_ref",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "genexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'\nfreecount_name = 'freecount'\nline_c_macro = \"__LINE__\"\nfile_c_macro = \"__FILE__\"\nextern_c_macro  = pyrex_prefix.upper() + \"EXTERN_C\"\nexc_type_name   = pyrex_prefix + \"exc_type\"\nexc_value_name  = pyrex_prefix + \"exc_value\"\nexc_tb_name     = pyrex_prefix + \"exc_tb\"\nexc_lineno_name = pyrex_prefix + \"exc_lineno\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "freecount_name",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "freecount_name = 'freecount'\nline_c_macro = \"__LINE__\"\nfile_c_macro = \"__FILE__\"\nextern_c_macro  = pyrex_prefix.upper() + \"EXTERN_C\"\nexc_type_name   = pyrex_prefix + \"exc_type\"\nexc_value_name  = pyrex_prefix + \"exc_value\"\nexc_tb_name     = pyrex_prefix + \"exc_tb\"\nexc_lineno_name = pyrex_prefix + \"exc_lineno\"\nparallel_exc_type = pyrex_prefix + \"parallel_exc_type\"\nparallel_exc_value = pyrex_prefix + \"parallel_exc_value\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "line_c_macro",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "line_c_macro = \"__LINE__\"\nfile_c_macro = \"__FILE__\"\nextern_c_macro  = pyrex_prefix.upper() + \"EXTERN_C\"\nexc_type_name   = pyrex_prefix + \"exc_type\"\nexc_value_name  = pyrex_prefix + \"exc_value\"\nexc_tb_name     = pyrex_prefix + \"exc_tb\"\nexc_lineno_name = pyrex_prefix + \"exc_lineno\"\nparallel_exc_type = pyrex_prefix + \"parallel_exc_type\"\nparallel_exc_value = pyrex_prefix + \"parallel_exc_value\"\nparallel_exc_tb = pyrex_prefix + \"parallel_exc_tb\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "file_c_macro",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "file_c_macro = \"__FILE__\"\nextern_c_macro  = pyrex_prefix.upper() + \"EXTERN_C\"\nexc_type_name   = pyrex_prefix + \"exc_type\"\nexc_value_name  = pyrex_prefix + \"exc_value\"\nexc_tb_name     = pyrex_prefix + \"exc_tb\"\nexc_lineno_name = pyrex_prefix + \"exc_lineno\"\nparallel_exc_type = pyrex_prefix + \"parallel_exc_type\"\nparallel_exc_value = pyrex_prefix + \"parallel_exc_value\"\nparallel_exc_tb = pyrex_prefix + \"parallel_exc_tb\"\nparallel_filename = pyrex_prefix + \"parallel_filename\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "exc_lineno_name",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "exc_lineno_name = pyrex_prefix + \"exc_lineno\"\nparallel_exc_type = pyrex_prefix + \"parallel_exc_type\"\nparallel_exc_value = pyrex_prefix + \"parallel_exc_value\"\nparallel_exc_tb = pyrex_prefix + \"parallel_exc_tb\"\nparallel_filename = pyrex_prefix + \"parallel_filename\"\nparallel_lineno = pyrex_prefix + \"parallel_lineno\"\nparallel_clineno = pyrex_prefix + \"parallel_clineno\"\nparallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "parallel_exc_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "parallel_exc_type = pyrex_prefix + \"parallel_exc_type\"\nparallel_exc_value = pyrex_prefix + \"parallel_exc_value\"\nparallel_exc_tb = pyrex_prefix + \"parallel_exc_tb\"\nparallel_filename = pyrex_prefix + \"parallel_filename\"\nparallel_lineno = pyrex_prefix + \"parallel_lineno\"\nparallel_clineno = pyrex_prefix + \"parallel_clineno\"\nparallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "parallel_exc_value",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "parallel_exc_value = pyrex_prefix + \"parallel_exc_value\"\nparallel_exc_tb = pyrex_prefix + \"parallel_exc_tb\"\nparallel_filename = pyrex_prefix + \"parallel_filename\"\nparallel_lineno = pyrex_prefix + \"parallel_lineno\"\nparallel_clineno = pyrex_prefix + \"parallel_clineno\"\nparallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"\napi_guard_prefix = \"__PYX_HAVE_API__\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "parallel_exc_tb",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "parallel_exc_tb = pyrex_prefix + \"parallel_exc_tb\"\nparallel_filename = pyrex_prefix + \"parallel_filename\"\nparallel_lineno = pyrex_prefix + \"parallel_lineno\"\nparallel_clineno = pyrex_prefix + \"parallel_clineno\"\nparallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"\napi_guard_prefix = \"__PYX_HAVE_API__\"\napi_func_guard   = \"__PYX_HAVE_API_FUNC_\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "parallel_filename",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "parallel_filename = pyrex_prefix + \"parallel_filename\"\nparallel_lineno = pyrex_prefix + \"parallel_lineno\"\nparallel_clineno = pyrex_prefix + \"parallel_clineno\"\nparallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"\napi_guard_prefix = \"__PYX_HAVE_API__\"\napi_func_guard   = \"__PYX_HAVE_API_FUNC_\"\nPYX_NAN          = \"__PYX_NAN()\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "parallel_lineno",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "parallel_lineno = pyrex_prefix + \"parallel_lineno\"\nparallel_clineno = pyrex_prefix + \"parallel_clineno\"\nparallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"\napi_guard_prefix = \"__PYX_HAVE_API__\"\napi_func_guard   = \"__PYX_HAVE_API_FUNC_\"\nPYX_NAN          = \"__PYX_NAN()\"\ndef py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "parallel_clineno",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "parallel_clineno = pyrex_prefix + \"parallel_clineno\"\nparallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"\napi_guard_prefix = \"__PYX_HAVE_API__\"\napi_func_guard   = \"__PYX_HAVE_API_FUNC_\"\nPYX_NAN          = \"__PYX_NAN()\"\ndef py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):\n    return (major << 24) | (minor << 16) | (micro << 8) | (release_level << 4) | (release_serial)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "parallel_why",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "parallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"\napi_guard_prefix = \"__PYX_HAVE_API__\"\napi_func_guard   = \"__PYX_HAVE_API_FUNC_\"\nPYX_NAN          = \"__PYX_NAN()\"\ndef py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):\n    return (major << 24) | (minor << 16) | (micro << 8) | (release_level << 4) | (release_serial)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "exc_vars",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "exc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"\napi_guard_prefix = \"__PYX_HAVE_API__\"\napi_func_guard   = \"__PYX_HAVE_API_FUNC_\"\nPYX_NAN          = \"__PYX_NAN()\"\ndef py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):\n    return (major << 24) | (minor << 16) | (micro << 8) | (release_level << 4) | (release_serial)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "api_guard_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "peekOfCode": "api_guard_prefix = \"__PYX_HAVE_API__\"\napi_func_guard   = \"__PYX_HAVE_API_FUNC_\"\nPYX_NAN          = \"__PYX_NAN()\"\ndef py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):\n    return (major << 24) | (minor << 16) | (micro << 8) | (release_level << 4) | (release_serial)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "VerboseCodeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class VerboseCodeWriter(type):\n    # Set this as a metaclass to trace function calls in code.\n    # This slows down code generation and makes much larger files.\n    def __new__(cls, name, bases, attrs):\n        from types import FunctionType\n        from .Code import CCodeWriter\n        attrs = dict(attrs)\n        for mname, m in attrs.items():\n            if isinstance(m, FunctionType):\n                attrs[mname] = write_func_call(m, CCodeWriter)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CheckAnalysers",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CheckAnalysers(type):\n    \"\"\"Metaclass to check that type analysis functions return a node.\n    \"\"\"\n    methods = set(['analyse_types',\n                   'analyse_expressions',\n                   'analyse_target_types'])\n    def __new__(cls, name, bases, attrs):\n        from types import FunctionType\n        def check(name, func):\n            def call(*args, **kwargs):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class Node(object):\n    #  pos         (string, int, int)   Source file position\n    #  is_name     boolean              Is a NameNode\n    #  is_literal  boolean              Is a ConstNode\n    is_name = 0\n    is_none = 0\n    is_nonecheck = 0\n    is_literal = 0\n    is_terminator = 0\n    is_wrapper = False  # is a DefNode wrapper for a C function",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CompilerDirectivesNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CompilerDirectivesNode(Node):\n    \"\"\"\n    Sets compiler directives for the children nodes\n    \"\"\"\n    #  directives     {string:value}  A dictionary holding the right value for\n    #                                 *all* possible directives.\n    #  body           Node\n    child_attrs = [\"body\"]\n    def analyse_declarations(self, env):\n        old = env.directives",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "BlockNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class BlockNode(object):\n    #  Mixin class for nodes representing a declaration block.\n    def generate_cached_builtins_decls(self, env, code):\n        entries = env.global_scope().undeclared_cached_builtins\n        for entry in entries:\n            code.globalstate.add_cached_builtin_decl(entry)\n        del entries[:]\n    def generate_lambda_definitions(self, env, code):\n        for node in env.lambda_defs:\n            node.generate_function_definitions(env, code)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "StatListNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class StatListNode(Node):\n    # stats     a list of StatNode\n    child_attrs = [\"stats\"]\n    @staticmethod\n    def create_analysed(pos, env, *args, **kw):\n        node = StatListNode(pos, *args, **kw)\n        return node  # No node-specific analysis needed\n    def analyse_declarations(self, env):\n        #print \"StatListNode.analyse_declarations\" ###\n        for stat in self.stats:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "StatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class StatNode(Node):\n    #\n    #  Code generation for statements is split into the following subphases:\n    #\n    #  (1) generate_function_definitions\n    #        Emit C code for the definitions of any structs,\n    #        unions, enums and functions defined in the current\n    #        scope-block.\n    #\n    #  (2) generate_execution_code",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CDefExternNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CDefExternNode(StatNode):\n    #  include_file       string or None\n    #  verbatim_include   string or None\n    #  body               StatListNode\n    child_attrs = [\"body\"]\n    def analyse_declarations(self, env):\n        old_cinclude_flag = env.in_cinclude\n        env.in_cinclude = 1\n        self.body.analyse_declarations(env)\n        env.in_cinclude = old_cinclude_flag",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CDeclaratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CDeclaratorNode(Node):\n    # Part of a C declaration.\n    #\n    # Processing during analyse_declarations phase:\n    #\n    #   analyse\n    #      Returns (name, type) pair where name is the\n    #      CNameDeclaratorNode of the name being declared\n    #      and type is the type it is being declared as.\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CNameDeclaratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CNameDeclaratorNode(CDeclaratorNode):\n    #  name    string             The Cython name being declared\n    #  cname   string or None     C name, if specified\n    #  default ExprNode or None   the value assigned on declaration\n    child_attrs = ['default']\n    default = None\n    def analyse(self, base_type, env, nonempty=0, visibility=None, in_pxd=False):\n        if nonempty and self.name == '':\n            # May have mistaken the name for the type.\n            if base_type.is_ptr or base_type.is_array or base_type.is_buffer:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CPtrDeclaratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CPtrDeclaratorNode(CDeclaratorNode):\n    # base     CDeclaratorNode\n    child_attrs = [\"base\"]\n    def analyse_templates(self):\n        return self.base.analyse_templates()\n    def analyse(self, base_type, env, nonempty=0, visibility=None, in_pxd=False):\n        if base_type.is_pyobject:\n            error(self.pos, \"Pointer base type cannot be a Python object\")\n        ptr_type = PyrexTypes.c_ptr_type(base_type)\n        return self.base.analyse(ptr_type, env, nonempty=nonempty, visibility=visibility, in_pxd=in_pxd)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CReferenceDeclaratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CReferenceDeclaratorNode(CDeclaratorNode):\n    # base     CDeclaratorNode\n    child_attrs = [\"base\"]\n    def analyse_templates(self):\n        return self.base.analyse_templates()\n    def analyse(self, base_type, env, nonempty=0, visibility=None, in_pxd=False):\n        if base_type.is_pyobject:\n            error(self.pos, \"Reference base type cannot be a Python object\")\n        ref_type = PyrexTypes.c_ref_type(base_type)\n        return self.base.analyse(ref_type, env, nonempty=nonempty, visibility=visibility, in_pxd=in_pxd)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CArrayDeclaratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CArrayDeclaratorNode(CDeclaratorNode):\n    # base        CDeclaratorNode\n    # dimension   ExprNode\n    child_attrs = [\"base\", \"dimension\"]\n    def analyse(self, base_type, env, nonempty=0, visibility=None, in_pxd=False):\n        if (base_type.is_cpp_class and base_type.is_template_type()) or base_type.is_cfunction:\n            from .ExprNodes import TupleNode\n            if isinstance(self.dimension, TupleNode):\n                args = self.dimension.args\n            else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CFuncDeclaratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CFuncDeclaratorNode(CDeclaratorNode):\n    # base             CDeclaratorNode\n    # args             [CArgDeclNode]\n    # templates        [TemplatePlaceholderType]\n    # has_varargs      boolean\n    # exception_value  ConstNode\n    # exception_check  boolean    True if PyErr_Occurred check needed\n    # nogil            boolean    Can be called without gil\n    # with_gil         boolean    Acquire gil around function body\n    # is_const_method  boolean    Whether this is a const method",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CConstDeclaratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CConstDeclaratorNode(CDeclaratorNode):\n    # base     CDeclaratorNode\n    child_attrs = [\"base\"]\n    def analyse(self, base_type, env, nonempty=0, visibility=None, in_pxd=False):\n        if base_type.is_pyobject:\n            error(self.pos,\n                  \"Const base type cannot be a Python object\")\n        const = PyrexTypes.c_const_type(base_type)\n        return self.base.analyse(const, env, nonempty=nonempty, visibility=visibility, in_pxd=in_pxd)\nclass CArgDeclNode(Node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CArgDeclNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CArgDeclNode(Node):\n    # Item in a function declaration argument list.\n    #\n    # base_type      CBaseTypeNode\n    # declarator     CDeclaratorNode\n    # not_none       boolean            Tagged with 'not None'\n    # or_none        boolean            Tagged with 'or None'\n    # accept_none    boolean            Resolved boolean for not_none/or_none\n    # default        ExprNode or None\n    # default_value  PyObjectConst      constant for default value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CBaseTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CBaseTypeNode(Node):\n    # Abstract base class for C base type nodes.\n    #\n    # Processing during analyse_declarations phase:\n    #\n    #   analyse\n    #     Returns the type.\n    def analyse_as_type(self, env):\n        return self.analyse(env)\nclass CAnalysedBaseTypeNode(Node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CAnalysedBaseTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CAnalysedBaseTypeNode(Node):\n    # type            type\n    child_attrs = []\n    def analyse(self, env, could_be_name=False):\n        return self.type\nclass CSimpleBaseTypeNode(CBaseTypeNode):\n    # name             string\n    # module_path      [string]     Qualifying name components\n    # is_basic_c_type  boolean\n    # signed           boolean",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CSimpleBaseTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CSimpleBaseTypeNode(CBaseTypeNode):\n    # name             string\n    # module_path      [string]     Qualifying name components\n    # is_basic_c_type  boolean\n    # signed           boolean\n    # longness         integer\n    # complex          boolean\n    # is_self_arg      boolean      Is self argument of C method\n    # ##is_type_arg      boolean      Is type argument of class method\n    child_attrs = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "MemoryViewSliceTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class MemoryViewSliceTypeNode(CBaseTypeNode):\n    name = 'memoryview'\n    child_attrs = ['base_type_node', 'axes']\n    def analyse(self, env, could_be_name=False):\n        base_type = self.base_type_node.analyse(env)\n        if base_type.is_error: return base_type\n        from . import MemoryView\n        try:\n            axes_specs = MemoryView.get_axes_specs(env, self.axes)\n        except CompileError as e:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CNestedBaseTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CNestedBaseTypeNode(CBaseTypeNode):\n    # For C++ classes that live inside other C++ classes.\n    # name             string\n    # base_type        CBaseTypeNode\n    child_attrs = ['base_type']\n    def analyse(self, env, could_be_name=None):\n        base_type = self.base_type.analyse(env)\n        if base_type is PyrexTypes.error_type:\n            return PyrexTypes.error_type\n        if not base_type.is_cpp_class:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "TemplatedTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class TemplatedTypeNode(CBaseTypeNode):\n    #  After parsing:\n    #  positional_args  [ExprNode]        List of positional arguments\n    #  keyword_args     DictNode          Keyword arguments\n    #  base_type_node   CBaseTypeNode\n    #  After analysis:\n    #  type             PyrexTypes.BufferType or PyrexTypes.CppClassType  ...containing the right options\n    child_attrs = [\"base_type_node\", \"positional_args\",\n                   \"keyword_args\", \"dtype_node\"]\n    dtype_node = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CComplexBaseTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CComplexBaseTypeNode(CBaseTypeNode):\n    # base_type   CBaseTypeNode\n    # declarator  CDeclaratorNode\n    child_attrs = [\"base_type\", \"declarator\"]\n    def analyse(self, env, could_be_name=False):\n        base = self.base_type.analyse(env, could_be_name)\n        _, type = self.declarator.analyse(base, env)\n        return type\nclass CTupleBaseTypeNode(CBaseTypeNode):\n    # components [CBaseTypeNode]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CTupleBaseTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CTupleBaseTypeNode(CBaseTypeNode):\n    # components [CBaseTypeNode]\n    child_attrs = [\"components\"]\n    def analyse(self, env, could_be_name=False):\n        component_types = []\n        for c in self.components:\n            type = c.analyse(env)\n            if type.is_pyobject:\n                error(c.pos, \"Tuple types can't (yet) contain Python objects.\")\n                return error_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "FusedTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class FusedTypeNode(CBaseTypeNode):\n    \"\"\"\n    Represents a fused type in a ctypedef statement:\n        ctypedef cython.fused_type(int, long, long long) integral\n    name            str                     name of this fused type\n    types           [CSimpleBaseTypeNode]   is the list of types to be fused\n    \"\"\"\n    child_attrs = []\n    def analyse_declarations(self, env):\n        type = self.analyse(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CConstTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CConstTypeNode(CBaseTypeNode):\n    # base_type     CBaseTypeNode\n    child_attrs = [\"base_type\"]\n    def analyse(self, env, could_be_name=False):\n        base = self.base_type.analyse(env, could_be_name)\n        if base.is_pyobject:\n            error(self.pos,\n                  \"Const base type cannot be a Python object\")\n        return PyrexTypes.c_const_type(base)\nclass CVarDefNode(StatNode):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CVarDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CVarDefNode(StatNode):\n    #  C variable definition or forward/extern function declaration.\n    #\n    #  visibility    'private' or 'public' or 'extern'\n    #  base_type     CBaseTypeNode\n    #  declarators   [CDeclaratorNode]\n    #  in_pxd        boolean\n    #  api           boolean\n    #  overridable   boolean        whether it is a cpdef\n    #  modifiers     ['inline']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CStructOrUnionDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CStructOrUnionDefNode(StatNode):\n    #  name          string\n    #  cname         string or None\n    #  kind          \"struct\" or \"union\"\n    #  typedef_flag  boolean\n    #  visibility    \"public\" or \"private\"\n    #  api           boolean\n    #  in_pxd        boolean\n    #  attributes    [CVarDefNode] or None\n    #  entry         Entry",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CppClassNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CppClassNode(CStructOrUnionDefNode, BlockNode):\n    #  name          string\n    #  cname         string or None\n    #  visibility    \"extern\"\n    #  in_pxd        boolean\n    #  attributes    [CVarDefNode] or None\n    #  entry         Entry\n    #  base_classes  [CBaseTypeNode]\n    #  templates     [(string, bool)] or None\n    #  decorators    [DecoratorNode] or None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CEnumDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CEnumDefNode(StatNode):\n    #  name           string or None\n    #  cname          string or None\n    #  items          [CEnumDefItemNode]\n    #  typedef_flag   boolean\n    #  visibility     \"public\" or \"private\" or \"extern\"\n    #  api            boolean\n    #  in_pxd         boolean\n    #  create_wrapper boolean\n    #  entry          Entry",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CEnumDefItemNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CEnumDefItemNode(StatNode):\n    #  name     string\n    #  cname    string or None\n    #  value    ExprNode or None\n    child_attrs = [\"value\"]\n    def analyse_declarations(self, env, enum_entry):\n        if self.value:\n            self.value = self.value.analyse_const_expression(env)\n            if not self.value.type.is_int:\n                self.value = self.value.coerce_to(PyrexTypes.c_int_type, env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CTypeDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CTypeDefNode(StatNode):\n    #  base_type    CBaseTypeNode\n    #  declarator   CDeclaratorNode\n    #  visibility   \"public\" or \"private\"\n    #  api          boolean\n    #  in_pxd       boolean\n    child_attrs = [\"base_type\", \"declarator\"]\n    def analyse_declarations(self, env):\n        base = self.base_type.analyse(env)\n        name_declarator, type = self.declarator.analyse(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "FuncDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class FuncDefNode(StatNode, BlockNode):\n    #  Base class for function definition nodes.\n    #\n    #  return_type     PyrexType\n    #  #filename        string        C name of filename string const\n    #  entry           Symtab.Entry\n    #  needs_closure   boolean        Whether or not this function has inner functions/classes/yield\n    #  needs_outer_scope boolean      Whether or not this function requires outer scope\n    #  pymethdef_required boolean     Force Python method struct generation\n    #  directive_locals { string : ExprNode } locals defined by cython.locals(...)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CFuncDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CFuncDefNode(FuncDefNode):\n    #  C function definition.\n    #\n    #  modifiers     ['inline']\n    #  visibility    'private' or 'public' or 'extern'\n    #  base_type     CBaseTypeNode\n    #  declarator    CDeclaratorNode\n    #  cfunc_declarator  the CFuncDeclarator of this function\n    #                    (this is also available through declarator or a\n    #                     base thereof)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "PyArgDeclNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class PyArgDeclNode(Node):\n    # Argument which must be a Python object (used\n    # for * and ** arguments).\n    #\n    # name        string\n    # entry       Symtab.Entry\n    # annotation  ExprNode or None   Py3 argument annotation\n    child_attrs = []\n    is_self_arg = False\n    is_type_arg = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "DecoratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class DecoratorNode(Node):\n    # A decorator\n    #\n    # decorator    NameNode or CallNode or AttributeNode\n    child_attrs = ['decorator']\nclass DefNode(FuncDefNode):\n    # A Python function definition.\n    #\n    # name          string                 the Python name of the function\n    # lambda_name   string                 the internal name of a lambda 'function'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "DefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class DefNode(FuncDefNode):\n    # A Python function definition.\n    #\n    # name          string                 the Python name of the function\n    # lambda_name   string                 the internal name of a lambda 'function'\n    # decorators    [DecoratorNode]        list of decorators\n    # args          [CArgDeclNode]         formal arguments\n    # doc           EncodedString or None\n    # body          StatListNode\n    # return_type_annotation",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "DefNodeWrapper",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class DefNodeWrapper(FuncDefNode):\n    # DefNode python wrapper code generator\n    defnode = None\n    target = None # Target DefNode\n    def __init__(self, *args, **kwargs):\n        FuncDefNode.__init__(self, *args, **kwargs)\n        self.num_kwonly_args = self.target.num_kwonly_args\n        self.num_required_kw_args = self.target.num_required_kw_args\n        self.num_required_args = self.target.num_required_args\n        self.self_in_stararg = self.target.self_in_stararg",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "GeneratorDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class GeneratorDefNode(DefNode):\n    # Generator function node that creates a new generator instance when called.\n    #\n    # gbody          GeneratorBodyDefNode   the function implementing the generator\n    #\n    is_generator = True\n    is_coroutine = False\n    is_iterable_coroutine = False\n    is_asyncgen = False\n    gen_type_name = 'Generator'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "AsyncDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class AsyncDefNode(GeneratorDefNode):\n    gen_type_name = 'Coroutine'\n    is_coroutine = True\nclass IterableAsyncDefNode(AsyncDefNode):\n    gen_type_name = 'IterableCoroutine'\n    is_iterable_coroutine = True\nclass AsyncGenNode(AsyncDefNode):\n    gen_type_name = 'AsyncGen'\n    is_asyncgen = True\nclass GeneratorBodyDefNode(DefNode):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "IterableAsyncDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class IterableAsyncDefNode(AsyncDefNode):\n    gen_type_name = 'IterableCoroutine'\n    is_iterable_coroutine = True\nclass AsyncGenNode(AsyncDefNode):\n    gen_type_name = 'AsyncGen'\n    is_asyncgen = True\nclass GeneratorBodyDefNode(DefNode):\n    # Main code body of a generator implemented as a DefNode.\n    #\n    is_generator_body = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "AsyncGenNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class AsyncGenNode(AsyncDefNode):\n    gen_type_name = 'AsyncGen'\n    is_asyncgen = True\nclass GeneratorBodyDefNode(DefNode):\n    # Main code body of a generator implemented as a DefNode.\n    #\n    is_generator_body = True\n    is_inlined = False\n    is_async_gen_body = False\n    inlined_comprehension_type = None  # container type for inlined comprehensions",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "GeneratorBodyDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class GeneratorBodyDefNode(DefNode):\n    # Main code body of a generator implemented as a DefNode.\n    #\n    is_generator_body = True\n    is_inlined = False\n    is_async_gen_body = False\n    inlined_comprehension_type = None  # container type for inlined comprehensions\n    def __init__(self, pos=None, name=None, body=None, is_async_gen_body=False):\n        super(GeneratorBodyDefNode, self).__init__(\n            pos=pos, body=body, name=name, is_async_gen_body=is_async_gen_body,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "OverrideCheckNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class OverrideCheckNode(StatNode):\n    # A Node for dispatching to the def method if it\n    # is overridden.\n    #\n    #  py_func\n    #\n    #  args\n    #  func_temp\n    #  body\n    child_attrs = ['body']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ClassDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ClassDefNode(StatNode, BlockNode):\n    pass\nclass PyClassDefNode(ClassDefNode):\n    #  A Python class definition.\n    #\n    #  name     EncodedString   Name of the class\n    #  doc      string or None\n    #  body     StatNode        Attribute definition code\n    #  entry    Symtab.Entry\n    #  scope    PyClassScope",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "PyClassDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class PyClassDefNode(ClassDefNode):\n    #  A Python class definition.\n    #\n    #  name     EncodedString   Name of the class\n    #  doc      string or None\n    #  body     StatNode        Attribute definition code\n    #  entry    Symtab.Entry\n    #  scope    PyClassScope\n    #  decorators    [DecoratorNode]        list of decorators or None\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CClassDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CClassDefNode(ClassDefNode):\n    #  An extension type definition.\n    #\n    #  visibility         'private' or 'public' or 'extern'\n    #  typedef_flag       boolean\n    #  api                boolean\n    #  module_name        string or None    For import of extern type objects\n    #  class_name         string            Unqualified name of class\n    #  as_name            string or None    Name to declare as in this scope\n    #  bases              TupleNode         Base class(es)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "PropertyNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class PropertyNode(StatNode):\n    #  Definition of a property in an extension type.\n    #\n    #  name   string\n    #  doc    EncodedString or None    Doc string\n    #  entry  Symtab.Entry\n    #  body   StatListNode\n    child_attrs = [\"body\"]\n    def analyse_declarations(self, env):\n        self.entry = env.declare_property(self.name, self.doc, self.pos)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "GlobalNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class GlobalNode(StatNode):\n    # Global variable declaration.\n    #\n    # names    [string]\n    child_attrs = []\n    def analyse_declarations(self, env):\n        for name in self.names:\n            env.declare_global(name, self.pos)\n    def analyse_expressions(self, env):\n        return self",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "NonlocalNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class NonlocalNode(StatNode):\n    # Nonlocal variable declaration via the 'nonlocal' keyword.\n    #\n    # names    [string]\n    child_attrs = []\n    def analyse_declarations(self, env):\n        for name in self.names:\n            env.declare_nonlocal(name, self.pos)\n    def analyse_expressions(self, env):\n        return self",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ExprStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ExprStatNode(StatNode):\n    #  Expression used as a statement.\n    #\n    #  expr   ExprNode\n    child_attrs = [\"expr\"]\n    def analyse_declarations(self, env):\n        from . import ExprNodes\n        expr = self.expr\n        if isinstance(expr, ExprNodes.GeneralCallNode):\n            func = expr.function.as_cython_attribute()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "AssignmentNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class AssignmentNode(StatNode):\n    #  Abstract base class for assignment nodes.\n    #\n    #  The analyse_expressions and generate_execution_code\n    #  phases of assignments are split into two sub-phases\n    #  each, to enable all the right hand sides of a\n    #  parallel assignment to be evaluated before assigning\n    #  to any of the left hand sides.\n    def analyse_expressions(self, env):\n        node = self.analyse_types(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "SingleAssignmentNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class SingleAssignmentNode(AssignmentNode):\n    #  The simplest case:\n    #\n    #    a = b\n    #\n    #  lhs                      ExprNode      Left hand side\n    #  rhs                      ExprNode      Right hand side\n    #  first                    bool          Is this guaranteed the first assignment to lhs?\n    #  is_overloaded_assignment bool          Is this assignment done via an overloaded operator=\n    #  exception_check",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CascadedAssignmentNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CascadedAssignmentNode(AssignmentNode):\n    #  An assignment with multiple left hand sides:\n    #\n    #    a = b = c\n    #\n    #  lhs_list   [ExprNode]   Left hand sides\n    #  rhs        ExprNode     Right hand sides\n    #\n    #  Used internally:\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ParallelAssignmentNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ParallelAssignmentNode(AssignmentNode):\n    #  A combined packing/unpacking assignment:\n    #\n    #    a, b, c =  d, e, f\n    #\n    #  This has been rearranged by the parser into\n    #\n    #    a = d ; b = e ; c = f\n    #\n    #  but we must evaluate all the right hand sides",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "InPlaceAssignmentNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class InPlaceAssignmentNode(AssignmentNode):\n    #  An in place arithmetic operand:\n    #\n    #    a += b\n    #    a -= b\n    #    ...\n    #\n    #  lhs      ExprNode      Left hand side\n    #  rhs      ExprNode      Right hand side\n    #  operator char          one of \"+-*/%^&|\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "PrintStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class PrintStatNode(StatNode):\n    #  print statement\n    #\n    #  arg_tuple         TupleNode\n    #  stream            ExprNode or None (stdout)\n    #  append_newline    boolean\n    child_attrs = [\"arg_tuple\", \"stream\"]\n    def analyse_expressions(self, env):\n        if self.stream:\n            stream = self.stream.analyse_expressions(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ExecStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ExecStatNode(StatNode):\n    #  exec statement\n    #\n    #  args     [ExprNode]\n    child_attrs = [\"args\"]\n    def analyse_expressions(self, env):\n        for i, arg in enumerate(self.args):\n            arg = arg.analyse_expressions(env)\n            arg = arg.coerce_to_pyobject(env)\n            self.args[i] = arg",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "DelStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class DelStatNode(StatNode):\n    #  del statement\n    #\n    #  args     [ExprNode]\n    child_attrs = [\"args\"]\n    ignore_nonexisting = False\n    def analyse_declarations(self, env):\n        for arg in self.args:\n            arg.analyse_target_declaration(env)\n    def analyse_expressions(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "PassStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class PassStatNode(StatNode):\n    #  pass statement\n    child_attrs = []\n    def analyse_expressions(self, env):\n        return self\n    def generate_execution_code(self, code):\n        pass\nclass IndirectionNode(StatListNode):\n    \"\"\"\n    This adds an indirection so that the node can be shared and a subtree can",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "IndirectionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class IndirectionNode(StatListNode):\n    \"\"\"\n    This adds an indirection so that the node can be shared and a subtree can\n    be removed at any time by clearing self.stats.\n    \"\"\"\n    def __init__(self, stats):\n        super(IndirectionNode, self).__init__(stats[0].pos, stats=stats)\nclass BreakStatNode(StatNode):\n    child_attrs = []\n    is_terminator = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "BreakStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class BreakStatNode(StatNode):\n    child_attrs = []\n    is_terminator = True\n    def analyse_expressions(self, env):\n        return self\n    def generate_execution_code(self, code):\n        code.mark_pos(self.pos)\n        if not code.break_label:\n            error(self.pos, \"break statement not inside loop\")\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ContinueStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ContinueStatNode(StatNode):\n    child_attrs = []\n    is_terminator = True\n    def analyse_expressions(self, env):\n        return self\n    def generate_execution_code(self, code):\n        if not code.continue_label:\n            error(self.pos, \"continue statement not inside loop\")\n            return\n        code.mark_pos(self.pos)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ReturnStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ReturnStatNode(StatNode):\n    #  return statement\n    #\n    #  value         ExprNode or None\n    #  return_type   PyrexType\n    #  in_generator  return inside of generator => raise StopIteration\n    #  in_async_gen  return inside of async generator\n    child_attrs = [\"value\"]\n    is_terminator = True\n    in_generator = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "RaiseStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class RaiseStatNode(StatNode):\n    #  raise statement\n    #\n    #  exc_type    ExprNode or None\n    #  exc_value   ExprNode or None\n    #  exc_tb      ExprNode or None\n    #  cause       ExprNode or None\n    child_attrs = [\"exc_type\", \"exc_value\", \"exc_tb\", \"cause\"]\n    is_terminator = True\n    def analyse_expressions(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ReraiseStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ReraiseStatNode(StatNode):\n    child_attrs = []\n    is_terminator = True\n    def analyse_expressions(self, env):\n        return self\n    nogil_check = Node.gil_error\n    gil_message = \"Raising exception\"\n    def generate_execution_code(self, code):\n        code.mark_pos(self.pos)\n        vars = code.funcstate.exc_vars",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "AssertStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class AssertStatNode(StatNode):\n    #  assert statement\n    #\n    #  cond    ExprNode\n    #  value   ExprNode or None\n    child_attrs = [\"cond\", \"value\"]\n    def analyse_expressions(self, env):\n        self.cond = self.cond.analyse_boolean_expression(env)\n        if self.value:\n            value = self.value.analyse_types(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "IfStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class IfStatNode(StatNode):\n    #  if statement\n    #\n    #  if_clauses   [IfClauseNode]\n    #  else_clause  StatNode or None\n    child_attrs = [\"if_clauses\", \"else_clause\"]\n    def analyse_declarations(self, env):\n        for if_clause in self.if_clauses:\n            if_clause.analyse_declarations(env)\n        if self.else_clause:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "IfClauseNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class IfClauseNode(Node):\n    #  if or elif clause in an if statement\n    #\n    #  condition   ExprNode\n    #  body        StatNode\n    child_attrs = [\"condition\", \"body\"]\n    branch_hint = None\n    def analyse_declarations(self, env):\n        self.body.analyse_declarations(env)\n    def analyse_expressions(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "SwitchCaseNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class SwitchCaseNode(StatNode):\n    # Generated in the optimization of an if-elif-else node\n    #\n    # conditions    [ExprNode]\n    # body          StatNode\n    child_attrs = ['conditions', 'body']\n    def generate_condition_evaluation_code(self, code):\n        for cond in self.conditions:\n            cond.generate_evaluation_code(code)\n    def generate_execution_code(self, code):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "SwitchStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class SwitchStatNode(StatNode):\n    # Generated in the optimization of an if-elif-else node\n    #\n    # test          ExprNode\n    # cases         [SwitchCaseNode]\n    # else_clause   StatNode or None\n    child_attrs = ['test', 'cases', 'else_clause']\n    def generate_execution_code(self, code):\n        self.test.generate_evaluation_code(code)\n        # Make sure all conditions are evaluated before going into the switch() statement.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "LoopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class LoopNode(object):\n    pass\nclass WhileStatNode(LoopNode, StatNode):\n    #  while statement\n    #\n    #  condition    ExprNode\n    #  body         StatNode\n    #  else_clause  StatNode\n    child_attrs = [\"condition\", \"body\", \"else_clause\"]\n    def analyse_declarations(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "WhileStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class WhileStatNode(LoopNode, StatNode):\n    #  while statement\n    #\n    #  condition    ExprNode\n    #  body         StatNode\n    #  else_clause  StatNode\n    child_attrs = [\"condition\", \"body\", \"else_clause\"]\n    def analyse_declarations(self, env):\n        self.body.analyse_declarations(env)\n        if self.else_clause:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "DictIterationNextNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class DictIterationNextNode(Node):\n    # Helper node for calling PyDict_Next() inside of a WhileStatNode\n    # and checking the dictionary size for changes.  Created in\n    # Optimize.py.\n    child_attrs = ['dict_obj', 'expected_size', 'pos_index_var',\n                   'coerced_key_var', 'coerced_value_var', 'coerced_tuple_var',\n                   'key_target', 'value_target', 'tuple_target', 'is_dict_flag']\n    coerced_key_var = key_ref = None\n    coerced_value_var = value_ref = None\n    coerced_tuple_var = tuple_ref = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "SetIterationNextNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class SetIterationNextNode(Node):\n    # Helper node for calling _PySet_NextEntry() inside of a WhileStatNode\n    # and checking the set size for changes.  Created in Optimize.py.\n    child_attrs = ['set_obj', 'expected_size', 'pos_index_var',\n                   'coerced_value_var', 'value_target', 'is_set_flag']\n    coerced_value_var = value_ref = None\n    def __init__(self, set_obj, expected_size, pos_index_var, value_target, is_set_flag):\n        Node.__init__(\n            self, set_obj.pos,\n            set_obj=set_obj,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "_ForInStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class _ForInStatNode(LoopNode, StatNode):\n    #  Base class of 'for-in' statements.\n    #\n    #  target        ExprNode\n    #  iterator      IteratorNode | AIterAwaitExprNode(AsyncIteratorNode)\n    #  body          StatNode\n    #  else_clause   StatNode\n    #  item          NextNode | AwaitExprNode(AsyncNextNode)\n    #  is_async      boolean        true for 'async for' statements\n    child_attrs = [\"target\", \"item\", \"iterator\", \"body\", \"else_clause\"]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ForInStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ForInStatNode(_ForInStatNode):\n    #  'for' statement\n    is_async = False\n    def _create_item_node(self):\n        from .ExprNodes import NextNode\n        self.item = NextNode(self.iterator)\nclass AsyncForStatNode(_ForInStatNode):\n    #  'async for' statement\n    #\n    #  iterator      AIterAwaitExprNode(AsyncIteratorNode)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "AsyncForStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class AsyncForStatNode(_ForInStatNode):\n    #  'async for' statement\n    #\n    #  iterator      AIterAwaitExprNode(AsyncIteratorNode)\n    #  item          AwaitIterNextExprNode(AsyncIteratorNode)\n    is_async = True\n    def __init__(self, pos, **kw):\n        assert 'item' not in kw\n        from . import ExprNodes\n        # AwaitExprNodes must appear before running MarkClosureVisitor",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ForFromStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ForFromStatNode(LoopNode, StatNode):\n    #  for name from expr rel name rel expr\n    #\n    #  target        NameNode\n    #  bound1        ExprNode\n    #  relation1     string\n    #  relation2     string\n    #  bound2        ExprNode\n    #  step          ExprNode or None\n    #  body          StatNode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "WithStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class WithStatNode(StatNode):\n    \"\"\"\n    Represents a Python with statement.\n    Implemented by the WithTransform as follows:\n        MGR = EXPR\n        EXIT = MGR.__exit__\n        VALUE = MGR.__enter__()\n        EXC = True\n        try:\n            try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "WithTargetAssignmentStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class WithTargetAssignmentStatNode(AssignmentNode):\n    # The target assignment of the 'with' statement value (return\n    # value of the __enter__() call).\n    #\n    # This is a special cased assignment that properly cleans up the RHS.\n    #\n    # lhs       ExprNode      the assignment target\n    # rhs       ExprNode      a (coerced) TempNode for the rhs (from WithStatNode)\n    # with_node WithStatNode  the surrounding with-statement\n    child_attrs = [\"rhs\", \"lhs\"]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "TryExceptStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class TryExceptStatNode(StatNode):\n    #  try .. except statement\n    #\n    #  body             StatNode\n    #  except_clauses   [ExceptClauseNode]\n    #  else_clause      StatNode or None\n    child_attrs = [\"body\", \"except_clauses\", \"else_clause\"]\n    in_generator = False\n    def analyse_declarations(self, env):\n        self.body.analyse_declarations(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ExceptClauseNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ExceptClauseNode(Node):\n    #  Part of try ... except statement.\n    #\n    #  pattern        [ExprNode]\n    #  target         ExprNode or None\n    #  body           StatNode\n    #  excinfo_target TupleNode(3*ResultRefNode) or None   optional target for exception info (not owned here!)\n    #  match_flag     string             result of exception match\n    #  exc_value      ExcValueNode       used internally\n    #  function_name  string             qualified name of enclosing function",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "TryFinallyStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class TryFinallyStatNode(StatNode):\n    #  try ... finally statement\n    #\n    #  body             StatNode\n    #  finally_clause   StatNode\n    #  finally_except_clause  deep-copy of finally_clause for exception case\n    #  in_generator     inside of generator => must store away current exception also in return case\n    #\n    #  Each of the continue, break, return and error gotos runs\n    #  into its own deep-copy of the finally block code.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "NogilTryFinallyStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class NogilTryFinallyStatNode(TryFinallyStatNode):\n    \"\"\"\n    A try/finally statement that may be used in nogil code sections.\n    \"\"\"\n    preserve_exception = False\n    nogil_check = None\nclass GILStatNode(NogilTryFinallyStatNode):\n    #  'with gil' or 'with nogil' statement\n    #\n    #   state   string   'gil' or 'nogil'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "GILStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class GILStatNode(NogilTryFinallyStatNode):\n    #  'with gil' or 'with nogil' statement\n    #\n    #   state   string   'gil' or 'nogil'\n    state_temp = None\n    def __init__(self, pos, state, body):\n        self.state = state\n        self.create_state_temp_if_needed(pos, state, body)\n        TryFinallyStatNode.__init__(\n            self, pos,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "GILExitNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class GILExitNode(StatNode):\n    \"\"\"\n    Used as the 'finally' block in a GILStatNode\n    state   string   'gil' or 'nogil'\n    \"\"\"\n    child_attrs = []\n    state_temp = None\n    def analyse_expressions(self, env):\n        return self\n    def generate_execution_code(self, code):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "EnsureGILNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class EnsureGILNode(GILExitNode):\n    \"\"\"\n    Ensure the GIL in nogil functions for cleanup before returning.\n    \"\"\"\n    def generate_execution_code(self, code):\n        code.put_ensure_gil(declare_gilstate=False)\ndef cython_view_utility_code():\n    from . import MemoryView\n    return MemoryView.view_utility_code\nutility_code_for_cimports = {",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CImportStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CImportStatNode(StatNode):\n    #  cimport statement\n    #\n    #  module_name   string           Qualified name of module being imported\n    #  as_name       string or None   Name specified in \"as\" clause, if any\n    #  is_absolute   bool             True for absolute imports, False otherwise\n    child_attrs = []\n    is_absolute = False\n    def analyse_declarations(self, env):\n        if not env.is_module_scope:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "FromCImportStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class FromCImportStatNode(StatNode):\n    #  from ... cimport statement\n    #\n    #  module_name     string                        Qualified name of module\n    #  relative_level  int or None                   Relative import: number of dots before module_name\n    #  imported_names  [(pos, name, as_name, kind)]  Names to be imported\n    child_attrs = []\n    module_name = None\n    relative_level = None\n    imported_names = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "FromImportStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class FromImportStatNode(StatNode):\n    #  from ... import statement\n    #\n    #  module           ImportNode\n    #  items            [(string, NameNode)]\n    #  interned_items   [(string, NameNode, ExprNode)]\n    #  item             PyTempNode            used internally\n    #  import_star      boolean               used internally\n    child_attrs = [\"module\"]\n    import_star = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ParallelNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ParallelNode(Node):\n    \"\"\"\n    Base class for cython.parallel constructs.\n    \"\"\"\n    nogil_check = None\nclass ParallelStatNode(StatNode, ParallelNode):\n    \"\"\"\n    Base class for 'with cython.parallel.parallel():' and 'for i in prange():'.\n    assignments     { Entry(var) : (var.pos, inplace_operator_or_None) }\n                    assignments to variables in this parallel section",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ParallelStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ParallelStatNode(StatNode, ParallelNode):\n    \"\"\"\n    Base class for 'with cython.parallel.parallel():' and 'for i in prange():'.\n    assignments     { Entry(var) : (var.pos, inplace_operator_or_None) }\n                    assignments to variables in this parallel section\n    parent          parent ParallelStatNode or None\n    is_parallel     indicates whether this node is OpenMP parallel\n                    (true for #pragma omp parallel for and\n                              #pragma omp parallel)\n    is_parallel is true for:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ParallelWithBlockNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ParallelWithBlockNode(ParallelStatNode):\n    \"\"\"\n    This node represents a 'with cython.parallel.parallel():' block\n    \"\"\"\n    valid_keyword_arguments = ['num_threads']\n    num_threads = None\n    def analyse_declarations(self, env):\n        super(ParallelWithBlockNode, self).analyse_declarations(env)\n        if self.args:\n            error(self.pos, \"cython.parallel.parallel() does not take \"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ParallelRangeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ParallelRangeNode(ParallelStatNode):\n    \"\"\"\n    This node represents a 'for i in cython.parallel.prange():' construct.\n    target       NameNode       the target iteration variable\n    else_clause  Node or None   the else clause of this loop\n    \"\"\"\n    child_attrs = ['body', 'target', 'else_clause', 'args', 'num_threads',\n                   'chunksize']\n    body = target = else_clause = args = None\n    start = stop = step = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CnameDecoratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CnameDecoratorNode(StatNode):\n    \"\"\"\n    This node is for the cname decorator in CythonUtilityCode:\n        @cname('the_cname')\n        cdef func(...):\n            ...\n    In case of a cdef class the cname specifies the objstruct_cname.\n    node        the node to which the cname decorator is applied\n    cname       the cname the node should get\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "relative_position",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "def relative_position(pos):\n    return (pos[0].get_filenametable_entry(), pos[1])\ndef embed_position(pos, docstring):\n    if not Options.embed_pos_in_docstring:\n        return docstring\n    pos_line = u'File: %s (starting at line %s)' % relative_position(pos)\n    if docstring is None:\n        # unicode string\n        return EncodedString(pos_line)\n    # make sure we can encode the filename in the docstring encoding",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "embed_position",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "def embed_position(pos, docstring):\n    if not Options.embed_pos_in_docstring:\n        return docstring\n    pos_line = u'File: %s (starting at line %s)' % relative_position(pos)\n    if docstring is None:\n        # unicode string\n        return EncodedString(pos_line)\n    # make sure we can encode the filename in the docstring encoding\n    # otherwise make the docstring a unicode string\n    encoding = docstring.encoding",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "analyse_type_annotation",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "def analyse_type_annotation(annotation, env, assigned_value=None):\n    base_type = None\n    is_ambiguous = False\n    explicit_pytype = explicit_ctype = False\n    if annotation.is_dict_literal:\n        warning(annotation.pos,\n                \"Dicts should no longer be used as type annotations. Use 'cython.int' etc. directly.\")\n        for name, value in annotation.key_value_pairs:\n            if not name.is_string_literal:\n                continue",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "write_func_call",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "def write_func_call(func, codewriter_class):\n    def f(*args, **kwds):\n        if len(args) > 1 and isinstance(args[1], codewriter_class):\n            # here we annotate the code with this function call\n            # but only if new code is generated\n            node, code = args[:2]\n            marker = '                    /* %s -> %s.%s %s */' % (\n                ' ' * code.call_level,\n                node.__class__.__name__,\n                func.__name__,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ForStatNode",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "def ForStatNode(pos, **kw):\n    if 'iterator' in kw:\n        if kw['iterator'].is_async:\n            return AsyncForStatNode(pos, **kw)\n        else:\n            return ForInStatNode(pos, **kw)\n    else:\n        return ForFromStatNode(pos, **kw)\nclass _ForInStatNode(LoopNode, StatNode):\n    #  Base class of 'for-in' statements.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "cython_view_utility_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "def cython_view_utility_code():\n    from . import MemoryView\n    return MemoryView.view_utility_code\nutility_code_for_cimports = {\n    # utility code (or inlining c) in a pxd (or pyx) file.\n    # TODO: Consider a generic user-level mechanism for importing\n    'cpython.array'         : lambda : UtilityCode.load_cached(\"ArrayAPI\", \"arrayarray.h\"),\n    'cpython.array.array'   : lambda : UtilityCode.load_cached(\"ArrayAPI\", \"arrayarray.h\"),\n    'cython.view'           : cython_view_utility_code,\n}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "utility_code_for_cimports",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "utility_code_for_cimports = {\n    # utility code (or inlining c) in a pxd (or pyx) file.\n    # TODO: Consider a generic user-level mechanism for importing\n    'cpython.array'         : lambda : UtilityCode.load_cached(\"ArrayAPI\", \"arrayarray.h\"),\n    'cpython.array.array'   : lambda : UtilityCode.load_cached(\"ArrayAPI\", \"arrayarray.h\"),\n    'cython.view'           : cython_view_utility_code,\n}\nutility_code_for_imports = {\n    # utility code used when special modules are imported.\n    # TODO: Consider a generic user-level mechanism for importing",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "utility_code_for_imports",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "utility_code_for_imports = {\n    # utility code used when special modules are imported.\n    # TODO: Consider a generic user-level mechanism for importing\n    'asyncio': (\"__Pyx_patch_asyncio\", \"PatchAsyncIO\", \"Coroutine.c\"),\n    'inspect': (\"__Pyx_patch_inspect\", \"PatchInspect\", \"Coroutine.c\"),\n}\nclass CImportStatNode(StatNode):\n    #  cimport statement\n    #\n    #  module_name   string           Qualified name of module being imported",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "printing_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "printing_utility_code = UtilityCode.load_cached(\"Print\", \"Printing.c\")\nprinting_one_utility_code = UtilityCode.load_cached(\"PrintOne\", \"Printing.c\")\n#------------------------------------------------------------------------------------\n# Exception raising code\n#\n# Exceptions are raised by __Pyx_Raise() and stored as plain\n# type/value/tb in PyThreadState->curexc_*.  When being caught by an\n# 'except' statement, curexc_* is moved over to exc_* by\n# __Pyx_GetException()\nrestore_exception_utility_code = UtilityCode.load_cached(\"PyErrFetchRestore\", \"Exceptions.c\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "printing_one_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "printing_one_utility_code = UtilityCode.load_cached(\"PrintOne\", \"Printing.c\")\n#------------------------------------------------------------------------------------\n# Exception raising code\n#\n# Exceptions are raised by __Pyx_Raise() and stored as plain\n# type/value/tb in PyThreadState->curexc_*.  When being caught by an\n# 'except' statement, curexc_* is moved over to exc_* by\n# __Pyx_GetException()\nrestore_exception_utility_code = UtilityCode.load_cached(\"PyErrFetchRestore\", \"Exceptions.c\")\nraise_utility_code = UtilityCode.load_cached(\"RaiseException\", \"Exceptions.c\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "restore_exception_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "restore_exception_utility_code = UtilityCode.load_cached(\"PyErrFetchRestore\", \"Exceptions.c\")\nraise_utility_code = UtilityCode.load_cached(\"RaiseException\", \"Exceptions.c\")\nget_exception_utility_code = UtilityCode.load_cached(\"GetException\", \"Exceptions.c\")\nswap_exception_utility_code = UtilityCode.load_cached(\"SwapException\", \"Exceptions.c\")\nreset_exception_utility_code = UtilityCode.load_cached(\"SaveResetException\", \"Exceptions.c\")\ntraceback_utility_code = UtilityCode.load_cached(\"AddTraceback\", \"Exceptions.c\")\n#------------------------------------------------------------------------------------\nget_exception_tuple_utility_code = UtilityCode(\n    proto=\"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(PyThreadState *__pyx_tstate); /*proto*/",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "raise_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "raise_utility_code = UtilityCode.load_cached(\"RaiseException\", \"Exceptions.c\")\nget_exception_utility_code = UtilityCode.load_cached(\"GetException\", \"Exceptions.c\")\nswap_exception_utility_code = UtilityCode.load_cached(\"SwapException\", \"Exceptions.c\")\nreset_exception_utility_code = UtilityCode.load_cached(\"SaveResetException\", \"Exceptions.c\")\ntraceback_utility_code = UtilityCode.load_cached(\"AddTraceback\", \"Exceptions.c\")\n#------------------------------------------------------------------------------------\nget_exception_tuple_utility_code = UtilityCode(\n    proto=\"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(PyThreadState *__pyx_tstate); /*proto*/\n\"\"\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "get_exception_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "get_exception_utility_code = UtilityCode.load_cached(\"GetException\", \"Exceptions.c\")\nswap_exception_utility_code = UtilityCode.load_cached(\"SwapException\", \"Exceptions.c\")\nreset_exception_utility_code = UtilityCode.load_cached(\"SaveResetException\", \"Exceptions.c\")\ntraceback_utility_code = UtilityCode.load_cached(\"AddTraceback\", \"Exceptions.c\")\n#------------------------------------------------------------------------------------\nget_exception_tuple_utility_code = UtilityCode(\n    proto=\"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(PyThreadState *__pyx_tstate); /*proto*/\n\"\"\",\n    # I doubt that calling __Pyx_GetException() here is correct as it moves",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "swap_exception_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "swap_exception_utility_code = UtilityCode.load_cached(\"SwapException\", \"Exceptions.c\")\nreset_exception_utility_code = UtilityCode.load_cached(\"SaveResetException\", \"Exceptions.c\")\ntraceback_utility_code = UtilityCode.load_cached(\"AddTraceback\", \"Exceptions.c\")\n#------------------------------------------------------------------------------------\nget_exception_tuple_utility_code = UtilityCode(\n    proto=\"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(PyThreadState *__pyx_tstate); /*proto*/\n\"\"\",\n    # I doubt that calling __Pyx_GetException() here is correct as it moves\n    # the exception from tstate->curexc_* to tstate->exc_*, which prevents",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "reset_exception_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "reset_exception_utility_code = UtilityCode.load_cached(\"SaveResetException\", \"Exceptions.c\")\ntraceback_utility_code = UtilityCode.load_cached(\"AddTraceback\", \"Exceptions.c\")\n#------------------------------------------------------------------------------------\nget_exception_tuple_utility_code = UtilityCode(\n    proto=\"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(PyThreadState *__pyx_tstate); /*proto*/\n\"\"\",\n    # I doubt that calling __Pyx_GetException() here is correct as it moves\n    # the exception from tstate->curexc_* to tstate->exc_*, which prevents\n    # exception handlers later on from receiving it.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "traceback_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "traceback_utility_code = UtilityCode.load_cached(\"AddTraceback\", \"Exceptions.c\")\n#------------------------------------------------------------------------------------\nget_exception_tuple_utility_code = UtilityCode(\n    proto=\"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(PyThreadState *__pyx_tstate); /*proto*/\n\"\"\",\n    # I doubt that calling __Pyx_GetException() here is correct as it moves\n    # the exception from tstate->curexc_* to tstate->exc_*, which prevents\n    # exception handlers later on from receiving it.\n    # NOTE: \"__pyx_tstate\" may be used by __Pyx_GetException() macro",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "get_exception_tuple_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "peekOfCode": "get_exception_tuple_utility_code = UtilityCode(\n    proto=\"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(PyThreadState *__pyx_tstate); /*proto*/\n\"\"\",\n    # I doubt that calling __Pyx_GetException() here is correct as it moves\n    # the exception from tstate->curexc_* to tstate->exc_*, which prevents\n    # exception handlers later on from receiving it.\n    # NOTE: \"__pyx_tstate\" may be used by __Pyx_GetException() macro\n    impl = \"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(CYTHON_UNUSED PyThreadState *__pyx_tstate) {",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "_YieldNodeCollector",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class _YieldNodeCollector(Visitor.TreeVisitor):\n    \"\"\"\n    YieldExprNode finder for generator expressions.\n    \"\"\"\n    def __init__(self):\n        Visitor.TreeVisitor.__init__(self)\n        self.yield_stat_nodes = {}\n        self.yield_nodes = []\n    visit_Node = Visitor.TreeVisitor.visitchildren\n    def visit_YieldExprNode(self, node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "IterationTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class IterationTransform(Visitor.EnvTransform):\n    \"\"\"Transform some common for-in loop patterns into efficient C loops:\n    - for-in-dict loop becomes a while loop calling PyDict_Next()\n    - for-in-enumerate is replaced by an external counter variable\n    - for-in-range loop becomes a plain C for loop\n    \"\"\"\n    def visit_PrimaryCmpNode(self, node):\n        if node.is_ptr_contains():\n            # for t in operand2:\n            #     if operand1 == t:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "SwitchTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class SwitchTransform(Visitor.EnvTransform):\n    \"\"\"\n    This transformation tries to turn long if statements into C switch statements.\n    The requirement is that every clause be an (or of) var == value, where the var\n    is common among all clauses and both var and value are ints.\n    \"\"\"\n    NO_MATCH = (None, None, None)\n    def extract_conditions(self, cond, allow_not_in):\n        while True:\n            if isinstance(cond, (ExprNodes.CoerceToTempNode,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "FlattenInListTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class FlattenInListTransform(Visitor.VisitorTransform, SkipDeclarations):\n    \"\"\"\n    This transformation flattens \"x in [val1, ..., valn]\" into a sequential list\n    of comparisons.\n    \"\"\"\n    def visit_PrimaryCmpNode(self, node):\n        self.visitchildren(node)\n        if node.cascade is not None:\n            return node\n        elif node.operator == 'in':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "DropRefcountingTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class DropRefcountingTransform(Visitor.VisitorTransform):\n    \"\"\"Drop ref-counting in safe places.\n    \"\"\"\n    visit_Node = Visitor.VisitorTransform.recurse_to_children\n    def visit_ParallelAssignmentNode(self, node):\n        \"\"\"\n        Parallel swap assignments like 'a,b = b,a' are safe.\n        \"\"\"\n        left_names, right_names = [], []\n        left_indices, right_indices = [], []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "EarlyReplaceBuiltinCalls",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class EarlyReplaceBuiltinCalls(Visitor.EnvTransform):\n    \"\"\"Optimize some common calls to builtin types *before* the type\n    analysis phase and *after* the declarations analysis phase.\n    This transform cannot make use of any argument types, but it can\n    restructure the tree in a way that the type analysis phase can\n    respond to.\n    Introducing C function calls here may not be a good idea.  Move\n    them to the OptimizeBuiltinCalls transform instead, which runs\n    after type analysis.\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "InlineDefNodeCalls",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class InlineDefNodeCalls(Visitor.NodeRefCleanupMixin, Visitor.EnvTransform):\n    visit_Node = Visitor.VisitorTransform.recurse_to_children\n    def get_constant_value_node(self, name_node):\n        if name_node.cf_state is None:\n            return None\n        if name_node.cf_state.cf_is_null:\n            return None\n        entry = self.current_env().lookup(name_node.name)\n        if not entry or (not entry.cf_assignments\n                         or len(entry.cf_assignments) != 1):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "OptimizeBuiltinCalls",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class OptimizeBuiltinCalls(Visitor.NodeRefCleanupMixin,\n                           Visitor.MethodDispatcherTransform):\n    \"\"\"Optimize some common methods calls and instantiation patterns\n    for builtin types *after* the type analysis phase.\n    Running after type analysis, this transform can only perform\n    function replacements that do not alter the function return type\n    in a way that was not anticipated by the type analysis.\n    \"\"\"\n    ### cleanup to avoid redundant coercions to/from Python types\n    def visit_PyTypeTestNode(self, node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "ConstantFolding",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class ConstantFolding(Visitor.VisitorTransform, SkipDeclarations):\n    \"\"\"Calculate the result of constant expressions to store it in\n    ``expr_node.constant_result``, and replace trivial cases by their\n    constant result.\n    General rules:\n    - We calculate float constants to make them available to the\n      compiler, but we do not aggregate them into a single literal\n      node to prevent any loss of precision.\n    - We recursively calculate constants from non-literal nodes to\n      make them available to the compiler, but we only aggregate",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "FinalOptimizePhase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class FinalOptimizePhase(Visitor.EnvTransform, Visitor.NodeRefCleanupMixin):\n    \"\"\"\n    This visitor handles several commuting optimizations, and is run\n    just before the C code generation phase.\n    The optimizations currently implemented in this class are:\n        - eliminate None assignment and refcounting for first assignment.\n        - isinstance -> typecheck for cdef types\n        - eliminate checks for None and/or types that became redundant after tree changes\n        - eliminate useless string formatting steps\n        - replace Python function calls that look like method calls by a faster PyMethodCallNode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "ConsolidateOverflowCheck",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class ConsolidateOverflowCheck(Visitor.CythonTransform):\n    \"\"\"\n    This class facilitates the sharing of overflow checking among all nodes\n    of a nested arithmetic expression.  For example, given the expression\n    a*b + c, where a, b, and x are all possibly overflowing ints, the entire\n    sequence will be evaluated and the overflow bit checked only at the end.\n    \"\"\"\n    overflow_bit_node = None\n    def visit_Node(self, node):\n        if self.overflow_bit_node is not None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "load_c_utility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "def load_c_utility(name):\n    return UtilityCode.load_cached(name, \"Optimize.c\")\ndef unwrap_coerced_node(node, coercion_nodes=(ExprNodes.CoerceToPyTypeNode, ExprNodes.CoerceFromPyTypeNode)):\n    if isinstance(node, coercion_nodes):\n        return node.arg\n    return node\ndef unwrap_node(node):\n    while isinstance(node, UtilNodes.ResultRefNode):\n        node = node.expression\n    return node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "unwrap_coerced_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "def unwrap_coerced_node(node, coercion_nodes=(ExprNodes.CoerceToPyTypeNode, ExprNodes.CoerceFromPyTypeNode)):\n    if isinstance(node, coercion_nodes):\n        return node.arg\n    return node\ndef unwrap_node(node):\n    while isinstance(node, UtilNodes.ResultRefNode):\n        node = node.expression\n    return node\ndef is_common_value(a, b):\n    a = unwrap_node(a)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "unwrap_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "def unwrap_node(node):\n    while isinstance(node, UtilNodes.ResultRefNode):\n        node = node.expression\n    return node\ndef is_common_value(a, b):\n    a = unwrap_node(a)\n    b = unwrap_node(b)\n    if isinstance(a, ExprNodes.NameNode) and isinstance(b, ExprNodes.NameNode):\n        return a.name == b.name\n    if isinstance(a, ExprNodes.AttributeNode) and isinstance(b, ExprNodes.AttributeNode):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "is_common_value",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "def is_common_value(a, b):\n    a = unwrap_node(a)\n    b = unwrap_node(b)\n    if isinstance(a, ExprNodes.NameNode) and isinstance(b, ExprNodes.NameNode):\n        return a.name == b.name\n    if isinstance(a, ExprNodes.AttributeNode) and isinstance(b, ExprNodes.AttributeNode):\n        return not a.is_py_attr and is_common_value(a.obj, b.obj) and a.attribute == b.attribute\n    return False\ndef filter_none_node(node):\n    if node is not None and node.constant_result is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "filter_none_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "def filter_none_node(node):\n    if node is not None and node.constant_result is None:\n        return None\n    return node\nclass _YieldNodeCollector(Visitor.TreeVisitor):\n    \"\"\"\n    YieldExprNode finder for generator expressions.\n    \"\"\"\n    def __init__(self):\n        Visitor.TreeVisitor.__init__(self)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "unicode_tailmatch_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "unicode_tailmatch_utility_code = UtilityCode.load_cached('unicode_tailmatch', 'StringTools.c')\nbytes_tailmatch_utility_code = UtilityCode.load_cached('bytes_tailmatch', 'StringTools.c')\nstr_tailmatch_utility_code = UtilityCode.load_cached('str_tailmatch', 'StringTools.c')\nclass ConstantFolding(Visitor.VisitorTransform, SkipDeclarations):\n    \"\"\"Calculate the result of constant expressions to store it in\n    ``expr_node.constant_result``, and replace trivial cases by their\n    constant result.\n    General rules:\n    - We calculate float constants to make them available to the\n      compiler, but we do not aggregate them into a single literal",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "bytes_tailmatch_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "bytes_tailmatch_utility_code = UtilityCode.load_cached('bytes_tailmatch', 'StringTools.c')\nstr_tailmatch_utility_code = UtilityCode.load_cached('str_tailmatch', 'StringTools.c')\nclass ConstantFolding(Visitor.VisitorTransform, SkipDeclarations):\n    \"\"\"Calculate the result of constant expressions to store it in\n    ``expr_node.constant_result``, and replace trivial cases by their\n    constant result.\n    General rules:\n    - We calculate float constants to make them available to the\n      compiler, but we do not aggregate them into a single literal\n      node to prevent any loss of precision.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "str_tailmatch_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "peekOfCode": "str_tailmatch_utility_code = UtilityCode.load_cached('str_tailmatch', 'StringTools.c')\nclass ConstantFolding(Visitor.VisitorTransform, SkipDeclarations):\n    \"\"\"Calculate the result of constant expressions to store it in\n    ``expr_node.constant_result``, and replace trivial cases by their\n    constant result.\n    General rules:\n    - We calculate float constants to make them available to the\n      compiler, but we do not aggregate them into a single literal\n      node to prevent any loss of precision.\n    - We recursively calculate constants from non-literal nodes to",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "ShouldBeFromDirective",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "class ShouldBeFromDirective(object):\n    known_directives = []\n    def __init__(self, options_name, directive_name=None, disallow=False):\n        self.options_name = options_name\n        self.directive_name = directive_name or options_name\n        self.disallow = disallow\n        self.known_directives.append(self)\n    def __nonzero__(self):\n        self._bad_access()\n    def __int__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "get_directive_defaults",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "def get_directive_defaults():\n    # To add an item to this list, all accesses should be changed to use the new\n    # directive, and the global option itself should be set to an instance of\n    # ShouldBeFromDirective.\n    for old_option in ShouldBeFromDirective.known_directives:\n        value = globals().get(old_option.options_name)\n        assert old_option.directive_name in _directive_defaults\n        if not isinstance(value, ShouldBeFromDirective):\n            if old_option.disallow:\n                raise RuntimeError(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "one_of",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "def one_of(*args):\n    def validate(name, value):\n        if value not in args:\n            raise ValueError(\"%s directive must be one of %s, got '%s'\" % (\n                name, args, value))\n        else:\n            return value\n    return validate\ndef normalise_encoding_name(option_name, encoding):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "normalise_encoding_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "def normalise_encoding_name(option_name, encoding):\n    \"\"\"\n    >>> normalise_encoding_name('c_string_encoding', 'ascii')\n    'ascii'\n    >>> normalise_encoding_name('c_string_encoding', 'AsCIi')\n    'ascii'\n    >>> normalise_encoding_name('c_string_encoding', 'us-ascii')\n    'ascii'\n    >>> normalise_encoding_name('c_string_encoding', 'utF8')\n    'utf8'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "parse_directive_value",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "def parse_directive_value(name, value, relaxed_bool=False):\n    \"\"\"\n    Parses value as an option value for the given name and returns\n    the interpreted value. None is returned if the option does not exist.\n    >>> print(parse_directive_value('nonexisting', 'asdf asdfd'))\n    None\n    >>> parse_directive_value('boundscheck', 'True')\n    True\n    >>> parse_directive_value('boundscheck', 'true')\n    Traceback (most recent call last):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "parse_directive_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "def parse_directive_list(s, relaxed_bool=False, ignore_unknown=False,\n                         current_settings=None):\n    \"\"\"\n    Parses a comma-separated list of pragma options. Whitespace\n    is not considered.\n    >>> parse_directive_list('      ')\n    {}\n    >>> (parse_directive_list('boundscheck=True') ==\n    ... {'boundscheck': True})\n    True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "parse_variable_value",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "def parse_variable_value(value):\n    \"\"\"\n    Parses value as an option value for the given name and returns\n    the interpreted value.\n    >>> parse_variable_value('True')\n    True\n    >>> parse_variable_value('true')\n    'true'\n    >>> parse_variable_value('us-ascii')\n    'us-ascii'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "parse_compile_time_env",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "def parse_compile_time_env(s, current_settings=None):\n    \"\"\"\n    Parses a comma-separated list of pragma options. Whitespace\n    is not considered.\n    >>> parse_compile_time_env('      ')\n    {}\n    >>> (parse_compile_time_env('HAVE_OPENMP=True') ==\n    ... {'HAVE_OPENMP': True})\n    True\n    >>> parse_compile_time_env('  asdf')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "docstrings",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "docstrings = True\n#: Embed the source code position in the docstrings of functions and classes.\nembed_pos_in_docstring = False\n#: Copy the original source code line by line into C code comments\n#: in the generated code file to help with understanding the output.\n#: This is also required for coverage analysis.\nemit_code_comments = True\n# undocumented\npre_import = None\n#: Decref global variables in each module on exit for garbage collection.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "embed_pos_in_docstring",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "embed_pos_in_docstring = False\n#: Copy the original source code line by line into C code comments\n#: in the generated code file to help with understanding the output.\n#: This is also required for coverage analysis.\nemit_code_comments = True\n# undocumented\npre_import = None\n#: Decref global variables in each module on exit for garbage collection.\n#: 0: None, 1+: interned objects, 2+: cdef globals, 3+: types objects\n#: Mostly for reducing noise in Valgrind as it typically executes at process exit",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "emit_code_comments",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "emit_code_comments = True\n# undocumented\npre_import = None\n#: Decref global variables in each module on exit for garbage collection.\n#: 0: None, 1+: interned objects, 2+: cdef globals, 3+: types objects\n#: Mostly for reducing noise in Valgrind as it typically executes at process exit\n#: (when all memory will be reclaimed anyways).\n#: Note that directly or indirectly executed cleanup code that makes use of global\n#: variables or types may no longer be safe when enabling the respective level since\n#: there is no guaranteed order in which the (reference counted) objects will",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "pre_import",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "pre_import = None\n#: Decref global variables in each module on exit for garbage collection.\n#: 0: None, 1+: interned objects, 2+: cdef globals, 3+: types objects\n#: Mostly for reducing noise in Valgrind as it typically executes at process exit\n#: (when all memory will be reclaimed anyways).\n#: Note that directly or indirectly executed cleanup code that makes use of global\n#: variables or types may no longer be safe when enabling the respective level since\n#: there is no guaranteed order in which the (reference counted) objects will\n#: be cleaned up.  The order can change due to live references and reference cycles.\ngenerate_cleanup_code = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "generate_cleanup_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "generate_cleanup_code = False\n#: Should tp_clear() set object fields to None instead of clearing them to NULL?\nclear_to_none = True\n#: Generate an annotated HTML version of the input source files for debugging and optimisation purposes.\n#: This has the same effect as the ``annotate`` argument in :func:`cythonize`.\nannotate = False\n# When annotating source files in HTML, include coverage information from\n# this file.\nannotate_coverage_xml = None\n#: This will abort the compilation on the first error occurred rather than trying",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "clear_to_none",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "clear_to_none = True\n#: Generate an annotated HTML version of the input source files for debugging and optimisation purposes.\n#: This has the same effect as the ``annotate`` argument in :func:`cythonize`.\nannotate = False\n# When annotating source files in HTML, include coverage information from\n# this file.\nannotate_coverage_xml = None\n#: This will abort the compilation on the first error occurred rather than trying\n#: to keep going and printing further error messages.\nfast_fail = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "annotate",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "annotate = False\n# When annotating source files in HTML, include coverage information from\n# this file.\nannotate_coverage_xml = None\n#: This will abort the compilation on the first error occurred rather than trying\n#: to keep going and printing further error messages.\nfast_fail = False\n#: Turn all warnings into errors.\nwarning_errors = False\n#: Make unknown names an error.  Python raises a NameError when",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "annotate_coverage_xml",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "annotate_coverage_xml = None\n#: This will abort the compilation on the first error occurred rather than trying\n#: to keep going and printing further error messages.\nfast_fail = False\n#: Turn all warnings into errors.\nwarning_errors = False\n#: Make unknown names an error.  Python raises a NameError when\n#: encountering unknown names at runtime, whereas this option makes\n#: them a compile time error.  If you want full Python compatibility,\n#: you should disable this option and also 'cache_builtins'.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "fast_fail",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "fast_fail = False\n#: Turn all warnings into errors.\nwarning_errors = False\n#: Make unknown names an error.  Python raises a NameError when\n#: encountering unknown names at runtime, whereas this option makes\n#: them a compile time error.  If you want full Python compatibility,\n#: you should disable this option and also 'cache_builtins'.\nerror_on_unknown_names = True\n#: Make uninitialized local variable reference a compile time error.\n#: Python raises UnboundLocalError at runtime, whereas this option makes",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "warning_errors",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "warning_errors = False\n#: Make unknown names an error.  Python raises a NameError when\n#: encountering unknown names at runtime, whereas this option makes\n#: them a compile time error.  If you want full Python compatibility,\n#: you should disable this option and also 'cache_builtins'.\nerror_on_unknown_names = True\n#: Make uninitialized local variable reference a compile time error.\n#: Python raises UnboundLocalError at runtime, whereas this option makes\n#: them a compile time error. Note that this option affects only variables\n#: of \"python object\" type.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "error_on_unknown_names",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "error_on_unknown_names = True\n#: Make uninitialized local variable reference a compile time error.\n#: Python raises UnboundLocalError at runtime, whereas this option makes\n#: them a compile time error. Note that this option affects only variables\n#: of \"python object\" type.\nerror_on_uninitialized = True\n#: This will convert statements of the form ``for i in range(...)``\n#: to ``for i from ...`` when ``i`` is a C integer type, and the direction\n#: (i.e. sign of step) can be determined.\n#: WARNING: This may change the semantics if the range causes assignment to",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "error_on_uninitialized",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "error_on_uninitialized = True\n#: This will convert statements of the form ``for i in range(...)``\n#: to ``for i from ...`` when ``i`` is a C integer type, and the direction\n#: (i.e. sign of step) can be determined.\n#: WARNING: This may change the semantics if the range causes assignment to\n#: i to overflow. Specifically, if this option is set, an error will be\n#: raised before the loop is entered, whereas without this option the loop\n#: will execute until an overflowing value is encountered.\nconvert_range = True\n#: Perform lookups on builtin names only once, at module initialisation",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "convert_range",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "convert_range = True\n#: Perform lookups on builtin names only once, at module initialisation\n#: time.  This will prevent the module from getting imported if a\n#: builtin name that it uses cannot be found during initialisation.\n#: Default is True.\n#: Note that some legacy builtins are automatically remapped\n#: from their Python 2 names to their Python 3 names by Cython\n#: when building in Python 3.x,\n#: so that they do not get in the way even if this option is enabled.\ncache_builtins = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "cache_builtins",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "cache_builtins = True\n#: Generate branch prediction hints to speed up error handling etc.\ngcc_branch_hints = True\n#: Enable this to allow one to write ``your_module.foo = ...`` to overwrite the\n#: definition if the cpdef function foo, at the cost of an extra dictionary\n#: lookup on every call.\n#: If this is false it generates only the Python wrapper and no override check.\nlookup_module_cpdef = False\n#: Whether or not to embed the Python interpreter, for use in making a\n#: standalone executable or calling from external libraries.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "gcc_branch_hints",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "gcc_branch_hints = True\n#: Enable this to allow one to write ``your_module.foo = ...`` to overwrite the\n#: definition if the cpdef function foo, at the cost of an extra dictionary\n#: lookup on every call.\n#: If this is false it generates only the Python wrapper and no override check.\nlookup_module_cpdef = False\n#: Whether or not to embed the Python interpreter, for use in making a\n#: standalone executable or calling from external libraries.\n#: This will provide a C function which initialises the interpreter and\n#: executes the body of this module.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "lookup_module_cpdef",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "lookup_module_cpdef = False\n#: Whether or not to embed the Python interpreter, for use in making a\n#: standalone executable or calling from external libraries.\n#: This will provide a C function which initialises the interpreter and\n#: executes the body of this module.\n#: See `this demo <https://github.com/cython/cython/tree/master/Demos/embed>`_\n#: for a concrete example.\n#: If true, the initialisation function is the C main() function, but\n#: this option can also be set to a non-empty string to provide a function name explicitly.\n#: Default is False.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "embed",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "embed = None\n# In previous iterations of Cython, globals() gave the first non-Cython module\n# globals in the call stack.  Sage relies on this behavior for variable injection.\nold_style_globals = ShouldBeFromDirective('old_style_globals')\n#: Allows cimporting from a pyx file without a pxd file.\ncimport_from_pyx = False\n#: Maximum number of dimensions for buffers -- set lower than number of\n#: dimensions in numpy, as\n#: slices are passed by value and involve a lot of copying.\nbuffer_max_dims = 8",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "old_style_globals",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "old_style_globals = ShouldBeFromDirective('old_style_globals')\n#: Allows cimporting from a pyx file without a pxd file.\ncimport_from_pyx = False\n#: Maximum number of dimensions for buffers -- set lower than number of\n#: dimensions in numpy, as\n#: slices are passed by value and involve a lot of copying.\nbuffer_max_dims = 8\n#: Number of function closure instances to keep in a freelist (0: no freelists)\nclosure_freelist_size = 8\ndef get_directive_defaults():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "cimport_from_pyx",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "cimport_from_pyx = False\n#: Maximum number of dimensions for buffers -- set lower than number of\n#: dimensions in numpy, as\n#: slices are passed by value and involve a lot of copying.\nbuffer_max_dims = 8\n#: Number of function closure instances to keep in a freelist (0: no freelists)\nclosure_freelist_size = 8\ndef get_directive_defaults():\n    # To add an item to this list, all accesses should be changed to use the new\n    # directive, and the global option itself should be set to an instance of",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "buffer_max_dims",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "buffer_max_dims = 8\n#: Number of function closure instances to keep in a freelist (0: no freelists)\nclosure_freelist_size = 8\ndef get_directive_defaults():\n    # To add an item to this list, all accesses should be changed to use the new\n    # directive, and the global option itself should be set to an instance of\n    # ShouldBeFromDirective.\n    for old_option in ShouldBeFromDirective.known_directives:\n        value = globals().get(old_option.options_name)\n        assert old_option.directive_name in _directive_defaults",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "closure_freelist_size",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "closure_freelist_size = 8\ndef get_directive_defaults():\n    # To add an item to this list, all accesses should be changed to use the new\n    # directive, and the global option itself should be set to an instance of\n    # ShouldBeFromDirective.\n    for old_option in ShouldBeFromDirective.known_directives:\n        value = globals().get(old_option.options_name)\n        assert old_option.directive_name in _directive_defaults\n        if not isinstance(value, ShouldBeFromDirective):\n            if old_option.disallow:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "_directive_defaults",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "_directive_defaults = {\n    'boundscheck' : True,\n    'nonecheck' : False,\n    'initializedcheck' : True,\n    'embedsignature' : False,\n    'auto_cpdef': False,\n    'auto_pickle': None,\n    'cdivision': False,  # was True before 0.12\n    'cdivision_warnings': False,\n    'c_api_binop_methods': True,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "extra_warnings",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "extra_warnings = {\n    'warn.maybe_uninitialized': True,\n    'warn.unreachable': True,\n    'warn.unused': True,\n}\ndef one_of(*args):\n    def validate(name, value):\n        if value not in args:\n            raise ValueError(\"%s directive must be one of %s, got '%s'\" % (\n                name, args, value))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "directive_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "directive_types = {\n    'language_level': str,  # values can be None/2/3/'3str', where None == 2+warning\n    'auto_pickle': bool,\n    'locals': dict,\n    'final' : bool,  # final cdef classes and methods\n    'nogil' : bool,\n    'internal' : bool,  # cdef class visibility in the module dict\n    'infer_types' : bool,  # values can be True/None/False\n    'binding' : bool,\n    'cfunc' : None,  # decorators do not take directive value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "directive_scopes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "peekOfCode": "directive_scopes = {  # defaults to available everywhere\n    # 'module', 'function', 'class', 'with statement'\n    'auto_pickle': ('module', 'cclass'),\n    'final' : ('cclass', 'function'),\n    'nogil' : ('function', 'with statement'),\n    'inline' : ('function',),\n    'cfunc' : ('function', 'with statement'),\n    'ccall' : ('function', 'with statement'),\n    'returns' : ('function',),\n    'exceptval' : ('function',),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "SkipDeclarations",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class SkipDeclarations(object):\n    \"\"\"\n    Variable and function declarations can often have a deep tree structure,\n    and yet most transformations don't need to descend to this depth.\n    Declaration nodes are removed after AnalyseDeclarationsTransform, so there\n    is no need to use this for transformations after that point.\n    \"\"\"\n    def visit_CTypeDefNode(self, node):\n        return node\n    def visit_CVarDefNode(self, node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "NormalizeTree",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class NormalizeTree(CythonTransform):\n    \"\"\"\n    This transform fixes up a few things after parsing\n    in order to make the parse tree more suitable for\n    transforms.\n    a) After parsing, blocks with only one statement will\n    be represented by that statement, not by a StatListNode.\n    When doing transforms this is annoying and inconsistent,\n    as one cannot in general remove a statement in a consistent\n    way and so on. This transform wraps any single statements",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "PostParseError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class PostParseError(CompileError): pass\n# error strings checked by unit tests, so define them\nERR_CDEF_INCLASS = 'Cannot assign default value to fields in cdef classes, structs or unions'\nERR_BUF_DEFAULTS = 'Invalid buffer defaults specification (see docs)'\nERR_INVALID_SPECIALATTR_TYPE = 'Special attributes must not have a type declared'\nclass PostParse(ScopeTrackingTransform):\n    \"\"\"\n    Basic interpretation of the parse tree, as well as validity\n    checking that can be done on a very basic level on the parse\n    tree (while still not being a problem with the basic syntax,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "PostParse",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class PostParse(ScopeTrackingTransform):\n    \"\"\"\n    Basic interpretation of the parse tree, as well as validity\n    checking that can be done on a very basic level on the parse\n    tree (while still not being a problem with the basic syntax,\n    as such).\n    Specifically:\n    - Default values to cdef assignments are turned into single\n    assignments following the declaration (everywhere but in class\n    bodies, where they raise a compile error)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "PxdPostParse",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class PxdPostParse(CythonTransform, SkipDeclarations):\n    \"\"\"\n    Basic interpretation/validity checking that should only be\n    done on pxd trees.\n    A lot of this checking currently happens in the parser; but\n    what is listed below happens here.\n    - \"def\" functions are let through only if they fill the\n    getbuffer/releasebuffer slots\n    - cdef functions are let through only if they are on the\n    top level and are declared \"inline\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "TrackNumpyAttributes",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class TrackNumpyAttributes(VisitorTransform, SkipDeclarations):\n    # TODO: Make name handling as good as in InterpretCompilerDirectives() below - probably best to merge the two.\n    def __init__(self):\n        super(TrackNumpyAttributes, self).__init__()\n        self.numpy_module_names = set()\n    def visit_CImportStatNode(self, node):\n        if node.module_name == u\"numpy\":\n            self.numpy_module_names.add(node.as_name or u\"numpy\")\n        return node\n    def visit_AttributeNode(self, node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "InterpretCompilerDirectives",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class InterpretCompilerDirectives(CythonTransform):\n    \"\"\"\n    After parsing, directives can be stored in a number of places:\n    - #cython-comments at the top of the file (stored in ModuleNode)\n    - Command-line arguments overriding these\n    - @cython.directivename decorators\n    - with cython.directivename: statements\n    This transform is responsible for interpreting these various sources\n    and store the directive in two ways:\n    - Set the directives attribute of the ModuleNode for global directives.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "ParallelRangeTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class ParallelRangeTransform(CythonTransform, SkipDeclarations):\n    \"\"\"\n    Transform cython.parallel stuff. The parallel_directives come from the\n    module node, set there by InterpretCompilerDirectives.\n        x = cython.parallel.threadavailable()   -> ParallelThreadAvailableNode\n        with nogil, cython.parallel.parallel(): -> ParallelWithBlockNode\n            print cython.parallel.threadid()    -> ParallelThreadIdNode\n            for i in cython.parallel.prange(...):  -> ParallelRangeNode\n                ...\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "WithTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class WithTransform(CythonTransform, SkipDeclarations):\n    def visit_WithStatNode(self, node):\n        self.visitchildren(node, 'body')\n        pos = node.pos\n        is_async = node.is_async\n        body, target, manager = node.body, node.target, node.manager\n        node.enter_call = ExprNodes.SimpleCallNode(\n            pos, function=ExprNodes.AttributeNode(\n                pos, obj=ExprNodes.CloneNode(manager),\n                attribute=EncodedString('__aenter__' if is_async else '__enter__'),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "DecoratorTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class DecoratorTransform(ScopeTrackingTransform, SkipDeclarations):\n    \"\"\"\n    Transforms method decorators in cdef classes into nested calls or properties.\n    Python-style decorator properties are transformed into a PropertyNode\n    with up to the three getter, setter and deleter DefNodes.\n    The functional style isn't supported yet.\n    \"\"\"\n    _properties = None\n    _map_property_attribute = {\n        'getter': '__get__',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "CnameDirectivesTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class CnameDirectivesTransform(CythonTransform, SkipDeclarations):\n    \"\"\"\n    Only part of the CythonUtilityCode pipeline. Must be run before\n    DecoratorTransform in case this is a decorator for a cdef class.\n    It filters out @cname('my_cname') decorators and rewrites them to\n    CnameDecoratorNodes.\n    \"\"\"\n    def handle_function(self, node):\n        if not getattr(node, 'decorators', None):\n            return self.visit_Node(node)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "ForwardDeclareTypes",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class ForwardDeclareTypes(CythonTransform):\n    def visit_CompilerDirectivesNode(self, node):\n        env = self.module_scope\n        old = env.directives\n        env.directives = node.directives\n        self.visitchildren(node)\n        env.directives = old\n        return node\n    def visit_ModuleNode(self, node):\n        self.module_scope = node.scope",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "AnalyseDeclarationsTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class AnalyseDeclarationsTransform(EnvTransform):\n    basic_property = TreeFragment(u\"\"\"\nproperty NAME:\n    def __get__(self):\n        return ATTR\n    def __set__(self, value):\n        ATTR = value\n    \"\"\", level='c_class', pipeline=[NormalizeTree(None)])\n    basic_pyobject_property = TreeFragment(u\"\"\"\nproperty NAME:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "CalculateQualifiedNamesTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class CalculateQualifiedNamesTransform(EnvTransform):\n    \"\"\"\n    Calculate and store the '__qualname__' and the global\n    module name on some nodes.\n    \"\"\"\n    def visit_ModuleNode(self, node):\n        self.module_name = self.global_scope().qualified_name\n        self.qualified_name = []\n        _super = super(CalculateQualifiedNamesTransform, self)\n        self._super_visit_FuncDefNode = _super.visit_FuncDefNode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "AnalyseExpressionsTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class AnalyseExpressionsTransform(CythonTransform):\n    def visit_ModuleNode(self, node):\n        node.scope.infer_types()\n        node.body = node.body.analyse_expressions(node.scope)\n        self.visitchildren(node)\n        return node\n    def visit_FuncDefNode(self, node):\n        node.local_scope.infer_types()\n        node.body = node.body.analyse_expressions(node.local_scope)\n        self.visitchildren(node)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "FindInvalidUseOfFusedTypes",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class FindInvalidUseOfFusedTypes(CythonTransform):\n    def visit_FuncDefNode(self, node):\n        # Errors related to use in functions with fused args will already\n        # have been detected\n        if not node.has_fused_arguments:\n            if not node.is_generator_body and node.return_type.is_fused:\n                error(node.pos, \"Return type is not specified as argument type\")\n            else:\n                self.visitchildren(node)\n        return node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "ExpandInplaceOperators",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class ExpandInplaceOperators(EnvTransform):\n    def visit_InPlaceAssignmentNode(self, node):\n        lhs = node.lhs\n        rhs = node.rhs\n        if lhs.type.is_cpp_class:\n            # No getting around this exact operator here.\n            return node\n        if isinstance(lhs, ExprNodes.BufferIndexNode):\n            # There is code to handle this case in InPlaceAssignmentNode\n            return node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "AdjustDefByDirectives",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class AdjustDefByDirectives(CythonTransform, SkipDeclarations):\n    \"\"\"\n    Adjust function and class definitions by the decorator directives:\n    @cython.cfunc\n    @cython.cclass\n    @cython.ccall\n    @cython.inline\n    @cython.nogil\n    \"\"\"\n    def visit_ModuleNode(self, node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "AlignFunctionDefinitions",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class AlignFunctionDefinitions(CythonTransform):\n    \"\"\"\n    This class takes the signatures from a .pxd file and applies them to\n    the def methods in a .py file.\n    \"\"\"\n    def visit_ModuleNode(self, node):\n        self.scope = node.scope\n        self.directives = node.directives\n        self.imported_names = set()  # hack, see visit_FromImportStatNode()\n        self.visitchildren(node)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "RemoveUnreachableCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class RemoveUnreachableCode(CythonTransform):\n    def visit_StatListNode(self, node):\n        if not self.current_directives['remove_unreachable']:\n            return node\n        self.visitchildren(node)\n        for idx, stat in enumerate(node.stats):\n            idx += 1\n            if stat.is_terminator:\n                if idx < len(node.stats):\n                    if self.current_directives['warn.unreachable']:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "YieldNodeCollector",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class YieldNodeCollector(TreeVisitor):\n    def __init__(self):\n        super(YieldNodeCollector, self).__init__()\n        self.yields = []\n        self.returns = []\n        self.finallys = []\n        self.excepts = []\n        self.has_return_value = False\n        self.has_yield = False\n        self.has_await = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "MarkClosureVisitor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class MarkClosureVisitor(CythonTransform):\n    def visit_ModuleNode(self, node):\n        self.needs_closure = False\n        self.visitchildren(node)\n        return node\n    def visit_FuncDefNode(self, node):\n        self.needs_closure = False\n        self.visitchildren(node)\n        node.needs_closure = self.needs_closure\n        self.needs_closure = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "CreateClosureClasses",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class CreateClosureClasses(CythonTransform):\n    # Output closure classes in module scope for all functions\n    # that really need it.\n    def __init__(self, context):\n        super(CreateClosureClasses, self).__init__(context)\n        self.path = []\n        self.in_lambda = False\n    def visit_ModuleNode(self, node):\n        self.module_scope = node.scope\n        self.visitchildren(node)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "InjectGilHandling",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class InjectGilHandling(VisitorTransform, SkipDeclarations):\n    \"\"\"\n    Allow certain Python operations inside of nogil blocks by implicitly acquiring the GIL.\n    Must run before the AnalyseDeclarationsTransform to make sure the GILStatNodes get\n    set up, parallel sections know that the GIL is acquired inside of them, etc.\n    \"\"\"\n    def __call__(self, root):\n        self.nogil = False\n        return super(InjectGilHandling, self).__call__(root)\n    # special node handling",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "GilCheck",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class GilCheck(VisitorTransform):\n    \"\"\"\n    Call `node.gil_check(env)` on each node to make sure we hold the\n    GIL when we need it.  Raise an error when on Python operations\n    inside a `nogil` environment.\n    Additionally, raise exceptions for closely nested with gil or with nogil\n    statements. The latter would abort Python.\n    \"\"\"\n    def __call__(self, root):\n        self.env_stack = [root.scope]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "TransformBuiltinMethods",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class TransformBuiltinMethods(EnvTransform):\n    \"\"\"\n    Replace Cython's own cython.* builtins by the corresponding tree nodes.\n    \"\"\"\n    def visit_SingleAssignmentNode(self, node):\n        if node.declaration_only:\n            return None\n        else:\n            self.visitchildren(node)\n            return node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "ReplaceFusedTypeChecks",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class ReplaceFusedTypeChecks(VisitorTransform):\n    \"\"\"\n    This is not a transform in the pipeline. It is invoked on the specific\n    versions of a cdef function with fused argument types. It filters out any\n    type branches that don't match. e.g.\n        if fused_t is mytype:\n            ...\n        elif fused_t in other_fused_type:\n            ...\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "DebugTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class DebugTransform(CythonTransform):\n    \"\"\"\n    Write debug information for this Cython module.\n    \"\"\"\n    def __init__(self, context, options, result):\n        super(DebugTransform, self).__init__(context)\n        self.visited = set()\n        # our treebuilder and debug output writer\n        # (see Cython.Debugger.debug_output.CythonDebugWriter)\n        self.tb = self.context.gdb_debug_outputwriter",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "eliminate_rhs_duplicates",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "def eliminate_rhs_duplicates(expr_list_list, ref_node_sequence):\n    \"\"\"Replace rhs items by LetRefNodes if they appear more than once.\n    Creates a sequence of LetRefNodes that set up the required temps\n    and appends them to ref_node_sequence.  The input list is modified\n    in-place.\n    \"\"\"\n    seen_nodes = set()\n    ref_nodes = {}\n    def find_duplicates(node):\n        if node.is_literal or node.is_name:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "sort_common_subsequences",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "def sort_common_subsequences(items):\n    \"\"\"Sort items/subsequences so that all items and subsequences that\n    an item contains appear before the item itself.  This is needed\n    because each rhs item must only be evaluated once, so its value\n    must be evaluated first and then reused when packing sequences\n    that contain it.\n    This implies a partial order, and the sort must be stable to\n    preserve the original order as much as possible, so we use a\n    simple insertion sort (which is very fast for short sequences, the\n    normal case in practice).",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "unpack_string_to_character_literals",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "def unpack_string_to_character_literals(literal):\n    chars = []\n    pos = literal.pos\n    stype = literal.__class__\n    sval = literal.value\n    sval_type = sval.__class__\n    for char in sval:\n        cval = sval_type(char)\n        chars.append(stype(pos, value=cval, constant_result=cval))\n    return chars",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "flatten_parallel_assignments",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "def flatten_parallel_assignments(input, output):\n    #  The input is a list of expression nodes, representing the LHSs\n    #  and RHS of one (possibly cascaded) assignment statement.  For\n    #  sequence constructors, rearranges the matching parts of both\n    #  sides into a list of equivalent assignments between the\n    #  individual elements.  This transformation is applied\n    #  recursively, so that nested structures get matched as well.\n    rhs = input[-1]\n    if (not (rhs.is_sequence_constructor or isinstance(rhs, ExprNodes.UnicodeNode))\n        or not sum([lhs.is_sequence_constructor for lhs in input[:-1]])):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "map_starred_assignment",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "def map_starred_assignment(lhs_targets, starred_assignments, lhs_args, rhs_args):\n    # Appends the fixed-position LHS targets to the target list that\n    # appear left and right of the starred argument.\n    #\n    # The starred_assignments list receives a new tuple\n    # (lhs_target, rhs_values_list) that maps the remaining arguments\n    # (those that match the starred target) to a list.\n    # left side of the starred target\n    for i, (targets, expr) in enumerate(zip(lhs_targets, lhs_args)):\n        if expr.is_starred:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "ERR_CDEF_INCLASS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "ERR_CDEF_INCLASS = 'Cannot assign default value to fields in cdef classes, structs or unions'\nERR_BUF_DEFAULTS = 'Invalid buffer defaults specification (see docs)'\nERR_INVALID_SPECIALATTR_TYPE = 'Special attributes must not have a type declared'\nclass PostParse(ScopeTrackingTransform):\n    \"\"\"\n    Basic interpretation of the parse tree, as well as validity\n    checking that can be done on a very basic level on the parse\n    tree (while still not being a problem with the basic syntax,\n    as such).\n    Specifically:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_DEFAULTS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "ERR_BUF_DEFAULTS = 'Invalid buffer defaults specification (see docs)'\nERR_INVALID_SPECIALATTR_TYPE = 'Special attributes must not have a type declared'\nclass PostParse(ScopeTrackingTransform):\n    \"\"\"\n    Basic interpretation of the parse tree, as well as validity\n    checking that can be done on a very basic level on the parse\n    tree (while still not being a problem with the basic syntax,\n    as such).\n    Specifically:\n    - Default values to cdef assignments are turned into single",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "ERR_INVALID_SPECIALATTR_TYPE",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "ERR_INVALID_SPECIALATTR_TYPE = 'Special attributes must not have a type declared'\nclass PostParse(ScopeTrackingTransform):\n    \"\"\"\n    Basic interpretation of the parse tree, as well as validity\n    checking that can be done on a very basic level on the parse\n    tree (while still not being a problem with the basic syntax,\n    as such).\n    Specifically:\n    - Default values to cdef assignments are turned into single\n    assignments following the declaration (everywhere but in class",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "Ctx",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "class Ctx(object):\n    #  Parsing context\n    level = 'other'\n    visibility = 'private'\n    cdef_flag = 0\n    typedef_flag = 0\n    api = 0\n    overridable = 0\n    nogil = 0\n    namespace = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_ident",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_ident(s, message=\"Expected an identifier\"):\n    if s.sy == 'IDENT':\n        name = s.systring\n        s.next()\n        return name\n    else:\n        s.error(message)\ndef p_ident_list(s):\n    names = []\n    while s.sy == 'IDENT':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_ident_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_ident_list(s):\n    names = []\n    while s.sy == 'IDENT':\n        names.append(s.systring)\n        s.next()\n        if s.sy != ',':\n            break\n        s.next()\n    return names\n#------------------------------------------",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_binop_operator",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_binop_operator(s):\n    pos = s.position()\n    op = s.sy\n    s.next()\n    return op, pos\ndef p_binop_expr(s, ops, p_sub_expr):\n    n1 = p_sub_expr(s)\n    while s.sy in ops:\n        op, pos = p_binop_operator(s)\n        n2 = p_sub_expr(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_binop_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_binop_expr(s, ops, p_sub_expr):\n    n1 = p_sub_expr(s)\n    while s.sy in ops:\n        op, pos = p_binop_operator(s)\n        n2 = p_sub_expr(s)\n        n1 = ExprNodes.binop_node(pos, op, n1, n2)\n        if op == '/':\n            if Future.division in s.context.future_directives:\n                n1.truedivision = True\n            else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_lambdef",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_lambdef(s, allow_conditional=True):\n    # s.sy == 'lambda'\n    pos = s.position()\n    s.next()\n    if s.sy == ':':\n        args = []\n        star_arg = starstar_arg = None\n    else:\n        args, star_arg, starstar_arg = p_varargslist(\n            s, terminator=':', annotated=False)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_lambdef_nocond",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_lambdef_nocond(s):\n    return p_lambdef(s, allow_conditional=False)\n#test: or_test ['if' or_test 'else' test] | lambdef\ndef p_test(s):\n    if s.sy == 'lambda':\n        return p_lambdef(s)\n    pos = s.position()\n    expr = p_or_test(s)\n    if s.sy == 'if':\n        s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_test",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_test(s):\n    if s.sy == 'lambda':\n        return p_lambdef(s)\n    pos = s.position()\n    expr = p_or_test(s)\n    if s.sy == 'if':\n        s.next()\n        test = p_or_test(s)\n        s.expect('else')\n        other = p_test(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_test_nocond",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_test_nocond(s):\n    if s.sy == 'lambda':\n        return p_lambdef_nocond(s)\n    else:\n        return p_or_test(s)\n#or_test: and_test ('or' and_test)*\ndef p_or_test(s):\n    return p_rassoc_binop_expr(s, ('or',), p_and_test)\ndef p_rassoc_binop_expr(s, ops, p_subexpr):\n    n1 = p_subexpr(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_or_test",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_or_test(s):\n    return p_rassoc_binop_expr(s, ('or',), p_and_test)\ndef p_rassoc_binop_expr(s, ops, p_subexpr):\n    n1 = p_subexpr(s)\n    if s.sy in ops:\n        pos = s.position()\n        op = s.sy\n        s.next()\n        n2 = p_rassoc_binop_expr(s, ops, p_subexpr)\n        n1 = ExprNodes.binop_node(pos, op, n1, n2)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_rassoc_binop_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_rassoc_binop_expr(s, ops, p_subexpr):\n    n1 = p_subexpr(s)\n    if s.sy in ops:\n        pos = s.position()\n        op = s.sy\n        s.next()\n        n2 = p_rassoc_binop_expr(s, ops, p_subexpr)\n        n1 = ExprNodes.binop_node(pos, op, n1, n2)\n    return n1\n#and_test: not_test ('and' not_test)*",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_and_test",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_and_test(s):\n    #return p_binop_expr(s, ('and',), p_not_test)\n    return p_rassoc_binop_expr(s, ('and',), p_not_test)\n#not_test: 'not' not_test | comparison\ndef p_not_test(s):\n    if s.sy == 'not':\n        pos = s.position()\n        s.next()\n        return ExprNodes.NotNode(pos, operand = p_not_test(s))\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_not_test",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_not_test(s):\n    if s.sy == 'not':\n        pos = s.position()\n        s.next()\n        return ExprNodes.NotNode(pos, operand = p_not_test(s))\n    else:\n        return p_comparison(s)\n#comparison: expr (comp_op expr)*\n#comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'\ndef p_comparison(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_comparison",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_comparison(s):\n    n1 = p_starred_expr(s)\n    if s.sy in comparison_ops:\n        pos = s.position()\n        op = p_cmp_op(s)\n        n2 = p_starred_expr(s)\n        n1 = ExprNodes.PrimaryCmpNode(pos,\n            operator = op, operand1 = n1, operand2 = n2)\n        if s.sy in comparison_ops:\n            n1.cascade = p_cascaded_cmp(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_test_or_starred_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_test_or_starred_expr(s):\n    if s.sy == '*':\n        return p_starred_expr(s)\n    else:\n        return p_test(s)\ndef p_starred_expr(s):\n    pos = s.position()\n    if s.sy == '*':\n        starred = True\n        s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_starred_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_starred_expr(s):\n    pos = s.position()\n    if s.sy == '*':\n        starred = True\n        s.next()\n    else:\n        starred = False\n    expr = p_bit_expr(s)\n    if starred:\n        expr = ExprNodes.StarredUnpackingNode(pos, expr)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cascaded_cmp",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cascaded_cmp(s):\n    pos = s.position()\n    op = p_cmp_op(s)\n    n2 = p_starred_expr(s)\n    result = ExprNodes.CascadedCmpNode(pos,\n        operator = op, operand2 = n2)\n    if s.sy in comparison_ops:\n        result.cascade = p_cascaded_cmp(s)\n    return result\ndef p_cmp_op(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cmp_op",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cmp_op(s):\n    if s.sy == 'not':\n        s.next()\n        s.expect('in')\n        op = 'not_in'\n    elif s.sy == 'is':\n        s.next()\n        if s.sy == 'not':\n            s.next()\n            op = 'is_not'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_bit_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_bit_expr(s):\n    return p_binop_expr(s, ('|',), p_xor_expr)\n#xor_expr: and_expr ('^' and_expr)*\ndef p_xor_expr(s):\n    return p_binop_expr(s, ('^',), p_and_expr)\n#and_expr: shift_expr ('&' shift_expr)*\ndef p_and_expr(s):\n    return p_binop_expr(s, ('&',), p_shift_expr)\n#shift_expr: arith_expr (('<<'|'>>') arith_expr)*\ndef p_shift_expr(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_xor_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_xor_expr(s):\n    return p_binop_expr(s, ('^',), p_and_expr)\n#and_expr: shift_expr ('&' shift_expr)*\ndef p_and_expr(s):\n    return p_binop_expr(s, ('&',), p_shift_expr)\n#shift_expr: arith_expr (('<<'|'>>') arith_expr)*\ndef p_shift_expr(s):\n    return p_binop_expr(s, ('<<', '>>'), p_arith_expr)\n#arith_expr: term (('+'|'-') term)*\ndef p_arith_expr(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_and_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_and_expr(s):\n    return p_binop_expr(s, ('&',), p_shift_expr)\n#shift_expr: arith_expr (('<<'|'>>') arith_expr)*\ndef p_shift_expr(s):\n    return p_binop_expr(s, ('<<', '>>'), p_arith_expr)\n#arith_expr: term (('+'|'-') term)*\ndef p_arith_expr(s):\n    return p_binop_expr(s, ('+', '-'), p_term)\n#term: factor (('*'|'@'|'/'|'%'|'//') factor)*\ndef p_term(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_shift_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_shift_expr(s):\n    return p_binop_expr(s, ('<<', '>>'), p_arith_expr)\n#arith_expr: term (('+'|'-') term)*\ndef p_arith_expr(s):\n    return p_binop_expr(s, ('+', '-'), p_term)\n#term: factor (('*'|'@'|'/'|'%'|'//') factor)*\ndef p_term(s):\n    return p_binop_expr(s, ('*', '@', '/', '%', '//'), p_factor)\n#factor: ('+'|'-'|'~'|'&'|typecast|sizeof) factor | power\ndef p_factor(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_arith_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_arith_expr(s):\n    return p_binop_expr(s, ('+', '-'), p_term)\n#term: factor (('*'|'@'|'/'|'%'|'//') factor)*\ndef p_term(s):\n    return p_binop_expr(s, ('*', '@', '/', '%', '//'), p_factor)\n#factor: ('+'|'-'|'~'|'&'|typecast|sizeof) factor | power\ndef p_factor(s):\n    # little indirection for C-ification purposes\n    return _p_factor(s)\ndef _p_factor(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_term",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_term(s):\n    return p_binop_expr(s, ('*', '@', '/', '%', '//'), p_factor)\n#factor: ('+'|'-'|'~'|'&'|typecast|sizeof) factor | power\ndef p_factor(s):\n    # little indirection for C-ification purposes\n    return _p_factor(s)\ndef _p_factor(s):\n    sy = s.sy\n    if sy in ('+', '-', '~'):\n        op = s.sy",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_factor",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_factor(s):\n    # little indirection for C-ification purposes\n    return _p_factor(s)\ndef _p_factor(s):\n    sy = s.sy\n    if sy in ('+', '-', '~'):\n        op = s.sy\n        pos = s.position()\n        s.next()\n        return ExprNodes.unop_node(pos, op, p_factor(s))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_typecast",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_typecast(s):\n    # s.sy == \"<\"\n    pos = s.position()\n    s.next()\n    base_type = p_c_base_type(s)\n    is_memslice = isinstance(base_type, Nodes.MemoryViewSliceTypeNode)\n    is_template = isinstance(base_type, Nodes.TemplatedTypeNode)\n    is_const = isinstance(base_type, Nodes.CConstTypeNode)\n    if (not is_memslice and not is_template and not is_const\n        and base_type.name is None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_sizeof",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_sizeof(s):\n    # s.sy == ident \"sizeof\"\n    pos = s.position()\n    s.next()\n    s.expect('(')\n    # Here we decide if we are looking at an expression or type\n    # If it is actually a type, but parsable as an expression,\n    # we treat it as an expression here.\n    if looking_at_expr(s):\n        operand = p_test(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_yield_expression",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_yield_expression(s):\n    # s.sy == \"yield\"\n    pos = s.position()\n    s.next()\n    is_yield_from = False\n    if s.sy == 'from':\n        is_yield_from = True\n        s.next()\n    if s.sy != ')' and s.sy not in statement_terminators:\n        # \"yield from\" does not support implicit tuples, but \"yield\" does (\"yield 1,2\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_yield_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_yield_statement(s):\n    # s.sy == \"yield\"\n    yield_expr = p_yield_expression(s)\n    return Nodes.ExprStatNode(yield_expr.pos, expr=yield_expr)\ndef p_async_statement(s, ctx, decorators):\n    # s.sy >> 'async' ...\n    if s.sy == 'def':\n        # 'async def' statements aren't allowed in pxd files\n        if 'pxd' in ctx.level:\n            s.error('def statement not allowed here')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_async_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_async_statement(s, ctx, decorators):\n    # s.sy >> 'async' ...\n    if s.sy == 'def':\n        # 'async def' statements aren't allowed in pxd files\n        if 'pxd' in ctx.level:\n            s.error('def statement not allowed here')\n        s.level = ctx.level\n        return p_def_statement(s, decorators, is_async_def=True)\n    elif decorators:\n        s.error(\"Decorators can only be followed by functions or classes\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_power",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_power(s):\n    if s.systring == 'new' and s.peek()[0] == 'IDENT':\n        return p_new_expr(s)\n    await_pos = None\n    if s.sy == 'await':\n        await_pos = s.position()\n        s.next()\n    n1 = p_atom(s)\n    while s.sy in ('(', '[', '.'):\n        n1 = p_trailer(s, n1)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_new_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_new_expr(s):\n    # s.systring == 'new'.\n    pos = s.position()\n    s.next()\n    cppclass = p_c_base_type(s)\n    return p_call(s, ExprNodes.NewExprNode(pos, cppclass = cppclass))\n#trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME\ndef p_trailer(s, node1):\n    pos = s.position()\n    if s.sy == '(':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_trailer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_trailer(s, node1):\n    pos = s.position()\n    if s.sy == '(':\n        return p_call(s, node1)\n    elif s.sy == '[':\n        return p_index(s, node1)\n    else: # s.sy == '.'\n        s.next()\n        name = p_ident(s)\n        return ExprNodes.AttributeNode(pos,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_call_parse_args",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_call_parse_args(s, allow_genexp=True):\n    # s.sy == '('\n    pos = s.position()\n    s.next()\n    positional_args = []\n    keyword_args = []\n    starstar_seen = False\n    last_was_tuple_unpack = False\n    while s.sy != ')':\n        if s.sy == '*':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_call_build_packed_args",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_call_build_packed_args(pos, positional_args, keyword_args):\n    keyword_dict = None\n    subtuples = [\n        ExprNodes.TupleNode(pos, args=arg) if isinstance(arg, list) else ExprNodes.AsTupleNode(pos, arg=arg)\n        for arg in positional_args\n    ]\n    # TODO: implement a faster way to join tuples than creating each one and adding them\n    arg_tuple = reduce(partial(ExprNodes.binop_node, pos, '+'), subtuples)\n    if keyword_args:\n        kwargs = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_call",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_call(s, function):\n    # s.sy == '('\n    pos = s.position()\n    positional_args, keyword_args = p_call_parse_args(s)\n    if not keyword_args and len(positional_args) == 1 and isinstance(positional_args[0], list):\n        return ExprNodes.SimpleCallNode(pos, function=function, args=positional_args[0])\n    else:\n        arg_tuple, keyword_dict = p_call_build_packed_args(pos, positional_args, keyword_args)\n        return ExprNodes.GeneralCallNode(\n            pos, function=function, positional_args=arg_tuple, keyword_args=keyword_dict)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_index",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_index(s, base):\n    # s.sy == '['\n    pos = s.position()\n    s.next()\n    subscripts, is_single_value = p_subscript_list(s)\n    if is_single_value and len(subscripts[0]) == 2:\n        start, stop = subscripts[0]\n        result = ExprNodes.SliceIndexNode(pos,\n            base = base, start = start, stop = stop)\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_subscript_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_subscript_list(s):\n    is_single_value = True\n    items = [p_subscript(s)]\n    while s.sy == ',':\n        is_single_value = False\n        s.next()\n        if s.sy == ']':\n            break\n        items.append(p_subscript(s))\n    return items, is_single_value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_subscript",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_subscript(s):\n    # Parse a subscript and return a list of\n    # 1, 2 or 3 ExprNodes, depending on how\n    # many slice elements were encountered.\n    pos = s.position()\n    start = p_slice_element(s, (':',))\n    if s.sy != ':':\n        return [start]\n    s.next()\n    stop = p_slice_element(s, (':', ',', ']'))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_slice_element",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_slice_element(s, follow_set):\n    # Simple expression which may be missing iff\n    # it is followed by something in follow_set.\n    if s.sy not in follow_set:\n        return p_test(s)\n    else:\n        return None\ndef expect_ellipsis(s):\n    s.expect('.')\n    s.expect('.')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "expect_ellipsis",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def expect_ellipsis(s):\n    s.expect('.')\n    s.expect('.')\n    s.expect('.')\ndef make_slice_nodes(pos, subscripts):\n    # Convert a list of subscripts as returned\n    # by p_subscript_list into a list of ExprNodes,\n    # creating SliceNodes for elements with 2 or\n    # more components.\n    result = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "make_slice_nodes",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def make_slice_nodes(pos, subscripts):\n    # Convert a list of subscripts as returned\n    # by p_subscript_list into a list of ExprNodes,\n    # creating SliceNodes for elements with 2 or\n    # more components.\n    result = []\n    for subscript in subscripts:\n        if len(subscript) == 1:\n            result.append(subscript[0])\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "make_slice_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def make_slice_node(pos, start, stop = None, step = None):\n    if not start:\n        start = ExprNodes.NoneNode(pos)\n    if not stop:\n        stop = ExprNodes.NoneNode(pos)\n    if not step:\n        step = ExprNodes.NoneNode(pos)\n    return ExprNodes.SliceNode(pos,\n        start = start, stop = stop, step = step)\n#atom: '(' [yield_expr|testlist_comp] ')' | '[' [listmaker] ']' | '{' [dict_or_set_maker] '}' | '`' testlist '`' | NAME | NUMBER | STRING+",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_atom",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_atom(s):\n    pos = s.position()\n    sy = s.sy\n    if sy == '(':\n        s.next()\n        if s.sy == ')':\n            result = ExprNodes.TupleNode(pos, args = [])\n        elif s.sy == 'yield':\n            result = p_yield_expression(s)\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_int_literal",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_int_literal(s):\n    pos = s.position()\n    value = s.systring\n    s.next()\n    unsigned = \"\"\n    longness = \"\"\n    while value[-1] in u\"UuLl\":\n        if value[-1] in u\"Ll\":\n            longness += \"L\"\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_name(s, name):\n    pos = s.position()\n    if not s.compile_time_expr and name in s.compile_time_env:\n        value = s.compile_time_env.lookup_here(name)\n        node = wrap_compile_time_constant(pos, value)\n        if node is not None:\n            return node\n    return ExprNodes.NameNode(pos, name=name)\ndef wrap_compile_time_constant(pos, value):\n    rep = repr(value)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "wrap_compile_time_constant",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def wrap_compile_time_constant(pos, value):\n    rep = repr(value)\n    if value is None:\n        return ExprNodes.NoneNode(pos)\n    elif value is Ellipsis:\n        return ExprNodes.EllipsisNode(pos)\n    elif isinstance(value, bool):\n        return ExprNodes.BoolNode(pos, value=value)\n    elif isinstance(value, int):\n        return ExprNodes.IntNode(pos, value=rep, constant_result=value)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cat_string_literal",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cat_string_literal(s):\n    # A sequence of one or more adjacent string literals.\n    # Returns (kind, bytes_value, unicode_value)\n    # where kind in ('b', 'c', 'u', 'f', '')\n    pos = s.position()\n    kind, bytes_value, unicode_value = p_string_literal(s)\n    if kind == 'c' or s.sy != 'BEGIN_STRING':\n        return kind, bytes_value, unicode_value\n    bstrings, ustrings, positions = [bytes_value], [unicode_value], [pos]\n    bytes_value = unicode_value = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_opt_string_literal",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_opt_string_literal(s, required_type='u'):\n    if s.sy != 'BEGIN_STRING':\n        return None\n    pos = s.position()\n    kind, bytes_value, unicode_value = p_string_literal(s, required_type)\n    if required_type == 'u':\n        if kind == 'f':\n            s.error(\"f-string not allowed here\", pos)\n        return unicode_value\n    elif required_type == 'b':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "check_for_non_ascii_characters",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def check_for_non_ascii_characters(string):\n    for c in string:\n        if c >= u'\\x80':\n            return True\n    return False\ndef p_string_literal(s, kind_override=None):\n    # A single string or char literal.  Returns (kind, bvalue, uvalue)\n    # where kind in ('b', 'c', 'u', 'f', '').  The 'bvalue' is the source\n    # code byte sequence of the string literal, 'uvalue' is the\n    # decoded Unicode string.  Either of the two may be None depending",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_string_literal",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_string_literal(s, kind_override=None):\n    # A single string or char literal.  Returns (kind, bvalue, uvalue)\n    # where kind in ('b', 'c', 'u', 'f', '').  The 'bvalue' is the source\n    # code byte sequence of the string literal, 'uvalue' is the\n    # decoded Unicode string.  Either of the two may be None depending\n    # on the 'kind' of string, only unprefixed strings have both\n    # representations. In f-strings, the uvalue is a list of the Unicode\n    # strings and f-string expressions that make up the f-string.\n    # s.sy == 'BEGIN_STRING'\n    pos = s.position()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_f_string",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_f_string(s, unicode_value, pos, is_raw):\n    # Parses a PEP 498 f-string literal into a list of nodes. Nodes are either UnicodeNodes\n    # or FormattedValueNodes.\n    values = []\n    next_start = 0\n    size = len(unicode_value)\n    builder = StringEncoding.UnicodeLiteralBuilder()\n    _parse_seq = _parse_escape_sequences_raw if is_raw else _parse_escape_sequences\n    while next_start < size:\n        end = next_start",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_f_string_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_f_string_expr(s, unicode_value, pos, starting_index, is_raw):\n    # Parses a {}-delimited expression inside an f-string. Returns a FormattedValueNode\n    # and the index in the string that follows the expression.\n    i = starting_index\n    size = len(unicode_value)\n    conversion_char = terminal_char = format_spec = None\n    format_spec_str = None\n    NO_CHAR = 2**30\n    nested_depth = 0\n    quote_char = NO_CHAR",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_list_maker",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_list_maker(s):\n    # s.sy == '['\n    pos = s.position()\n    s.next()\n    if s.sy == ']':\n        s.expect(']')\n        return ExprNodes.ListNode(pos, args=[])\n    expr = p_test_or_starred_expr(s)\n    if s.sy in ('for', 'async'):\n        if expr.is_starred:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_comp_iter",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_comp_iter(s, body):\n    if s.sy in ('for', 'async'):\n        return p_comp_for(s, body)\n    elif s.sy == 'if':\n        return p_comp_if(s, body)\n    else:\n        # insert the 'append' operation into the loop\n        return body\ndef p_comp_for(s, body):\n    pos = s.position()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_comp_for",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_comp_for(s, body):\n    pos = s.position()\n    # [async] for ...\n    is_async = False\n    if s.sy == 'async':\n        is_async = True\n        s.next()\n    # s.sy == 'for'\n    s.expect('for')\n    kw = p_for_bounds(s, allow_testlist=False, is_async=is_async)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_comp_if",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_comp_if(s, body):\n    # s.sy == 'if'\n    pos = s.position()\n    s.next()\n    test = p_test_nocond(s)\n    return Nodes.IfStatNode(pos,\n        if_clauses = [Nodes.IfClauseNode(pos, condition = test,\n                                         body = p_comp_iter(s, body))],\n        else_clause = None )\n# since PEP 448:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_dict_or_set_maker",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_dict_or_set_maker(s):\n    # s.sy == '{'\n    pos = s.position()\n    s.next()\n    if s.sy == '}':\n        s.next()\n        return ExprNodes.DictNode(pos, key_value_pairs=[])\n    parts = []\n    target_type = 0\n    last_was_simple_item = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_backquote_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_backquote_expr(s):\n    # s.sy == '`'\n    pos = s.position()\n    s.next()\n    args = [p_test(s)]\n    while s.sy == ',':\n        s.next()\n        args.append(p_test(s))\n    s.expect('`')\n    if len(args) == 1:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_simple_expr_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_simple_expr_list(s, expr=None):\n    exprs = expr is not None and [expr] or []\n    while s.sy not in expr_terminators:\n        exprs.append( p_test(s) )\n        if s.sy != ',':\n            break\n        s.next()\n    return exprs\ndef p_test_or_starred_expr_list(s, expr=None):\n    exprs = expr is not None and [expr] or []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_test_or_starred_expr_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_test_or_starred_expr_list(s, expr=None):\n    exprs = expr is not None and [expr] or []\n    while s.sy not in expr_terminators:\n        exprs.append(p_test_or_starred_expr(s))\n        if s.sy != ',':\n            break\n        s.next()\n    return exprs\n#testlist: test (',' test)* [',']\ndef p_testlist(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_testlist",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_testlist(s):\n    pos = s.position()\n    expr = p_test(s)\n    if s.sy == ',':\n        s.next()\n        exprs = p_simple_expr_list(s, expr)\n        return ExprNodes.TupleNode(pos, args = exprs)\n    else:\n        return expr\n# testlist_star_expr: (test|star_expr) ( comp_for | (',' (test|star_expr))* [','] )",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_testlist_star_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_testlist_star_expr(s):\n    pos = s.position()\n    expr = p_test_or_starred_expr(s)\n    if s.sy == ',':\n        s.next()\n        exprs = p_test_or_starred_expr_list(s, expr)\n        return ExprNodes.TupleNode(pos, args = exprs)\n    else:\n        return expr\n# testlist_comp: (test|star_expr) ( comp_for | (',' (test|star_expr))* [','] )",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_testlist_comp",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_testlist_comp(s):\n    pos = s.position()\n    expr = p_test_or_starred_expr(s)\n    if s.sy == ',':\n        s.next()\n        exprs = p_test_or_starred_expr_list(s, expr)\n        return ExprNodes.TupleNode(pos, args = exprs)\n    elif s.sy in ('for', 'async'):\n        return p_genexp(s, expr)\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_genexp",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_genexp(s, expr):\n    # s.sy == 'async' | 'for'\n    loop = p_comp_for(s, Nodes.ExprStatNode(\n        expr.pos, expr = ExprNodes.YieldExprNode(expr.pos, arg=expr)))\n    return ExprNodes.GeneratorExpressionNode(expr.pos, loop=loop)\nexpr_terminators = cython.declare(set, set([\n    ')', ']', '}', ':', '=', 'NEWLINE']))\n#-------------------------------------------------------\n#\n#   Statements",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_global_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_global_statement(s):\n    # assume s.sy == 'global'\n    pos = s.position()\n    s.next()\n    names = p_ident_list(s)\n    return Nodes.GlobalNode(pos, names = names)\ndef p_nonlocal_statement(s):\n    pos = s.position()\n    s.next()\n    names = p_ident_list(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_nonlocal_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_nonlocal_statement(s):\n    pos = s.position()\n    s.next()\n    names = p_ident_list(s)\n    return Nodes.NonlocalNode(pos, names = names)\ndef p_expression_or_assignment(s):\n    expr = p_testlist_star_expr(s)\n    if s.sy == ':' and (expr.is_name or expr.is_subscript or expr.is_attribute):\n        s.next()\n        expr.annotation = p_test(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_expression_or_assignment",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_expression_or_assignment(s):\n    expr = p_testlist_star_expr(s)\n    if s.sy == ':' and (expr.is_name or expr.is_subscript or expr.is_attribute):\n        s.next()\n        expr.annotation = p_test(s)\n    if s.sy == '=' and expr.is_starred:\n        # This is a common enough error to make when learning Cython to let\n        # it fail as early as possible and give a very clear error message.\n        s.error(\"a starred assignment target must be in a list or tuple\"\n                \" - maybe you meant to use an index assignment: var[0] = ...\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_print_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_print_statement(s):\n    # s.sy == 'print'\n    pos = s.position()\n    ends_with_comma = 0\n    s.next()\n    if s.sy == '>>':\n        s.next()\n        stream = p_test(s)\n        if s.sy == ',':\n            s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_exec_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_exec_statement(s):\n    # s.sy == 'exec'\n    pos = s.position()\n    s.next()\n    code = p_bit_expr(s)\n    if isinstance(code, ExprNodes.TupleNode):\n        # Py3 compatibility syntax\n        tuple_variant = True\n        args = code.args\n        if len(args) not in (2, 3):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_del_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_del_statement(s):\n    # s.sy == 'del'\n    pos = s.position()\n    s.next()\n    # FIXME: 'exprlist' in Python\n    args = p_simple_expr_list(s)\n    return Nodes.DelStatNode(pos, args = args)\ndef p_pass_statement(s, with_newline = 0):\n    pos = s.position()\n    s.expect('pass')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_pass_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_pass_statement(s, with_newline = 0):\n    pos = s.position()\n    s.expect('pass')\n    if with_newline:\n        s.expect_newline(\"Expected a newline\", ignore_semicolon=True)\n    return Nodes.PassStatNode(pos)\ndef p_break_statement(s):\n    # s.sy == 'break'\n    pos = s.position()\n    s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_break_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_break_statement(s):\n    # s.sy == 'break'\n    pos = s.position()\n    s.next()\n    return Nodes.BreakStatNode(pos)\ndef p_continue_statement(s):\n    # s.sy == 'continue'\n    pos = s.position()\n    s.next()\n    return Nodes.ContinueStatNode(pos)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_continue_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_continue_statement(s):\n    # s.sy == 'continue'\n    pos = s.position()\n    s.next()\n    return Nodes.ContinueStatNode(pos)\ndef p_return_statement(s):\n    # s.sy == 'return'\n    pos = s.position()\n    s.next()\n    if s.sy not in statement_terminators:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_return_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_return_statement(s):\n    # s.sy == 'return'\n    pos = s.position()\n    s.next()\n    if s.sy not in statement_terminators:\n        value = p_testlist(s)\n    else:\n        value = None\n    return Nodes.ReturnStatNode(pos, value = value)\ndef p_raise_statement(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_raise_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_raise_statement(s):\n    # s.sy == 'raise'\n    pos = s.position()\n    s.next()\n    exc_type = None\n    exc_value = None\n    exc_tb = None\n    cause = None\n    if s.sy not in statement_terminators:\n        exc_type = p_test(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_import_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_import_statement(s):\n    # s.sy in ('import', 'cimport')\n    pos = s.position()\n    kind = s.sy\n    s.next()\n    items = [p_dotted_name(s, as_allowed=1)]\n    while s.sy == ',':\n        s.next()\n        items.append(p_dotted_name(s, as_allowed=1))\n    stats = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_from_import_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_from_import_statement(s, first_statement = 0):\n    # s.sy == 'from'\n    pos = s.position()\n    s.next()\n    if s.sy == '.':\n        # count relative import level\n        level = 0\n        while s.sy == '.':\n            level += 1\n            s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_imported_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_imported_name(s, is_cimport):\n    pos = s.position()\n    kind = None\n    if is_cimport and s.systring in imported_name_kinds:\n        kind = s.systring\n        s.next()\n    name = p_ident(s)\n    as_name = p_as_name(s)\n    return (pos, name, as_name, kind)\ndef p_dotted_name(s, as_allowed):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_dotted_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_dotted_name(s, as_allowed):\n    pos = s.position()\n    target_name = p_ident(s)\n    as_name = None\n    names = [target_name]\n    while s.sy == '.':\n        s.next()\n        names.append(p_ident(s))\n    if as_allowed:\n        as_name = p_as_name(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_as_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_as_name(s):\n    if s.sy == 'IDENT' and s.systring == 'as':\n        s.next()\n        return p_ident(s)\n    else:\n        return None\ndef p_assert_statement(s):\n    # s.sy == 'assert'\n    pos = s.position()\n    s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_assert_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_assert_statement(s):\n    # s.sy == 'assert'\n    pos = s.position()\n    s.next()\n    cond = p_test(s)\n    if s.sy == ',':\n        s.next()\n        value = p_test(s)\n    else:\n        value = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_if_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_if_statement(s):\n    # s.sy == 'if'\n    pos = s.position()\n    s.next()\n    if_clauses = [p_if_clause(s)]\n    while s.sy == 'elif':\n        s.next()\n        if_clauses.append(p_if_clause(s))\n    else_clause = p_else_clause(s)\n    return Nodes.IfStatNode(pos,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_if_clause",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_if_clause(s):\n    pos = s.position()\n    test = p_test(s)\n    body = p_suite(s)\n    return Nodes.IfClauseNode(pos,\n        condition = test, body = body)\ndef p_else_clause(s):\n    if s.sy == 'else':\n        s.next()\n        return p_suite(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_else_clause",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_else_clause(s):\n    if s.sy == 'else':\n        s.next()\n        return p_suite(s)\n    else:\n        return None\ndef p_while_statement(s):\n    # s.sy == 'while'\n    pos = s.position()\n    s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_while_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_while_statement(s):\n    # s.sy == 'while'\n    pos = s.position()\n    s.next()\n    test = p_test(s)\n    body = p_suite(s)\n    else_clause = p_else_clause(s)\n    return Nodes.WhileStatNode(pos,\n        condition = test, body = body,\n        else_clause = else_clause)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_for_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_for_statement(s, is_async=False):\n    # s.sy == 'for'\n    pos = s.position()\n    s.next()\n    kw = p_for_bounds(s, allow_testlist=True, is_async=is_async)\n    body = p_suite(s)\n    else_clause = p_else_clause(s)\n    kw.update(body=body, else_clause=else_clause, is_async=is_async)\n    return Nodes.ForStatNode(pos, **kw)\ndef p_for_bounds(s, allow_testlist=True, is_async=False):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_for_bounds",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_for_bounds(s, allow_testlist=True, is_async=False):\n    target = p_for_target(s)\n    if s.sy == 'in':\n        s.next()\n        iterator = p_for_iterator(s, allow_testlist, is_async=is_async)\n        return dict(target=target, iterator=iterator)\n    elif not s.in_python_file and not is_async:\n        if s.sy == 'from':\n            s.next()\n            bound1 = p_bit_expr(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_for_from_relation",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_for_from_relation(s):\n    if s.sy in inequality_relations:\n        op = s.sy\n        s.next()\n        return op\n    else:\n        s.error(\"Expected one of '<', '<=', '>' '>='\")\ndef p_for_from_step(s):\n    if s.sy == 'IDENT' and s.systring == 'by':\n        s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_for_from_step",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_for_from_step(s):\n    if s.sy == 'IDENT' and s.systring == 'by':\n        s.next()\n        step = p_bit_expr(s)\n        return step\n    else:\n        return None\ninequality_relations = cython.declare(set, set(['<', '<=', '>', '>=']))\ndef p_target(s, terminator):\n    pos = s.position()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_target",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_target(s, terminator):\n    pos = s.position()\n    expr = p_starred_expr(s)\n    if s.sy == ',':\n        s.next()\n        exprs = [expr]\n        while s.sy != terminator:\n            exprs.append(p_starred_expr(s))\n            if s.sy != ',':\n                break",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_for_target",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_for_target(s):\n    return p_target(s, 'in')\ndef p_for_iterator(s, allow_testlist=True, is_async=False):\n    pos = s.position()\n    if allow_testlist:\n        expr = p_testlist(s)\n    else:\n        expr = p_or_test(s)\n    return (ExprNodes.AsyncIteratorNode if is_async else ExprNodes.IteratorNode)(pos, sequence=expr)\ndef p_try_statement(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_for_iterator",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_for_iterator(s, allow_testlist=True, is_async=False):\n    pos = s.position()\n    if allow_testlist:\n        expr = p_testlist(s)\n    else:\n        expr = p_or_test(s)\n    return (ExprNodes.AsyncIteratorNode if is_async else ExprNodes.IteratorNode)(pos, sequence=expr)\ndef p_try_statement(s):\n    # s.sy == 'try'\n    pos = s.position()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_try_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_try_statement(s):\n    # s.sy == 'try'\n    pos = s.position()\n    s.next()\n    body = p_suite(s)\n    except_clauses = []\n    else_clause = None\n    if s.sy in ('except', 'else'):\n        while s.sy == 'except':\n            except_clauses.append(p_except_clause(s))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_except_clause",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_except_clause(s):\n    # s.sy == 'except'\n    pos = s.position()\n    s.next()\n    exc_type = None\n    exc_value = None\n    is_except_as = False\n    if s.sy != ':':\n        exc_type = p_test(s)\n        # normalise into list of single exception tests",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_include_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_include_statement(s, ctx):\n    pos = s.position()\n    s.next() # 'include'\n    unicode_include_file_name = p_string_literal(s, 'u')[2]\n    s.expect_newline(\"Syntax error in include statement\")\n    if s.compile_time_eval:\n        include_file_name = unicode_include_file_name\n        include_file_path = s.context.find_include_file(include_file_name, pos)\n        if include_file_path:\n            s.included_files.append(include_file_name)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_with_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_with_statement(s):\n    s.next()  # 'with'\n    if s.systring == 'template' and not s.in_python_file:\n        node = p_with_template(s)\n    else:\n        node = p_with_items(s)\n    return node\ndef p_with_items(s, is_async=False):\n    pos = s.position()\n    if not s.in_python_file and s.sy == 'IDENT' and s.systring in ('nogil', 'gil'):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_with_items",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_with_items(s, is_async=False):\n    pos = s.position()\n    if not s.in_python_file and s.sy == 'IDENT' and s.systring in ('nogil', 'gil'):\n        if is_async:\n            s.error(\"with gil/nogil cannot be async\")\n        state = s.systring\n        s.next()\n        if s.sy == ',':\n            s.next()\n            body = p_with_items(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_with_template",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_with_template(s):\n    pos = s.position()\n    templates = []\n    s.next()\n    s.expect('[')\n    templates.append(s.systring)\n    s.next()\n    while s.systring == ',':\n        s.next()\n        templates.append(s.systring)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_simple_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_simple_statement(s, first_statement = 0):\n    #print \"p_simple_statement:\", s.sy, s.systring ###\n    if s.sy == 'global':\n        node = p_global_statement(s)\n    elif s.sy == 'nonlocal':\n        node = p_nonlocal_statement(s)\n    elif s.sy == 'print':\n        node = p_print_statement(s)\n    elif s.sy == 'exec':\n        node = p_exec_statement(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_simple_statement_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_simple_statement_list(s, ctx, first_statement = 0):\n    # Parse a series of simple statements on one line\n    # separated by semicolons.\n    stat = p_simple_statement(s, first_statement = first_statement)\n    pos = stat.pos\n    stats = []\n    if not isinstance(stat, Nodes.PassStatNode):\n        stats.append(stat)\n    while s.sy == ';':\n        #print \"p_simple_statement_list: maybe more to follow\" ###",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_compile_time_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_compile_time_expr(s):\n    old = s.compile_time_expr\n    s.compile_time_expr = 1\n    expr = p_testlist(s)\n    s.compile_time_expr = old\n    return expr\ndef p_DEF_statement(s):\n    pos = s.position()\n    denv = s.compile_time_env\n    s.next() # 'DEF'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_DEF_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_DEF_statement(s):\n    pos = s.position()\n    denv = s.compile_time_env\n    s.next() # 'DEF'\n    name = p_ident(s)\n    s.expect('=')\n    expr = p_compile_time_expr(s)\n    if s.compile_time_eval:\n        value = expr.compile_time_value(denv)\n        #print \"p_DEF_statement: %s = %r\" % (name, value) ###",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_IF_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_IF_statement(s, ctx):\n    pos = s.position()\n    saved_eval = s.compile_time_eval\n    current_eval = saved_eval\n    denv = s.compile_time_env\n    result = None\n    while 1:\n        s.next() # 'IF' or 'ELIF'\n        expr = p_compile_time_expr(s)\n        s.compile_time_eval = current_eval and bool(expr.compile_time_value(denv))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_statement(s, ctx, first_statement = 0):\n    cdef_flag = ctx.cdef_flag\n    decorators = None\n    if s.sy == 'ctypedef':\n        if ctx.level not in ('module', 'module_pxd'):\n            s.error(\"ctypedef statement not allowed here\")\n        #if ctx.api:\n        #    error(s.position(), \"'api' not allowed with 'ctypedef'\")\n        return p_ctypedef_statement(s, ctx)\n    elif s.sy == 'DEF':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_statement_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_statement_list(s, ctx, first_statement = 0):\n    # Parse a series of statements separated by newlines.\n    pos = s.position()\n    stats = []\n    while s.sy not in ('DEDENT', 'EOF'):\n        stat = p_statement(s, ctx, first_statement = first_statement)\n        if isinstance(stat, Nodes.PassStatNode):\n            continue\n        stats.append(stat)\n        first_statement = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_suite",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_suite(s, ctx=Ctx()):\n    return p_suite_with_docstring(s, ctx, with_doc_only=False)[1]\ndef p_suite_with_docstring(s, ctx, with_doc_only=False):\n    s.expect(':')\n    doc = None\n    if s.sy == 'NEWLINE':\n        s.next()\n        s.expect_indent()\n        if with_doc_only:\n            doc = p_doc_string(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_suite_with_docstring",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_suite_with_docstring(s, ctx, with_doc_only=False):\n    s.expect(':')\n    doc = None\n    if s.sy == 'NEWLINE':\n        s.next()\n        s.expect_indent()\n        if with_doc_only:\n            doc = p_doc_string(s)\n        body = p_statement_list(s, ctx)\n        s.expect_dedent()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_positional_and_keyword_args",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_positional_and_keyword_args(s, end_sy_set, templates = None):\n    \"\"\"\n    Parses positional and keyword arguments. end_sy_set\n    should contain any s.sy that terminate the argument list.\n    Argument expansion (* and **) are not allowed.\n    Returns: (positional_args, keyword_args)\n    \"\"\"\n    positional_args = []\n    keyword_args = []\n    pos_idx = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_base_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_base_type(s, self_flag = 0, nonempty = 0, templates = None):\n    # If self_flag is true, this is the base type for the\n    # self argument of a C method of an extension type.\n    if s.sy == '(':\n        return p_c_complex_base_type(s, templates = templates)\n    else:\n        return p_c_simple_base_type(s, self_flag, nonempty = nonempty, templates = templates)\ndef p_calling_convention(s):\n    if s.sy == 'IDENT' and s.systring in calling_convention_words:\n        result = s.systring",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_calling_convention",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_calling_convention(s):\n    if s.sy == 'IDENT' and s.systring in calling_convention_words:\n        result = s.systring\n        s.next()\n        return result\n    else:\n        return \"\"\ncalling_convention_words = cython.declare(\n    set, set([\"__stdcall\", \"__cdecl\", \"__fastcall\"]))\ndef p_c_complex_base_type(s, templates = None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_complex_base_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_complex_base_type(s, templates = None):\n    # s.sy == '('\n    pos = s.position()\n    s.next()\n    base_type = p_c_base_type(s, templates=templates)\n    declarator = p_c_declarator(s, empty=True)\n    type_node = Nodes.CComplexBaseTypeNode(\n        pos, base_type=base_type, declarator=declarator)\n    if s.sy == ',':\n        components = [type_node]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_simple_base_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_simple_base_type(s, self_flag, nonempty, templates = None):\n    #print \"p_c_simple_base_type: self_flag =\", self_flag, nonempty\n    is_basic = 0\n    signed = 1\n    longness = 0\n    complex = 0\n    module_path = []\n    pos = s.position()\n    if not s.sy == 'IDENT':\n        error(pos, \"Expected an identifier, found '%s'\" % s.sy)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_buffer_or_template",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_buffer_or_template(s, base_type_node, templates):\n    # s.sy == '['\n    pos = s.position()\n    s.next()\n    # Note that buffer_positional_options_count=1, so the only positional argument is dtype.\n    # For templated types, all parameters are types.\n    positional_args, keyword_args = (\n        p_positional_and_keyword_args(s, (']',), templates)\n    )\n    s.expect(']')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_bracketed_base_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_bracketed_base_type(s, base_type_node, nonempty, empty):\n    # s.sy == '['\n    if empty and not nonempty:\n        # sizeof-like thing.  Only anonymous C arrays allowed (int[SIZE]).\n        return base_type_node\n    elif not empty and nonempty:\n        # declaration of either memoryview slice or buffer.\n        if is_memoryviewslice_access(s):\n            return p_memoryviewslice_access(s, base_type_node)\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "is_memoryviewslice_access",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def is_memoryviewslice_access(s):\n    # s.sy == '['\n    # a memoryview slice declaration is distinguishable from a buffer access\n    # declaration by the first entry in the bracketed list.  The buffer will\n    # not have an unnested colon in the first entry; the memoryview slice will.\n    saved = [(s.sy, s.systring)]\n    s.next()\n    retval = False\n    if s.systring == ':':\n        retval = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_memoryviewslice_access",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_memoryviewslice_access(s, base_type_node):\n    # s.sy == '['\n    pos = s.position()\n    s.next()\n    subscripts, _ = p_subscript_list(s)\n    # make sure each entry in subscripts is a slice\n    for subscript in subscripts:\n        if len(subscript) < 2:\n            s.error(\"An axis specification in memoryview declaration does not have a ':'.\")\n    s.expect(']')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "looking_at_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def looking_at_name(s):\n    return s.sy == 'IDENT' and not s.systring in calling_convention_words\ndef looking_at_expr(s):\n    if s.systring in base_type_start_words:\n        return False\n    elif s.sy == 'IDENT':\n        is_type = False\n        name = s.systring\n        dotted_path = []\n        s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "looking_at_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def looking_at_expr(s):\n    if s.systring in base_type_start_words:\n        return False\n    elif s.sy == 'IDENT':\n        is_type = False\n        name = s.systring\n        dotted_path = []\n        s.next()\n        while s.sy == '.':\n            s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "looking_at_base_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def looking_at_base_type(s):\n    #print \"looking_at_base_type?\", s.sy, s.systring, s.position()\n    return s.sy == 'IDENT' and s.systring in base_type_start_words\ndef looking_at_dotted_name(s):\n    if s.sy == 'IDENT':\n        name = s.systring\n        s.next()\n        result = s.sy == '.'\n        s.put_back('IDENT', name)\n        return result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "looking_at_dotted_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def looking_at_dotted_name(s):\n    if s.sy == 'IDENT':\n        name = s.systring\n        s.next()\n        result = s.sy == '.'\n        s.put_back('IDENT', name)\n        return result\n    else:\n        return 0\ndef looking_at_call(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "looking_at_call",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def looking_at_call(s):\n    \"See if we're looking at a.b.c(\"\n    # Don't mess up the original position, so save and restore it.\n    # Unfortunately there's no good way to handle this, as a subsequent call\n    # to next() will not advance the position until it reads a new token.\n    position = s.start_line, s.start_col\n    result = looking_at_expr(s) == u'('\n    if not result:\n        s.start_line, s.start_col = position\n    return result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_sign_and_longness",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_sign_and_longness(s):\n    signed = 1\n    longness = 0\n    while s.sy == 'IDENT' and s.systring in sign_and_longness_words:\n        if s.systring == 'unsigned':\n            signed = 0\n        elif s.systring == 'signed':\n            signed = 2\n        elif s.systring == 'short':\n            longness = -1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_opt_cname",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_opt_cname(s):\n    literal = p_opt_string_literal(s, 'u')\n    if literal is not None:\n        cname = EncodedString(literal)\n        cname.encoding = s.source_encoding\n    else:\n        cname = None\n    return cname\ndef p_c_declarator(s, ctx = Ctx(), empty = 0, is_type = 0, cmethod_flag = 0,\n                   assignable = 0, nonempty = 0,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_declarator",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_declarator(s, ctx = Ctx(), empty = 0, is_type = 0, cmethod_flag = 0,\n                   assignable = 0, nonempty = 0,\n                   calling_convention_allowed = 0):\n    # If empty is true, the declarator must be empty. If nonempty is true,\n    # the declarator must be nonempty. Otherwise we don't care.\n    # If cmethod_flag is true, then if this declarator declares\n    # a function, it's a C method of an extension type.\n    pos = s.position()\n    if s.sy == '(':\n        s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_array_declarator",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_array_declarator(s, base):\n    pos = s.position()\n    s.next() # '['\n    if s.sy != ']':\n        dim = p_testlist(s)\n    else:\n        dim = None\n    s.expect(']')\n    return Nodes.CArrayDeclaratorNode(pos, base = base, dimension = dim)\ndef p_c_func_declarator(s, pos, ctx, base, cmethod_flag):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_func_declarator",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_func_declarator(s, pos, ctx, base, cmethod_flag):\n    #  Opening paren has already been skipped\n    args = p_c_arg_list(s, ctx, cmethod_flag = cmethod_flag,\n                        nonempty_declarators = 0)\n    ellipsis = p_optional_ellipsis(s)\n    s.expect(')')\n    nogil = p_nogil(s)\n    exc_val, exc_check = p_exception_value_clause(s)\n    # TODO - warning to enforce preferred exception specification order\n    nogil = nogil or p_nogil(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_simple_declarator",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_simple_declarator(s, ctx, empty, is_type, cmethod_flag,\n                          assignable, nonempty):\n    pos = s.position()\n    calling_convention = p_calling_convention(s)\n    if s.sy == '*':\n        s.next()\n        if s.systring == 'const':\n            const_pos = s.position()\n            s.next()\n            const_base = p_c_declarator(s, ctx, empty = empty,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_nogil",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_nogil(s):\n    if s.sy == 'IDENT' and s.systring == 'nogil':\n        s.next()\n        return 1\n    else:\n        return 0\ndef p_with_gil(s):\n    if s.sy == 'with':\n        s.next()\n        s.expect_keyword('gil')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_with_gil",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_with_gil(s):\n    if s.sy == 'with':\n        s.next()\n        s.expect_keyword('gil')\n        return 1\n    else:\n        return 0\ndef p_exception_value_clause(s):\n    exc_val = None\n    exc_check = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_exception_value_clause",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_exception_value_clause(s):\n    exc_val = None\n    exc_check = 0\n    if s.sy == 'IDENT' and s.systring == 'noexcept':\n        s.next()\n        exc_check = False  # No-op in Cython 0.29.x\n    elif s.sy == 'except':\n        s.next()\n        if s.sy == '*':\n            exc_check = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_arg_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_arg_list(s, ctx = Ctx(), in_pyfunc = 0, cmethod_flag = 0,\n                 nonempty_declarators = 0, kw_only = 0, annotated = 1):\n    #  Comma-separated list of C argument declarations, possibly empty.\n    #  May have a trailing comma.\n    args = []\n    is_self_arg = cmethod_flag\n    while s.sy not in c_arg_list_terminators:\n        args.append(p_c_arg_decl(s, ctx, in_pyfunc, is_self_arg,\n            nonempty = nonempty_declarators, kw_only = kw_only,\n            annotated = annotated))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_optional_ellipsis",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_optional_ellipsis(s):\n    if s.sy == '.':\n        expect_ellipsis(s)\n        return 1\n    else:\n        return 0\ndef p_c_arg_decl(s, ctx, in_pyfunc, cmethod_flag = 0, nonempty = 0,\n                 kw_only = 0, annotated = 1):\n    pos = s.position()\n    not_none = or_none = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_arg_decl",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_arg_decl(s, ctx, in_pyfunc, cmethod_flag = 0, nonempty = 0,\n                 kw_only = 0, annotated = 1):\n    pos = s.position()\n    not_none = or_none = 0\n    default = None\n    annotation = None\n    if s.in_python_file:\n        # empty type declaration\n        base_type = Nodes.CSimpleBaseTypeNode(pos,\n            name = None, module_path = [],",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_api",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_api(s):\n    if s.sy == 'IDENT' and s.systring == 'api':\n        s.next()\n        return 1\n    else:\n        return 0\ndef p_cdef_statement(s, ctx):\n    pos = s.position()\n    ctx.visibility = p_visibility(s, ctx.visibility)\n    ctx.api = ctx.api or p_api(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cdef_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cdef_statement(s, ctx):\n    pos = s.position()\n    ctx.visibility = p_visibility(s, ctx.visibility)\n    ctx.api = ctx.api or p_api(s)\n    if ctx.api:\n        if ctx.visibility not in ('private', 'public'):\n            error(pos, \"Cannot combine 'api' with '%s'\" % ctx.visibility)\n    if (ctx.visibility == 'extern') and s.sy == 'from':\n        return p_cdef_extern_block(s, pos, ctx)\n    elif s.sy == 'import':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cdef_block",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cdef_block(s, ctx):\n    return p_suite(s, ctx(cdef_flag = 1))\ndef p_cdef_extern_block(s, pos, ctx):\n    if ctx.overridable:\n        error(pos, \"cdef extern blocks cannot be declared cpdef\")\n    include_file = None\n    s.expect('from')\n    if s.sy == '*':\n        s.next()\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cdef_extern_block",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cdef_extern_block(s, pos, ctx):\n    if ctx.overridable:\n        error(pos, \"cdef extern blocks cannot be declared cpdef\")\n    include_file = None\n    s.expect('from')\n    if s.sy == '*':\n        s.next()\n    else:\n        include_file = p_string_literal(s, 'u')[2]\n    ctx = ctx(cdef_flag = 1, visibility = 'extern')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_enum_definition",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_enum_definition(s, pos, ctx):\n    # s.sy == ident 'enum'\n    s.next()\n    if s.sy == 'IDENT':\n        name = s.systring\n        s.next()\n        cname = p_opt_cname(s)\n        if cname is None and ctx.namespace is not None:\n            cname = ctx.namespace + \"::\" + name\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_enum_line",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_enum_line(s, ctx, items):\n    if s.sy != 'pass':\n        p_c_enum_item(s, ctx, items)\n        while s.sy == ',':\n            s.next()\n            if s.sy in ('NEWLINE', 'EOF'):\n                break\n            p_c_enum_item(s, ctx, items)\n    else:\n        s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_enum_item",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_enum_item(s, ctx, items):\n    pos = s.position()\n    name = p_ident(s)\n    cname = p_opt_cname(s)\n    if cname is None and ctx.namespace is not None:\n        cname = ctx.namespace + \"::\" + name\n    value = None\n    if s.sy == '=':\n        s.next()\n        value = p_test(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_struct_or_union_definition",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_struct_or_union_definition(s, pos, ctx):\n    packed = False\n    if s.systring == 'packed':\n        packed = True\n        s.next()\n        if s.sy != 'IDENT' or s.systring != 'struct':\n            s.expected('struct')\n    # s.sy == ident 'struct' or 'union'\n    kind = s.systring\n    s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_fused_definition",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_fused_definition(s, pos, ctx):\n    \"\"\"\n    c(type)def fused my_fused_type:\n        ...\n    \"\"\"\n    # s.systring == 'fused'\n    if ctx.level not in ('module', 'module_pxd'):\n        error(pos, \"Fused type definition not allowed here\")\n    s.next()\n    name = p_ident(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_struct_enum",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_struct_enum(s, pos, ctx):\n    if s.systring == 'enum':\n        return p_c_enum_definition(s, pos, ctx)\n    else:\n        return p_c_struct_or_union_definition(s, pos, ctx)\ndef p_visibility(s, prev_visibility):\n    pos = s.position()\n    visibility = prev_visibility\n    if s.sy == 'IDENT' and s.systring in ('extern', 'public', 'readonly'):\n        visibility = s.systring",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_visibility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_visibility(s, prev_visibility):\n    pos = s.position()\n    visibility = prev_visibility\n    if s.sy == 'IDENT' and s.systring in ('extern', 'public', 'readonly'):\n        visibility = s.systring\n        if prev_visibility != 'private' and visibility != prev_visibility:\n            s.error(\"Conflicting visibility options '%s' and '%s'\"\n                % (prev_visibility, visibility), fatal=False)\n        s.next()\n    return visibility",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_modifiers",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_modifiers(s):\n    if s.sy == 'IDENT' and s.systring in ('inline',):\n        modifier = s.systring\n        s.next()\n        return [modifier] + p_c_modifiers(s)\n    return []\ndef p_c_func_or_var_declaration(s, pos, ctx):\n    cmethod_flag = ctx.level in ('c_class', 'c_class_pxd')\n    modifiers = p_c_modifiers(s)\n    base_type = p_c_base_type(s, nonempty = 1, templates = ctx.templates)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_func_or_var_declaration",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_func_or_var_declaration(s, pos, ctx):\n    cmethod_flag = ctx.level in ('c_class', 'c_class_pxd')\n    modifiers = p_c_modifiers(s)\n    base_type = p_c_base_type(s, nonempty = 1, templates = ctx.templates)\n    declarator = p_c_declarator(s, ctx(modifiers=modifiers), cmethod_flag = cmethod_flag,\n                                assignable = 1, nonempty = 1)\n    declarator.overridable = ctx.overridable\n    if s.sy == 'IDENT' and s.systring == 'const' and ctx.level == 'cpp_class':\n        s.next()\n        is_const_method = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_ctypedef_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_ctypedef_statement(s, ctx):\n    # s.sy == 'ctypedef'\n    pos = s.position()\n    s.next()\n    visibility = p_visibility(s, ctx.visibility)\n    api = p_api(s)\n    ctx = ctx(typedef_flag = 1, visibility = visibility)\n    if api:\n        ctx.api = 1\n    if s.sy == 'class':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_decorators",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_decorators(s):\n    decorators = []\n    while s.sy == '@':\n        pos = s.position()\n        s.next()\n        decstring = p_dotted_name(s, as_allowed=0)[2]\n        names = decstring.split('.')\n        decorator = ExprNodes.NameNode(pos, name=s.context.intern_ustring(names[0]))\n        for name in names[1:]:\n            decorator = ExprNodes.AttributeNode(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_def_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_def_statement(s, decorators=None, is_async_def=False):\n    # s.sy == 'def'\n    pos = s.position()\n    # PEP 492 switches the async/await keywords on in \"async def\" functions\n    if is_async_def:\n        s.enter_async()\n    s.next()\n    name = _reject_cdef_modifier_in_py(s, p_ident(s))\n    s.expect(\n        '(',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_varargslist",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_varargslist(s, terminator=')', annotated=1):\n    args = p_c_arg_list(s, in_pyfunc = 1, nonempty_declarators = 1,\n                        annotated = annotated)\n    star_arg = None\n    starstar_arg = None\n    if s.sy == '*':\n        s.next()\n        if s.sy == 'IDENT':\n            star_arg = p_py_arg_decl(s, annotated=annotated)\n        if s.sy == ',':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_py_arg_decl",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_py_arg_decl(s, annotated = 1):\n    pos = s.position()\n    name = p_ident(s)\n    annotation = None\n    if annotated and s.sy == ':':\n        s.next()\n        annotation = p_test(s)\n    return Nodes.PyArgDeclNode(pos, name = name, annotation = annotation)\ndef p_class_statement(s, decorators):\n    # s.sy == 'class'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_class_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_class_statement(s, decorators):\n    # s.sy == 'class'\n    pos = s.position()\n    s.next()\n    class_name = EncodedString(p_ident(s))\n    class_name.encoding = s.source_encoding  # FIXME: why is this needed?\n    arg_tuple = None\n    keyword_dict = None\n    if s.sy == '(':\n        positional_args, keyword_args = p_call_parse_args(s, allow_genexp=False)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_class_definition",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_class_definition(s, pos,  ctx):\n    # s.sy == 'class'\n    s.next()\n    module_path = []\n    class_name = p_ident(s)\n    while s.sy == '.':\n        s.next()\n        module_path.append(class_name)\n        class_name = p_ident(s)\n    if module_path and ctx.visibility != 'extern':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_class_options",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_class_options(s):\n    objstruct_name = None\n    typeobj_name = None\n    check_size = None\n    s.expect('[')\n    while 1:\n        if s.sy != 'IDENT':\n            break\n        if s.systring == 'object':\n            s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_property_decl",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_property_decl(s):\n    pos = s.position()\n    s.next()  # 'property'\n    name = p_ident(s)\n    doc, body = p_suite_with_docstring(\n        s, Ctx(level='property'), with_doc_only=True)\n    return Nodes.PropertyNode(pos, name=name, doc=doc, body=body)\ndef p_ignorable_statement(s):\n    \"\"\"\n    Parses any kind of ignorable statement that is allowed in .pxd files.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_ignorable_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_ignorable_statement(s):\n    \"\"\"\n    Parses any kind of ignorable statement that is allowed in .pxd files.\n    \"\"\"\n    if s.sy == 'BEGIN_STRING':\n        pos = s.position()\n        string_node = p_atom(s)\n        s.expect_newline(\"Syntax error in string\", ignore_semicolon=True)\n        return Nodes.ExprStatNode(pos, expr=string_node)\n    return None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_doc_string",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_doc_string(s):\n    if s.sy == 'BEGIN_STRING':\n        pos = s.position()\n        kind, bytes_result, unicode_result = p_cat_string_literal(s)\n        s.expect_newline(\"Syntax error in doc string\", ignore_semicolon=True)\n        if kind in ('u', ''):\n            return unicode_result\n        warning(pos, \"Python 3 requires docstrings to be unicode strings\")\n        return bytes_result\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_code(s, level=None, ctx=Ctx):\n    body = p_statement_list(s, ctx(level = level), first_statement = 1)\n    if s.sy != 'EOF':\n        s.error(\"Syntax error in statement [%s,%s]\" % (\n            repr(s.sy), repr(s.systring)))\n    return body\n_match_compiler_directive_comment = cython.declare(object, re.compile(\n    r\"^#\\s*cython\\s*:\\s*((\\w|[.])+\\s*=.*)$\").match)\ndef p_compiler_directive_comments(s):\n    result = {}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_compiler_directive_comments",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_compiler_directive_comments(s):\n    result = {}\n    while s.sy == 'commentline':\n        pos = s.position()\n        m = _match_compiler_directive_comment(s.systring)\n        if m:\n            directives_string = m.group(1).strip()\n            try:\n                new_directives = Options.parse_directive_list(directives_string, ignore_unknown=True)\n            except ValueError as e:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_module",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_module(s, pxd, full_module_name, ctx=Ctx):\n    pos = s.position()\n    directive_comments = p_compiler_directive_comments(s)\n    s.parse_comments = False\n    if s.context.language_level is None:\n        s.context.set_language_level(2)\n        if pos[0].filename:\n            import warnings\n            warnings.warn(\n                \"Cython directive 'language_level' not set, using 2 for now (Py2). \"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_template_definition",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_template_definition(s):\n    name = p_ident(s)\n    if s.sy == '=':\n        s.expect('=')\n        s.expect('*')\n        required = False\n    else:\n        required = True\n    return name, required\ndef p_cpp_class_definition(s, pos,  ctx):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cpp_class_definition",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cpp_class_definition(s, pos,  ctx):\n    # s.sy == 'cppclass'\n    s.next()\n    module_path = []\n    class_name = p_ident(s)\n    cname = p_opt_cname(s)\n    if cname is None and ctx.namespace is not None:\n        cname = ctx.namespace + \"::\" + class_name\n    if s.sy == '.':\n        error(pos, \"Qualified class name not allowed C++ class\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cpp_class_attribute",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cpp_class_attribute(s, ctx):\n    decorators = None\n    if s.sy == '@':\n        decorators = p_decorators(s)\n    if s.systring == 'cppclass':\n        return p_cpp_class_definition(s, s.position(), ctx)\n    elif s.systring == 'ctypedef':\n        return p_ctypedef_statement(s, ctx)\n    elif s.sy == 'IDENT' and s.systring in struct_enum_union:\n        if s.systring != 'enum':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "print_parse_tree",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def print_parse_tree(f, node, level, key = None):\n    ind = \"  \" * level\n    if node:\n        f.write(ind)\n        if key:\n            f.write(\"%s: \" % key)\n        t = type(node)\n        if t is tuple:\n            f.write(\"(%s @ %s\\n\" % (node[0], node[1]))\n            for i in range(2, len(node)):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "_IS_PY3",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "_IS_PY3 = sys.version_info[0] >= 3\n_IS_2BYTE_UNICODE = sys.maxunicode == 0xffff\n_CDEF_MODIFIERS = ('inline', 'nogil', 'api')\nclass Ctx(object):\n    #  Parsing context\n    level = 'other'\n    visibility = 'private'\n    cdef_flag = 0\n    typedef_flag = 0\n    api = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "_IS_2BYTE_UNICODE",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "_IS_2BYTE_UNICODE = sys.maxunicode == 0xffff\n_CDEF_MODIFIERS = ('inline', 'nogil', 'api')\nclass Ctx(object):\n    #  Parsing context\n    level = 'other'\n    visibility = 'private'\n    cdef_flag = 0\n    typedef_flag = 0\n    api = 0\n    overridable = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "_CDEF_MODIFIERS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "_CDEF_MODIFIERS = ('inline', 'nogil', 'api')\nclass Ctx(object):\n    #  Parsing context\n    level = 'other'\n    visibility = 'private'\n    cdef_flag = 0\n    typedef_flag = 0\n    api = 0\n    overridable = 0\n    nogil = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "comparison_ops",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "comparison_ops = cython.declare(set, set([\n    '<', '>', '==', '>=', '<=', '<>', '!=',\n    'in', 'is', 'not'\n]))\n#expr: xor_expr ('|' xor_expr)*\ndef p_bit_expr(s):\n    return p_binop_expr(s, ('|',), p_xor_expr)\n#xor_expr: and_expr ('^' and_expr)*\ndef p_xor_expr(s):\n    return p_binop_expr(s, ('^',), p_and_expr)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "expr_terminators",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "expr_terminators = cython.declare(set, set([\n    ')', ']', '}', ':', '=', 'NEWLINE']))\n#-------------------------------------------------------\n#\n#   Statements\n#\n#-------------------------------------------------------\ndef p_global_statement(s):\n    # assume s.sy == 'global'\n    pos = s.position()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "imported_name_kinds",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "imported_name_kinds = cython.declare(set, set(['class', 'struct', 'union']))\ndef p_imported_name(s, is_cimport):\n    pos = s.position()\n    kind = None\n    if is_cimport and s.systring in imported_name_kinds:\n        kind = s.systring\n        s.next()\n    name = p_ident(s)\n    as_name = p_as_name(s)\n    return (pos, name, as_name, kind)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "statement_terminators",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "statement_terminators = cython.declare(set, set([';', 'NEWLINE', 'EOF']))\ndef p_if_statement(s):\n    # s.sy == 'if'\n    pos = s.position()\n    s.next()\n    if_clauses = [p_if_clause(s)]\n    while s.sy == 'elif':\n        s.next()\n        if_clauses.append(p_if_clause(s))\n    else_clause = p_else_clause(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "inequality_relations",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "inequality_relations = cython.declare(set, set(['<', '<=', '>', '>=']))\ndef p_target(s, terminator):\n    pos = s.position()\n    expr = p_starred_expr(s)\n    if s.sy == ',':\n        s.next()\n        exprs = [expr]\n        while s.sy != terminator:\n            exprs.append(p_starred_expr(s))\n            if s.sy != ',':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "calling_convention_words",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "calling_convention_words = cython.declare(\n    set, set([\"__stdcall\", \"__cdecl\", \"__fastcall\"]))\ndef p_c_complex_base_type(s, templates = None):\n    # s.sy == '('\n    pos = s.position()\n    s.next()\n    base_type = p_c_base_type(s, templates=templates)\n    declarator = p_c_declarator(s, empty=True)\n    type_node = Nodes.CComplexBaseTypeNode(\n        pos, base_type=base_type, declarator=declarator)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "basic_c_type_names",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "basic_c_type_names = cython.declare(\n    set, set([\"void\", \"char\", \"int\", \"float\", \"double\", \"bint\"]))\nspecial_basic_c_types = cython.declare(dict, {\n    # name : (signed, longness)\n    \"Py_UNICODE\" : (0, 0),\n    \"Py_UCS4\"    : (0, 0),\n    \"Py_hash_t\"  : (2, 0),\n    \"Py_ssize_t\" : (2, 0),\n    \"ssize_t\"    : (2, 0),\n    \"size_t\"     : (0, 0),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "special_basic_c_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "special_basic_c_types = cython.declare(dict, {\n    # name : (signed, longness)\n    \"Py_UNICODE\" : (0, 0),\n    \"Py_UCS4\"    : (0, 0),\n    \"Py_hash_t\"  : (2, 0),\n    \"Py_ssize_t\" : (2, 0),\n    \"ssize_t\"    : (2, 0),\n    \"size_t\"     : (0, 0),\n    \"ptrdiff_t\"  : (2, 0),\n    \"Py_tss_t\"   : (1, 0),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "sign_and_longness_words",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "sign_and_longness_words = cython.declare(\n    set, set([\"short\", \"long\", \"signed\", \"unsigned\"]))\nbase_type_start_words = cython.declare(\n    set,\n    basic_c_type_names\n    | sign_and_longness_words\n    | set(special_basic_c_types))\nstruct_enum_union = cython.declare(\n    set, set([\"struct\", \"union\", \"enum\", \"packed\"]))\ndef p_sign_and_longness(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "base_type_start_words",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "base_type_start_words = cython.declare(\n    set,\n    basic_c_type_names\n    | sign_and_longness_words\n    | set(special_basic_c_types))\nstruct_enum_union = cython.declare(\n    set, set([\"struct\", \"union\", \"enum\", \"packed\"]))\ndef p_sign_and_longness(s):\n    signed = 1\n    longness = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "struct_enum_union",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "struct_enum_union = cython.declare(\n    set, set([\"struct\", \"union\", \"enum\", \"packed\"]))\ndef p_sign_and_longness(s):\n    signed = 1\n    longness = 0\n    while s.sy == 'IDENT' and s.systring in sign_and_longness_words:\n        if s.systring == 'unsigned':\n            signed = 0\n        elif s.systring == 'signed':\n            signed = 2",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "supported_overloaded_operators",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "supported_overloaded_operators = cython.declare(set, set([\n    '+', '-', '*', '/', '%',\n    '++', '--', '~', '|', '&', '^', '<<', '>>', ',',\n    '==', '!=', '>=', '>', '<=', '<',\n    '[]', '()', '!', '=',\n    'bool',\n]))\ndef p_c_simple_declarator(s, ctx, empty, is_type, cmethod_flag,\n                          assignable, nonempty):\n    pos = s.position()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "c_arg_list_terminators",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "c_arg_list_terminators = cython.declare(set, set(['*', '**', '.', ')', ':']))\ndef p_c_arg_list(s, ctx = Ctx(), in_pyfunc = 0, cmethod_flag = 0,\n                 nonempty_declarators = 0, kw_only = 0, annotated = 1):\n    #  Comma-separated list of C argument declarations, possibly empty.\n    #  May have a trailing comma.\n    args = []\n    is_self_arg = cmethod_flag\n    while s.sy not in c_arg_list_terminators:\n        args.append(p_c_arg_decl(s, ctx, in_pyfunc, is_self_arg,\n            nonempty = nonempty_declarators, kw_only = kw_only,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "_match_compiler_directive_comment",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "peekOfCode": "_match_compiler_directive_comment = cython.declare(object, re.compile(\n    r\"^#\\s*cython\\s*:\\s*((\\w|[.])+\\s*=.*)$\").match)\ndef p_compiler_directive_comments(s):\n    result = {}\n    while s.sy == 'commentline':\n        pos = s.position()\n        m = _match_compiler_directive_comment(s.systring)\n        if m:\n            directives_string = m.group(1).strip()\n            try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "dumptree",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def dumptree(t):\n    # For quick debugging in pipelines\n    print(t.dump())\n    return t\ndef abort_on_errors(node):\n    # Stop the pipeline if there are any errors.\n    if Errors.num_errors != 0:\n        raise AbortError(\"pipeline break\")\n    return node\ndef parse_stage_factory(context):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "abort_on_errors",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def abort_on_errors(node):\n    # Stop the pipeline if there are any errors.\n    if Errors.num_errors != 0:\n        raise AbortError(\"pipeline break\")\n    return node\ndef parse_stage_factory(context):\n    def parse(compsrc):\n        source_desc = compsrc.source_desc\n        full_module_name = compsrc.full_module_name\n        initial_pos = (source_desc, 1, 0)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "parse_stage_factory",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def parse_stage_factory(context):\n    def parse(compsrc):\n        source_desc = compsrc.source_desc\n        full_module_name = compsrc.full_module_name\n        initial_pos = (source_desc, 1, 0)\n        saved_cimport_from_pyx, Options.cimport_from_pyx = Options.cimport_from_pyx, False\n        scope = context.find_module(full_module_name, pos = initial_pos, need_pxd = 0)\n        Options.cimport_from_pyx = saved_cimport_from_pyx\n        tree = context.parse(source_desc, scope, pxd = 0, full_module_name = full_module_name)\n        tree.compilation_source = compsrc",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "parse_pxd_stage_factory",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def parse_pxd_stage_factory(context, scope, module_name):\n    def parse(source_desc):\n        tree = context.parse(source_desc, scope, pxd=True,\n                             full_module_name=module_name)\n        tree.scope = scope\n        tree.is_pxd = True\n        return tree\n    return parse\ndef generate_pyx_code_stage_factory(options, result):\n    def generate_pyx_code_stage(module_node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "generate_pyx_code_stage_factory",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def generate_pyx_code_stage_factory(options, result):\n    def generate_pyx_code_stage(module_node):\n        module_node.process_implementation(options, result)\n        result.compilation_source = module_node.compilation_source\n        return result\n    return generate_pyx_code_stage\ndef inject_pxd_code_stage_factory(context):\n    def inject_pxd_code_stage(module_node):\n        for name, (statlistnode, scope) in context.pxds.items():\n            module_node.merge_in(statlistnode, scope)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "inject_pxd_code_stage_factory",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def inject_pxd_code_stage_factory(context):\n    def inject_pxd_code_stage(module_node):\n        for name, (statlistnode, scope) in context.pxds.items():\n            module_node.merge_in(statlistnode, scope)\n        return module_node\n    return inject_pxd_code_stage\ndef use_utility_code_definitions(scope, target, seen=None):\n    if seen is None:\n        seen = set()\n    for entry in scope.entries.values():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "use_utility_code_definitions",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def use_utility_code_definitions(scope, target, seen=None):\n    if seen is None:\n        seen = set()\n    for entry in scope.entries.values():\n        if entry in seen:\n            continue\n        seen.add(entry)\n        if entry.used and entry.utility_code_definition:\n            target.use_utility_code(entry.utility_code_definition)\n            for required_utility in entry.utility_code_definition.requires:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "sort_utility_codes",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def sort_utility_codes(utilcodes):\n    ranks = {}\n    def get_rank(utilcode):\n        if utilcode not in ranks:\n            ranks[utilcode] = 0  # prevent infinite recursion on circular dependencies\n            original_order = len(ranks)\n            ranks[utilcode] = 1 + min([get_rank(dep) for dep in utilcode.requires or ()] or [-1]) + original_order * 1e-8\n        return ranks[utilcode]\n    for utilcode in utilcodes:\n        get_rank(utilcode)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "normalize_deps",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def normalize_deps(utilcodes):\n    deps = {}\n    for utilcode in utilcodes:\n        deps[utilcode] = utilcode\n    def unify_dep(dep):\n        if dep in deps:\n            return deps[dep]\n        else:\n            deps[dep] = dep\n            return dep",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "inject_utility_code_stage_factory",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def inject_utility_code_stage_factory(context):\n    def inject_utility_code_stage(module_node):\n        module_node.prepare_utility_code()\n        use_utility_code_definitions(context.cython_scope, module_node.scope)\n        module_node.scope.utility_code_list = sort_utility_codes(module_node.scope.utility_code_list)\n        normalize_deps(module_node.scope.utility_code_list)\n        added = []\n        # Note: the list might be extended inside the loop (if some utility code\n        # pulls in other utility code, explicitly or implicitly)\n        for utilcode in module_node.scope.utility_code_list:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "create_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def create_pipeline(context, mode, exclude_classes=()):\n    assert mode in ('pyx', 'py', 'pxd')\n    from .Visitor import PrintTree\n    from .ParseTreeTransforms import WithTransform, NormalizeTree, PostParse, PxdPostParse\n    from .ParseTreeTransforms import ForwardDeclareTypes, InjectGilHandling, AnalyseDeclarationsTransform\n    from .ParseTreeTransforms import AnalyseExpressionsTransform, FindInvalidUseOfFusedTypes\n    from .ParseTreeTransforms import CreateClosureClasses, MarkClosureVisitor, DecoratorTransform\n    from .ParseTreeTransforms import TrackNumpyAttributes, InterpretCompilerDirectives, TransformBuiltinMethods\n    from .ParseTreeTransforms import ExpandInplaceOperators, ParallelRangeTransform\n    from .ParseTreeTransforms import CalculateQualifiedNamesTransform",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "create_pyx_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def create_pyx_pipeline(context, options, result, py=False, exclude_classes=()):\n    if py:\n        mode = 'py'\n    else:\n        mode = 'pyx'\n    test_support = []\n    if options.evaluate_tree_assertions:\n        from ..TestUtils import TreeAssertVisitor\n        test_support.append(TreeAssertVisitor())\n    if options.gdb_debug:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "create_pxd_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def create_pxd_pipeline(context, scope, module_name):\n    from .CodeGeneration import ExtractPxdCode\n    # The pxd pipeline ends up with a CCodeWriter containing the\n    # code of the pxd, as well as a pxd scope.\n    return [\n        parse_pxd_stage_factory(context, scope, module_name)\n        ] + create_pipeline(context, 'pxd') + [\n        ExtractPxdCode()\n        ]\ndef create_py_pipeline(context, options, result):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "create_py_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def create_py_pipeline(context, options, result):\n    return create_pyx_pipeline(context, options, result, py=True)\ndef create_pyx_as_pxd_pipeline(context, result):\n    from .ParseTreeTransforms import AlignFunctionDefinitions, \\\n        MarkClosureVisitor, WithTransform, AnalyseDeclarationsTransform\n    from .Optimize import ConstantFolding, FlattenInListTransform\n    from .Nodes import StatListNode\n    pipeline = []\n    pyx_pipeline = create_pyx_pipeline(context, context.options, result,\n                                       exclude_classes=[",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "create_pyx_as_pxd_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def create_pyx_as_pxd_pipeline(context, result):\n    from .ParseTreeTransforms import AlignFunctionDefinitions, \\\n        MarkClosureVisitor, WithTransform, AnalyseDeclarationsTransform\n    from .Optimize import ConstantFolding, FlattenInListTransform\n    from .Nodes import StatListNode\n    pipeline = []\n    pyx_pipeline = create_pyx_pipeline(context, context.options, result,\n                                       exclude_classes=[\n                                           AlignFunctionDefinitions,\n                                           MarkClosureVisitor,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "insert_into_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def insert_into_pipeline(pipeline, transform, before=None, after=None):\n    \"\"\"\n    Insert a new transform into the pipeline after or before an instance of\n    the given class. e.g.\n        pipeline = insert_into_pipeline(pipeline, transform,\n                                        after=AnalyseDeclarationsTransform)\n    \"\"\"\n    assert before or after\n    cls = before or after\n    for i, t in enumerate(pipeline):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "run_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def run_pipeline(pipeline, source, printtree=True):\n    from .Visitor import PrintTree\n    exec_ns = globals().copy() if DebugFlags.debug_verbose_pipeline else None\n    def run(phase, data):\n        return phase(data)\n    error = None\n    data = source\n    try:\n        try:\n            for phase in pipeline:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "_pipeline_entry_points",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "_pipeline_entry_points = {}\ndef run_pipeline(pipeline, source, printtree=True):\n    from .Visitor import PrintTree\n    exec_ns = globals().copy() if DebugFlags.debug_verbose_pipeline else None\n    def run(phase, data):\n        return phase(data)\n    error = None\n    data = source\n    try:\n        try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "BaseType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class BaseType(object):\n    #\n    #  Base class for all Cython types including pseudo-types.\n    # List of attribute names of any subtypes\n    subtypes = []\n    _empty_declaration = None\n    _specialization_name = None\n    default_format_spec = None\n    def can_coerce_to_pyobject(self, env):\n        return False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "PyrexType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class PyrexType(BaseType):\n    #\n    #  Base class for all Cython types\n    #\n    #  is_pyobject           boolean     Is a Python object type\n    #  is_extension_type     boolean     Is a Python extension type\n    #  is_final_type         boolean     Is a final extension type\n    #  is_numeric            boolean     Is a C numeric type\n    #  is_int                boolean     Is a C integer type\n    #  is_float              boolean     Is a C floating point type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CTypedefType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CTypedefType(BaseType):\n    #\n    #  Pseudo-type defined with a ctypedef statement in a\n    #  'cdef extern from' block.\n    #  Delegates most attribute lookups to the base type.\n    #  (Anything not defined here or in the BaseType is delegated.)\n    #\n    #  qualified_name      string\n    #  typedef_name        string\n    #  typedef_cname       string",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "MemoryViewSliceType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class MemoryViewSliceType(PyrexType):\n    is_memoryviewslice = 1\n    has_attributes = 1\n    scope = None\n    # These are special cased in Defnode\n    from_py_function = None\n    to_py_function = None\n    exception_value = None\n    exception_check = True\n    subtypes = ['dtype']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "BufferType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class BufferType(BaseType):\n    #\n    #  Delegates most attribute lookups to the base type.\n    #  (Anything not defined here or in the BaseType is delegated.)\n    #\n    # dtype            PyrexType\n    # ndim             int\n    # mode             str\n    # negative_indices bool\n    # cast             bool",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "PyObjectType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class PyObjectType(PyrexType):\n    #\n    #  Base class for all Python object types (reference-counted).\n    #\n    #  buffer_defaults  dict or None     Default options for bu\n    name = \"object\"\n    is_pyobject = 1\n    default_value = \"0\"\n    declaration_value = \"0\"\n    buffer_defaults = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "BuiltinObjectType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class BuiltinObjectType(PyObjectType):\n    #  objstruct_cname  string           Name of PyObject struct\n    is_builtin_type = 1\n    has_attributes = 1\n    base_type = None\n    module_name = '__builtin__'\n    require_exact = 1\n    # fields that let it look like an extension type\n    vtabslot_cname = None\n    vtabstruct_cname = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "PyExtensionType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class PyExtensionType(PyObjectType):\n    #\n    #  A Python extension type.\n    #\n    #  name             string\n    #  scope            CClassScope      Attribute namespace\n    #  visibility       string\n    #  typedef_flag     boolean\n    #  base_type        PyExtensionType or None\n    #  module_name      string or None   Qualified name of defining module",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CType(PyrexType):\n    #\n    #  Base class for all C types (non-reference-counted).\n    #\n    #  to_py_function     string     C function for converting to Python object\n    #  from_py_function   string     C function for constructing from Python object\n    #\n    to_py_function = None\n    from_py_function = None\n    exception_value = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "PythranExpr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class PythranExpr(CType):\n    # Pythran object of a given type\n    to_py_function = \"__Pyx_pythran_to_python\"\n    is_pythran_expr = True\n    writable = True\n    has_attributes = 1\n    def __init__(self, pythran_type, org_buffer=None):\n        self.org_buffer = org_buffer\n        self.pythran_type = pythran_type\n        self.name = self.pythran_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CConstType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CConstType(BaseType):\n    is_const = 1\n    def __init__(self, const_base_type):\n        self.const_base_type = const_base_type\n        if const_base_type.has_attributes and const_base_type.scope is not None:\n            from . import Symtab\n            self.scope = Symtab.CConstScope(const_base_type.scope)\n    def __repr__(self):\n        return \"<CConstType %s>\" % repr(self.const_base_type)\n    def __str__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "FusedType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class FusedType(CType):\n    \"\"\"\n    Represents a Fused Type. All it needs to do is keep track of the types\n    it aggregates, as it will be replaced with its specific version wherever\n    needed.\n    See http://wiki.cython.org/enhancements/fusedtypes\n    types           [PyrexType]             is the list of types to be fused\n    name            str                     the name of the ctypedef\n    \"\"\"\n    is_fused = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CVoidType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CVoidType(CType):\n    #\n    #   C \"void\" type\n    #\n    is_void = 1\n    to_py_function = \"__Pyx_void_to_None\"\n    def __repr__(self):\n        return \"<CVoidType>\"\n    def declaration_code(self, entity_code,\n            for_display = 0, dll_linkage = None, pyrex = 0):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "InvisibleVoidType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class InvisibleVoidType(CVoidType):\n    #\n    #   For use with C++ constructors and destructors return types.\n    #   Acts like void, but does not print out a declaration.\n    #\n    def declaration_code(self, entity_code,\n            for_display = 0, dll_linkage = None, pyrex = 0):\n        if pyrex or for_display:\n            base_code = \"[void]\"\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CNumericType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CNumericType(CType):\n    #\n    #   Base class for all C numeric types.\n    #\n    #   rank      integer     Relative size\n    #   signed    integer     0 = unsigned, 1 = unspecified, 2 = explicitly signed\n    #\n    is_numeric = 1\n    default_value = \"0\"\n    has_attributes = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "ForbidUseClass",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class ForbidUseClass:\n    def __repr__(self):\n        raise RuntimeError()\n    def __str__(self):\n        raise RuntimeError()\nForbidUse = ForbidUseClass()\nclass CIntLike(object):\n    \"\"\"Mixin for shared behaviour of C integers and enums.\n    \"\"\"\n    to_py_function = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CIntLike",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CIntLike(object):\n    \"\"\"Mixin for shared behaviour of C integers and enums.\n    \"\"\"\n    to_py_function = None\n    from_py_function = None\n    to_pyunicode_utility = None\n    default_format_spec = 'd'\n    def can_coerce_to_pyobject(self, env):\n        return True\n    def can_coerce_from_pyobject(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CIntType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CIntType(CIntLike, CNumericType):\n    is_int = 1\n    typedef_flag = 0\n    exception_value = -1\n    def get_to_py_type_conversion(self):\n        if self.rank < list(rank_to_type_name).index('int'):\n            # This assumes sizeof(short) < sizeof(int)\n            return \"PyInt_FromLong\"\n        else:\n            # Py{Int|Long}_From[Unsigned]Long[Long]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CAnonEnumType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CAnonEnumType(CIntType):\n    is_enum = 1\n    def sign_and_name(self):\n        return 'int'\nclass CReturnCodeType(CIntType):\n    to_py_function = \"__Pyx_Owned_Py_None\"\n    is_returncode = True\n    exception_check = False\n    default_format_spec = ''\n    def can_coerce_to_pystring(self, env, format_spec=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CReturnCodeType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CReturnCodeType(CIntType):\n    to_py_function = \"__Pyx_Owned_Py_None\"\n    is_returncode = True\n    exception_check = False\n    default_format_spec = ''\n    def can_coerce_to_pystring(self, env, format_spec=None):\n        return not format_spec\n    def convert_to_pystring(self, cvalue, code, format_spec=None):\n        return \"__Pyx_NewRef(%s)\" % code.globalstate.get_py_string_const(StringEncoding.EncodedString(\"None\")).cname\nclass CBIntType(CIntType):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CBIntType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CBIntType(CIntType):\n    to_py_function = \"__Pyx_PyBool_FromLong\"\n    from_py_function = \"__Pyx_PyObject_IsTrue\"\n    exception_check = 1  # for C++ bool\n    default_format_spec = ''\n    def can_coerce_to_pystring(self, env, format_spec=None):\n        return not format_spec or super(CBIntType, self).can_coerce_to_pystring(env, format_spec)\n    def convert_to_pystring(self, cvalue, code, format_spec=None):\n        if format_spec:\n            return super(CBIntType, self).convert_to_pystring(cvalue, code, format_spec)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPyUCS4IntType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPyUCS4IntType(CIntType):\n    # Py_UCS4\n    is_unicode_char = True\n    # Py_UCS4 coerces from and to single character unicode strings (or\n    # at most two characters on 16bit Unicode builds), but we also\n    # allow Python integers as input.  The value range for Py_UCS4\n    # is 0..1114111, which is checked when converting from an integer\n    # value.\n    to_py_function = \"PyUnicode_FromOrdinal\"\n    from_py_function = \"__Pyx_PyObject_AsPy_UCS4\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPyUnicodeIntType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPyUnicodeIntType(CIntType):\n    # Py_UNICODE\n    is_unicode_char = True\n    # Py_UNICODE coerces from and to single character unicode strings,\n    # but we also allow Python integers as input.  The value range for\n    # Py_UNICODE is 0..1114111, which is checked when converting from\n    # an integer value.\n    to_py_function = \"PyUnicode_FromOrdinal\"\n    from_py_function = \"__Pyx_PyObject_AsPy_UNICODE\"\n    def can_coerce_to_pystring(self, env, format_spec=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPyHashTType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPyHashTType(CIntType):\n    to_py_function = \"__Pyx_PyInt_FromHash_t\"\n    from_py_function = \"__Pyx_PyInt_AsHash_t\"\n    def sign_and_name(self):\n        return \"Py_hash_t\"\nclass CPySSizeTType(CIntType):\n    to_py_function = \"PyInt_FromSsize_t\"\n    from_py_function = \"__Pyx_PyIndex_AsSsize_t\"\n    def sign_and_name(self):\n        return \"Py_ssize_t\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPySSizeTType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPySSizeTType(CIntType):\n    to_py_function = \"PyInt_FromSsize_t\"\n    from_py_function = \"__Pyx_PyIndex_AsSsize_t\"\n    def sign_and_name(self):\n        return \"Py_ssize_t\"\nclass CSSizeTType(CIntType):\n    to_py_function = \"PyInt_FromSsize_t\"\n    from_py_function = \"PyInt_AsSsize_t\"\n    def sign_and_name(self):\n        return \"Py_ssize_t\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CSSizeTType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CSSizeTType(CIntType):\n    to_py_function = \"PyInt_FromSsize_t\"\n    from_py_function = \"PyInt_AsSsize_t\"\n    def sign_and_name(self):\n        return \"Py_ssize_t\"\nclass CSizeTType(CIntType):\n    to_py_function = \"__Pyx_PyInt_FromSize_t\"\n    def sign_and_name(self):\n        return \"size_t\"\nclass CPtrdiffTType(CIntType):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CSizeTType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CSizeTType(CIntType):\n    to_py_function = \"__Pyx_PyInt_FromSize_t\"\n    def sign_and_name(self):\n        return \"size_t\"\nclass CPtrdiffTType(CIntType):\n    def sign_and_name(self):\n        return \"ptrdiff_t\"\nclass CFloatType(CNumericType):\n    is_float = 1\n    to_py_function = \"PyFloat_FromDouble\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPtrdiffTType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPtrdiffTType(CIntType):\n    def sign_and_name(self):\n        return \"ptrdiff_t\"\nclass CFloatType(CNumericType):\n    is_float = 1\n    to_py_function = \"PyFloat_FromDouble\"\n    from_py_function = \"__pyx_PyFloat_AsDouble\"\n    exception_value = -1\n    def __init__(self, rank, math_h_modifier = ''):\n        CNumericType.__init__(self, rank, 1)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CFloatType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CFloatType(CNumericType):\n    is_float = 1\n    to_py_function = \"PyFloat_FromDouble\"\n    from_py_function = \"__pyx_PyFloat_AsDouble\"\n    exception_value = -1\n    def __init__(self, rank, math_h_modifier = ''):\n        CNumericType.__init__(self, rank, 1)\n        self.math_h_modifier = math_h_modifier\n        if rank == RANK_FLOAT:\n            self.from_py_function = \"__pyx_PyFloat_AsFloat\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CComplexType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CComplexType(CNumericType):\n    is_complex = 1\n    to_py_function = \"__pyx_PyComplex_FromComplex\"\n    has_attributes = 1\n    scope = None\n    def __init__(self, real_type):\n        while real_type.is_typedef and not real_type.typedef_is_external:\n            real_type = real_type.typedef_base_type\n        self.funcsuffix = \"_%s\" % real_type.specialization_name()\n        if real_type.is_float:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPyTSSTType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPyTSSTType(CType):\n    #\n    #   PEP-539 \"Py_tss_t\" type\n    #\n    declaration_value = \"Py_tss_NEEDS_INIT\"\n    def __repr__(self):\n        return \"<Py_tss_t>\"\n    def declaration_code(self, entity_code,\n                         for_display=0, dll_linkage=None, pyrex=0):\n        if pyrex or for_display:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPointerBaseType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPointerBaseType(CType):\n    # common base type for pointer/array types\n    #\n    #  base_type     CType              Reference type\n    subtypes = ['base_type']\n    def __init__(self, base_type):\n        self.base_type = base_type\n        if base_type.is_const:\n            base_type = base_type.const_base_type\n        for char_type in (c_char_type, c_uchar_type, c_schar_type):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CArrayType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CArrayType(CPointerBaseType):\n    #  base_type     CType              Element type\n    #  size          integer or None    Number of elements\n    is_array = 1\n    to_tuple_function = None\n    def __init__(self, base_type, size):\n        super(CArrayType, self).__init__(base_type)\n        self.size = size\n    def __eq__(self, other):\n        if isinstance(other, CType) and other.is_array and self.size == other.size:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPtrType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPtrType(CPointerBaseType):\n    #  base_type     CType              Reference type\n    is_ptr = 1\n    default_value = \"0\"\n    def __hash__(self):\n        return hash(self.base_type) + 27 # arbitrarily chosen offset\n    def __eq__(self, other):\n        if isinstance(other, CType) and other.is_ptr:\n            return self.base_type.same_as(other.base_type)\n        return False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CNullPtrType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CNullPtrType(CPtrType):\n    is_null_ptr = 1\nclass CReferenceType(BaseType):\n    is_reference = 1\n    is_fake_reference = 0\n    def __init__(self, base_type):\n        self.ref_base_type = base_type\n    def __repr__(self):\n        return \"<CReferenceType %s>\" % repr(self.ref_base_type)\n    def __str__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CReferenceType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CReferenceType(BaseType):\n    is_reference = 1\n    is_fake_reference = 0\n    def __init__(self, base_type):\n        self.ref_base_type = base_type\n    def __repr__(self):\n        return \"<CReferenceType %s>\" % repr(self.ref_base_type)\n    def __str__(self):\n        return \"%s &\" % self.ref_base_type\n    def declaration_code(self, entity_code,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CFakeReferenceType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CFakeReferenceType(CReferenceType):\n    is_fake_reference = 1\n    def __repr__(self):\n        return \"<CFakeReferenceType %s>\" % repr(self.ref_base_type)\n    def __str__(self):\n        return \"%s [&]\" % self.ref_base_type\n    def declaration_code(self, entity_code,\n            for_display = 0, dll_linkage = None, pyrex = 0):\n        #print \"CReferenceType.declaration_code: pointer to\", self.base_type ###\n        return \"__Pyx_FakeReference<%s> %s\" % (self.ref_base_type.empty_declaration_code(), entity_code)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CFuncType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CFuncType(CType):\n    #  return_type      CType\n    #  args             [CFuncTypeArg]\n    #  has_varargs      boolean\n    #  exception_value  string\n    #  exception_check  boolean    True if PyErr_Occurred check needed\n    #  calling_convention  string  Function calling convention\n    #  nogil            boolean    Can be called without gil\n    #  with_gil         boolean    Acquire gil around function body\n    #  templates        [string] or None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CFuncTypeArg",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CFuncTypeArg(BaseType):\n    #  name       string\n    #  cname      string\n    #  type       PyrexType\n    #  pos        source file position\n    # FIXME: is this the right setup? should None be allowed here?\n    not_none = False\n    or_none = False\n    accept_none = True\n    accept_builtin_subtypes = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "ToPyStructUtilityCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class ToPyStructUtilityCode(object):\n    requires = None\n    def __init__(self, type, forward_decl, env):\n        self.type = type\n        self.header = \"static PyObject* %s(%s)\" % (type.to_py_function,\n                                                   type.declaration_code('s'))\n        self.forward_decl = forward_decl\n        self.env = env\n    def __eq__(self, other):\n        return isinstance(other, ToPyStructUtilityCode) and self.header == other.header",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CStructOrUnionType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CStructOrUnionType(CType):\n    #  name          string\n    #  cname         string\n    #  kind          string              \"struct\" or \"union\"\n    #  scope         StructOrUnionScope, or None if incomplete\n    #  typedef_flag  boolean\n    #  packed        boolean\n    # entry          Entry\n    is_struct_or_union = 1\n    has_attributes = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CppClassType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CppClassType(CType):\n    #  name          string\n    #  cname         string\n    #  scope         CppClassScope\n    #  templates     [string] or None\n    is_cpp_class = 1\n    has_attributes = 1\n    exception_check = True\n    namespace = None\n    # For struct-like declaration.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "TemplatePlaceholderType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class TemplatePlaceholderType(CType):\n    def __init__(self, name, optional=False):\n        self.name = name\n        self.optional = optional\n    def declaration_code(self, entity_code,\n            for_display = 0, dll_linkage = None, pyrex = 0):\n        if entity_code:\n            return self.name + \" \" + entity_code\n        else:\n            return self.name",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CEnumType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CEnumType(CIntLike, CType):\n    #  name           string\n    #  cname          string or None\n    #  typedef_flag   boolean\n    #  values         [string], populated during declaration analysis\n    is_enum = 1\n    signed = 1\n    rank = -1 # Ranks below any integer type\n    def __init__(self, name, cname, typedef_flag, namespace=None):\n        self.name = name",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CTupleType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CTupleType(CType):\n    # components [PyrexType]\n    is_ctuple = True\n    def __init__(self, cname, components):\n        self.cname = cname\n        self.components = components\n        self.size = len(components)\n        self.to_py_function = \"%s_to_py_%s\" % (Naming.convert_func_prefix, self.cname)\n        self.from_py_function = \"%s_from_py_%s\" % (Naming.convert_func_prefix, self.cname)\n        self.exception_check = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "UnspecifiedType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class UnspecifiedType(PyrexType):\n    # Used as a placeholder until the type can be determined.\n    is_unspecified = 1\n    def declaration_code(self, entity_code,\n            for_display = 0, dll_linkage = None, pyrex = 0):\n        return \"<unspecified>\"\n    def same_as_resolved_type(self, other_type):\n        return False\nclass ErrorType(PyrexType):\n    # Used to prevent propagation of error messages.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "ErrorType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class ErrorType(PyrexType):\n    # Used to prevent propagation of error messages.\n    is_error = 1\n    exception_value = \"0\"\n    exception_check    = 0\n    to_py_function = \"dummy\"\n    from_py_function = \"dummy\"\n    def create_to_py_utility_code(self, env):\n        return True\n    def create_from_py_utility_code(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "public_decl",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def public_decl(base_code, dll_linkage):\n    if dll_linkage:\n        return \"%s(%s)\" % (dll_linkage, base_code.replace(',', ' __PYX_COMMA '))\n    else:\n        return base_code\ndef create_typedef_type(name, base_type, cname, is_external=0, namespace=None):\n    is_fused = base_type.is_fused\n    if base_type.is_complex or is_fused:\n        if is_external:\n            if is_fused:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "create_typedef_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def create_typedef_type(name, base_type, cname, is_external=0, namespace=None):\n    is_fused = base_type.is_fused\n    if base_type.is_complex or is_fused:\n        if is_external:\n            if is_fused:\n                msg = \"Fused\"\n            else:\n                msg = \"Complex\"\n            raise ValueError(\"%s external typedefs not supported\" % msg)\n        return base_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "specialize_entry",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def specialize_entry(entry, cname):\n    \"\"\"\n    Specialize an entry of a copied fused function or method\n    \"\"\"\n    entry.is_fused_specialized = True\n    entry.name = get_fused_cname(cname, entry.name)\n    if entry.is_cmethod:\n        entry.cname = entry.name\n        if entry.is_inherited:\n            entry.cname = StringEncoding.EncodedString(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "get_fused_cname",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def get_fused_cname(fused_cname, orig_cname):\n    \"\"\"\n    Given the fused cname id and an original cname, return a specialized cname\n    \"\"\"\n    assert fused_cname and orig_cname\n    return StringEncoding.EncodedString('%s%s%s' % (Naming.fused_func_prefix,\n                                                    fused_cname, orig_cname))\ndef unique(somelist):\n    seen = set()\n    result = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "unique",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def unique(somelist):\n    seen = set()\n    result = []\n    for obj in somelist:\n        if obj not in seen:\n            result.append(obj)\n            seen.add(obj)\n    return result\ndef get_all_specialized_permutations(fused_types):\n    return _get_all_specialized_permutations(unique(fused_types))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "get_all_specialized_permutations",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def get_all_specialized_permutations(fused_types):\n    return _get_all_specialized_permutations(unique(fused_types))\ndef _get_all_specialized_permutations(fused_types, id=\"\", f2s=()):\n    fused_type, = fused_types[0].get_fused_types()\n    result = []\n    for newid, specific_type in enumerate(fused_type.types):\n        # f2s = dict(f2s, **{ fused_type: specific_type })\n        f2s = dict(f2s)\n        f2s.update({ fused_type: specific_type })\n        if id:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "specialization_signature_string",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def specialization_signature_string(fused_compound_type, fused_to_specific):\n    \"\"\"\n    Return the signature for a specialization of a fused type. e.g.\n        floating[:] ->\n            'float' or 'double'\n        cdef fused ft:\n            float[:]\n            double[:]\n        ft ->\n            'float[:]' or 'double[:]'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "get_specialized_types",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def get_specialized_types(type):\n    \"\"\"\n    Return a list of specialized types in their declared order.\n    \"\"\"\n    assert type.is_fused\n    if isinstance(type, FusedType):\n        result = list(type.types)\n        for specialized_type in result:\n            specialized_type.specialization_string = specialized_type.typeof_name()\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "is_optional_template_param",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def is_optional_template_param(type):\n    return isinstance(type, TemplatePlaceholderType) and type.optional\nclass CEnumType(CIntLike, CType):\n    #  name           string\n    #  cname          string or None\n    #  typedef_flag   boolean\n    #  values         [string], populated during declaration analysis\n    is_enum = 1\n    signed = 1\n    rank = -1 # Ranks below any integer type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_tuple_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def c_tuple_type(components):\n    components = tuple(components)\n    cname = Naming.ctuple_type_prefix + type_list_identifier(components)\n    tuple_type = CTupleType(cname, components)\n    return tuple_type\nclass UnspecifiedType(PyrexType):\n    # Used as a placeholder until the type can be determined.\n    is_unspecified = 1\n    def declaration_code(self, entity_code,\n            for_display = 0, dll_linkage = None, pyrex = 0):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "is_promotion",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def is_promotion(src_type, dst_type):\n    # It's hard to find a hard definition of promotion, but empirical\n    # evidence suggests that the below is all that's allowed.\n    if src_type.is_numeric:\n        if dst_type.same_as(c_int_type):\n            unsigned = (not src_type.signed)\n            return (src_type.is_enum or\n                    (src_type.is_int and\n                     unsigned + src_type.rank < dst_type.rank))\n        elif dst_type.same_as(c_double_type):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "best_match",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def best_match(arg_types, functions, pos=None, env=None, args=None):\n    \"\"\"\n    Given a list args of arguments and a list of functions, choose one\n    to call which seems to be the \"best\" fit for this list of arguments.\n    This function is used, e.g., when deciding which overloaded method\n    to dispatch for C++ classes.\n    We first eliminate functions based on arity, and if only one\n    function has the correct arity, we return it. Otherwise, we weight\n    functions based on how much work must be done to convert the\n    arguments, with the following priorities:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "merge_template_deductions",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def merge_template_deductions(a, b):\n    if a is None or b is None:\n        return None\n    all = a\n    for param, value in b.items():\n        if param in all:\n            if a[param] != b[param]:\n                return None\n        else:\n            all[param] = value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "widest_numeric_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def widest_numeric_type(type1, type2):\n    \"\"\"Given two numeric types, return the narrowest type encompassing both of them.\n    \"\"\"\n    if type1.is_reference:\n        type1 = type1.ref_base_type\n    if type2.is_reference:\n        type2 = type2.ref_base_type\n    if type1.is_const:\n        type1 = type1.const_base_type\n    if type2.is_const:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "numeric_type_fits",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def numeric_type_fits(small_type, large_type):\n    return widest_numeric_type(small_type, large_type) == large_type\ndef independent_spanning_type(type1, type2):\n    # Return a type assignable independently from both type1 and\n    # type2, but do not require any interoperability between the two.\n    # For example, in \"True * 2\", it is safe to assume an integer\n    # result type (so spanning_type() will do the right thing),\n    # whereas \"x = True or 2\" must evaluate to a type that can hold\n    # both a boolean value and an integer, so this function works\n    # better.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "independent_spanning_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def independent_spanning_type(type1, type2):\n    # Return a type assignable independently from both type1 and\n    # type2, but do not require any interoperability between the two.\n    # For example, in \"True * 2\", it is safe to assume an integer\n    # result type (so spanning_type() will do the right thing),\n    # whereas \"x = True or 2\" must evaluate to a type that can hold\n    # both a boolean value and an integer, so this function works\n    # better.\n    if type1.is_reference ^ type2.is_reference:\n        if type1.is_reference:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "spanning_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def spanning_type(type1, type2):\n    # Return a type assignable from both type1 and type2, or\n    # py_object_type if no better type is found.  Assumes that the\n    # code that calls this will try a coercion afterwards, which will\n    # fail if the types cannot actually coerce to a py_object_type.\n    if type1 == type2:\n        return type1\n    elif type1 is py_object_type or type2 is py_object_type:\n        return py_object_type\n    elif type1 is c_py_unicode_type or type2 is c_py_unicode_type:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "widest_extension_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def widest_extension_type(type1, type2):\n    if type1.typeobj_is_imported() or type2.typeobj_is_imported():\n        return py_object_type\n    while True:\n        if type1.subtype_of(type2):\n            return type2\n        elif type2.subtype_of(type1):\n            return type1\n        type1, type2 = type1.base_type, type2.base_type\n        if type1 is None or type2 is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "widest_cpp_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def widest_cpp_type(type1, type2):\n    @cached_function\n    def bases(type):\n        all = set()\n        for base in type.base_classes:\n            all.add(base)\n            all.update(bases(base))\n        return all\n    common_bases = bases(type1).intersection(bases(type2))\n    common_bases_bases = reduce(set.union, [bases(b) for b in common_bases], set())",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "simple_c_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def simple_c_type(signed, longness, name):\n    # Find type descriptor for simple type given name and modifiers.\n    # Returns None if arguments don't make sense.\n    return modifiers_and_name_to_type.get((signed, longness, name))\ndef parse_basic_type(name):\n    base = None\n    if name.startswith('p_'):\n        base = parse_basic_type(name[2:])\n    elif name.startswith('p'):\n        base = parse_basic_type(name[1:])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "parse_basic_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def parse_basic_type(name):\n    base = None\n    if name.startswith('p_'):\n        base = parse_basic_type(name[2:])\n    elif name.startswith('p'):\n        base = parse_basic_type(name[1:])\n    elif name.endswith('*'):\n        base = parse_basic_type(name[:-1])\n    if base:\n        return CPtrType(base)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_array_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def c_array_type(base_type, size):\n    # Construct a C array type.\n    if base_type is error_type:\n        return error_type\n    else:\n        return CArrayType(base_type, size)\ndef c_ptr_type(base_type):\n    # Construct a C pointer type.\n    if base_type is error_type:\n        return error_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ptr_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def c_ptr_type(base_type):\n    # Construct a C pointer type.\n    if base_type is error_type:\n        return error_type\n    elif base_type.is_reference:\n        return CPtrType(base_type.ref_base_type)\n    else:\n        return CPtrType(base_type)\ndef c_ref_type(base_type):\n    # Construct a C reference type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ref_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def c_ref_type(base_type):\n    # Construct a C reference type\n    if base_type is error_type:\n        return error_type\n    else:\n        return CReferenceType(base_type)\ndef c_const_type(base_type):\n    # Construct a C const type.\n    if base_type is error_type:\n        return error_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_const_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def c_const_type(base_type):\n    # Construct a C const type.\n    if base_type is error_type:\n        return error_type\n    else:\n        return CConstType(base_type)\ndef same_type(type1, type2):\n    return type1.same_as(type2)\ndef assignable_from(type1, type2):\n    return type1.assignable_from(type2)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "same_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def same_type(type1, type2):\n    return type1.same_as(type2)\ndef assignable_from(type1, type2):\n    return type1.assignable_from(type2)\ndef typecast(to_type, from_type, expr_code):\n    #  Return expr_code cast to a C type which can be\n    #  assigned to to_type, assuming its existing C type\n    #  is from_type.\n    if (to_type is from_type or\n            (not to_type.is_pyobject and assignable_from(to_type, from_type))):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "assignable_from",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def assignable_from(type1, type2):\n    return type1.assignable_from(type2)\ndef typecast(to_type, from_type, expr_code):\n    #  Return expr_code cast to a C type which can be\n    #  assigned to to_type, assuming its existing C type\n    #  is from_type.\n    if (to_type is from_type or\n            (not to_type.is_pyobject and assignable_from(to_type, from_type))):\n        return expr_code\n    elif (to_type is py_object_type and from_type and",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "typecast",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def typecast(to_type, from_type, expr_code):\n    #  Return expr_code cast to a C type which can be\n    #  assigned to to_type, assuming its existing C type\n    #  is from_type.\n    if (to_type is from_type or\n            (not to_type.is_pyobject and assignable_from(to_type, from_type))):\n        return expr_code\n    elif (to_type is py_object_type and from_type and\n            from_type.is_builtin_type and from_type.name != 'type'):\n        # no cast needed, builtins are PyObject* already",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "type_list_identifier",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def type_list_identifier(types):\n    return cap_length('__and_'.join(type_identifier(type) for type in types))\n_type_identifier_cache = {}\ndef type_identifier(type):\n    decl = type.empty_declaration_code()\n    safe = _type_identifier_cache.get(decl)\n    if safe is None:\n        safe = decl\n        safe = re.sub(' +', ' ', safe)\n        safe = re.sub(' ([^a-zA-Z0-9_])', r'\\1', safe)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "type_identifier",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def type_identifier(type):\n    decl = type.empty_declaration_code()\n    safe = _type_identifier_cache.get(decl)\n    if safe is None:\n        safe = decl\n        safe = re.sub(' +', ' ', safe)\n        safe = re.sub(' ([^a-zA-Z0-9_])', r'\\1', safe)\n        safe = re.sub('([^a-zA-Z0-9_]) ', r'\\1', safe)\n        safe = (safe.replace('__', '__dunder')\n                    .replace('const ', '__const_')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "cap_length",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def cap_length(s, max_prefix=63, max_len=1024):\n    if len(s) <= max_prefix:\n        return s\n    hash_prefix = hashlib.sha256(s.encode('ascii')).hexdigest()[:6]\n    return '%s__%s__etc' % (hash_prefix, s[:max_len-17])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "builtin_types_that_cannot_create_refcycles",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "builtin_types_that_cannot_create_refcycles = set([\n    'bool', 'int', 'long', 'float', 'complex',\n    'bytearray', 'bytes', 'unicode', 'str', 'basestring'\n])\nclass BuiltinObjectType(PyObjectType):\n    #  objstruct_cname  string           Name of PyObject struct\n    is_builtin_type = 1\n    has_attributes = 1\n    base_type = None\n    module_name = '__builtin__'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "ForbidUse",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "ForbidUse = ForbidUseClass()\nclass CIntLike(object):\n    \"\"\"Mixin for shared behaviour of C integers and enums.\n    \"\"\"\n    to_py_function = None\n    from_py_function = None\n    to_pyunicode_utility = None\n    default_format_spec = 'd'\n    def can_coerce_to_pyobject(self, env):\n        return True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "complex_ops",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "complex_ops = {\n    (1, '-'): 'neg',\n    (1, 'zero'): 'is_zero',\n    (2, '+'): 'sum',\n    (2, '-'): 'diff',\n    (2, '*'): 'prod',\n    (2, '/'): 'quot',\n    (2, '**'): 'pow',\n    (2, '=='): 'eq',\n}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "cpp_string_conversions",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "cpp_string_conversions = (\"std::string\",)\nbuiltin_cpp_conversions = {\n    # type                element template params\n    \"std::pair\":          2,\n    \"std::vector\":        1,\n    \"std::list\":          1,\n    \"std::set\":           1,\n    \"std::unordered_set\": 1,\n    \"std::map\":           2,\n    \"std::unordered_map\": 2,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "builtin_cpp_conversions",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "builtin_cpp_conversions = {\n    # type                element template params\n    \"std::pair\":          2,\n    \"std::vector\":        1,\n    \"std::list\":          1,\n    \"std::set\":           1,\n    \"std::unordered_set\": 1,\n    \"std::map\":           2,\n    \"std::unordered_map\": 2,\n    \"std::complex\":       1,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "rank_to_type_name",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "rank_to_type_name = (\n    \"char\",         # 0\n    \"short\",        # 1\n    \"int\",          # 2\n    \"long\",         # 3\n    \"PY_LONG_LONG\", # 4\n    \"float\",        # 5\n    \"double\",       # 6\n    \"long double\",  # 7\n)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "_rank_to_type_name",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "_rank_to_type_name = list(rank_to_type_name)\nRANK_INT  = _rank_to_type_name.index('int')\nRANK_LONG = _rank_to_type_name.index('long')\nRANK_FLOAT = _rank_to_type_name.index('float')\nUNSIGNED = 0\nSIGNED = 2\nerror_type =    ErrorType()\nunspecified_type = UnspecifiedType()\npy_object_type = PyObjectType()\nc_void_type =        CVoidType()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "RANK_LONG",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "RANK_LONG = _rank_to_type_name.index('long')\nRANK_FLOAT = _rank_to_type_name.index('float')\nUNSIGNED = 0\nSIGNED = 2\nerror_type =    ErrorType()\nunspecified_type = UnspecifiedType()\npy_object_type = PyObjectType()\nc_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "RANK_FLOAT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "RANK_FLOAT = _rank_to_type_name.index('float')\nUNSIGNED = 0\nSIGNED = 2\nerror_type =    ErrorType()\nunspecified_type = UnspecifiedType()\npy_object_type = PyObjectType()\nc_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "UNSIGNED",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "UNSIGNED = 0\nSIGNED = 2\nerror_type =    ErrorType()\nunspecified_type = UnspecifiedType()\npy_object_type = PyObjectType()\nc_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "SIGNED",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "SIGNED = 2\nerror_type =    ErrorType()\nunspecified_type = UnspecifiedType()\npy_object_type = PyObjectType()\nc_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "error_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "error_type =    ErrorType()\nunspecified_type = UnspecifiedType()\npy_object_type = PyObjectType()\nc_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "unspecified_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "unspecified_type = UnspecifiedType()\npy_object_type = PyObjectType()\nc_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "py_object_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "py_object_type = PyObjectType()\nc_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_void_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_uchar_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ushort_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_uint_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ulong_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ulonglong_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_char_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_short_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_int_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_long_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_longlong_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_schar_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_sshort_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_sint_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_slong_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_slonglong_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_float_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_double_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_longdouble_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_float_complex_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_double_complex_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_longdouble_complex_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_anon_enum_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_returncode_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_bint_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_unicode_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_ucs4_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_hash_t_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_ssize_t_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ssize_t_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_size_t_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ptrdiff_t_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_null_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_void_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_void_ptr_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_char_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_const_char_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_uchar_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_const_uchar_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_char_ptr_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_int_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_unicode_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_const_py_unicode_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type\nc_pytss_t_type = CPyTSSTType()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_ssize_t_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type\nc_pytss_t_type = CPyTSSTType()\n# the Py_buffer type is defined in Builtin.py",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ssize_t_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type\nc_pytss_t_type = CPyTSSTType()\n# the Py_buffer type is defined in Builtin.py\nc_py_buffer_type = CStructOrUnionType(\"Py_buffer\", \"struct\", None, 1, \"Py_buffer\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_size_t_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type\nc_pytss_t_type = CPyTSSTType()\n# the Py_buffer type is defined in Builtin.py\nc_py_buffer_type = CStructOrUnionType(\"Py_buffer\", \"struct\", None, 1, \"Py_buffer\")\nc_py_buffer_ptr_type = CPtrType(c_py_buffer_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_gilstate_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type\nc_pytss_t_type = CPyTSSTType()\n# the Py_buffer type is defined in Builtin.py\nc_py_buffer_type = CStructOrUnionType(\"Py_buffer\", \"struct\", None, 1, \"Py_buffer\")\nc_py_buffer_ptr_type = CPtrType(c_py_buffer_type)\n# Not sure whether the unsigned versions and 'long long' should be in there\n# long long requires C99 and might be slow, and would always get preferred",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_threadstate_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type\nc_pytss_t_type = CPyTSSTType()\n# the Py_buffer type is defined in Builtin.py\nc_py_buffer_type = CStructOrUnionType(\"Py_buffer\", \"struct\", None, 1, \"Py_buffer\")\nc_py_buffer_ptr_type = CPtrType(c_py_buffer_type)\n# Not sure whether the unsigned versions and 'long long' should be in there\n# long long requires C99 and might be slow, and would always get preferred\n# when specialization happens through calling and not indexing",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_threadstate_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type\nc_pytss_t_type = CPyTSSTType()\n# the Py_buffer type is defined in Builtin.py\nc_py_buffer_type = CStructOrUnionType(\"Py_buffer\", \"struct\", None, 1, \"Py_buffer\")\nc_py_buffer_ptr_type = CPtrType(c_py_buffer_type)\n# Not sure whether the unsigned versions and 'long long' should be in there\n# long long requires C99 and might be slow, and would always get preferred\n# when specialization happens through calling and not indexing\ncy_integral_type = FusedType([c_short_type, c_int_type, c_long_type],",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_pytss_t_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_pytss_t_type = CPyTSSTType()\n# the Py_buffer type is defined in Builtin.py\nc_py_buffer_type = CStructOrUnionType(\"Py_buffer\", \"struct\", None, 1, \"Py_buffer\")\nc_py_buffer_ptr_type = CPtrType(c_py_buffer_type)\n# Not sure whether the unsigned versions and 'long long' should be in there\n# long long requires C99 and might be slow, and would always get preferred\n# when specialization happens through calling and not indexing\ncy_integral_type = FusedType([c_short_type, c_int_type, c_long_type],\n                             name=\"integral\")\n# Omitting long double as it might be slow",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_buffer_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_buffer_type = CStructOrUnionType(\"Py_buffer\", \"struct\", None, 1, \"Py_buffer\")\nc_py_buffer_ptr_type = CPtrType(c_py_buffer_type)\n# Not sure whether the unsigned versions and 'long long' should be in there\n# long long requires C99 and might be slow, and would always get preferred\n# when specialization happens through calling and not indexing\ncy_integral_type = FusedType([c_short_type, c_int_type, c_long_type],\n                             name=\"integral\")\n# Omitting long double as it might be slow\ncy_floating_type = FusedType([c_float_type, c_double_type], name=\"floating\")\ncy_numeric_type = FusedType([c_short_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_buffer_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_buffer_ptr_type = CPtrType(c_py_buffer_type)\n# Not sure whether the unsigned versions and 'long long' should be in there\n# long long requires C99 and might be slow, and would always get preferred\n# when specialization happens through calling and not indexing\ncy_integral_type = FusedType([c_short_type, c_int_type, c_long_type],\n                             name=\"integral\")\n# Omitting long double as it might be slow\ncy_floating_type = FusedType([c_float_type, c_double_type], name=\"floating\")\ncy_numeric_type = FusedType([c_short_type,\n                             c_int_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "cy_integral_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "cy_integral_type = FusedType([c_short_type, c_int_type, c_long_type],\n                             name=\"integral\")\n# Omitting long double as it might be slow\ncy_floating_type = FusedType([c_float_type, c_double_type], name=\"floating\")\ncy_numeric_type = FusedType([c_short_type,\n                             c_int_type,\n                             c_long_type,\n                             c_float_type,\n                             c_double_type,\n                             c_float_complex_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "cy_floating_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "cy_floating_type = FusedType([c_float_type, c_double_type], name=\"floating\")\ncy_numeric_type = FusedType([c_short_type,\n                             c_int_type,\n                             c_long_type,\n                             c_float_type,\n                             c_double_type,\n                             c_float_complex_type,\n                             c_double_complex_type], name=\"numeric\")\n# buffer-related structs\nc_buf_diminfo_type =  CStructOrUnionType(\"__Pyx_Buf_DimInfo\", \"struct\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "cy_numeric_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "cy_numeric_type = FusedType([c_short_type,\n                             c_int_type,\n                             c_long_type,\n                             c_float_type,\n                             c_double_type,\n                             c_float_complex_type,\n                             c_double_complex_type], name=\"numeric\")\n# buffer-related structs\nc_buf_diminfo_type =  CStructOrUnionType(\"__Pyx_Buf_DimInfo\", \"struct\",\n                                      None, 1, \"__Pyx_Buf_DimInfo\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_buf_diminfo_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_buf_diminfo_type =  CStructOrUnionType(\"__Pyx_Buf_DimInfo\", \"struct\",\n                                      None, 1, \"__Pyx_Buf_DimInfo\")\nc_pyx_buffer_type = CStructOrUnionType(\"__Pyx_Buffer\", \"struct\", None, 1, \"__Pyx_Buffer\")\nc_pyx_buffer_ptr_type = CPtrType(c_pyx_buffer_type)\nc_pyx_buffer_nd_type = CStructOrUnionType(\"__Pyx_LocalBuf_ND\", \"struct\",\n                                      None, 1, \"__Pyx_LocalBuf_ND\")\ncython_memoryview_type = CStructOrUnionType(\"__pyx_memoryview_obj\", \"struct\",\n                                      None, 0, \"__pyx_memoryview_obj\")\nmemoryviewslice_type = CStructOrUnionType(\"memoryviewslice\", \"struct\",\n                                          None, 1, \"__Pyx_memviewslice\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_pyx_buffer_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_pyx_buffer_type = CStructOrUnionType(\"__Pyx_Buffer\", \"struct\", None, 1, \"__Pyx_Buffer\")\nc_pyx_buffer_ptr_type = CPtrType(c_pyx_buffer_type)\nc_pyx_buffer_nd_type = CStructOrUnionType(\"__Pyx_LocalBuf_ND\", \"struct\",\n                                      None, 1, \"__Pyx_LocalBuf_ND\")\ncython_memoryview_type = CStructOrUnionType(\"__pyx_memoryview_obj\", \"struct\",\n                                      None, 0, \"__pyx_memoryview_obj\")\nmemoryviewslice_type = CStructOrUnionType(\"memoryviewslice\", \"struct\",\n                                          None, 1, \"__Pyx_memviewslice\")\nmodifiers_and_name_to_type = {\n    #(signed, longness, name) : type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_pyx_buffer_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_pyx_buffer_ptr_type = CPtrType(c_pyx_buffer_type)\nc_pyx_buffer_nd_type = CStructOrUnionType(\"__Pyx_LocalBuf_ND\", \"struct\",\n                                      None, 1, \"__Pyx_LocalBuf_ND\")\ncython_memoryview_type = CStructOrUnionType(\"__pyx_memoryview_obj\", \"struct\",\n                                      None, 0, \"__pyx_memoryview_obj\")\nmemoryviewslice_type = CStructOrUnionType(\"memoryviewslice\", \"struct\",\n                                          None, 1, \"__Pyx_memviewslice\")\nmodifiers_and_name_to_type = {\n    #(signed, longness, name) : type\n    (0,  0, \"char\"): c_uchar_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_pyx_buffer_nd_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_pyx_buffer_nd_type = CStructOrUnionType(\"__Pyx_LocalBuf_ND\", \"struct\",\n                                      None, 1, \"__Pyx_LocalBuf_ND\")\ncython_memoryview_type = CStructOrUnionType(\"__pyx_memoryview_obj\", \"struct\",\n                                      None, 0, \"__pyx_memoryview_obj\")\nmemoryviewslice_type = CStructOrUnionType(\"memoryviewslice\", \"struct\",\n                                          None, 1, \"__Pyx_memviewslice\")\nmodifiers_and_name_to_type = {\n    #(signed, longness, name) : type\n    (0,  0, \"char\"): c_uchar_type,\n    (1,  0, \"char\"): c_char_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "cython_memoryview_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "cython_memoryview_type = CStructOrUnionType(\"__pyx_memoryview_obj\", \"struct\",\n                                      None, 0, \"__pyx_memoryview_obj\")\nmemoryviewslice_type = CStructOrUnionType(\"memoryviewslice\", \"struct\",\n                                          None, 1, \"__Pyx_memviewslice\")\nmodifiers_and_name_to_type = {\n    #(signed, longness, name) : type\n    (0,  0, \"char\"): c_uchar_type,\n    (1,  0, \"char\"): c_char_type,\n    (2,  0, \"char\"): c_schar_type,\n    (0, -1, \"int\"): c_ushort_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "memoryviewslice_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "memoryviewslice_type = CStructOrUnionType(\"memoryviewslice\", \"struct\",\n                                          None, 1, \"__Pyx_memviewslice\")\nmodifiers_and_name_to_type = {\n    #(signed, longness, name) : type\n    (0,  0, \"char\"): c_uchar_type,\n    (1,  0, \"char\"): c_char_type,\n    (2,  0, \"char\"): c_schar_type,\n    (0, -1, \"int\"): c_ushort_type,\n    (0,  0, \"int\"): c_uint_type,\n    (0,  1, \"int\"): c_ulong_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "modifiers_and_name_to_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "modifiers_and_name_to_type = {\n    #(signed, longness, name) : type\n    (0,  0, \"char\"): c_uchar_type,\n    (1,  0, \"char\"): c_char_type,\n    (2,  0, \"char\"): c_schar_type,\n    (0, -1, \"int\"): c_ushort_type,\n    (0,  0, \"int\"): c_uint_type,\n    (0,  1, \"int\"): c_ulong_type,\n    (0,  2, \"int\"): c_ulonglong_type,\n    (1, -1, \"int\"): c_short_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "_type_identifier_cache",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "_type_identifier_cache = {}\ndef type_identifier(type):\n    decl = type.empty_declaration_code()\n    safe = _type_identifier_cache.get(decl)\n    if safe is None:\n        safe = decl\n        safe = re.sub(' +', ' ', safe)\n        safe = re.sub(' ([^a-zA-Z0-9_])', r'\\1', safe)\n        safe = re.sub('([^a-zA-Z0-9_]) ', r'\\1', safe)\n        safe = (safe.replace('__', '__dunder')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "has_np_pythran",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def has_np_pythran(env):\n    if env is None:\n        return False\n    directives = getattr(env, 'directives', None)\n    return (directives and directives.get('np_pythran', False))\n@cython.ccall\ndef is_pythran_supported_dtype(type_):\n    if isinstance(type_, CTypedefType):\n        return is_pythran_supported_type(type_.typedef_base_type)\n    return type_.is_numeric",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "is_pythran_supported_dtype",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def is_pythran_supported_dtype(type_):\n    if isinstance(type_, CTypedefType):\n        return is_pythran_supported_type(type_.typedef_base_type)\n    return type_.is_numeric\ndef pythran_type(Ty, ptype=\"ndarray\"):\n    if Ty.is_buffer:\n        ndim,dtype = Ty.ndim, Ty.dtype\n        if isinstance(dtype, CStructOrUnionType):\n            ctype = dtype.cname\n        elif isinstance(dtype, CType):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_type(Ty, ptype=\"ndarray\"):\n    if Ty.is_buffer:\n        ndim,dtype = Ty.ndim, Ty.dtype\n        if isinstance(dtype, CStructOrUnionType):\n            ctype = dtype.cname\n        elif isinstance(dtype, CType):\n            ctype = dtype.sign_and_name()\n        elif isinstance(dtype, CTypedefType):\n            ctype = dtype.typedef_cname\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "type_remove_ref",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def type_remove_ref(ty):\n    return \"typename std::remove_reference<%s>::type\" % ty\ndef pythran_binop_type(op, tA, tB):\n    if op == '**':\n        return 'decltype(pythonic::numpy::functor::power{}(std::declval<%s>(), std::declval<%s>()))' % (\n            pythran_type(tA), pythran_type(tB))\n    else:\n        return \"decltype(std::declval<%s>() %s std::declval<%s>())\" % (\n            pythran_type(tA), op, pythran_type(tB))\ndef pythran_unaryop_type(op, type_):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_binop_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_binop_type(op, tA, tB):\n    if op == '**':\n        return 'decltype(pythonic::numpy::functor::power{}(std::declval<%s>(), std::declval<%s>()))' % (\n            pythran_type(tA), pythran_type(tB))\n    else:\n        return \"decltype(std::declval<%s>() %s std::declval<%s>())\" % (\n            pythran_type(tA), op, pythran_type(tB))\ndef pythran_unaryop_type(op, type_):\n    return \"decltype(%sstd::declval<%s>())\" % (\n        op, pythran_type(type_))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_unaryop_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_unaryop_type(op, type_):\n    return \"decltype(%sstd::declval<%s>())\" % (\n        op, pythran_type(type_))\n@cython.cfunc\ndef _index_access(index_code, indices):\n    indexing = \",\".join([index_code(idx) for idx in indices])\n    return ('[%s]' if len(indices) == 1 else '(%s)') % indexing\ndef _index_type_code(index_with_type):\n    idx, index_type = index_with_type\n    if idx.is_slice:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_indexing_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_indexing_type(type_, indices):\n    return type_remove_ref(\"decltype(std::declval<%s>()%s)\" % (\n        pythran_type(type_),\n        _index_access(_index_type_code, indices),\n    ))\ndef pythran_indexing_code(indices):\n    return _index_access(_index_code, indices)\ndef np_func_to_list(func):\n    if not func.is_numpy_attribute:\n        return []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_indexing_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_indexing_code(indices):\n    return _index_access(_index_code, indices)\ndef np_func_to_list(func):\n    if not func.is_numpy_attribute:\n        return []\n    return np_func_to_list(func.obj) + [func.attribute]\nif pythran is None:\n    def pythran_is_numpy_func_supported(name):\n        return False\nelse:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "np_func_to_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def np_func_to_list(func):\n    if not func.is_numpy_attribute:\n        return []\n    return np_func_to_list(func.obj) + [func.attribute]\nif pythran is None:\n    def pythran_is_numpy_func_supported(name):\n        return False\nelse:\n    def pythran_is_numpy_func_supported(func):\n        CurF = pythran.tables.MODULES['numpy']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_functor",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_functor(func):\n    func = np_func_to_list(func)\n    submodules = \"::\".join(func[:-1] + [\"functor\"])\n    return \"pythonic::numpy::%s::%s\" % (submodules, func[-1])\ndef pythran_func_type(func, args):\n    args = \",\".join((\"std::declval<%s>()\" % pythran_type(a.type) for a in args))\n    return \"decltype(%s{}(%s))\" % (pythran_functor(func), args)\n@cython.ccall\ndef to_pythran(op, ptype=None):\n    op_type = op.type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_func_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_func_type(func, args):\n    args = \",\".join((\"std::declval<%s>()\" % pythran_type(a.type) for a in args))\n    return \"decltype(%s{}(%s))\" % (pythran_functor(func), args)\n@cython.ccall\ndef to_pythran(op, ptype=None):\n    op_type = op.type\n    if op_type.is_int:\n        # Make sure that integer literals always have exactly the type that the templates expect.\n        return op_type.cast_code(op.result())\n    if is_type(op_type, [\"is_pythran_expr\", \"is_numeric\", \"is_float\", \"is_complex\"]):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "to_pythran",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def to_pythran(op, ptype=None):\n    op_type = op.type\n    if op_type.is_int:\n        # Make sure that integer literals always have exactly the type that the templates expect.\n        return op_type.cast_code(op.result())\n    if is_type(op_type, [\"is_pythran_expr\", \"is_numeric\", \"is_float\", \"is_complex\"]):\n        return op.result()\n    if op.is_none:\n        return \"pythonic::%s::None\" % pythran_builtins\n    if ptype is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "is_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def is_type(type_, types):\n    for attr in types:\n        if getattr(type_, attr, False):\n            return True\n    return False\ndef is_pythran_supported_node_or_none(node):\n    return node.is_none or is_pythran_supported_type(node.type)\n@cython.ccall\ndef is_pythran_supported_type(type_):\n    pythran_supported = (",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "is_pythran_supported_node_or_none",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def is_pythran_supported_node_or_none(node):\n    return node.is_none or is_pythran_supported_type(node.type)\n@cython.ccall\ndef is_pythran_supported_type(type_):\n    pythran_supported = (\n        \"is_pythran_expr\", \"is_int\", \"is_numeric\", \"is_float\", \"is_none\", \"is_complex\")\n    return is_type(type_, pythran_supported) or is_pythran_expr(type_)\ndef is_pythran_supported_operation_type(type_):\n    pythran_supported = (\n        \"is_pythran_expr\", \"is_int\", \"is_numeric\", \"is_float\", \"is_complex\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "is_pythran_supported_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def is_pythran_supported_type(type_):\n    pythran_supported = (\n        \"is_pythran_expr\", \"is_int\", \"is_numeric\", \"is_float\", \"is_none\", \"is_complex\")\n    return is_type(type_, pythran_supported) or is_pythran_expr(type_)\ndef is_pythran_supported_operation_type(type_):\n    pythran_supported = (\n        \"is_pythran_expr\", \"is_int\", \"is_numeric\", \"is_float\", \"is_complex\")\n    return is_type(type_,pythran_supported) or is_pythran_expr(type_)\n@cython.ccall\ndef is_pythran_expr(type_):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "is_pythran_supported_operation_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def is_pythran_supported_operation_type(type_):\n    pythran_supported = (\n        \"is_pythran_expr\", \"is_int\", \"is_numeric\", \"is_float\", \"is_complex\")\n    return is_type(type_,pythran_supported) or is_pythran_expr(type_)\n@cython.ccall\ndef is_pythran_expr(type_):\n    return type_.is_pythran_expr\ndef is_pythran_buffer(type_):\n    return (type_.is_numpy_buffer and is_pythran_supported_dtype(type_.dtype) and\n            type_.mode in (\"c\", \"strided\") and not type_.cast)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "is_pythran_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def is_pythran_expr(type_):\n    return type_.is_pythran_expr\ndef is_pythran_buffer(type_):\n    return (type_.is_numpy_buffer and is_pythran_supported_dtype(type_.dtype) and\n            type_.mode in (\"c\", \"strided\") and not type_.cast)\ndef pythran_get_func_include_file(func):\n    func = np_func_to_list(func)\n    return \"pythonic/numpy/%s.hpp\" % \"/\".join(func)\ndef include_pythran_generic(env):\n    # Generic files",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "is_pythran_buffer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def is_pythran_buffer(type_):\n    return (type_.is_numpy_buffer and is_pythran_supported_dtype(type_.dtype) and\n            type_.mode in (\"c\", \"strided\") and not type_.cast)\ndef pythran_get_func_include_file(func):\n    func = np_func_to_list(func)\n    return \"pythonic/numpy/%s.hpp\" % \"/\".join(func)\ndef include_pythran_generic(env):\n    # Generic files\n    env.add_include_file(\"pythonic/core.hpp\")\n    env.add_include_file(\"pythonic/python/core.hpp\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_get_func_include_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_get_func_include_file(func):\n    func = np_func_to_list(func)\n    return \"pythonic/numpy/%s.hpp\" % \"/\".join(func)\ndef include_pythran_generic(env):\n    # Generic files\n    env.add_include_file(\"pythonic/core.hpp\")\n    env.add_include_file(\"pythonic/python/core.hpp\")\n    env.add_include_file(\"pythonic/types/bool.hpp\")\n    env.add_include_file(\"pythonic/types/ndarray.hpp\")\n    env.add_include_file(\"pythonic/numpy/power.hpp\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "include_pythran_generic",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def include_pythran_generic(env):\n    # Generic files\n    env.add_include_file(\"pythonic/core.hpp\")\n    env.add_include_file(\"pythonic/python/core.hpp\")\n    env.add_include_file(\"pythonic/types/bool.hpp\")\n    env.add_include_file(\"pythonic/types/ndarray.hpp\")\n    env.add_include_file(\"pythonic/numpy/power.hpp\")\n    env.add_include_file(\"pythonic/%s/slice.hpp\" % pythran_builtins)\n    env.add_include_file(\"<new>\")  # for placement new\n    for i in (8, 16, 32, 64):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "Method",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "peekOfCode": "class Method(object):\n    def __init__(self, name, **kwargs):\n        self.name = name\n        self.kwargs = kwargs or None\n        self.__name__ = name  # for Plex tracing\n    def __call__(self, stream, text):\n        method = getattr(stream, self.name)\n        # self.kwargs is almost always unused => avoid call overhead\n        return method(text, **self.kwargs) if self.kwargs is not None else method(text)\n    def __copy__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "CompileTimeScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "peekOfCode": "class CompileTimeScope(object):\n    def __init__(self, outer=None):\n        self.entries = {}\n        self.outer = outer\n    def declare(self, name, value):\n        self.entries[name] = value\n    def update(self, other):\n        self.entries.update(other)\n    def lookup_here(self, name):\n        return self.entries[name]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "SourceDescriptor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "peekOfCode": "class SourceDescriptor(object):\n    \"\"\"\n    A SourceDescriptor should be considered immutable.\n    \"\"\"\n    filename = None\n    _file_type = 'pyx'\n    _escaped_description = None\n    _cmp_name = ''\n    def __str__(self):\n        assert False # To catch all places where a descriptor is used directly as a filename",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "FileSourceDescriptor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "peekOfCode": "class FileSourceDescriptor(SourceDescriptor):\n    \"\"\"\n    Represents a code source. A code source is a more generic abstraction\n    for a \"filename\" (as sometimes the code doesn't come from a file).\n    Instances of code sources are passed to Scanner.__init__ as the\n    optional name argument and will be passed back when asking for\n    the position()-tuple.\n    \"\"\"\n    def __init__(self, filename, path_description=None):\n        filename = Utils.decode_filename(filename)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "StringSourceDescriptor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "peekOfCode": "class StringSourceDescriptor(SourceDescriptor):\n    \"\"\"\n    Instances of this class can be used instead of a filenames if the\n    code originates from a string object.\n    \"\"\"\n    def __init__(self, name, code):\n        self.name = name\n        #self.set_file_type_from_name(name)\n        self.codelines = [x + \"\\n\" for x in code.split(\"\\n\")]\n        self._cmp_name = name",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "PyrexScanner",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "peekOfCode": "class PyrexScanner(Scanner):\n    #  context            Context  Compilation context\n    #  included_files     [string] Files included with 'include' statement\n    #  compile_time_env   dict     Environment for conditional compilation\n    #  compile_time_eval  boolean  In a true conditional compilation context\n    #  compile_time_expr  boolean  In a compile-time expression context\n    def __init__(self, file, filename, parent_scanner=None,\n                 scope=None, context=None, source_encoding=None, parse_comments=True, initial_pos=None):\n        Scanner.__init__(self, get_lexicon(), file, filename, initial_pos)\n        if filename.is_python_file():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "get_lexicon",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "peekOfCode": "def get_lexicon():\n    global lexicon\n    if not lexicon:\n        lexicon = make_lexicon()\n    return lexicon\n#------------------------------------------------------------------\npy_reserved_words = [\n    \"global\", \"nonlocal\", \"def\", \"class\", \"print\", \"del\", \"pass\", \"break\",\n    \"continue\", \"return\", \"raise\", \"import\", \"exec\", \"try\",\n    \"except\", \"finally\", \"while\", \"if\", \"elif\", \"else\", \"for\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "initial_compile_time_env",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "peekOfCode": "def initial_compile_time_env():\n    benv = CompileTimeScope()\n    names = ('UNAME_SYSNAME', 'UNAME_NODENAME', 'UNAME_RELEASE', 'UNAME_VERSION', 'UNAME_MACHINE')\n    for name, value in zip(names, platform.uname()):\n        benv.declare(name, value)\n    try:\n        import __builtin__ as builtins\n    except ImportError:\n        import builtins\n    names = (",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "debug_scanner",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "peekOfCode": "debug_scanner = 0\ntrace_scanner = 0\nscanner_debug_flags = 0\nscanner_dump_file = None\nlexicon = None\ndef get_lexicon():\n    global lexicon\n    if not lexicon:\n        lexicon = make_lexicon()\n    return lexicon",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "trace_scanner",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "peekOfCode": "trace_scanner = 0\nscanner_debug_flags = 0\nscanner_dump_file = None\nlexicon = None\ndef get_lexicon():\n    global lexicon\n    if not lexicon:\n        lexicon = make_lexicon()\n    return lexicon\n#------------------------------------------------------------------",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "scanner_debug_flags",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "peekOfCode": "scanner_debug_flags = 0\nscanner_dump_file = None\nlexicon = None\ndef get_lexicon():\n    global lexicon\n    if not lexicon:\n        lexicon = make_lexicon()\n    return lexicon\n#------------------------------------------------------------------\npy_reserved_words = [",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "scanner_dump_file",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "peekOfCode": "scanner_dump_file = None\nlexicon = None\ndef get_lexicon():\n    global lexicon\n    if not lexicon:\n        lexicon = make_lexicon()\n    return lexicon\n#------------------------------------------------------------------\npy_reserved_words = [\n    \"global\", \"nonlocal\", \"def\", \"class\", \"print\", \"del\", \"pass\", \"break\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "lexicon",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "peekOfCode": "lexicon = None\ndef get_lexicon():\n    global lexicon\n    if not lexicon:\n        lexicon = make_lexicon()\n    return lexicon\n#------------------------------------------------------------------\npy_reserved_words = [\n    \"global\", \"nonlocal\", \"def\", \"class\", \"print\", \"del\", \"pass\", \"break\",\n    \"continue\", \"return\", \"raise\", \"import\", \"exec\", \"try\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "py_reserved_words",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "peekOfCode": "py_reserved_words = [\n    \"global\", \"nonlocal\", \"def\", \"class\", \"print\", \"del\", \"pass\", \"break\",\n    \"continue\", \"return\", \"raise\", \"import\", \"exec\", \"try\",\n    \"except\", \"finally\", \"while\", \"if\", \"elif\", \"else\", \"for\",\n    \"in\", \"assert\", \"and\", \"or\", \"not\", \"is\", \"lambda\",\n    \"from\", \"yield\", \"with\",\n]\npyx_reserved_words = py_reserved_words + [\n    \"include\", \"ctypedef\", \"cdef\", \"cpdef\",\n    \"cimport\", \"DEF\", \"IF\", \"ELIF\", \"ELSE\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "pyx_reserved_words",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "peekOfCode": "pyx_reserved_words = py_reserved_words + [\n    \"include\", \"ctypedef\", \"cdef\", \"cpdef\",\n    \"cimport\", \"DEF\", \"IF\", \"ELIF\", \"ELSE\"\n]\nclass Method(object):\n    def __init__(self, name, **kwargs):\n        self.name = name\n        self.kwargs = kwargs or None\n        self.__name__ = name  # for Plex tracing\n    def __call__(self, stream, text):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "UnicodeLiteralBuilder",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "class UnicodeLiteralBuilder(object):\n    \"\"\"Assemble a unicode string.\n    \"\"\"\n    def __init__(self):\n        self.chars = []\n    def append(self, characters):\n        if isinstance(characters, _bytes):\n            # this came from a Py2 string literal in the parser code\n            characters = characters.decode(\"ASCII\")\n        assert isinstance(characters, _unicode), str(type(characters))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "BytesLiteralBuilder",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "class BytesLiteralBuilder(object):\n    \"\"\"Assemble a byte string or char value.\n    \"\"\"\n    def __init__(self, target_encoding):\n        self.chars = []\n        self.target_encoding = target_encoding\n    def append(self, characters):\n        if isinstance(characters, _unicode):\n            characters = characters.encode(self.target_encoding)\n        assert isinstance(characters, _bytes), str(type(characters))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "StrLiteralBuilder",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "class StrLiteralBuilder(object):\n    \"\"\"Assemble both a bytes and a unicode representation of a string.\n    \"\"\"\n    def __init__(self, target_encoding):\n        self._bytes   = BytesLiteralBuilder(target_encoding)\n        self._unicode = UnicodeLiteralBuilder()\n    def append(self, characters):\n        self._bytes.append(characters)\n        self._unicode.append(characters)\n    def append_charval(self, char_number):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "EncodedString",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "class EncodedString(_unicode):\n    # unicode string subclass to keep track of the original encoding.\n    # 'encoding' is None for unicode strings and the source encoding\n    # otherwise\n    encoding = None\n    def __deepcopy__(self, memo):\n        return self\n    def byteencode(self):\n        assert self.encoding is not None\n        return self.encode(self.encoding)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "BytesLiteral",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "class BytesLiteral(_bytes):\n    # bytes subclass that is compatible with EncodedString\n    encoding = None\n    def __deepcopy__(self, memo):\n        return self\n    def byteencode(self):\n        if IS_PYTHON3:\n            return _bytes(self)\n        else:\n            # fake-recode the string to make it a plain bytes object",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "string_contains_surrogates",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def string_contains_surrogates(ustring):\n    \"\"\"\n    Check if the unicode string contains surrogate code points\n    on a CPython platform with wide (UCS-4) or narrow (UTF-16)\n    Unicode, i.e. characters that would be spelled as two\n    separate code units on a narrow platform.\n    \"\"\"\n    for c in map(ord, ustring):\n        if c > 65535:  # can only happen on wide platforms\n            return True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "string_contains_lone_surrogates",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def string_contains_lone_surrogates(ustring):\n    \"\"\"\n    Check if the unicode string contains lone surrogate code points\n    on a CPython platform with wide (UCS-4) or narrow (UTF-16)\n    Unicode, i.e. characters that would be spelled as two\n    separate code units on a narrow platform, but that do not form a pair.\n    \"\"\"\n    last_was_start = False\n    unicode_uses_surrogate_encoding = sys.maxunicode == 65535\n    for c in map(ord, ustring):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "bytes_literal",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def bytes_literal(s, encoding):\n    assert isinstance(s, bytes)\n    s = BytesLiteral(s)\n    s.encoding = encoding\n    return s\ndef encoded_string(s, encoding):\n    assert isinstance(s, (_unicode, bytes))\n    s = EncodedString(s)\n    if encoding is not None:\n        s.encoding = encoding",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "encoded_string",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def encoded_string(s, encoding):\n    assert isinstance(s, (_unicode, bytes))\n    s = EncodedString(s)\n    if encoding is not None:\n        s.encoding = encoding\n    return s\nchar_from_escape_sequence = {\n    r'\\a' : u'\\a',\n    r'\\b' : u'\\b',\n    r'\\f' : u'\\f',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "escape_char",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def escape_char(c):\n    if IS_PYTHON3:\n        c = c.decode('ISO-8859-1')\n    if c in '\\n\\r\\t\\\\':\n        return repr(c)[1:-1]\n    elif c == \"'\":\n        return \"\\\\'\"\n    n = ord(c)\n    if n < 32 or n > 127:\n        # hex works well for characters",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "escape_byte_string",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def escape_byte_string(s):\n    \"\"\"Escape a byte string so that it can be written into C code.\n    Note that this returns a Unicode string instead which, when\n    encoded as ISO-8859-1, will result in the correct byte sequence\n    being written.\n    \"\"\"\n    s = _replace_specials(s)\n    try:\n        return s.decode(\"ASCII\") # trial decoding: plain ASCII => done\n    except UnicodeDecodeError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "split_string_literal",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def split_string_literal(s, limit=2000):\n    # MSVC can't handle long string literals.\n    if len(s) < limit:\n        return s\n    else:\n        start = 0\n        chunks = []\n        while start < len(s):\n            end = start + limit\n            if len(s) > end-4 and '\\\\' in s[end-4:end]:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "encode_pyunicode_string",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def encode_pyunicode_string(s):\n    \"\"\"Create Py_UNICODE[] representation of a given unicode string.\n    \"\"\"\n    s = list(map(ord, s)) + [0]\n    if sys.maxunicode >= 0x10000:  # Wide build or Py3.3\n        utf16, utf32 = [], s\n        for code_point in s:\n            if code_point >= 0x10000:  # outside of BMP\n                high, low = divmod(code_point - 0x10000, 1024)\n                utf16.append(high + 0xD800)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "empty_bytes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "empty_bytes = _bytes()\nempty_unicode = _unicode()\njoin_bytes = empty_bytes.join\nclass UnicodeLiteralBuilder(object):\n    \"\"\"Assemble a unicode string.\n    \"\"\"\n    def __init__(self):\n        self.chars = []\n    def append(self, characters):\n        if isinstance(characters, _bytes):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "empty_unicode",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "empty_unicode = _unicode()\njoin_bytes = empty_bytes.join\nclass UnicodeLiteralBuilder(object):\n    \"\"\"Assemble a unicode string.\n    \"\"\"\n    def __init__(self):\n        self.chars = []\n    def append(self, characters):\n        if isinstance(characters, _bytes):\n            # this came from a Py2 string literal in the parser code",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "join_bytes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "join_bytes = empty_bytes.join\nclass UnicodeLiteralBuilder(object):\n    \"\"\"Assemble a unicode string.\n    \"\"\"\n    def __init__(self):\n        self.chars = []\n    def append(self, characters):\n        if isinstance(characters, _bytes):\n            # this came from a Py2 string literal in the parser code\n            characters = characters.decode(\"ASCII\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "char_from_escape_sequence",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "char_from_escape_sequence = {\n    r'\\a' : u'\\a',\n    r'\\b' : u'\\b',\n    r'\\f' : u'\\f',\n    r'\\n' : u'\\n',\n    r'\\r' : u'\\r',\n    r'\\t' : u'\\t',\n    r'\\v' : u'\\v',\n    }.get\n_c_special = ('\\\\', '??', '\"') + tuple(map(chr, range(32)))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "_c_special",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "_c_special = ('\\\\', '??', '\"') + tuple(map(chr, range(32)))\ndef _to_escape_sequence(s):\n    if s in '\\n\\r\\t':\n        return repr(s)[1:-1]\n    elif s == '\"':\n        return r'\\\"'\n    elif s == '\\\\':\n        return r'\\\\'\n    else:\n        # within a character sequence, oct passes much better than hex",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "_replace_specials",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "_replace_specials = _build_specials_replacer()\ndef escape_char(c):\n    if IS_PYTHON3:\n        c = c.decode('ISO-8859-1')\n    if c in '\\n\\r\\t\\\\':\n        return repr(c)[1:-1]\n    elif c == \"'\":\n        return \"\\\\'\"\n    n = ord(c)\n    if n < 32 or n > 127:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "BufferAux",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class BufferAux(object):\n    writable_needed = False\n    def __init__(self, buflocal_nd_var, rcbuf_var):\n        self.buflocal_nd_var = buflocal_nd_var\n        self.rcbuf_var = rcbuf_var\n    def __repr__(self):\n        return \"<BufferAux %r>\" % self.__dict__\nclass Entry(object):\n    # A symbol table entry in a Scope or ModuleNamespace.\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "Entry",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class Entry(object):\n    # A symbol table entry in a Scope or ModuleNamespace.\n    #\n    # name             string     Python name of entity\n    # cname            string     C name of entity\n    # type             PyrexType  Type of entity\n    # doc              string     Doc string\n    # annotation       ExprNode   PEP 484/526 annotation\n    # init             string     Initial value\n    # visibility       'private' or 'public' or 'extern'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "InnerEntry",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class InnerEntry(Entry):\n    \"\"\"\n    An entry in a closure scope that represents the real outer Entry.\n    \"\"\"\n    from_closure = True\n    def __init__(self, outer_entry, scope):\n        Entry.__init__(self, outer_entry.name,\n                       outer_entry.cname,\n                       outer_entry.type,\n                       outer_entry.pos)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "Scope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class Scope(object):\n    # name              string             Unqualified name\n    # outer_scope       Scope or None      Enclosing scope\n    # entries           {string : Entry}   Python name to entry, non-types\n    # const_entries     [Entry]            Constant entries\n    # type_entries      [Entry]            Struct/union/enum/typedef/exttype entries\n    # sue_entries       [Entry]            Struct/union/enum entries\n    # arg_entries       [Entry]            Function argument entries\n    # var_entries       [Entry]            User-defined variable entries\n    # pyfunc_entries    [Entry]            Python function entries",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "PreImportScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class PreImportScope(Scope):\n    namespace_cname = Naming.preimport_cname\n    def __init__(self):\n        Scope.__init__(self, Options.pre_import, None, None)\n    def declare_builtin(self, name, pos):\n        entry = self.declare(name, name, py_object_type, pos, 'private')\n        entry.is_variable = True\n        entry.is_pyglobal = True\n        return entry\nclass BuiltinScope(Scope):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "BuiltinScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class BuiltinScope(Scope):\n    #  The builtin namespace.\n    is_builtin_scope = True\n    def __init__(self):\n        if Options.pre_import is None:\n            Scope.__init__(self, \"__builtin__\", None, None)\n        else:\n            Scope.__init__(self, \"__builtin__\", PreImportScope(), None)\n        self.type_names = {}\n        for name, definition in sorted(self.builtin_entries.items()):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "ModuleScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class ModuleScope(Scope):\n    # module_name          string             Python name of the module\n    # module_cname         string             C name of Python module object\n    # #module_dict_cname   string             C name of module dict object\n    # method_table_cname   string             C name of method table\n    # doc                  string             Module doc string\n    # doc_cname            string             C name of module doc string\n    # utility_code_list    [UtilityCode]      Queuing utility codes for forwarding to Code.py\n    # c_includes           {key: IncludeCode} C headers or verbatim code to be generated\n    #                                         See process_include() for more documentation",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "LocalScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class LocalScope(Scope):\n    # Does the function have a 'with gil:' block?\n    has_with_gil_block = False\n    # Transient attribute, used for symbol table variable declarations\n    _in_with_gil_block = False\n    def __init__(self, name, outer_scope, parent_scope = None):\n        if parent_scope is None:\n            parent_scope = outer_scope\n        Scope.__init__(self, name, outer_scope, parent_scope)\n    def mangle(self, prefix, name):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "GeneratorExpressionScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class GeneratorExpressionScope(Scope):\n    \"\"\"Scope for generator expressions and comprehensions.  As opposed\n    to generators, these can be easily inlined in some cases, so all\n    we really need is a scope that holds the loop variable(s).\n    \"\"\"\n    is_genexpr_scope = True\n    def __init__(self, outer_scope):\n        parent_scope = outer_scope\n        # TODO: also ignore class scopes?\n        while parent_scope.is_genexpr_scope:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "ClosureScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class ClosureScope(LocalScope):\n    is_closure_scope = True\n    def __init__(self, name, scope_name, outer_scope, parent_scope=None):\n        LocalScope.__init__(self, name, outer_scope, parent_scope)\n        self.closure_cname = \"%s%s\" % (Naming.closure_scope_prefix, scope_name)\n#    def mangle_closure_cnames(self, scope_var):\n#        for entry in self.entries.values() + self.temp_entries:\n#            entry.in_closure = 1\n#        LocalScope.mangle_closure_cnames(self, scope_var)\n#    def mangle(self, prefix, name):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "StructOrUnionScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class StructOrUnionScope(Scope):\n    #  Namespace of a C struct or union.\n    def __init__(self, name=\"?\"):\n        Scope.__init__(self, name, None, None)\n    def declare_var(self, name, type, pos,\n                    cname = None, visibility = 'private',\n                    api = 0, in_pxd = 0, is_cdef = 0,\n                    allow_pyobject=False, allow_memoryview=False):\n        # Add an entry for an attribute.\n        if not cname:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "ClassScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class ClassScope(Scope):\n    #  Abstract base class for namespace of\n    #  Python class or extension type.\n    #\n    #  class_name     string   Python name of the class\n    #  scope_prefix   string   Additional prefix for names\n    #                          declared in the class\n    #  doc    string or None   Doc string\n    def __init__(self, name, outer_scope):\n        Scope.__init__(self, name, outer_scope, outer_scope)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "PyClassScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class PyClassScope(ClassScope):\n    #  Namespace of a Python class.\n    #\n    #  class_obj_cname     string   C variable holding class object\n    is_py_class_scope = 1\n    def mangle_class_private_name(self, name):\n        return self.mangle_special_name(name)\n    def mangle_special_name(self, name):\n        if name and name.startswith('__') and not name.endswith('__'):\n            name = EncodedString('_%s%s' % (self.class_name.lstrip('_'), name))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "CClassScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class CClassScope(ClassScope):\n    #  Namespace of an extension type.\n    #\n    #  parent_type           CClassType\n    #  #typeobj_cname        string or None\n    #  #objstruct_cname      string\n    #  method_table_cname    string\n    #  getset_table_cname    string\n    #  has_pyobject_attrs    boolean  Any PyObject attributes?\n    #  has_memoryview_attrs  boolean  Any memory view attributes?",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "CppClassScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class CppClassScope(Scope):\n    #  Namespace of a C++ class.\n    is_cpp_class_scope = 1\n    default_constructor = None\n    type = None\n    def __init__(self, name, outer_scope, templates=None):\n        Scope.__init__(self, name, outer_scope, None)\n        self.directives = outer_scope.directives\n        self.inherited_var_entries = []\n        if templates is not None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "PropertyScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class PropertyScope(Scope):\n    #  Scope holding the __get__, __set__ and __del__ methods for\n    #  a property of an extension type.\n    #\n    #  parent_type   PyExtensionType   The type to which the property belongs\n    is_property_scope = 1\n    def declare_pyfunction(self, name, pos, allow_redefine=False):\n        # Add an entry for a method.\n        signature = get_property_accessor_signature(name)\n        if signature:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "CConstScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class CConstScope(Scope):\n    def __init__(self, const_base_type_scope):\n        Scope.__init__(\n            self,\n            'const_' + const_base_type_scope.name,\n            const_base_type_scope.outer_scope,\n            const_base_type_scope.parent_scope)\n        self.const_base_type_scope = const_base_type_scope\n    def lookup_here(self, name):\n        entry = self.const_base_type_scope.lookup_here(name)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "TemplateScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class TemplateScope(Scope):\n    def __init__(self, name, outer_scope):\n        Scope.__init__(self, name, outer_scope, None)\n        self.directives = outer_scope.directives",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "c_safe_identifier",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "def c_safe_identifier(cname):\n    # There are some C limitations on struct entry names.\n    if ((cname[:2] == '__' and not (cname.startswith(Naming.pyrex_prefix)\n                                    or cname in ('__weakref__', '__dict__')))\n            or cname in iso_c99_keywords):\n        cname = Naming.pyrex_prefix + cname\n    return cname\nclass BufferAux(object):\n    writable_needed = False\n    def __init__(self, buflocal_nd_var, rcbuf_var):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "iso_c99_keywords",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "iso_c99_keywords = set(\n['auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do',\n    'double', 'else', 'enum', 'extern', 'float', 'for', 'goto', 'if',\n    'int', 'long', 'register', 'return', 'short', 'signed', 'sizeof',\n    'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void',\n    'volatile', 'while',\n    '_Bool', '_Complex'', _Imaginary', 'inline', 'restrict'])\ndef c_safe_identifier(cname):\n    # There are some C limitations on struct entry names.\n    if ((cname[:2] == '__' and not (cname.startswith(Naming.pyrex_prefix)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "const_counter",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "peekOfCode": "const_counter = 1 # As a temporary solution for compiling code in pxds\nclass ModuleScope(Scope):\n    # module_name          string             Python name of the module\n    # module_cname         string             C name of Python module object\n    # #module_dict_cname   string             C name of module dict object\n    # method_table_cname   string             C name of method table\n    # doc                  string             Module doc string\n    # doc_cname            string             C name of module doc string\n    # utility_code_list    [UtilityCode]      Queuing utility codes for forwarding to Code.py\n    # c_includes           {key: IncludeCode} C headers or verbatim code to be generated",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "StringParseContext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "class StringParseContext(Main.Context):\n    def __init__(self, name, include_directories=None, compiler_directives=None, cpp=False):\n        if include_directories is None:\n            include_directories = []\n        if compiler_directives is None:\n            compiler_directives = {}\n        # TODO: see if \"language_level=3\" also works for our internal code here.\n        Main.Context.__init__(self, include_directories, compiler_directives, cpp=cpp, language_level=2)\n        self.module_name = name\n    def find_module(self, module_name, relative_to=None, pos=None, need_pxd=1, absolute_fallback=True):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "TreeCopier",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "class TreeCopier(VisitorTransform):\n    def visit_Node(self, node):\n        if node is None:\n            return node\n        else:\n            c = node.clone_node()\n            self.visitchildren(c)\n            return c\nclass ApplyPositionAndCopy(TreeCopier):\n    def __init__(self, pos):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "ApplyPositionAndCopy",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "class ApplyPositionAndCopy(TreeCopier):\n    def __init__(self, pos):\n        super(ApplyPositionAndCopy, self).__init__()\n        self.pos = pos\n    def visit_Node(self, node):\n        copy = super(ApplyPositionAndCopy, self).visit_Node(node)\n        copy.pos = self.pos\n        return copy\nclass TemplateTransform(VisitorTransform):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "TemplateTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "class TemplateTransform(VisitorTransform):\n    \"\"\"\n    Makes a copy of a template tree while doing substitutions.\n    A dictionary \"substitutions\" should be passed in when calling\n    the transform; mapping names to replacement nodes. Then replacement\n    happens like this:\n     - If an ExprStatNode contains a single NameNode, whose name is\n       a key in the substitutions dictionary, the ExprStatNode is\n       replaced with a copy of the tree given in the dictionary.\n       It is the responsibility of the caller that the replacement",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "TreeFragment",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "class TreeFragment(object):\n    def __init__(self, code, name=None, pxds=None, temps=None, pipeline=None, level=None, initial_pos=None):\n        if pxds is None:\n            pxds = {}\n        if temps is None:\n            temps = []\n        if pipeline is None:\n            pipeline = []\n        if not name:\n            name = \"(tree fragment)\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "SetPosTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "class SetPosTransform(VisitorTransform):\n    def __init__(self, pos):\n        super(SetPosTransform, self).__init__()\n        self.pos = pos\n    def visit_Node(self, node):\n        node.pos = self.pos\n        self.visitchildren(node)\n        return node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "parse_from_strings",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "def parse_from_strings(name, code, pxds=None, level=None, initial_pos=None,\n                       context=None, allow_struct_enum_decorator=False):\n    \"\"\"\n    Utility method to parse a (unicode) string of code. This is mostly\n    used for internal Cython compiler purposes (creating code snippets\n    that transforms should emit, as well as unit testing).\n    code - a unicode string containing Cython (module-level) code\n    name - a descriptive name for the code source (to use in error messages etc.)\n    RETURNS\n    The tree, i.e. a ModuleNode. The ModuleNode's scope attribute is",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "copy_code_tree",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "def copy_code_tree(node):\n    return TreeCopier()(node)\n_match_indent = re.compile(u\"^ *\").match\ndef strip_common_indent(lines):\n    \"\"\"Strips empty lines and common indentation from the list of strings given in lines\"\"\"\n    # TODO: Facilitate textwrap.indent instead\n    lines = [x for x in lines if x.strip() != u\"\"]\n    if lines:\n        minindent = min([len(_match_indent(x).group(0)) for x in lines])\n        lines = [x[minindent:] for x in lines]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "strip_common_indent",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "def strip_common_indent(lines):\n    \"\"\"Strips empty lines and common indentation from the list of strings given in lines\"\"\"\n    # TODO: Facilitate textwrap.indent instead\n    lines = [x for x in lines if x.strip() != u\"\"]\n    if lines:\n        minindent = min([len(_match_indent(x).group(0)) for x in lines])\n        lines = [x[minindent:] for x in lines]\n    return lines\nclass TreeFragment(object):\n    def __init__(self, code, name=None, pxds=None, temps=None, pipeline=None, level=None, initial_pos=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "_match_indent",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "_match_indent = re.compile(u\"^ *\").match\ndef strip_common_indent(lines):\n    \"\"\"Strips empty lines and common indentation from the list of strings given in lines\"\"\"\n    # TODO: Facilitate textwrap.indent instead\n    lines = [x for x in lines if x.strip() != u\"\"]\n    if lines:\n        minindent = min([len(_match_indent(x).group(0)) for x in lines])\n        lines = [x[minindent:] for x in lines]\n    return lines\nclass TreeFragment(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "iterchildren",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def iterchildren(node, attr_name):\n    # returns an iterable of all child nodes of that name\n    child = getattr(node, attr_name)\n    if child is not None:\n        if type(child) is list:\n            return child\n        else:\n            return [child]\n    else:\n        return ()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "type_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def type_name(node):\n    return node.__class__.__name__.split('.')[-1]\ndef parse_func(next, token):\n    name = token[1]\n    token = next()\n    if token[0] != '(':\n        raise ValueError(\"Expected '(' after function name '%s'\" % name)\n    predicate = handle_predicate(next, token)\n    return name, predicate\ndef handle_func_not(next, token):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "parse_func",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def parse_func(next, token):\n    name = token[1]\n    token = next()\n    if token[0] != '(':\n        raise ValueError(\"Expected '(' after function name '%s'\" % name)\n    predicate = handle_predicate(next, token)\n    return name, predicate\ndef handle_func_not(next, token):\n    \"\"\"\n    not(...)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "handle_func_not",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def handle_func_not(next, token):\n    \"\"\"\n    not(...)\n    \"\"\"\n    name, predicate = parse_func(next, token)\n    def select(result):\n        for node in result:\n            if _get_first_or_none(predicate([node])) is None:\n                yield node\n    return select",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "handle_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def handle_name(next, token):\n    \"\"\"\n    /NodeName/\n    or\n    func(...)\n    \"\"\"\n    name = token[1]\n    if name in functions:\n        return functions[name](next, token)\n    def select(result):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "handle_star",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def handle_star(next, token):\n    \"\"\"\n    /*/\n    \"\"\"\n    def select(result):\n        for node in result:\n            for name in node.child_attrs:\n                for child in iterchildren(node, name):\n                    yield child\n    return select",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "handle_dot",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def handle_dot(next, token):\n    \"\"\"\n    /./\n    \"\"\"\n    def select(result):\n        return result\n    return select\ndef handle_descendants(next, token):\n    \"\"\"\n    //...",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "handle_descendants",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def handle_descendants(next, token):\n    \"\"\"\n    //...\n    \"\"\"\n    token = next()\n    if token[0] == \"*\":\n        def iter_recursive(node):\n            for name in node.child_attrs:\n                for child in iterchildren(node, name):\n                    yield child",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "handle_attribute",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def handle_attribute(next, token):\n    token = next()\n    if token[0]:\n        raise ValueError(\"Expected attribute name\")\n    name = token[1]\n    value = None\n    try:\n        token = next()\n    except StopIteration:\n        pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "parse_path_value",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def parse_path_value(next):\n    token = next()\n    value = token[0]\n    if value:\n        if value[:1] == \"'\" or value[:1] == '\"':\n            return value[1:-1]\n        try:\n            return int(value)\n        except ValueError:\n            pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "handle_predicate",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def handle_predicate(next, token):\n    token = next()\n    selector = []\n    while token[0] != ']':\n        selector.append( operations[token[0]](next, token) )\n        try:\n            token = next()\n        except StopIteration:\n            break\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "logical_and",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def logical_and(lhs_selects, rhs_select):\n    def select(result):\n        for node in result:\n            subresult = iter((node,))\n            for select in lhs_selects:\n                subresult = select(subresult)\n            predicate_result = _get_first_or_none(subresult)\n            subresult = iter((node,))\n            if predicate_result is not None:\n                for result_node in rhs_select(subresult):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "iterfind",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def iterfind(node, path):\n    selector_chain = _build_path_iterator(path)\n    result = iter((node,))\n    for select in selector_chain:\n        result = select(result)\n    return result\ndef find_first(node, path):\n    return _get_first_or_none(iterfind(node, path))\ndef find_all(node, path):\n    return list(iterfind(node, path))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "find_first",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def find_first(node, path):\n    return _get_first_or_none(iterfind(node, path))\ndef find_all(node, path):\n    return list(iterfind(node, path))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "find_all",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def find_all(node, path):\n    return list(iterfind(node, path))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "path_tokenizer",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "path_tokenizer = re.compile(\n    r\"(\"\n    r\"'[^']*'|\\\"[^\\\"]*\\\"|\"\n    r\"//?|\"\n    r\"\\(\\)|\"\n    r\"==?|\"\n    r\"[/.*\\[\\]()@])|\"\n    r\"([^/\\[\\]()@=\\s]+)|\"\n    r\"\\s+\"\n    ).findall",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "operations",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "operations = {\n    \"@\":  handle_attribute,\n    \"\":   handle_name,\n    \"*\":  handle_star,\n    \".\":  handle_dot,\n    \"//\": handle_descendants,\n    \"[\":  handle_predicate,\n    }\nfunctions = {\n    'not' : handle_func_not",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "functions",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "peekOfCode": "functions = {\n    'not' : handle_func_not\n    }\ndef _build_path_iterator(path):\n    # parse pattern\n    stream = iter([ (special,text)\n                    for (special,text) in path_tokenizer(path)\n                    if special or text ])\n    try:\n        _next = stream.next",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "TypedExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "class TypedExprNode(ExprNodes.ExprNode):\n    # Used for declaring assignments of a specified type without a known entry.\n    subexprs = []\n    def __init__(self, type, pos=None):\n        super(TypedExprNode, self).__init__(pos, type=type)\nobject_expr = TypedExprNode(py_object_type)\nclass MarkParallelAssignments(EnvTransform):\n    # Collects assignments inside parallel blocks prange, with parallel.\n    # Perhaps it's better to move it to ControlFlowAnalysis.\n    # tells us whether we're in a normal loop",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "MarkParallelAssignments",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "class MarkParallelAssignments(EnvTransform):\n    # Collects assignments inside parallel blocks prange, with parallel.\n    # Perhaps it's better to move it to ControlFlowAnalysis.\n    # tells us whether we're in a normal loop\n    in_loop = False\n    parallel_errors = False\n    def __init__(self, context):\n        # Track the parallel block scopes (with parallel, for i in prange())\n        self.parallel_block_stack = []\n        super(MarkParallelAssignments, self).__init__(context)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "MarkOverflowingArithmetic",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "class MarkOverflowingArithmetic(CythonTransform):\n    # It may be possible to integrate this with the above for\n    # performance improvements (though likely not worth it).\n    might_overflow = False\n    def __call__(self, root):\n        self.env_stack = []\n        self.env = root.scope\n        return super(MarkOverflowingArithmetic, self).__call__(root)\n    def visit_safe_node(self, node):\n        self.might_overflow, saved = False, self.might_overflow",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "PyObjectTypeInferer",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "class PyObjectTypeInferer(object):\n    \"\"\"\n    If it's not declared, it's a PyObject.\n    \"\"\"\n    def infer_types(self, scope):\n        \"\"\"\n        Given a dict of entries, map all unspecified types to a specified type.\n        \"\"\"\n        for name, entry in scope.entries.items():\n            if entry.type is unspecified_type:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "SimpleAssignmentTypeInferer",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "class SimpleAssignmentTypeInferer(object):\n    \"\"\"\n    Very basic type inference.\n    Note: in order to support cross-closure type inference, this must be\n    applies to nested scopes in top-down order.\n    \"\"\"\n    def set_entry_type(self, entry, entry_type):\n        entry.type = entry_type\n        for e in entry.all_entries():\n            e.type = entry_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "find_spanning_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "def find_spanning_type(type1, type2):\n    if type1 is type2:\n        result_type = type1\n    elif type1 is PyrexTypes.c_bint_type or type2 is PyrexTypes.c_bint_type:\n        # type inference can break the coercion back to a Python bool\n        # if it returns an arbitrary int type here\n        return py_object_type\n    else:\n        result_type = PyrexTypes.spanning_type(type1, type2)\n    if result_type in (PyrexTypes.c_double_type, PyrexTypes.c_float_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "simply_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "def simply_type(result_type, pos):\n    if result_type.is_reference:\n        result_type = result_type.ref_base_type\n    if result_type.is_const:\n        result_type = result_type.const_base_type\n    if result_type.is_cpp_class:\n        result_type.check_nullary_constructor(pos)\n    if result_type.is_array:\n        result_type = PyrexTypes.c_ptr_type(result_type.base_type)\n    return result_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "aggressive_spanning_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "def aggressive_spanning_type(types, might_overflow, pos, scope):\n    return simply_type(reduce(find_spanning_type, types), pos)\ndef safe_spanning_type(types, might_overflow, pos, scope):\n    result_type = simply_type(reduce(find_spanning_type, types), pos)\n    if result_type.is_pyobject:\n        # In theory, any specific Python type is always safe to\n        # infer. However, inferring str can cause some existing code\n        # to break, since we are also now much more strict about\n        # coercion from str to char *. See trac #553.\n        if result_type.name == 'str':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "safe_spanning_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "def safe_spanning_type(types, might_overflow, pos, scope):\n    result_type = simply_type(reduce(find_spanning_type, types), pos)\n    if result_type.is_pyobject:\n        # In theory, any specific Python type is always safe to\n        # infer. However, inferring str can cause some existing code\n        # to break, since we are also now much more strict about\n        # coercion from str to char *. See trac #553.\n        if result_type.name == 'str':\n            return py_object_type\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "get_type_inferer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "def get_type_inferer():\n    return SimpleAssignmentTypeInferer()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "object_expr",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "object_expr = TypedExprNode(py_object_type)\nclass MarkParallelAssignments(EnvTransform):\n    # Collects assignments inside parallel blocks prange, with parallel.\n    # Perhaps it's better to move it to ControlFlowAnalysis.\n    # tells us whether we're in a normal loop\n    in_loop = False\n    parallel_errors = False\n    def __init__(self, context):\n        # Track the parallel block scopes (with parallel, for i in prange())\n        self.parallel_block_stack = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "Signature",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class Signature(object):\n    #  Method slot signature descriptor.\n    #\n    #  has_dummy_arg      boolean\n    #  has_generic_args   boolean\n    #  fixed_arg_format   string\n    #  ret_format         string\n    #  error_value        string\n    #\n    #  The formats are strings made up of the following",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "SlotDescriptor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class SlotDescriptor(object):\n    #  Abstract base class for type slot descriptors.\n    #\n    #  slot_name    string           Member name of the slot in the type object\n    #  is_initialised_dynamically    Is initialised by code in the module init function\n    #  is_inherited                  Is inherited by subtypes (see PyType_Ready())\n    #  py3                           Indicates presence of slot in Python 3\n    #  py2                           Indicates presence of slot in Python 2\n    #  ifdef                         Full #ifdef string that slot is wrapped in. Using this causes py3, py2 and flags to be ignored.)\n    def __init__(self, slot_name, dynamic=False, inherited=False,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "FixedSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class FixedSlot(SlotDescriptor):\n    #  Descriptor for a type slot with a fixed value.\n    #\n    #  value        string\n    def __init__(self, slot_name, value, py3=True, py2=True, ifdef=None):\n        SlotDescriptor.__init__(self, slot_name, py3=py3, py2=py2, ifdef=ifdef)\n        self.value = value\n    def slot_code(self, scope):\n        return self.value\nclass EmptySlot(FixedSlot):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "EmptySlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class EmptySlot(FixedSlot):\n    #  Descriptor for a type slot whose value is always 0.\n    def __init__(self, slot_name, py3=True, py2=True, ifdef=None):\n        FixedSlot.__init__(self, slot_name, \"0\", py3=py3, py2=py2, ifdef=ifdef)\nclass MethodSlot(SlotDescriptor):\n    #  Type slot descriptor for a user-definable method.\n    #\n    #  signature    Signature\n    #  method_name  string           The __xxx__ name of the method\n    #  alternatives [string]         Alternative list of __xxx__ names for the method",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "MethodSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class MethodSlot(SlotDescriptor):\n    #  Type slot descriptor for a user-definable method.\n    #\n    #  signature    Signature\n    #  method_name  string           The __xxx__ name of the method\n    #  alternatives [string]         Alternative list of __xxx__ names for the method\n    def __init__(self, signature, slot_name, method_name, fallback=None,\n                 py3=True, py2=True, ifdef=None, inherited=True):\n        SlotDescriptor.__init__(self, slot_name, py3=py3, py2=py2,\n                                ifdef=ifdef, inherited=inherited)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "InternalMethodSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class InternalMethodSlot(SlotDescriptor):\n    #  Type slot descriptor for a method which is always\n    #  synthesized by Cython.\n    #\n    #  slot_name    string           Member name of the slot in the type object\n    def __init__(self, slot_name, **kargs):\n        SlotDescriptor.__init__(self, slot_name, **kargs)\n    def slot_code(self, scope):\n        return scope.mangle_internal(self.slot_name)\nclass GCDependentSlot(InternalMethodSlot):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "GCDependentSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class GCDependentSlot(InternalMethodSlot):\n    #  Descriptor for a slot whose value depends on whether\n    #  the type participates in GC.\n    def __init__(self, slot_name, **kargs):\n        InternalMethodSlot.__init__(self, slot_name, **kargs)\n    def slot_code(self, scope):\n        if not scope.needs_gc():\n            return \"0\"\n        if not scope.has_cyclic_pyobject_attrs:\n            # if the type does not have GC relevant object attributes, it can",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "GCClearReferencesSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class GCClearReferencesSlot(GCDependentSlot):\n    def slot_code(self, scope):\n        if scope.needs_tp_clear():\n            return GCDependentSlot.slot_code(self, scope)\n        return \"0\"\nclass ConstructorSlot(InternalMethodSlot):\n    #  Descriptor for tp_new and tp_dealloc.\n    def __init__(self, slot_name, method, **kargs):\n        InternalMethodSlot.__init__(self, slot_name, **kargs)\n        self.method = method",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ConstructorSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class ConstructorSlot(InternalMethodSlot):\n    #  Descriptor for tp_new and tp_dealloc.\n    def __init__(self, slot_name, method, **kargs):\n        InternalMethodSlot.__init__(self, slot_name, **kargs)\n        self.method = method\n    def slot_code(self, scope):\n        entry = scope.lookup_here(self.method)\n        if (self.slot_name != 'tp_new'\n                and scope.parent_type.base_type\n                and not scope.has_pyobject_attrs",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "SyntheticSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class SyntheticSlot(InternalMethodSlot):\n    #  Type slot descriptor for a synthesized method which\n    #  dispatches to one or more user-defined methods depending\n    #  on its arguments. If none of the relevant methods are\n    #  defined, the method will not be synthesized and an\n    #  alternative default value will be placed in the type\n    #  slot.\n    def __init__(self, slot_name, user_methods, default_value, **kargs):\n        InternalMethodSlot.__init__(self, slot_name, **kargs)\n        self.user_methods = user_methods",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "RichcmpSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class RichcmpSlot(MethodSlot):\n    def slot_code(self, scope):\n        entry = scope.lookup_here(self.method_name)\n        if entry and entry.is_special and entry.func_cname:\n            return entry.func_cname\n        elif scope.defines_any_special(richcmp_special_methods):\n            return scope.mangle_internal(self.slot_name)\n        else:\n            return \"0\"\nclass TypeFlagsSlot(SlotDescriptor):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "TypeFlagsSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class TypeFlagsSlot(SlotDescriptor):\n    #  Descriptor for the type flags slot.\n    def slot_code(self, scope):\n        value = \"Py_TPFLAGS_DEFAULT\"\n        if scope.directives['type_version_tag']:\n            # it's not in 'Py_TPFLAGS_DEFAULT' in Py2\n            value += \"|Py_TPFLAGS_HAVE_VERSION_TAG\"\n        else:\n            # it's enabled in 'Py_TPFLAGS_DEFAULT' in Py3\n            value = \"(%s&~Py_TPFLAGS_HAVE_VERSION_TAG)\" % value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "DocStringSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class DocStringSlot(SlotDescriptor):\n    #  Descriptor for the docstring slot.\n    def slot_code(self, scope):\n        doc = scope.doc\n        if doc is None:\n            return \"0\"\n        if doc.is_unicode:\n            doc = doc.as_utf8_string()\n        return doc.as_c_string_literal()\nclass SuiteSlot(SlotDescriptor):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "SuiteSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class SuiteSlot(SlotDescriptor):\n    #  Descriptor for a substructure of the type object.\n    #\n    #  sub_slots   [SlotDescriptor]\n    def __init__(self, sub_slots, slot_type, slot_name, ifdef=None):\n        SlotDescriptor.__init__(self, slot_name, ifdef=ifdef)\n        self.sub_slots = sub_slots\n        self.slot_type = slot_type\n        substructures.append(self)\n    def is_empty(self, scope):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "MethodTableSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class MethodTableSlot(SlotDescriptor):\n    #  Slot descriptor for the method table.\n    def slot_code(self, scope):\n        if scope.pyfunc_entries:\n            return scope.method_table_cname\n        else:\n            return \"0\"\nclass MemberTableSlot(SlotDescriptor):\n    #  Slot descriptor for the table of Python-accessible attributes.\n    def slot_code(self, scope):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "MemberTableSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class MemberTableSlot(SlotDescriptor):\n    #  Slot descriptor for the table of Python-accessible attributes.\n    def slot_code(self, scope):\n        return \"0\"\nclass GetSetSlot(SlotDescriptor):\n    #  Slot descriptor for the table of attribute get & set methods.\n    def slot_code(self, scope):\n        if scope.property_entries:\n            return scope.getset_table_cname\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "GetSetSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class GetSetSlot(SlotDescriptor):\n    #  Slot descriptor for the table of attribute get & set methods.\n    def slot_code(self, scope):\n        if scope.property_entries:\n            return scope.getset_table_cname\n        else:\n            return \"0\"\nclass BaseClassSlot(SlotDescriptor):\n    #  Slot descriptor for the base class slot.\n    def __init__(self, name):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "BaseClassSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class BaseClassSlot(SlotDescriptor):\n    #  Slot descriptor for the base class slot.\n    def __init__(self, name):\n        SlotDescriptor.__init__(self, name, dynamic = 1)\n    def generate_dynamic_init_code(self, scope, code):\n        base_type = scope.parent_type.base_type\n        if base_type:\n            code.putln(\"%s.%s = %s;\" % (\n                scope.parent_type.typeobj_cname,\n                self.slot_name,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "DictOffsetSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class DictOffsetSlot(SlotDescriptor):\n    #  Slot descriptor for a class' dict offset, for dynamic attributes.\n    def slot_code(self, scope):\n        dict_entry = scope.lookup_here(\"__dict__\") if not scope.is_closure_class_scope else None\n        if dict_entry and dict_entry.is_variable:\n            if getattr(dict_entry.type, 'cname', None) != 'PyDict_Type':\n                error(dict_entry.pos, \"__dict__ slot must be of type 'dict'\")\n                return \"0\"\n            type = scope.parent_type\n            if type.typedef_flag:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "get_special_method_signature",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "def get_special_method_signature(name):\n    #  Given a method name, if it is a special method,\n    #  return its signature, else return None.\n    slot = method_name_to_slot.get(name)\n    if slot:\n        return slot.signature\n    elif name in richcmp_special_methods:\n        return ibinaryfunc\n    else:\n        return None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "get_property_accessor_signature",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "def get_property_accessor_signature(name):\n    #  Return signature of accessor for an extension type\n    #  property, else None.\n    return property_accessor_signatures.get(name)\ndef get_base_slot_function(scope, slot):\n    #  Returns the function implementing this slot in the baseclass.\n    #  This is useful for enabling the compiler to optimize calls\n    #  that recursively climb the class hierarchy.\n    base_type = scope.parent_type.base_type\n    if scope.parent_scope is base_type.scope.parent_scope:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "get_base_slot_function",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "def get_base_slot_function(scope, slot):\n    #  Returns the function implementing this slot in the baseclass.\n    #  This is useful for enabling the compiler to optimize calls\n    #  that recursively climb the class hierarchy.\n    base_type = scope.parent_type.base_type\n    if scope.parent_scope is base_type.scope.parent_scope:\n        parent_slot = slot.slot_code(base_type.scope)\n        if parent_slot != '0':\n            entry = scope.parent_scope.lookup_here(scope.parent_type.base_type.name)\n            if entry.visibility != 'extern':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "get_slot_function",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "def get_slot_function(scope, slot):\n    #  Returns the function implementing this slot in the baseclass.\n    #  This is useful for enabling the compiler to optimize calls\n    #  that recursively climb the class hierarchy.\n    slot_code = slot.slot_code(scope)\n    if slot_code != '0':\n        entry = scope.parent_scope.lookup_here(scope.parent_type.name)\n        if entry.visibility != 'extern':\n            return slot_code\n    return None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "get_slot_by_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "def get_slot_by_name(slot_name):\n    # For now, only search the type struct, no referenced sub-structs.\n    for slot in slot_table:\n        if slot.slot_name == slot_name:\n            return slot\n    assert False, \"Slot not found: %s\" % slot_name\ndef get_slot_code_by_name(scope, slot_name):\n    slot = get_slot_by_name(slot_name)\n    return slot.slot_code(scope)\ndef is_reverse_number_slot(name):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "get_slot_code_by_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "def get_slot_code_by_name(scope, slot_name):\n    slot = get_slot_by_name(slot_name)\n    return slot.slot_code(scope)\ndef is_reverse_number_slot(name):\n    \"\"\"\n    Tries to identify __radd__ and friends (so the METH_COEXIST flag can be applied).\n    There's no great consequence if it inadvertently identifies a few other methods\n    so just use a simple rule rather than an exact list.\n    \"\"\"\n    if name.startswith(\"__r\") and name.endswith(\"__\"):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "is_reverse_number_slot",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "def is_reverse_number_slot(name):\n    \"\"\"\n    Tries to identify __radd__ and friends (so the METH_COEXIST flag can be applied).\n    There's no great consequence if it inadvertently identifies a few other methods\n    so just use a simple rule rather than an exact list.\n    \"\"\"\n    if name.startswith(\"__r\") and name.endswith(\"__\"):\n        forward_name = name.replace(\"r\", \"\", 1)\n        for meth in PyNumberMethods:\n            if getattr(meth, \"method_name\", None) == forward_name:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "invisible",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "invisible = ['__cinit__', '__dealloc__', '__richcmp__',\n             '__nonzero__', '__bool__']\nrichcmp_special_methods = ['__eq__', '__ne__', '__lt__', '__gt__', '__le__', '__ge__']\nclass Signature(object):\n    #  Method slot signature descriptor.\n    #\n    #  has_dummy_arg      boolean\n    #  has_generic_args   boolean\n    #  fixed_arg_format   string\n    #  ret_format         string",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "richcmp_special_methods",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "richcmp_special_methods = ['__eq__', '__ne__', '__lt__', '__gt__', '__le__', '__ge__']\nclass Signature(object):\n    #  Method slot signature descriptor.\n    #\n    #  has_dummy_arg      boolean\n    #  has_generic_args   boolean\n    #  fixed_arg_format   string\n    #  ret_format         string\n    #  error_value        string\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "substructures",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "substructures = []   # List of all SuiteSlot instances\nclass MethodTableSlot(SlotDescriptor):\n    #  Slot descriptor for the method table.\n    def slot_code(self, scope):\n        if scope.pyfunc_entries:\n            return scope.method_table_cname\n        else:\n            return \"0\"\nclass MemberTableSlot(SlotDescriptor):\n    #  Slot descriptor for the table of Python-accessible attributes.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "method_name_to_slot",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "method_name_to_slot = {}\n## The following slots are (or could be) initialised with an\n## extern function pointer.\n#\n#slots_initialised_from_extern = (\n#    \"tp_free\",\n#)\n#------------------------------------------------------------------------------------------\n#\n#  Utility functions for accessing slot table data structures",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "#slots_initialised_from_extern",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "#slots_initialised_from_extern = (\n#    \"tp_free\",\n#)\n#------------------------------------------------------------------------------------------\n#\n#  Utility functions for accessing slot table data structures\n#\n#------------------------------------------------------------------------------------------\ndef get_special_method_signature(name):\n    #  Given a method name, if it is a special method,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "pyfunction_signature",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "pyfunction_signature = Signature(\"-*\", \"O\")\npymethod_signature = Signature(\"T*\", \"O\")\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for simple Python functions.\n#\n#------------------------------------------------------------------------------------------\npyfunction_noargs = Signature(\"-\", \"O\")\npyfunction_onearg = Signature(\"-O\", \"O\")\n#------------------------------------------------------------------------------------------",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "pymethod_signature",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "pymethod_signature = Signature(\"T*\", \"O\")\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for simple Python functions.\n#\n#------------------------------------------------------------------------------------------\npyfunction_noargs = Signature(\"-\", \"O\")\npyfunction_onearg = Signature(\"-O\", \"O\")\n#------------------------------------------------------------------------------------------\n#",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "pyfunction_noargs",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "pyfunction_noargs = Signature(\"-\", \"O\")\npyfunction_onearg = Signature(\"-O\", \"O\")\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for the various kinds of function that\n#  can appear in the type object and its substructures.\n#\n#------------------------------------------------------------------------------------------\nunaryfunc = Signature(\"T\", \"O\")            # typedef PyObject * (*unaryfunc)(PyObject *);\nbinaryfunc = Signature(\"OO\", \"O\")          # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "pyfunction_onearg",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "pyfunction_onearg = Signature(\"-O\", \"O\")\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for the various kinds of function that\n#  can appear in the type object and its substructures.\n#\n#------------------------------------------------------------------------------------------\nunaryfunc = Signature(\"T\", \"O\")            # typedef PyObject * (*unaryfunc)(PyObject *);\nbinaryfunc = Signature(\"OO\", \"O\")          # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\nibinaryfunc = Signature(\"TO\", \"O\")         # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "unaryfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "unaryfunc = Signature(\"T\", \"O\")            # typedef PyObject * (*unaryfunc)(PyObject *);\nbinaryfunc = Signature(\"OO\", \"O\")          # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\nibinaryfunc = Signature(\"TO\", \"O\")         # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\nternaryfunc = Signature(\"OOO\", \"O\")        # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\niternaryfunc = Signature(\"TOO\", \"O\")       # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ncallfunc = Signature(\"T*\", \"O\")            # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ninquiry = Signature(\"T\", \"i\")              # typedef int (*inquiry)(PyObject *);\nlenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "binaryfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "binaryfunc = Signature(\"OO\", \"O\")          # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\nibinaryfunc = Signature(\"TO\", \"O\")         # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\nternaryfunc = Signature(\"OOO\", \"O\")        # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\niternaryfunc = Signature(\"TOO\", \"O\")       # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ncallfunc = Signature(\"T*\", \"O\")            # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ninquiry = Signature(\"T\", \"i\")              # typedef int (*inquiry)(PyObject *);\nlenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ibinaryfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "ibinaryfunc = Signature(\"TO\", \"O\")         # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\nternaryfunc = Signature(\"OOO\", \"O\")        # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\niternaryfunc = Signature(\"TOO\", \"O\")       # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ncallfunc = Signature(\"T*\", \"O\")            # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ninquiry = Signature(\"T\", \"i\")              # typedef int (*inquiry)(PyObject *);\nlenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ternaryfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "ternaryfunc = Signature(\"OOO\", \"O\")        # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\niternaryfunc = Signature(\"TOO\", \"O\")       # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ncallfunc = Signature(\"T*\", \"O\")            # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ninquiry = Signature(\"T\", \"i\")              # typedef int (*inquiry)(PyObject *);\nlenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "iternaryfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "iternaryfunc = Signature(\"TOO\", \"O\")       # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ncallfunc = Signature(\"T*\", \"O\")            # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ninquiry = Signature(\"T\", \"i\")              # typedef int (*inquiry)(PyObject *);\nlenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "callfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "callfunc = Signature(\"T*\", \"O\")            # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ninquiry = Signature(\"T\", \"i\")              # typedef int (*inquiry)(PyObject *);\nlenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "inquiry",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "inquiry = Signature(\"T\", \"i\")              # typedef int (*inquiry)(PyObject *);\nlenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "lenfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "lenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "intargfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "intargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ssizeargfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "ssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "intintargfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "intintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ssizessizeargfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "ssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "intobjargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "intobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ssizeobjargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "ssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "intintobjargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "intintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ssizessizeobjargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "ssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "intintargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "intintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ssizessizeargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "ssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "objargfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "objargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);\ndestructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "objobjargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "objobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);\ndestructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);\n# printfunc = Signature(\"TFi\", 'r')        # typedef int (*printfunc)(PyObject *, FILE *, int);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "readbufferproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "readbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);\ndestructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);\n# printfunc = Signature(\"TFi\", 'r')        # typedef int (*printfunc)(PyObject *, FILE *, int);\n                                           # typedef PyObject *(*getattrfunc)(PyObject *, char *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "writebufferproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "writebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);\ndestructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);\n# printfunc = Signature(\"TFi\", 'r')        # typedef int (*printfunc)(PyObject *, FILE *, int);\n                                           # typedef PyObject *(*getattrfunc)(PyObject *, char *);\ngetattrofunc = Signature(\"TO\", \"O\")        # typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "segcountproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "segcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);\ndestructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);\n# printfunc = Signature(\"TFi\", 'r')        # typedef int (*printfunc)(PyObject *, FILE *, int);\n                                           # typedef PyObject *(*getattrfunc)(PyObject *, char *);\ngetattrofunc = Signature(\"TO\", \"O\")        # typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);\n                                           # typedef int (*setattrfunc)(PyObject *, char *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "charbufferproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "charbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);\ndestructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);\n# printfunc = Signature(\"TFi\", 'r')        # typedef int (*printfunc)(PyObject *, FILE *, int);\n                                           # typedef PyObject *(*getattrfunc)(PyObject *, char *);\ngetattrofunc = Signature(\"TO\", \"O\")        # typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);\n                                           # typedef int (*setattrfunc)(PyObject *, char *, PyObject *);\nsetattrofunc = Signature(\"TOO\", 'r')       # typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "objargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "objargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);\ndestructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);\n# printfunc = Signature(\"TFi\", 'r')        # typedef int (*printfunc)(PyObject *, FILE *, int);\n                                           # typedef PyObject *(*getattrfunc)(PyObject *, char *);\ngetattrofunc = Signature(\"TO\", \"O\")        # typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);\n                                           # typedef int (*setattrfunc)(PyObject *, char *, PyObject *);\nsetattrofunc = Signature(\"TOO\", 'r')       # typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);\ndelattrofunc = Signature(\"TO\", 'r')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "destructor",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "destructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);\n# printfunc = Signature(\"TFi\", 'r')        # typedef int (*printfunc)(PyObject *, FILE *, int);\n                                           # typedef PyObject *(*getattrfunc)(PyObject *, char *);\ngetattrofunc = Signature(\"TO\", \"O\")        # typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);\n                                           # typedef int (*setattrfunc)(PyObject *, char *, PyObject *);\nsetattrofunc = Signature(\"TOO\", 'r')       # typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);\ndelattrofunc = Signature(\"TO\", 'r')\ncmpfunc = Signature(\"TO\", \"i\")             # typedef int (*cmpfunc)(PyObject *, PyObject *);\nreprfunc = Signature(\"T\", \"O\")             # typedef PyObject *(*reprfunc)(PyObject *);\nhashfunc = Signature(\"T\", \"h\")             # typedef Py_hash_t (*hashfunc)(PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "getattrofunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "getattrofunc = Signature(\"TO\", \"O\")        # typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);\n                                           # typedef int (*setattrfunc)(PyObject *, char *, PyObject *);\nsetattrofunc = Signature(\"TOO\", 'r')       # typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);\ndelattrofunc = Signature(\"TO\", 'r')\ncmpfunc = Signature(\"TO\", \"i\")             # typedef int (*cmpfunc)(PyObject *, PyObject *);\nreprfunc = Signature(\"T\", \"O\")             # typedef PyObject *(*reprfunc)(PyObject *);\nhashfunc = Signature(\"T\", \"h\")             # typedef Py_hash_t (*hashfunc)(PyObject *);\nrichcmpfunc = Signature(\"TOi\", \"O\")        # typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ngetiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "setattrofunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "setattrofunc = Signature(\"TOO\", 'r')       # typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);\ndelattrofunc = Signature(\"TO\", 'r')\ncmpfunc = Signature(\"TO\", \"i\")             # typedef int (*cmpfunc)(PyObject *, PyObject *);\nreprfunc = Signature(\"T\", \"O\")             # typedef PyObject *(*reprfunc)(PyObject *);\nhashfunc = Signature(\"T\", \"h\")             # typedef Py_hash_t (*hashfunc)(PyObject *);\nrichcmpfunc = Signature(\"TOi\", \"O\")        # typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ngetiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "delattrofunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "delattrofunc = Signature(\"TO\", 'r')\ncmpfunc = Signature(\"TO\", \"i\")             # typedef int (*cmpfunc)(PyObject *, PyObject *);\nreprfunc = Signature(\"T\", \"O\")             # typedef PyObject *(*reprfunc)(PyObject *);\nhashfunc = Signature(\"T\", \"h\")             # typedef Py_hash_t (*hashfunc)(PyObject *);\nrichcmpfunc = Signature(\"TOi\", \"O\")        # typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ngetiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "cmpfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "cmpfunc = Signature(\"TO\", \"i\")             # typedef int (*cmpfunc)(PyObject *, PyObject *);\nreprfunc = Signature(\"T\", \"O\")             # typedef PyObject *(*reprfunc)(PyObject *);\nhashfunc = Signature(\"T\", \"h\")             # typedef Py_hash_t (*hashfunc)(PyObject *);\nrichcmpfunc = Signature(\"TOi\", \"O\")        # typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ngetiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "reprfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "reprfunc = Signature(\"T\", \"O\")             # typedef PyObject *(*reprfunc)(PyObject *);\nhashfunc = Signature(\"T\", \"h\")             # typedef Py_hash_t (*hashfunc)(PyObject *);\nrichcmpfunc = Signature(\"TOi\", \"O\")        # typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ngetiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "hashfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "hashfunc = Signature(\"T\", \"h\")             # typedef Py_hash_t (*hashfunc)(PyObject *);\nrichcmpfunc = Signature(\"TOi\", \"O\")        # typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ngetiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "richcmpfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "richcmpfunc = Signature(\"TOi\", \"O\")        # typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ngetiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);\ngetbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "getiterfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "getiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);\ngetbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);\nreleasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "iternextfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "iternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);\ngetbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);\nreleasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);\n#------------------------------------------------------------------------------------------",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "descrgetfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "descrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);\ngetbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);\nreleasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);\n#------------------------------------------------------------------------------------------\n#",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "descrsetfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "descrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);\ngetbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);\nreleasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for accessor methods of properties.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "descrdelfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "descrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);\ngetbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);\nreleasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for accessor methods of properties.\n#",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "initproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "initproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);\ngetbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);\nreleasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for accessor methods of properties.\n#\n#------------------------------------------------------------------------------------------",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "getbufferproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "getbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);\nreleasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for accessor methods of properties.\n#\n#------------------------------------------------------------------------------------------\nproperty_accessor_signatures = {\n    '__get__': Signature(\"T\", \"O\"),\n    '__set__': Signature(\"TO\", 'r'),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "releasebufferproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "releasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for accessor methods of properties.\n#\n#------------------------------------------------------------------------------------------\nproperty_accessor_signatures = {\n    '__get__': Signature(\"T\", \"O\"),\n    '__set__': Signature(\"TO\", 'r'),\n    '__del__': Signature(\"T\", 'r')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "property_accessor_signatures",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "property_accessor_signatures = {\n    '__get__': Signature(\"T\", \"O\"),\n    '__set__': Signature(\"TO\", 'r'),\n    '__del__': Signature(\"T\", 'r')\n}\n#------------------------------------------------------------------------------------------\n#\n#  Descriptor tables for the slots of the various type object\n#  substructures, in the order they appear in the structure.\n#",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "PyNumberMethods_Py3_GUARD",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "PyNumberMethods_Py3_GUARD = \"PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)\"\nPyNumberMethods = (\n    MethodSlot(binaryfunc, \"nb_add\", \"__add__\"),\n    MethodSlot(binaryfunc, \"nb_subtract\", \"__sub__\"),\n    MethodSlot(binaryfunc, \"nb_multiply\", \"__mul__\"),\n    MethodSlot(binaryfunc, \"nb_divide\", \"__div__\", ifdef = PyNumberMethods_Py3_GUARD),\n    MethodSlot(binaryfunc, \"nb_remainder\", \"__mod__\"),\n    MethodSlot(binaryfunc, \"nb_divmod\", \"__divmod__\"),\n    MethodSlot(ternaryfunc, \"nb_power\", \"__pow__\"),\n    MethodSlot(unaryfunc, \"nb_negative\", \"__neg__\"),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "PyNumberMethods",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "PyNumberMethods = (\n    MethodSlot(binaryfunc, \"nb_add\", \"__add__\"),\n    MethodSlot(binaryfunc, \"nb_subtract\", \"__sub__\"),\n    MethodSlot(binaryfunc, \"nb_multiply\", \"__mul__\"),\n    MethodSlot(binaryfunc, \"nb_divide\", \"__div__\", ifdef = PyNumberMethods_Py3_GUARD),\n    MethodSlot(binaryfunc, \"nb_remainder\", \"__mod__\"),\n    MethodSlot(binaryfunc, \"nb_divmod\", \"__divmod__\"),\n    MethodSlot(ternaryfunc, \"nb_power\", \"__pow__\"),\n    MethodSlot(unaryfunc, \"nb_negative\", \"__neg__\"),\n    MethodSlot(unaryfunc, \"nb_positive\", \"__pos__\"),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "PySequenceMethods",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "PySequenceMethods = (\n    MethodSlot(lenfunc, \"sq_length\", \"__len__\"),\n    EmptySlot(\"sq_concat\"), # nb_add used instead\n    EmptySlot(\"sq_repeat\"), # nb_multiply used instead\n    SyntheticSlot(\"sq_item\", [\"__getitem__\"], \"0\"),    #EmptySlot(\"sq_item\"),   # mp_subscript used instead\n    MethodSlot(ssizessizeargfunc, \"sq_slice\", \"__getslice__\"),\n    EmptySlot(\"sq_ass_item\"), # mp_ass_subscript used instead\n    SyntheticSlot(\"sq_ass_slice\", [\"__setslice__\", \"__delslice__\"], \"0\"),\n    MethodSlot(cmpfunc, \"sq_contains\", \"__contains__\"),\n    EmptySlot(\"sq_inplace_concat\"), # nb_inplace_add used instead",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "PyMappingMethods",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "PyMappingMethods = (\n    MethodSlot(lenfunc, \"mp_length\", \"__len__\"),\n    MethodSlot(objargfunc, \"mp_subscript\", \"__getitem__\"),\n    SyntheticSlot(\"mp_ass_subscript\", [\"__setitem__\", \"__delitem__\"], \"0\"),\n)\nPyBufferProcs = (\n    MethodSlot(readbufferproc, \"bf_getreadbuffer\", \"__getreadbuffer__\", py3 = False),\n    MethodSlot(writebufferproc, \"bf_getwritebuffer\", \"__getwritebuffer__\", py3 = False),\n    MethodSlot(segcountproc, \"bf_getsegcount\", \"__getsegcount__\", py3 = False),\n    MethodSlot(charbufferproc, \"bf_getcharbuffer\", \"__getcharbuffer__\", py3 = False),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "PyBufferProcs",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "PyBufferProcs = (\n    MethodSlot(readbufferproc, \"bf_getreadbuffer\", \"__getreadbuffer__\", py3 = False),\n    MethodSlot(writebufferproc, \"bf_getwritebuffer\", \"__getwritebuffer__\", py3 = False),\n    MethodSlot(segcountproc, \"bf_getsegcount\", \"__getsegcount__\", py3 = False),\n    MethodSlot(charbufferproc, \"bf_getcharbuffer\", \"__getcharbuffer__\", py3 = False),\n    MethodSlot(getbufferproc, \"bf_getbuffer\", \"__getbuffer__\"),\n    MethodSlot(releasebufferproc, \"bf_releasebuffer\", \"__releasebuffer__\")\n)\nPyAsyncMethods = (\n    MethodSlot(unaryfunc, \"am_await\", \"__await__\"),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "PyAsyncMethods",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "PyAsyncMethods = (\n    MethodSlot(unaryfunc, \"am_await\", \"__await__\"),\n    MethodSlot(unaryfunc, \"am_aiter\", \"__aiter__\"),\n    MethodSlot(unaryfunc, \"am_anext\", \"__anext__\"),\n    EmptySlot(\"am_send\", ifdef=\"PY_VERSION_HEX >= 0x030A00A3\"),\n)\n#------------------------------------------------------------------------------------------\n#\n#  The main slot table. This table contains descriptors for all the\n#  top-level type slots, beginning with tp_dealloc, in the order they",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "slot_table",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "slot_table = (\n    ConstructorSlot(\"tp_dealloc\", '__dealloc__'),\n    EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX < 0x030800b4\"),\n    EmptySlot(\"tp_vectorcall_offset\", ifdef=\"PY_VERSION_HEX >= 0x030800b4\"),\n    EmptySlot(\"tp_getattr\"),\n    EmptySlot(\"tp_setattr\"),\n    # tp_compare (Py2) / tp_reserved (Py3<3.5) / tp_as_async (Py3.5+) is always used as tp_as_async in Py3\n    MethodSlot(cmpfunc, \"tp_compare\", \"__cmp__\", ifdef=\"PY_MAJOR_VERSION < 3\"),\n    SuiteSlot(PyAsyncMethods, \"__Pyx_PyAsyncMethodsStruct\", \"tp_as_async\", ifdef=\"PY_MAJOR_VERSION >= 3\"),\n    MethodSlot(reprfunc, \"tp_repr\", \"__repr__\"),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "method_keywords",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "method_keywords = \"METH_KEYWORDS\"\nmethod_coexist  = \"METH_COEXIST\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "NonManglingModuleScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilityCode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilityCode",
        "peekOfCode": "class NonManglingModuleScope(Symtab.ModuleScope):\n    def __init__(self, prefix, *args, **kw):\n        self.prefix = prefix\n        self.cython_scope = None\n        self.cpp = kw.pop('cpp', False)\n        Symtab.ModuleScope.__init__(self, *args, **kw)\n    def add_imported_entry(self, name, entry, pos):\n        entry.used = True\n        return super(NonManglingModuleScope, self).add_imported_entry(name, entry, pos)\n    def mangle(self, prefix, name=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilityCode",
        "documentation": {}
    },
    {
        "label": "CythonUtilityCodeContext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilityCode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilityCode",
        "peekOfCode": "class CythonUtilityCodeContext(StringParseContext):\n    scope = None\n    def find_module(self, module_name, relative_to=None, pos=None, need_pxd=True, absolute_fallback=True):\n        if relative_to:\n            raise AssertionError(\"Relative imports not supported in utility code.\")\n        if module_name != self.module_name:\n            if module_name not in self.modules:\n                raise AssertionError(\"Only the cython cimport is supported.\")\n            else:\n                return self.modules[module_name]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilityCode",
        "documentation": {}
    },
    {
        "label": "CythonUtilityCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilityCode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilityCode",
        "peekOfCode": "class CythonUtilityCode(Code.UtilityCodeBase):\n    \"\"\"\n    Utility code written in the Cython language itself.\n    The @cname decorator can set the cname for a function, method of cdef class.\n    Functions decorated with @cname('c_func_name') get the given cname.\n    For cdef classes the rules are as follows:\n        obj struct      -> <cname>_obj\n        obj type ptr    -> <cname>_type\n        methods         -> <class_cname>_<method_cname>\n    For methods the cname decorator is optional, but without the decorator the",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilityCode",
        "documentation": {}
    },
    {
        "label": "declare_declarations_in_scope",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilityCode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilityCode",
        "peekOfCode": "def declare_declarations_in_scope(declaration_string, env, private_type=True,\n                                  *args, **kwargs):\n    \"\"\"\n    Declare some declarations given as Cython code in declaration_string\n    in scope env.\n    \"\"\"\n    CythonUtilityCode(declaration_string, *args, **kwargs).declare_in_scope(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilityCode",
        "documentation": {}
    },
    {
        "label": "TempHandle",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class TempHandle(object):\n    # THIS IS DEPRECATED, USE LetRefNode instead\n    temp = None\n    needs_xdecref = False\n    def __init__(self, type, needs_cleanup=None):\n        self.type = type\n        if needs_cleanup is None:\n            self.needs_cleanup = type.is_pyobject\n        else:\n            self.needs_cleanup = needs_cleanup",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "TempRefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class TempRefNode(AtomicExprNode):\n    # THIS IS DEPRECATED, USE LetRefNode instead\n    # handle   TempHandle\n    def analyse_types(self, env):\n        assert self.type == self.handle.type\n        return self\n    def analyse_target_types(self, env):\n        assert self.type == self.handle.type\n        return self\n    def analyse_target_declaration(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "TempsBlockNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class TempsBlockNode(Node):\n    # THIS IS DEPRECATED, USE LetNode instead\n    \"\"\"\n    Creates a block which allocates temporary variables.\n    This is used by transforms to output constructs that need\n    to make use of a temporary variable. Simply pass the types\n    of the needed temporaries to the constructor.\n    The variables can be referred to using a TempRefNode\n    (which can be constructed by calling get_ref_node).\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "ResultRefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class ResultRefNode(AtomicExprNode):\n    # A reference to the result of an expression.  The result_code\n    # must be set externally (usually a temp name).\n    subexprs = []\n    lhs_of_first_assignment = False\n    def __init__(self, expression=None, pos=None, type=None, may_hold_none=True, is_temp=False):\n        self.expression = expression\n        self.pos = None\n        self.may_hold_none = may_hold_none\n        if expression is not None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "LetNodeMixin",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class LetNodeMixin:\n    def set_temp_expr(self, lazy_temp):\n        self.lazy_temp = lazy_temp\n        self.temp_expression = lazy_temp.expression\n    def setup_temp_expr(self, code):\n        self.temp_expression.generate_evaluation_code(code)\n        self.temp_type = self.temp_expression.type\n        if self.temp_type.is_array:\n            self.temp_type = c_ptr_type(self.temp_type.base_type)\n        self._result_in_temp = self.temp_expression.result_in_temp()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "EvalWithTempExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class EvalWithTempExprNode(ExprNodes.ExprNode, LetNodeMixin):\n    # A wrapper around a subexpression that moves an expression into a\n    # temp variable and provides it to the subexpression.\n    subexprs = ['temp_expression', 'subexpression']\n    def __init__(self, lazy_temp, subexpression):\n        self.set_temp_expr(lazy_temp)\n        self.pos = subexpression.pos\n        self.subexpression = subexpression\n        # if called after type analysis, we already know the type here\n        self.type = self.subexpression.type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "LetNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class LetNode(Nodes.StatNode, LetNodeMixin):\n    # Implements a local temporary variable scope. Imagine this\n    # syntax being present:\n    # let temp = VALUE:\n    #     BLOCK (can modify temp)\n    #     if temp is an object, decref\n    #\n    # Usually used after analysis phase, but forwards analysis methods\n    # to its children\n    child_attrs = ['temp_expression', 'body']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "TempResultFromStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class TempResultFromStatNode(ExprNodes.ExprNode):\n    # An ExprNode wrapper around a StatNode that executes the StatNode\n    # body.  Requires a ResultRefNode that it sets up to refer to its\n    # own temp result.  The StatNode must assign a value to the result\n    # node, which then becomes the result of this node.\n    subexprs = []\n    child_attrs = ['body']\n    def __init__(self, result_ref, body):\n        self.result_ref = result_ref\n        self.pos = body.pos",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "LetRefNode",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "LetRefNode = ResultRefNode\nclass LetNode(Nodes.StatNode, LetNodeMixin):\n    # Implements a local temporary variable scope. Imagine this\n    # syntax being present:\n    # let temp = VALUE:\n    #     BLOCK (can modify temp)\n    #     if temp is an object, decref\n    #\n    # Usually used after analysis phase, but forwards analysis methods\n    # to its children",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "watermark",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Version",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Version",
        "peekOfCode": "watermark = str(version)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Version",
        "documentation": {}
    },
    {
        "label": "TreeVisitor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class TreeVisitor(object):\n    \"\"\"\n    Base class for writing visitors for a Cython tree, contains utilities for\n    recursing such trees using visitors. Each node is\n    expected to have a child_attrs iterable containing the names of attributes\n    containing child nodes or lists of child nodes. Lists are not considered\n    part of the tree structure (i.e. contained nodes are considered direct\n    children of the parent node).\n    visit_children visits each of the children of a given node (see the visit_children\n    documentation). When recursing the tree using visit_children, an attribute",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "VisitorTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class VisitorTransform(TreeVisitor):\n    \"\"\"\n    A tree transform is a base class for visitors that wants to do stream\n    processing of the structure (rather than attributes etc.) of a tree.\n    It implements __call__ to simply visit the argument node.\n    It requires the visitor methods to return the nodes which should take\n    the place of the visited node in the result tree (which can be the same\n    or one or more replacement). Specifically, if the return value from\n    a visitor method is:\n    - [] or None; the visited node will be removed (set to None if an attribute and",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "CythonTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class CythonTransform(VisitorTransform):\n    \"\"\"\n    Certain common conventions and utilities for Cython transforms.\n     - Sets up the context of the pipeline in self.context\n     - Tracks directives in effect in self.current_directives\n    \"\"\"\n    def __init__(self, context):\n        super(CythonTransform, self).__init__()\n        self.context = context\n    def __call__(self, node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "ScopeTrackingTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class ScopeTrackingTransform(CythonTransform):\n    # Keeps track of type of scopes\n    #scope_type: can be either of 'module', 'function', 'cclass', 'pyclass', 'struct'\n    #scope_node: the node that owns the current scope\n    def visit_ModuleNode(self, node):\n        self.scope_type = 'module'\n        self.scope_node = node\n        self._process_children(node)\n        return node\n    def visit_scope(self, node, scope_type):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "EnvTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class EnvTransform(CythonTransform):\n    \"\"\"\n    This transformation keeps a stack of the environments.\n    \"\"\"\n    def __call__(self, root):\n        self.env_stack = []\n        self.enter_scope(root, root.scope)\n        return super(EnvTransform, self).__call__(root)\n    def current_env(self):\n        return self.env_stack[-1][1]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "NodeRefCleanupMixin",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class NodeRefCleanupMixin(object):\n    \"\"\"\n    Clean up references to nodes that were replaced.\n    NOTE: this implementation assumes that the replacement is\n    done first, before hitting any further references during\n    normal tree traversal.  This needs to be arranged by calling\n    \"self.visitchildren()\" at a proper place in the transform\n    and by ordering the \"child_attrs\" of nodes appropriately.\n    \"\"\"\n    def __init__(self, *args):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "MethodDispatcherTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class MethodDispatcherTransform(EnvTransform):\n    \"\"\"\n    Base class for transformations that want to intercept on specific\n    builtin functions or methods of builtin types, including special\n    methods triggered by Python operators.  Must run after declaration\n    analysis when entries were assigned.\n    Naming pattern for handler methods is as follows:\n    * builtin functions: _handle_(general|simple|any)_function_NAME\n    * builtin methods: _handle_(general|simple|any)_method_TYPENAME_METHODNAME\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "RecursiveNodeReplacer",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class RecursiveNodeReplacer(VisitorTransform):\n    \"\"\"\n    Recursively replace all occurrences of a node in a subtree by\n    another node.\n    \"\"\"\n    def __init__(self, orig_node, new_node):\n        super(RecursiveNodeReplacer, self).__init__()\n        self.orig_node, self.new_node = orig_node, new_node\n    def visit_CloneNode(self, node):\n        if node is self.orig_node:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "NodeFinder",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class NodeFinder(TreeVisitor):\n    \"\"\"\n    Find out if a node appears in a subtree.\n    \"\"\"\n    def __init__(self, node):\n        super(NodeFinder, self).__init__()\n        self.node = node\n        self.found = False\n    def visit_Node(self, node):\n        if self.found:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "PrintTree",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class PrintTree(TreeVisitor):\n    \"\"\"Prints a representation of the tree to standard output.\n    Subclass and override repr_of to provide more information\n    about nodes. \"\"\"\n    def __init__(self, start=None, end=None):\n        TreeVisitor.__init__(self)\n        self._indent = \"\"\n        if start is not None or end is not None:\n            self._line_range = (start or 0, end or 2**30)\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "recursively_replace_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "peekOfCode": "def recursively_replace_node(tree, old_node, new_node):\n    replace_in = RecursiveNodeReplacer(old_node, new_node)\n    replace_in(tree)\nclass NodeFinder(TreeVisitor):\n    \"\"\"\n    Find out if a node appears in a subtree.\n    \"\"\"\n    def __init__(self, node):\n        super(NodeFinder, self).__init__()\n        self.node = node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "tree_contains",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "peekOfCode": "def tree_contains(tree, node):\n    finder = NodeFinder(node)\n    finder.visit(tree)\n    return finder.found\n# Utils\ndef replace_node(ptr, value):\n    \"\"\"Replaces a node. ptr is of the form used on the access path stack\n    (parent, attrname, listidx|None)\n    \"\"\"\n    parent, attrname, listidx = ptr",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "replace_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "peekOfCode": "def replace_node(ptr, value):\n    \"\"\"Replaces a node. ptr is of the form used on the access path stack\n    (parent, attrname, listidx|None)\n    \"\"\"\n    parent, attrname, listidx = ptr\n    if listidx is None:\n        setattr(parent, attrname, value)\n    else:\n        getattr(parent, attrname)[listidx] = value\nclass PrintTree(TreeVisitor):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "find_special_method_for_binary_operator",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "peekOfCode": "find_special_method_for_binary_operator = {\n    '<':  '__lt__',\n    '<=': '__le__',\n    '==': '__eq__',\n    '!=': '__ne__',\n    '>=': '__ge__',\n    '>':  '__gt__',\n    '+':  '__add__',\n    '&':  '__and__',\n    '/':  '__div__',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "find_special_method_for_unary_operator",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "peekOfCode": "find_special_method_for_unary_operator = {\n    'not': '__not__',\n    '~':   '__inv__',\n    '-':   '__neg__',\n    '+':   '__pos__',\n}.get\nclass MethodDispatcherTransform(EnvTransform):\n    \"\"\"\n    Base class for transformations that want to intercept on specific\n    builtin functions or methods of builtin types, including special",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "DebuggerTestCase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "class DebuggerTestCase(unittest.TestCase):\n    def setUp(self):\n        \"\"\"\n        Run gdb and have cygdb import the debug information from the code\n        defined in TestParseTreeTransforms's setUp method\n        \"\"\"\n        if not test_gdb():\n            return\n        self.tempdir = tempfile.mkdtemp()\n        self.destfile = os.path.join(self.tempdir, 'codefile.pyx')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "GdbDebuggerTestCase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "class GdbDebuggerTestCase(DebuggerTestCase):\n    def setUp(self):\n        if not test_gdb():\n            return\n        super(GdbDebuggerTestCase, self).setUp()\n        prefix_code = textwrap.dedent('''\\\n            python\n            import os\n            import sys\n            import traceback",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "TestAll",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "class TestAll(GdbDebuggerTestCase):\n    def test_all(self):\n        if not test_gdb():\n            return\n        out, err = self.p.communicate()\n        out = out.decode('UTF-8')\n        err = err.decode('UTF-8')\n        exit_status = self.p.returncode\n        if exit_status == 1:\n            sys.stderr.write(out)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "test_gdb",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "def test_gdb():\n    global have_gdb\n    if have_gdb is not None:\n        return have_gdb\n    have_gdb = False\n    try:\n        p = subprocess.Popen(['gdb', '-nx', '--version'], stdout=subprocess.PIPE)\n    except OSError:\n        # gdb not found\n        gdb_version = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "root = os.path.dirname(os.path.abspath(__file__))\ncodefile = os.path.join(root, 'codefile')\ncfuncs_file = os.path.join(root, 'cfuncs.c')\nwith open(codefile) as f:\n    source_to_lineno = dict((line.strip(), i + 1) for i, line in enumerate(f))\nhave_gdb = None\ndef test_gdb():\n    global have_gdb\n    if have_gdb is not None:\n        return have_gdb",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "codefile",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "codefile = os.path.join(root, 'codefile')\ncfuncs_file = os.path.join(root, 'cfuncs.c')\nwith open(codefile) as f:\n    source_to_lineno = dict((line.strip(), i + 1) for i, line in enumerate(f))\nhave_gdb = None\ndef test_gdb():\n    global have_gdb\n    if have_gdb is not None:\n        return have_gdb\n    have_gdb = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "cfuncs_file",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "cfuncs_file = os.path.join(root, 'cfuncs.c')\nwith open(codefile) as f:\n    source_to_lineno = dict((line.strip(), i + 1) for i, line in enumerate(f))\nhave_gdb = None\ndef test_gdb():\n    global have_gdb\n    if have_gdb is not None:\n        return have_gdb\n    have_gdb = False\n    try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "have_gdb",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "have_gdb = None\ndef test_gdb():\n    global have_gdb\n    if have_gdb is not None:\n        return have_gdb\n    have_gdb = False\n    try:\n        p = subprocess.Popen(['gdb', '-nx', '--version'], stdout=subprocess.PIPE)\n    except OSError:\n        # gdb not found",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "TraceMethodCallMeta",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TraceMethodCallMeta(type):\n    def __init__(self, name, bases, dict):\n        for func_name, func in dict.items():\n            if inspect.isfunction(func):\n                setattr(self, func_name, print_on_call_decorator(func))\n@add_metaclass(TraceMethodCallMeta)\nclass DebugTestCase(unittest.TestCase):\n    \"\"\"\n    Base class for test cases. On teardown it kills the inferior and unsets\n    all breakpoints.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "DebugTestCase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class DebugTestCase(unittest.TestCase):\n    \"\"\"\n    Base class for test cases. On teardown it kills the inferior and unsets\n    all breakpoints.\n    \"\"\"\n    def __init__(self, name):\n        super(DebugTestCase, self).__init__(name)\n        self.cy = libcython.cy\n        self.module = libcython.cy.cython_namespace['codefile']\n        self.spam_func, self.spam_meth = libcython.cy.functions_by_name['spam']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestDebugInformationClasses",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestDebugInformationClasses(DebugTestCase):\n    def test_CythonModule(self):\n        \"test that debug information was parsed properly into data structures\"\n        self.assertEqual(self.module.name, 'codefile')\n        global_vars = ('c_var', 'python_var', '__name__',\n                       '__builtins__', '__doc__', '__file__')\n        assert set(global_vars).issubset(self.module.globals)\n    def test_CythonVariable(self):\n        module_globals = self.module.globals\n        c_var = module_globals['c_var']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestParameters",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestParameters(unittest.TestCase):\n    def test_parameters(self):\n        gdb.execute('set cy_colorize_code on')\n        assert libcython.parameters.colorize_code\n        gdb.execute('set cy_colorize_code off')\n        assert not libcython.parameters.colorize_code\nclass TestBreak(DebugTestCase):\n    def test_break(self):\n        breakpoint_amount = len(gdb.breakpoints() or ())\n        gdb.execute('cy break codefile.spam')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestBreak",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestBreak(DebugTestCase):\n    def test_break(self):\n        breakpoint_amount = len(gdb.breakpoints() or ())\n        gdb.execute('cy break codefile.spam')\n        self.assertEqual(len(gdb.breakpoints()), breakpoint_amount + 1)\n        bp = gdb.breakpoints()[-1]\n        self.assertEqual(bp.type, gdb.BP_BREAKPOINT)\n        assert self.spam_func.cname in bp.location\n        assert bp.enabled\n    def test_python_break(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestKilled",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestKilled(DebugTestCase):\n    def test_abort(self):\n        gdb.execute(\"set args -c 'import os; os.abort()'\")\n        output = gdb.execute('cy run', to_string=True)\n        assert 'abort' in output.lower()\nclass DebugStepperTestCase(DebugTestCase):\n    def step(self, varnames_and_values, source_line=None, lineno=None):\n        gdb.execute(self.command)\n        for varname, value in varnames_and_values:\n            self.assertEqual(self.read_var(varname), value, self.local_info())",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "DebugStepperTestCase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class DebugStepperTestCase(DebugTestCase):\n    def step(self, varnames_and_values, source_line=None, lineno=None):\n        gdb.execute(self.command)\n        for varname, value in varnames_and_values:\n            self.assertEqual(self.read_var(varname), value, self.local_info())\n        self.lineno_equals(source_line, lineno)\nclass TestStep(DebugStepperTestCase):\n    \"\"\"\n    Test stepping. Stepping happens in the code found in\n    Cython/Debugger/Tests/codefile.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestStep",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestStep(DebugStepperTestCase):\n    \"\"\"\n    Test stepping. Stepping happens in the code found in\n    Cython/Debugger/Tests/codefile.\n    \"\"\"\n    def test_cython_step(self):\n        gdb.execute('cy break codefile.spam')\n        gdb.execute('run', to_string=True)\n        self.lineno_equals('def spam(a=0):')\n        gdb.execute('cy step', to_string=True)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestNext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestNext(DebugStepperTestCase):\n    def test_cython_next(self):\n        self.break_and_run('c = 2')\n        lines = (\n            'int(10)',\n            'puts(\"spam\")',\n            'os.path.join(\"foo\", \"bar\")',\n            'some_c_function()',\n        )\n        for line in lines:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestLocalsGlobals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestLocalsGlobals(DebugTestCase):\n    def test_locals(self):\n        self.break_and_run('int(10)')\n        result = gdb.execute('cy locals', to_string=True)\n        assert 'a = 0', repr(result)\n        assert 'b = (int) 1', result\n        assert 'c = (int) 2' in result, repr(result)\n    def test_globals(self):\n        self.break_and_run('int(10)')\n        result = gdb.execute('cy globals', to_string=True)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestBacktrace",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestBacktrace(DebugTestCase):\n    def test_backtrace(self):\n        libcython.parameters.colorize_code.value = False\n        self.break_and_run('os.path.join(\"foo\", \"bar\")')\n        def match_backtrace_output(result):\n            assert re.search(r'\\#\\d+ *0x.* in spam\\(\\) at .*codefile\\.pyx:22',\n                             result), result\n            assert 'os.path.join(\"foo\", \"bar\")' in result, result\n        result = gdb.execute('cy bt', to_string=True)\n        match_backtrace_output(result)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestFunctions",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestFunctions(DebugTestCase):\n    def test_functions(self):\n        self.break_and_run('c = 2')\n        result = gdb.execute('print $cy_cname(\"b\")', to_string=True)\n        assert re.search('__pyx_.*b', result), result\n        result = gdb.execute('print $cy_lineno()', to_string=True)\n        supposed_lineno = test_libcython.source_to_lineno['c = 2']\n        assert str(supposed_lineno) in result, (supposed_lineno, result)\n        result = gdb.execute('print $cy_cvalue(\"b\")', to_string=True)\n        assert '= 1' in result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestPrint",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestPrint(DebugTestCase):\n    def test_print(self):\n        self.break_and_run('c = 2')\n        result = gdb.execute('cy print b', to_string=True)\n        self.assertEqual('b = (int) 1\\n', result)\nclass TestUpDown(DebugTestCase):\n    def test_updown(self):\n        self.break_and_run('os.path.join(\"foo\", \"bar\")')\n        gdb.execute('cy step')\n        self.assertRaises(RuntimeError, gdb.execute, 'cy down')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestUpDown",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestUpDown(DebugTestCase):\n    def test_updown(self):\n        self.break_and_run('os.path.join(\"foo\", \"bar\")')\n        gdb.execute('cy step')\n        self.assertRaises(RuntimeError, gdb.execute, 'cy down')\n        result = gdb.execute('cy up', to_string=True)\n        assert 'spam()' in result\n        assert 'os.path.join(\"foo\", \"bar\")' in result\nclass TestExec(DebugTestCase):\n    def setUp(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestExec",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestExec(DebugTestCase):\n    def setUp(self):\n        super(TestExec, self).setUp()\n        self.fd, self.tmpfilename = tempfile.mkstemp()\n        self.tmpfile = os.fdopen(self.fd, 'r+')\n    def tearDown(self):\n        super(TestExec, self).tearDown()\n        try:\n            self.tmpfile.close()\n        finally:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "CySet",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class CySet(DebugTestCase):\n    def test_cyset(self):\n        self.break_and_run('os.path.join(\"foo\", \"bar\")')\n        gdb.execute('cy set a = $cy_eval(\"{None: []}\")')\n        stringvalue = self.read_var(\"a\", cast_to=str)\n        self.assertEqual(stringvalue, \"{None: []}\")\nclass TestCyEval(DebugTestCase):\n    \"Test the $cy_eval() gdb function.\"\n    def test_cy_eval(self):\n        # This function leaks a few objects in the GDB python process. This",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestCyEval",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestCyEval(DebugTestCase):\n    \"Test the $cy_eval() gdb function.\"\n    def test_cy_eval(self):\n        # This function leaks a few objects in the GDB python process. This\n        # is no biggie\n        self.break_and_run('os.path.join(\"foo\", \"bar\")')\n        result = gdb.execute('print $cy_eval(\"None\")', to_string=True)\n        assert re.match(r'\\$\\d+ = None\\n', result), result\n        result = gdb.execute('print $cy_eval(\"[a]\")', to_string=True)\n        assert re.match(r'\\$\\d+ = \\[0\\]', result), result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestClosure",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestClosure(DebugTestCase):\n    def break_and_run_func(self, funcname):\n        gdb.execute('cy break ' + funcname)\n        gdb.execute('cy run')\n    def test_inner(self):\n        self.break_and_run_func('inner')\n        self.assertEqual('', gdb.execute('cy locals', to_string=True))\n        # Allow the Cython-generated code to initialize the scope variable\n        gdb.execute('cy step')\n        self.assertEqual(str(self.read_var('a')), \"'an object'\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "print_on_call_decorator",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "def print_on_call_decorator(func):\n    @functools.wraps(func)\n    def wrapper(self, *args, **kwargs):\n        _debug(type(self).__name__, func.__name__)\n        try:\n            return func(self, *args, **kwargs)\n        except Exception:\n            _debug(\"An exception occurred:\", traceback.format_exc())\n            raise\n    return wrapper",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "run_unittest_in_module",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "def run_unittest_in_module(modulename):\n    try:\n        gdb.lookup_type('PyModuleObject')\n    except RuntimeError:\n        msg = (\"Unable to run tests, Python was not compiled with \"\n                \"debugging information. Either compile python with \"\n                \"-g or get a debug build (configure with --with-pydebug).\")\n        warnings.warn(msg)\n        os._exit(1)\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "runtests",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "def runtests():\n    \"\"\"\n    Run the libcython and libpython tests. Ensure that an appropriate status is\n    returned to the parent test process.\n    \"\"\"\n    from Cython.Debugger.Tests import test_libpython_in_gdb\n    success_libcython = run_unittest_in_module(__name__)\n    success_libpython = run_unittest_in_module(test_libpython_in_gdb.__name__)\n    if not success_libcython or not success_libpython:\n        sys.exit(2)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "def main(version, trace_code=False):\n    global inferior_python_version\n    inferior_python_version = version\n    if trace_code:\n        tracer = trace.Trace(count=False, trace=True, outfile=sys.stderr,\n                            ignoredirs=[sys.prefix, sys.exec_prefix])\n        tracer.runfunc(runtests)\n    else:\n        runtests()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "sys.argv",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "sys.argv = ['gdb']\ndef print_on_call_decorator(func):\n    @functools.wraps(func)\n    def wrapper(self, *args, **kwargs):\n        _debug(type(self).__name__, func.__name__)\n        try:\n            return func(self, *args, **kwargs)\n        except Exception:\n            _debug(\"An exception occurred:\", traceback.format_exc())\n            raise",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "_do_debug",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "_do_debug = os.environ.get('GDB_DEBUG')\nif _do_debug:\n    _debug_file = open('/dev/tty', 'w')\ndef _debug(*messages):\n    if _do_debug:\n        messages = itertools.chain([sys._getframe(1).f_code.co_name, ':'],\n                                   messages)\n        _debug_file.write(' '.join(str(msg) for msg in messages) + '\\n')\ndef run_unittest_in_module(modulename):\n    try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestPrettyPrinters",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libpython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libpython_in_gdb",
        "peekOfCode": "class TestPrettyPrinters(test_libcython_in_gdb.DebugTestCase):\n    \"\"\"\n    Test whether types of Python objects are correctly inferred and that\n    the right libpython.PySomeTypeObjectPtr classes are instantiated.\n    Also test whether values are appropriately formatted (don't be too\n    laborious as Lib/test/test_gdb.py already covers this extensively).\n    Don't take care of decreffing newly allocated objects as a new\n    interpreter is started for every test anyway.\n    \"\"\"\n    def setUp(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Tests.test_libpython_in_gdb",
        "documentation": {}
    },
    {
        "label": "make_command_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Cygdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Cygdb",
        "peekOfCode": "def make_command_file(path_to_debug_info, prefix_code='', no_import=False):\n    if not no_import:\n        pattern = os.path.join(path_to_debug_info,\n                               'cython_debug',\n                               'cython_debug_info_*')\n        debug_files = glob.glob(pattern)\n        if not debug_files:\n            sys.exit('%s.\\nNo debug files were found in %s. Aborting.' % (\n                                   usage, os.path.abspath(path_to_debug_info)))\n    fd, tempfilename = tempfile.mkstemp()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Cygdb",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Cygdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Cygdb",
        "peekOfCode": "def main(path_to_debug_info=None, gdb_argv=None, no_import=False):\n    \"\"\"\n    Start the Cython debugger. This tells gdb to import the Cython and Python\n    extensions (libcython.py and libpython.py) and it enables gdb's pending\n    breakpoints.\n    path_to_debug_info is the path to the Cython build directory\n    gdb_argv is the list of options to gdb\n    no_import tells cygdb whether it should import debug information\n    \"\"\"\n    parser = optparse.OptionParser(usage=usage)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Cygdb",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Cygdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Cygdb",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef make_command_file(path_to_debug_info, prefix_code='', no_import=False):\n    if not no_import:\n        pattern = os.path.join(path_to_debug_info,\n                               'cython_debug',\n                               'cython_debug_info_*')\n        debug_files = glob.glob(pattern)\n        if not debug_files:\n            sys.exit('%s.\\nNo debug files were found in %s. Aborting.' % (\n                                   usage, os.path.abspath(path_to_debug_info)))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Cygdb",
        "documentation": {}
    },
    {
        "label": "usage",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Cygdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Cygdb",
        "peekOfCode": "usage = \"Usage: cygdb [options] [PATH [-- GDB_ARGUMENTS]]\"\ndef main(path_to_debug_info=None, gdb_argv=None, no_import=False):\n    \"\"\"\n    Start the Cython debugger. This tells gdb to import the Cython and Python\n    extensions (libcython.py and libpython.py) and it enables gdb's pending\n    breakpoints.\n    path_to_debug_info is the path to the Cython build directory\n    gdb_argv is the list of options to gdb\n    no_import tells cygdb whether it should import debug information\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.Cygdb",
        "documentation": {}
    },
    {
        "label": "CythonDebugWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.DebugWriter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.DebugWriter",
        "peekOfCode": "class CythonDebugWriter(object):\n    \"\"\"\n    Class to output debugging information for cygdb\n    It writes debug information to cython_debug/cython_debug_info_<modulename>\n    in the build directory.\n    \"\"\"\n    def __init__(self, output_dir):\n        if etree is None:\n            raise Errors.NoElementTreeInstalledException()\n        self.output_dir = os.path.join(output_dir or os.curdir, 'cython_debug')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.DebugWriter",
        "documentation": {}
    },
    {
        "label": "CythonModule",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonModule(object):\n    def __init__(self, module_name, filename, c_filename):\n        self.name = module_name\n        self.filename = filename\n        self.c_filename = c_filename\n        self.globals = {}\n        # {cython_lineno: min(c_linenos)}\n        self.lineno_cy2c = {}\n        # {c_lineno: cython_lineno}\n        self.lineno_c2cy = {}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonVariable",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonVariable(object):\n    def __init__(self, name, cname, qualified_name, type, lineno):\n        self.name = name\n        self.cname = cname\n        self.qualified_name = qualified_name\n        self.type = type\n        self.lineno = int(lineno)\nclass CythonFunction(CythonVariable):\n    def __init__(self,\n                 module,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonFunction",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonFunction(CythonVariable):\n    def __init__(self,\n                 module,\n                 name,\n                 cname,\n                 pf_cname,\n                 qualified_name,\n                 lineno,\n                 type=CObject,\n                 is_initmodule_function=\"False\"):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonBase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonBase(object):\n    @default_selected_gdb_frame(err=False)\n    def is_cython_function(self, frame):\n        return frame.name() in self.cy.functions_by_cname\n    @default_selected_gdb_frame(err=False)\n    def is_python_function(self, frame):\n        \"\"\"\n        Tells if a frame is associated with a Python function.\n        If we can't read the Python frame information, don't regard it as such.\n        \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "SourceFileDescriptor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class SourceFileDescriptor(object):\n    def __init__(self, filename, lexer, formatter=None):\n        self.filename = filename\n        self.lexer = lexer\n        self.formatter = formatter\n    def valid(self):\n        return self.filename is not None\n    def lex(self, code):\n        if pygments and self.lexer and parameters.colorize_code:\n            bg = parameters.terminal_background.value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyGDBError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyGDBError(gdb.GdbError):\n    \"\"\"\n    Base class for Cython-command related errors\n    \"\"\"\n    def __init__(self, *args):\n        args = args or (self.msg,)\n        super(CyGDBError, self).__init__(*args)\nclass NoCythonFunctionInFrameError(CyGDBError):\n    \"\"\"\n    raised when the user requests the current cython function, which is",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "NoCythonFunctionInFrameError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class NoCythonFunctionInFrameError(CyGDBError):\n    \"\"\"\n    raised when the user requests the current cython function, which is\n    unavailable\n    \"\"\"\n    msg = \"Current function is a function cygdb doesn't know about\"\nclass NoFunctionNameInFrameError(NoCythonFunctionInFrameError):\n    \"\"\"\n    raised when the name of the C function could not be determined\n    in the current C stack frame",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "NoFunctionNameInFrameError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class NoFunctionNameInFrameError(NoCythonFunctionInFrameError):\n    \"\"\"\n    raised when the name of the C function could not be determined\n    in the current C stack frame\n    \"\"\"\n    msg = ('C function name could not be determined in the current C stack '\n           'frame')\n# Parameters\nclass CythonParameter(gdb.Parameter):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonParameter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonParameter(gdb.Parameter):\n    \"\"\"\n    Base class for cython parameters\n    \"\"\"\n    def __init__(self, name, command_class, parameter_class, default=None):\n        self.show_doc = self.set_doc = self.__class__.__doc__\n        super(CythonParameter, self).__init__(name, command_class,\n                                              parameter_class)\n        if default is not None:\n            self.value = default",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CompleteUnqualifiedFunctionNames",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CompleteUnqualifiedFunctionNames(CythonParameter):\n    \"\"\"\n    Have 'cy break' complete unqualified function or method names.\n    \"\"\"\nclass ColorizeSourceCode(CythonParameter):\n    \"\"\"\n    Tell cygdb whether to colorize source code.\n    \"\"\"\nclass TerminalBackground(CythonParameter):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "ColorizeSourceCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class ColorizeSourceCode(CythonParameter):\n    \"\"\"\n    Tell cygdb whether to colorize source code.\n    \"\"\"\nclass TerminalBackground(CythonParameter):\n    \"\"\"\n    Tell cygdb about the user's terminal background (light or dark).\n    \"\"\"\nclass CythonParameters(object):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "TerminalBackground",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class TerminalBackground(CythonParameter):\n    \"\"\"\n    Tell cygdb about the user's terminal background (light or dark).\n    \"\"\"\nclass CythonParameters(object):\n    \"\"\"\n    Simple container class that might get more functionality in the distant\n    future (mostly to remind us that we're dealing with parameters).\n    \"\"\"\n    def __init__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonParameters",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonParameters(object):\n    \"\"\"\n    Simple container class that might get more functionality in the distant\n    future (mostly to remind us that we're dealing with parameters).\n    \"\"\"\n    def __init__(self):\n        self.complete_unqualified = CompleteUnqualifiedFunctionNames(\n            'cy_complete_unqualified',\n            gdb.COMMAND_BREAKPOINTS,\n            gdb.PARAM_BOOLEAN,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonCommand",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonCommand(gdb.Command, CythonBase):\n    \"\"\"\n    Base class for Cython commands\n    \"\"\"\n    command_class = gdb.COMMAND_NONE\n    @classmethod\n    def _register(cls, clsname, args, kwargs):\n        if not hasattr(cls, 'completer_class'):\n            return cls(clsname, cls.command_class, *args, **kwargs)\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyCy",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyCy(CythonCommand):\n    \"\"\"\n    Invoke a Cython command. Available commands are:\n        cy import\n        cy break\n        cy step\n        cy next\n        cy run\n        cy cont\n        cy finish",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyImport",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyImport(CythonCommand):\n    \"\"\"\n    Import debug information outputted by the Cython compiler\n    Example: cy import FILE...\n    \"\"\"\n    name = 'cy import'\n    command_class = gdb.COMMAND_STATUS\n    completer_class = gdb.COMPLETE_FILENAME\n    def invoke(self, args, from_tty):\n        if isinstance(args, BYTES):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyBreak",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyBreak(CythonCommand):\n    \"\"\"\n    Set a breakpoint for Cython code using Cython qualified name notation, e.g.:\n        cy break cython_modulename.ClassName.method_name...\n    or normal notation:\n        cy break function_or_method_name...\n    or for a line number:\n        cy break cython_module:lineno...\n    Set a Python breakpoint:\n        Break on any function or method named 'func' in module 'modname'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonInfo",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonInfo(CythonBase, libpython.PythonInfo):\n    \"\"\"\n    Implementation of the interface dictated by libpython.LanguageInfo.\n    \"\"\"\n    def lineno(self, frame):\n        # Take care of the Python and Cython levels. We need to care for both\n        # as we can't simply dispatch to 'py-step', since that would work for\n        # stepping through Python code, but it would not step back into Cython-\n        # related code. The C level should be dispatched to the 'step' command.\n        if self.is_cython_function(frame):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonExecutionControlCommand",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonExecutionControlCommand(CythonCommand,\n                                    libpython.ExecutionControlCommandBase):\n    @classmethod\n    def register(cls):\n        return cls(cls.name, cython_info)\nclass CyStep(CythonExecutionControlCommand, libpython.PythonStepperMixin):\n    \"Step through Cython, Python or C code.\"\n    name = 'cy -step'\n    stepinto = True\n    def invoke(self, args, from_tty):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyStep",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyStep(CythonExecutionControlCommand, libpython.PythonStepperMixin):\n    \"Step through Cython, Python or C code.\"\n    name = 'cy -step'\n    stepinto = True\n    def invoke(self, args, from_tty):\n        if self.is_python_function():\n            self.python_step(self.stepinto)\n        elif not self.is_cython_function():\n            if self.stepinto:\n                command = 'step'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyNext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyNext(CyStep):\n    \"Step-over Cython, Python or C code.\"\n    name = 'cy -next'\n    stepinto = False\nclass CyRun(CythonExecutionControlCommand):\n    \"\"\"\n    Run a Cython program. This is like the 'run' command, except that it\n    displays Cython or Python source lines as well\n    \"\"\"\n    name = 'cy run'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyRun",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyRun(CythonExecutionControlCommand):\n    \"\"\"\n    Run a Cython program. This is like the 'run' command, except that it\n    displays Cython or Python source lines as well\n    \"\"\"\n    name = 'cy run'\n    invoke = CythonExecutionControlCommand.run\nclass CyCont(CythonExecutionControlCommand):\n    \"\"\"\n    Continue a Cython program. This is like the 'run' command, except that it",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyCont",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyCont(CythonExecutionControlCommand):\n    \"\"\"\n    Continue a Cython program. This is like the 'run' command, except that it\n    displays Cython or Python source lines as well.\n    \"\"\"\n    name = 'cy cont'\n    invoke = CythonExecutionControlCommand.cont\nclass CyFinish(CythonExecutionControlCommand):\n    \"\"\"\n    Execute until the function returns.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyFinish",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyFinish(CythonExecutionControlCommand):\n    \"\"\"\n    Execute until the function returns.\n    \"\"\"\n    name = 'cy finish'\n    invoke = CythonExecutionControlCommand.finish\nclass CyUp(CythonCommand):\n    \"\"\"\n    Go up a Cython, Python or relevant C frame.\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyUp",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyUp(CythonCommand):\n    \"\"\"\n    Go up a Cython, Python or relevant C frame.\n    \"\"\"\n    name = 'cy up'\n    _command = 'up'\n    def invoke(self, *args):\n        try:\n            gdb.execute(self._command, to_string=True)\n            while not self.is_relevant_function(gdb.selected_frame()):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyDown",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyDown(CyUp):\n    \"\"\"\n    Go down a Cython, Python or relevant C frame.\n    \"\"\"\n    name = 'cy down'\n    _command = 'down'\nclass CySelect(CythonCommand):\n    \"\"\"\n    Select a frame. Use frame numbers as listed in `cy backtrace`.\n    This command is useful because `cy backtrace` prints a reversed backtrace.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CySelect",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CySelect(CythonCommand):\n    \"\"\"\n    Select a frame. Use frame numbers as listed in `cy backtrace`.\n    This command is useful because `cy backtrace` prints a reversed backtrace.\n    \"\"\"\n    name = 'cy select'\n    def invoke(self, stackno, from_tty):\n        try:\n            stackno = int(stackno)\n        except ValueError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyBacktrace",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyBacktrace(CythonCommand):\n    'Print the Cython stack'\n    name = 'cy bt'\n    alias = 'cy backtrace'\n    command_class = gdb.COMMAND_STACK\n    completer_class = gdb.COMPLETE_NONE\n    @require_running_program\n    def invoke(self, args, from_tty):\n        # get the first frame\n        frame = gdb.selected_frame()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyList",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyList(CythonCommand):\n    \"\"\"\n    List Cython source code. To disable to customize colouring see the cy_*\n    parameters.\n    \"\"\"\n    name = 'cy list'\n    command_class = gdb.COMMAND_FILES\n    completer_class = gdb.COMPLETE_NONE\n    # @dispatch_on_frame(c_command='list')\n    def invoke(self, _, from_tty):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyPrint",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyPrint(CythonCommand):\n    \"\"\"\n    Print a Cython variable using 'cy-print x' or 'cy-print module.function.x'\n    \"\"\"\n    name = 'cy print'\n    command_class = gdb.COMMAND_DATA\n    def invoke(self, name, from_tty, max_name_length=None):\n        if self.is_python_function():\n            return gdb.execute('py-print ' + name)\n        elif self.is_cython_function():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyLocals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyLocals(CythonCommand):\n    \"\"\"\n    List the locals from the current Cython frame.\n    \"\"\"\n    name = 'cy locals'\n    command_class = gdb.COMMAND_STACK\n    completer_class = gdb.COMPLETE_NONE\n    @dispatch_on_frame(c_command='info locals', python_command='py-locals')\n    def invoke(self, args, from_tty):\n        cython_function = self.get_cython_function()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyGlobals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyGlobals(CyLocals):\n    \"\"\"\n    List the globals from the current Cython module.\n    \"\"\"\n    name = 'cy globals'\n    command_class = gdb.COMMAND_STACK\n    completer_class = gdb.COMPLETE_NONE\n    @dispatch_on_frame(c_command='info variables', python_command='py-globals')\n    def invoke(self, args, from_tty):\n        global_python_dict = self.get_cython_globals_dict()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "EvaluateOrExecuteCodeMixin",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class EvaluateOrExecuteCodeMixin(object):\n    \"\"\"\n    Evaluate or execute Python code in a Cython or Python frame. The 'evalcode'\n    method evaluations Python code, prints a traceback if an exception went\n    uncaught, and returns any return value as a gdb.Value (NULL on exception).\n    \"\"\"\n    def _fill_locals_dict(self, executor, local_dict_pointer):\n        \"Fill a remotely allocated dict with values from the Cython C stack\"\n        cython_func = self.get_cython_function()\n        for name, cyvar in cython_func.locals.items():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyExec",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyExec(CythonCommand, libpython.PyExec, EvaluateOrExecuteCodeMixin):\n    \"\"\"\n    Execute Python code in the nearest Python or Cython frame.\n    \"\"\"\n    name = '-cy-exec'\n    command_class = gdb.COMMAND_STACK\n    completer_class = gdb.COMPLETE_NONE\n    def invoke(self, expr, from_tty):\n        expr, input_type = self.readcode(expr)\n        executor = libpython.PythonCodeExecutor()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CySet",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CySet(CythonCommand):\n    \"\"\"\n    Set a Cython variable to a certain value\n        cy set my_cython_c_variable = 10\n        cy set my_cython_py_variable = $cy_eval(\"{'doner': 'kebab'}\")\n    This is equivalent to\n        set $cy_value(\"my_cython_variable\") = 10\n    \"\"\"\n    name = 'cy set'\n    command_class = gdb.COMMAND_DATA",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyCName",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyCName(gdb.Function, CythonBase):\n    \"\"\"\n    Get the C name of a Cython variable in the current context.\n    Examples:\n        print $cy_cname(\"function\")\n        print $cy_cname(\"Class.method\")\n        print $cy_cname(\"module.function\")\n    \"\"\"\n    @require_cython_frame\n    @gdb_function_value_to_unicode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyCValue",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyCValue(CyCName):\n    \"\"\"\n    Get the value of a Cython variable.\n    \"\"\"\n    @require_cython_frame\n    @gdb_function_value_to_unicode\n    def invoke(self, cyname, frame=None):\n        globals_dict = self.get_cython_globals_dict()\n        cython_function = self.get_cython_function(frame)\n        if self.is_initialized(cython_function, cyname):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyLine",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyLine(gdb.Function, CythonBase):\n    \"\"\"\n    Get the current Cython line.\n    \"\"\"\n    @require_cython_frame\n    def invoke(self):\n        return self.get_cython_lineno()\nclass CyEval(gdb.Function, CythonBase, EvaluateOrExecuteCodeMixin):\n    \"\"\"\n    Evaluate Python code in the nearest Python or Cython frame and return",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyEval",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyEval(gdb.Function, CythonBase, EvaluateOrExecuteCodeMixin):\n    \"\"\"\n    Evaluate Python code in the nearest Python or Cython frame and return\n    \"\"\"\n    @gdb_function_value_to_unicode\n    def invoke(self, python_expression):\n        input_type = libpython.PythonCodeExecutor.Py_eval_input\n        return self.evalcode(python_expression, input_type)\ncython_info = CythonInfo()\ncy = CyCy.register()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "dont_suppress_errors",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "def dont_suppress_errors(function):\n    \"*sigh*, readline\"\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        try:\n            return function(*args, **kwargs)\n        except Exception:\n            traceback.print_exc()\n            raise\n    return wrapper",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "default_selected_gdb_frame",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "def default_selected_gdb_frame(err=True):\n    def decorator(function):\n        @functools.wraps(function)\n        def wrapper(self, frame=None, *args, **kwargs):\n            try:\n                frame = frame or gdb.selected_frame()\n            except RuntimeError:\n                raise gdb.GdbError(\"No frame is currently selected.\")\n            if err and frame.name() is None:\n                raise NoFunctionNameInFrameError()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "require_cython_frame",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "def require_cython_frame(function):\n    @functools.wraps(function)\n    @require_running_program\n    def wrapper(self, *args, **kwargs):\n        frame = kwargs.get('frame') or gdb.selected_frame()\n        if not self.is_cython_function(frame):\n            raise gdb.GdbError('Selected frame does not correspond with a '\n                               'Cython function we know about.')\n        return function(self, *args, **kwargs)\n    return wrapper",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "dispatch_on_frame",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "def dispatch_on_frame(c_command, python_command=None):\n    def decorator(function):\n        @functools.wraps(function)\n        def wrapper(self, *args, **kwargs):\n            is_cy = self.is_cython_function()\n            is_py = self.is_python_function()\n            if is_cy or (is_py and not python_command):\n                function(self, *args, **kwargs)\n            elif is_py:\n                gdb.execute(python_command)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "require_running_program",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "def require_running_program(function):\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        try:\n            gdb.selected_frame()\n        except RuntimeError:\n            raise gdb.GdbError(\"No frame is currently selected.\")\n        return function(*args, **kwargs)\n    return wrapper\ndef gdb_function_value_to_unicode(function):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "gdb_function_value_to_unicode",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "def gdb_function_value_to_unicode(function):\n    @functools.wraps(function)\n    def wrapper(self, string, *args, **kwargs):\n        if isinstance(string, gdb.Value):\n            string = string.string()\n        return function(self, string, *args, **kwargs)\n    return wrapper\n# Classes that represent the debug information\n# Don't rename the parameters of these classes, they come directly from the XML\nclass CythonModule(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "register_defines",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "def register_defines():\n    libpython.source_gdb_script(textwrap.dedent(\"\"\"\\\n        define cy step\n        cy -step\n        end\n        define cy next\n        cy -next\n        end\n        document cy step\n        %s",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CObject",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "CObject = 'CObject'\nPythonObject = 'PythonObject'\n_data_types = dict(CObject=CObject, PythonObject=PythonObject)\n_filesystemencoding = sys.getfilesystemencoding() or 'UTF-8'\n# decorators\ndef dont_suppress_errors(function):\n    \"*sigh*, readline\"\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "PythonObject",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "PythonObject = 'PythonObject'\n_data_types = dict(CObject=CObject, PythonObject=PythonObject)\n_filesystemencoding = sys.getfilesystemencoding() or 'UTF-8'\n# decorators\ndef dont_suppress_errors(function):\n    \"*sigh*, readline\"\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        try:\n            return function(*args, **kwargs)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "_data_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "_data_types = dict(CObject=CObject, PythonObject=PythonObject)\n_filesystemencoding = sys.getfilesystemencoding() or 'UTF-8'\n# decorators\ndef dont_suppress_errors(function):\n    \"*sigh*, readline\"\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        try:\n            return function(*args, **kwargs)\n        except Exception:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "_filesystemencoding",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "_filesystemencoding = sys.getfilesystemencoding() or 'UTF-8'\n# decorators\ndef dont_suppress_errors(function):\n    \"*sigh*, readline\"\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        try:\n            return function(*args, **kwargs)\n        except Exception:\n            traceback.print_exc()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "parameters",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "parameters = CythonParameters()\n# Commands\nclass CythonCommand(gdb.Command, CythonBase):\n    \"\"\"\n    Base class for Cython commands\n    \"\"\"\n    command_class = gdb.COMMAND_NONE\n    @classmethod\n    def _register(cls, clsname, args, kwargs):\n        if not hasattr(cls, 'completer_class'):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "sortkey",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "sortkey = lambda item: item[0].lower()\nclass CyLocals(CythonCommand):\n    \"\"\"\n    List the locals from the current Cython frame.\n    \"\"\"\n    name = 'cy locals'\n    command_class = gdb.COMMAND_STACK\n    completer_class = gdb.COMPLETE_NONE\n    @dispatch_on_frame(c_command='info locals', python_command='py-locals')\n    def invoke(self, args, from_tty):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "cython_info",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "cython_info = CythonInfo()\ncy = CyCy.register()\ncython_info.cy = cy\ndef register_defines():\n    libpython.source_gdb_script(textwrap.dedent(\"\"\"\\\n        define cy step\n        cy -step\n        end\n        define cy next\n        cy -next",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "cy",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "cy = CyCy.register()\ncython_info.cy = cy\ndef register_defines():\n    libpython.source_gdb_script(textwrap.dedent(\"\"\"\\\n        define cy step\n        cy -step\n        end\n        define cy next\n        cy -next\n        end",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "cython_info.cy",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "peekOfCode": "cython_info.cy = cy\ndef register_defines():\n    libpython.source_gdb_script(textwrap.dedent(\"\"\"\\\n        define cy step\n        cy -step\n        end\n        define cy next\n        cy -next\n        end\n        document cy step",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "NullPyObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class NullPyObjectPtr(RuntimeError):\n    pass\ndef safety_limit(val):\n    # Given an integer value from the process being debugged, limit it to some\n    # safety threshold so that arbitrary breakage within said process doesn't\n    # break the gdb process too much (e.g. sizes of iterations, sizes of lists)\n    return min(val, 1000)\ndef safe_range(val):\n    # As per range, but don't trust the value too much: cap it to a safety\n    # threshold in case the data was corrupted",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "StringTruncated",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class StringTruncated(RuntimeError):\n    pass\nclass TruncatedStringIO(object):\n    '''Similar to io.StringIO, but can truncate the output by raising a\n    StringTruncated exception'''\n    def __init__(self, maxlen=None):\n        self._val = ''\n        self.maxlen = maxlen\n    def write(self, data):\n        if self.maxlen:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "TruncatedStringIO",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class TruncatedStringIO(object):\n    '''Similar to io.StringIO, but can truncate the output by raising a\n    StringTruncated exception'''\n    def __init__(self, maxlen=None):\n        self._val = ''\n        self.maxlen = maxlen\n    def write(self, data):\n        if self.maxlen:\n            if len(data) + len(self._val) > self.maxlen:\n                # Truncation:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyObjectPtr(object):\n    \"\"\"\n    Class wrapping a gdb.Value that's either a (PyObject*) within the\n    inferior process, or some subclass pointer e.g. (PyBytesObject*)\n    There will be a subclass for every refined PyObject type that we care\n    about.\n    Note that at every stage the underlying pointer could be NULL, point\n    to corrupt data, etc; this is the debugger, after all.\n    \"\"\"\n    _typename = 'PyObject'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyVarObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyVarObjectPtr(PyObjectPtr):\n    _typename = 'PyVarObject'\nclass ProxyAlreadyVisited(object):\n    '''\n    Placeholder proxy to use when protecting against infinite recursion due to\n    loops in the object graph.\n    Analogous to the values emitted by the users of Py_ReprEnter and Py_ReprLeave\n    '''\n    def __init__(self, rep):\n        self._rep = rep",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "ProxyAlreadyVisited",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class ProxyAlreadyVisited(object):\n    '''\n    Placeholder proxy to use when protecting against infinite recursion due to\n    loops in the object graph.\n    Analogous to the values emitted by the users of Py_ReprEnter and Py_ReprLeave\n    '''\n    def __init__(self, rep):\n        self._rep = rep\n    def __repr__(self):\n        return self._rep",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "InstanceProxy",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class InstanceProxy(object):\n    def __init__(self, cl_name, attrdict, address):\n        self.cl_name = cl_name\n        self.attrdict = attrdict\n        self.address = address\n    def __repr__(self):\n        if isinstance(self.attrdict, dict):\n            kwargs = ', '.join([\"%s=%r\" % (arg, val)\n                                for arg, val in self.attrdict.iteritems()])\n            return '<%s(%s) at remote 0x%x>' % (self.cl_name,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "HeapTypeObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class HeapTypeObjectPtr(PyObjectPtr):\n    _typename = 'PyObject'\n    def get_attr_dict(self):\n        '''\n        Get the PyDictObject ptr representing the attribute dictionary\n        (or None if there's a problem)\n        '''\n        try:\n            typeobj = self.type()\n            dictoffset = int_from_int(typeobj.field('tp_dictoffset'))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "ProxyException",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class ProxyException(Exception):\n    def __init__(self, tp_name, args):\n        self.tp_name = tp_name\n        self.args = args\n    def __repr__(self):\n        return '%s%r' % (self.tp_name, self.args)\nclass PyBaseExceptionObjectPtr(PyObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyBaseExceptionObject* i.e. an exception\n    within the process being debugged.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyBaseExceptionObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyBaseExceptionObjectPtr(PyObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyBaseExceptionObject* i.e. an exception\n    within the process being debugged.\n    \"\"\"\n    _typename = 'PyBaseExceptionObject'\n    def proxyval(self, visited):\n        # Guard against infinite loops:\n        if self.as_address() in visited:\n            return ProxyAlreadyVisited('(...)')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyClassObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyClassObjectPtr(PyObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyClassObject* i.e. a <classobj>\n    instance within the process being debugged.\n    \"\"\"\n    _typename = 'PyClassObject'\nclass BuiltInFunctionProxy(object):\n    def __init__(self, ml_name):\n        self.ml_name = ml_name\n    def __repr__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "BuiltInFunctionProxy",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class BuiltInFunctionProxy(object):\n    def __init__(self, ml_name):\n        self.ml_name = ml_name\n    def __repr__(self):\n        return \"<built-in function %s>\" % self.ml_name\nclass BuiltInMethodProxy(object):\n    def __init__(self, ml_name, pyop_m_self):\n        self.ml_name = ml_name\n        self.pyop_m_self = pyop_m_self\n    def __repr__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "BuiltInMethodProxy",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class BuiltInMethodProxy(object):\n    def __init__(self, ml_name, pyop_m_self):\n        self.ml_name = ml_name\n        self.pyop_m_self = pyop_m_self\n    def __repr__(self):\n        return ('<built-in method %s of %s object at remote 0x%x>'\n                % (self.ml_name,\n                   self.pyop_m_self.safe_tp_name(),\n                   self.pyop_m_self.as_address())\n                )",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyCFunctionObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyCFunctionObjectPtr(PyObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyCFunctionObject*\n    (see Include/methodobject.h and Objects/methodobject.c)\n    \"\"\"\n    _typename = 'PyCFunctionObject'\n    def proxyval(self, visited):\n        m_ml = self.field('m_ml') # m_ml is a (PyMethodDef*)\n        ml_name = m_ml['ml_name'].string()\n        pyop_m_self = self.pyop_field('m_self')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyCodeObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyCodeObjectPtr(PyObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyCodeObject* i.e. a <code> instance\n    within the process being debugged.\n    \"\"\"\n    _typename = 'PyCodeObject'\n    def addr2line(self, addrq):\n        '''\n        Get the line number for a given bytecode offset\n        Analogous to PyCode_Addr2Line; translated from pseudocode in",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyDictObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyDictObjectPtr(PyObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyDictObject* i.e. a dict instance\n    within the process being debugged.\n    \"\"\"\n    _typename = 'PyDictObject'\n    def iteritems(self):\n        '''\n        Yields a sequence of (PyObjectPtr key, PyObjectPtr value) pairs,\n        analogous to dict.iteritems()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyListObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyListObjectPtr(PyObjectPtr):\n    _typename = 'PyListObject'\n    def __getitem__(self, i):\n        # Get the gdb.Value for the (PyObject*) with the given index:\n        field_ob_item = self.field('ob_item')\n        return field_ob_item[i]\n    def proxyval(self, visited):\n        # Guard against infinite loops:\n        if self.as_address() in visited:\n            return ProxyAlreadyVisited('[...]')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyLongObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyLongObjectPtr(PyObjectPtr):\n    _typename = 'PyLongObject'\n    def proxyval(self, visited):\n        '''\n        Python's Include/longobjrep.h has this declaration:\n           struct _longobject {\n               PyObject_VAR_HEAD\n               digit ob_digit[1];\n           };\n        with this description:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyBoolObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyBoolObjectPtr(PyLongObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyBoolObject* i.e. one of the two\n    <bool> instances (Py_True/Py_False) within the process being debugged.\n    \"\"\"\n    def proxyval(self, visited):\n        if PyLongObjectPtr.proxyval(self, visited):\n            return True\n        else:\n            return False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyNoneStructPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyNoneStructPtr(PyObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyObject* pointing to the\n    singleton (we hope) _Py_NoneStruct with ob_type PyNone_Type\n    \"\"\"\n    _typename = 'PyObject'\n    def proxyval(self, visited):\n        return None\nclass PyFrameObjectPtr(PyObjectPtr):\n    _typename = 'PyFrameObject'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyFrameObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyFrameObjectPtr(PyObjectPtr):\n    _typename = 'PyFrameObject'\n    def __init__(self, gdbval, cast_to=None):\n        PyObjectPtr.__init__(self, gdbval, cast_to)\n        if not self.is_optimized_out():\n            self.co = PyCodeObjectPtr.from_pyobject_ptr(self.field('f_code'))\n            self.co_name = self.co.pyop_field('co_name')\n            self.co_filename = self.co.pyop_field('co_filename')\n            self.f_lineno = int_from_int(self.field('f_lineno'))\n            self.f_lasti = int_from_int(self.field('f_lasti'))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PySetObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PySetObjectPtr(PyObjectPtr):\n    _typename = 'PySetObject'\n    @classmethod\n    def _dummy_key(self):\n        return gdb.lookup_global_symbol('_PySet_Dummy').value()\n    def __iter__(self):\n        dummy_ptr = self._dummy_key()\n        table = self.field('table')\n        for i in safe_range(self.field('mask') + 1):\n            setentry = table[i]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyBytesObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyBytesObjectPtr(PyObjectPtr):\n    _typename = 'PyBytesObject'\n    def __str__(self):\n        field_ob_size = self.field('ob_size')\n        field_ob_sval = self.field('ob_sval')\n        char_ptr = field_ob_sval.address.cast(_type_unsigned_char_ptr())\n        return ''.join([chr(char_ptr[i]) for i in safe_range(field_ob_size)])\n    def proxyval(self, visited):\n        return str(self)\n    def write_repr(self, out, visited):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyStringObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyStringObjectPtr(PyBytesObjectPtr):\n    _typename = 'PyStringObject'\nclass PyTupleObjectPtr(PyObjectPtr):\n    _typename = 'PyTupleObject'\n    def __getitem__(self, i):\n        # Get the gdb.Value for the (PyObject*) with the given index:\n        field_ob_item = self.field('ob_item')\n        return field_ob_item[i]\n    def proxyval(self, visited):\n        # Guard against infinite loops:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyTupleObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyTupleObjectPtr(PyObjectPtr):\n    _typename = 'PyTupleObject'\n    def __getitem__(self, i):\n        # Get the gdb.Value for the (PyObject*) with the given index:\n        field_ob_item = self.field('ob_item')\n        return field_ob_item[i]\n    def proxyval(self, visited):\n        # Guard against infinite loops:\n        if self.as_address() in visited:\n            return ProxyAlreadyVisited('(...)')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyTypeObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyTypeObjectPtr(PyObjectPtr):\n    _typename = 'PyTypeObject'\ndef _unichr_is_printable(char):\n    # Logic adapted from Python 3's Tools/unicode/makeunicodedata.py\n    if char == u\" \":\n        return True\n    import unicodedata\n    return unicodedata.category(char) not in (\"C\", \"Z\")\nif sys.maxunicode >= 0x10000:\n    _unichr = unichr",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyUnicodeObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyUnicodeObjectPtr(PyObjectPtr):\n    _typename = 'PyUnicodeObject'\n    def char_width(self):\n        _type_Py_UNICODE = gdb.lookup_type('Py_UNICODE')\n        return _type_Py_UNICODE.sizeof\n    def proxyval(self, visited):\n        global _is_pep393\n        if _is_pep393 is None:\n            fields = gdb.lookup_type('PyUnicodeObject').target().fields()\n            _is_pep393 = 'data' in [f.name for f in fields]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "wrapperobject",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class wrapperobject(PyObjectPtr):\n    _typename = 'wrapperobject'\n    def safe_name(self):\n        try:\n            name = self.field('descr')['d_base']['name'].string()\n            return repr(name)\n        except (NullPyObjectPtr, RuntimeError):\n            return '<unknown name>'\n    def safe_tp_name(self):\n        try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyObjectPtrPrinter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyObjectPtrPrinter:\n    \"Prints a (PyObject*)\"\n    def __init__ (self, gdbval):\n        self.gdbval = gdbval\n    def to_string (self):\n        pyop = PyObjectPtr.from_pyobject_ptr(self.gdbval)\n        if True:\n            return pyop.get_truncated_repr(MAX_OUTPUT_LEN)\n        else:\n            # Generate full proxy value then stringify it.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "Frame",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class Frame(object):\n    '''\n    Wrapper for gdb.Frame, adding various methods\n    '''\n    def __init__(self, gdbframe):\n        self._gdbframe = gdbframe\n    def older(self):\n        older = self._gdbframe.older()\n        if older:\n            return Frame(older)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyList",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyList(gdb.Command):\n    '''List the current Python source code, if any\n    Use\n       py-list START\n    to list at a different line number within the python source.\n    Use\n       py-list START, END\n    to list a specific range of lines within the python source.\n    '''\n    def __init__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyUp",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyUp(gdb.Command):\n    'Select and print the python stack frame that called this one (if any)'\n    def __init__(self):\n        gdb.Command.__init__ (self,\n                              \"py-up\",\n                              gdb.COMMAND_STACK,\n                              gdb.COMPLETE_NONE)\n    def invoke(self, args, from_tty):\n        move_in_stack(move_up=True)\nclass PyDown(gdb.Command):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyDown",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyDown(gdb.Command):\n    'Select and print the python stack frame called by this one (if any)'\n    def __init__(self):\n        gdb.Command.__init__ (self,\n                              \"py-down\",\n                              gdb.COMMAND_STACK,\n                              gdb.COMPLETE_NONE)\n    def invoke(self, args, from_tty):\n        move_in_stack(move_up=False)\n# Not all builds of gdb have gdb.Frame.select",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyBacktraceFull",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyBacktraceFull(gdb.Command):\n    'Display the current python frame and all the frames within its call stack (if any)'\n    def __init__(self):\n        gdb.Command.__init__ (self,\n                              \"py-bt-full\",\n                              gdb.COMMAND_STACK,\n                              gdb.COMPLETE_NONE)\n    def invoke(self, args, from_tty):\n        frame = Frame.get_selected_python_frame()\n        if not frame:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyBacktrace",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyBacktrace(gdb.Command):\n    'Display the current python frame and all the frames within its call stack (if any)'\n    def __init__(self):\n        gdb.Command.__init__ (self,\n                              \"py-bt\",\n                              gdb.COMMAND_STACK,\n                              gdb.COMPLETE_NONE)\n    def invoke(self, args, from_tty):\n        frame = Frame.get_selected_python_frame()\n        if not frame:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyPrint",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyPrint(gdb.Command):\n    'Look up the given python variable name, and print it'\n    def __init__(self):\n        gdb.Command.__init__ (self,\n                              \"py-print\",\n                              gdb.COMMAND_DATA,\n                              gdb.COMPLETE_NONE)\n    def invoke(self, args, from_tty):\n        name = str(args)\n        frame = Frame.get_selected_python_frame()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyLocals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyLocals(gdb.Command):\n    'Look up the given python variable name, and print it'\n    def __init__(self, command=\"py-locals\"):\n        gdb.Command.__init__ (self,\n                              command,\n                              gdb.COMMAND_DATA,\n                              gdb.COMPLETE_NONE)\n    def invoke(self, args, from_tty):\n        name = str(args)\n        frame = Frame.get_selected_python_frame()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyGlobals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyGlobals(PyLocals):\n    'List all the globals in the currently select Python frame'\n    def get_namespace(self, pyop_frame):\n        return pyop_frame.iter_globals()\nPyGlobals(\"py-globals\")\nclass PyNameEquals(gdb.Function):\n    def _get_pycurframe_attr(self, attr):\n        frame = Frame(gdb.selected_frame())\n        if frame.is_evalframeex():\n            pyframe = frame.get_pyop()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyNameEquals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyNameEquals(gdb.Function):\n    def _get_pycurframe_attr(self, attr):\n        frame = Frame(gdb.selected_frame())\n        if frame.is_evalframeex():\n            pyframe = frame.get_pyop()\n            if pyframe is None:\n                warnings.warn(\"Use a Python debug build, Python breakpoints \"\n                              \"won't work otherwise.\")\n                return None\n            return getattr(pyframe, attr).proxyval(set())",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyModEquals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyModEquals(PyNameEquals):\n    def invoke(self, modname):\n        attr = self._get_pycurframe_attr('co_filename')\n        if attr is not None:\n            filename, ext = os.path.splitext(os.path.basename(attr))\n            return filename == modname.string()\n        return False\nPyModEquals(\"pymod_equals\")\nclass PyBreak(gdb.Command):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyBreak",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyBreak(gdb.Command):\n    \"\"\"\n    Set a Python breakpoint. Examples:\n    Break on any function or method named 'func' in module 'modname'\n        py-break modname.func\n    Break on any function or method named 'func'\n        py-break func\n    \"\"\"\n    def invoke(self, funcname, from_tty):\n        if '.' in funcname:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "_LoggingState",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class _LoggingState(object):\n    \"\"\"\n    State that helps to provide a reentrant gdb.execute() function.\n    \"\"\"\n    def __init__(self):\n        f = tempfile.NamedTemporaryFile('r+')\n        self.file = f\n        self.filename = f.name\n        self.fd = f.fileno()\n        _execute(\"set logging file %s\" % self.filename)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "ExecutionControlCommandBase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class ExecutionControlCommandBase(gdb.Command):\n    \"\"\"\n    Superclass for language specific execution control. Language specific\n    features should be implemented by lang_info using the LanguageInfo\n    interface. 'name' is the name of the command.\n    \"\"\"\n    def __init__(self, name, lang_info):\n        super(ExecutionControlCommandBase, self).__init__(\n                                name, gdb.COMMAND_RUNNING, gdb.COMPLETE_NONE)\n        self.lang_info = lang_info",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "LanguageInfo",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class LanguageInfo(object):\n    \"\"\"\n    This class defines the interface that ExecutionControlCommandBase needs to\n    provide language-specific execution control.\n    Classes that implement this interface should implement:\n        lineno(frame)\n            Tells the current line number (only called for a relevant frame).\n            If lineno is a false value it is not checked for a difference.\n        is_relevant_function(frame)\n            tells whether we care about frame 'frame'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PythonInfo",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PythonInfo(LanguageInfo):\n    def pyframe(self, frame):\n        pyframe = Frame(frame).get_pyop()\n        if pyframe:\n            return pyframe\n        else:\n            raise gdb.RuntimeError(\n                \"Unable to find the Python frame, run your code with a debug \"\n                \"build (configure with --with-pydebug or compile with -g).\")\n    def lineno(self, frame):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PythonStepperMixin",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PythonStepperMixin(object):\n    \"\"\"\n    Make this a mixin so CyStep can also inherit from this and use a\n    CythonCodeStepper at the same time.\n    \"\"\"\n    def python_step(self, stepinto):\n        \"\"\"\n        Set a watchpoint on the Python bytecode instruction pointer and try\n        to finish the frame\n        \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyStep",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyStep(ExecutionControlCommandBase, PythonStepperMixin):\n    \"Step through Python code.\"\n    stepinto = True\n    def invoke(self, args, from_tty):\n        self.python_step(stepinto=self.stepinto)\nclass PyNext(PyStep):\n    \"Step-over Python code.\"\n    stepinto = False\nclass PyFinish(ExecutionControlCommandBase):\n    \"Execute until function returns to a caller.\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyNext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyNext(PyStep):\n    \"Step-over Python code.\"\n    stepinto = False\nclass PyFinish(ExecutionControlCommandBase):\n    \"Execute until function returns to a caller.\"\n    invoke = ExecutionControlCommandBase.finish\nclass PyRun(ExecutionControlCommandBase):\n    \"Run the program.\"\n    invoke = ExecutionControlCommandBase.run\nclass PyCont(ExecutionControlCommandBase):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyFinish",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyFinish(ExecutionControlCommandBase):\n    \"Execute until function returns to a caller.\"\n    invoke = ExecutionControlCommandBase.finish\nclass PyRun(ExecutionControlCommandBase):\n    \"Run the program.\"\n    invoke = ExecutionControlCommandBase.run\nclass PyCont(ExecutionControlCommandBase):\n    invoke = ExecutionControlCommandBase.cont\ndef _pointervalue(gdbval):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyRun",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyRun(ExecutionControlCommandBase):\n    \"Run the program.\"\n    invoke = ExecutionControlCommandBase.run\nclass PyCont(ExecutionControlCommandBase):\n    invoke = ExecutionControlCommandBase.cont\ndef _pointervalue(gdbval):\n    \"\"\"\n    Return the value of the pointer as a Python int.\n    gdbval.type must be a pointer type\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyCont",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyCont(ExecutionControlCommandBase):\n    invoke = ExecutionControlCommandBase.cont\ndef _pointervalue(gdbval):\n    \"\"\"\n    Return the value of the pointer as a Python int.\n    gdbval.type must be a pointer type\n    \"\"\"\n    # don't convert with int() as it will raise a RuntimeError\n    if gdbval.address is not None:\n        return int(gdbval.address)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PythonCodeExecutor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PythonCodeExecutor(object):\n    Py_single_input = 256\n    Py_file_input = 257\n    Py_eval_input = 258\n    def malloc(self, size):\n        chunk = (gdb.parse_and_eval(\"(void *) malloc((size_t) %d)\" % size))\n        pointer = pointervalue(chunk)\n        if pointer == 0:\n            raise gdb.GdbError(\"No memory could be allocated in the inferior.\")\n        return pointer",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "FetchAndRestoreError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class FetchAndRestoreError(PythonCodeExecutor):\n    \"\"\"\n    Context manager that fetches the error indicator in the inferior and\n    restores it on exit.\n    \"\"\"\n    def __init__(self):\n        self.sizeof_PyObjectPtr = gdb.lookup_type('PyObject').pointer().sizeof\n        self.pointer = self.malloc(self.sizeof_PyObjectPtr * 3)\n        type = self.pointer\n        value = self.pointer + self.sizeof_PyObjectPtr",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "FixGdbCommand",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class FixGdbCommand(gdb.Command):\n    def __init__(self, command, actual_command):\n        super(FixGdbCommand, self).__init__(command, gdb.COMMAND_DATA,\n                                            gdb.COMPLETE_NONE)\n        self.actual_command = actual_command\n    def fix_gdb(self):\n        \"\"\"\n        It seems that invoking either 'cy exec' and 'py-exec' work perfectly\n        fine, but after this gdb's python API is entirely broken.\n        Maybe some uncleared exception value is still set?",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyExec",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyExec(gdb.Command):\n    def readcode(self, expr):\n        if expr:\n            return expr, PythonCodeExecutor.Py_single_input\n        else:\n            lines = []\n            while True:\n                try:\n                    line = input('>')\n                except EOFError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "safety_limit",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "def safety_limit(val):\n    # Given an integer value from the process being debugged, limit it to some\n    # safety threshold so that arbitrary breakage within said process doesn't\n    # break the gdb process too much (e.g. sizes of iterations, sizes of lists)\n    return min(val, 1000)\ndef safe_range(val):\n    # As per range, but don't trust the value too much: cap it to a safety\n    # threshold in case the data was corrupted\n    return xrange(safety_limit(int(val)))\nif sys.version_info[0] >= 3:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "safe_range",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "def safe_range(val):\n    # As per range, but don't trust the value too much: cap it to a safety\n    # threshold in case the data was corrupted\n    return xrange(safety_limit(int(val)))\nif sys.version_info[0] >= 3:\n    def write_unicode(file, text):\n        file.write(text)\nelse:\n    def write_unicode(file, text):\n        # Write a byte or unicode string to file. Unicode strings are encoded to",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "int_from_int",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "def int_from_int(gdbval):\n    return int(str(gdbval))\ndef stringify(val):\n    # TODO: repr() puts everything on one line; pformat can be nicer, but\n    # can lead to v.long results; this function isolates the choice\n    if True:\n        return repr(val)\n    else:\n        from pprint import pformat\n        return pformat(val)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "def stringify(val):\n    # TODO: repr() puts everything on one line; pformat can be nicer, but\n    # can lead to v.long results; this function isolates the choice\n    if True:\n        return repr(val)\n    else:\n        from pprint import pformat\n        return pformat(val)\nclass PyObjectPtrPrinter:\n    \"Prints a (PyObject*)\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "pretty_printer_lookup",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "def pretty_printer_lookup(gdbval):\n    type = gdbval.type.unqualified()\n    if type.code != gdb.TYPE_CODE_PTR:\n        return None\n    type = type.target().unqualified()\n    t = str(type)\n    if t in (\"PyObject\", \"PyFrameObject\", \"PyUnicodeObject\", \"wrapperobject\"):\n        return PyObjectPtrPrinter(gdbval)\n\"\"\"\nDuring development, I've been manually invoking the code in this way:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "registe",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "def register (obj):\n    if obj is None:\n        obj = gdb\n    # Wire up the pretty-printer\n    obj.pretty_printers.append(pretty_printer_lookup)\nregister (gdb.current_objfile ())\n# Unfortunately, the exact API exposed by the gdb module varies somewhat\n# from build to build\n# See http://bugs.python.org/issue8279?#msg102276\nclass Frame(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "move_in_stack",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "def move_in_stack(move_up):\n    '''Move up or down the stack (for the py-up/py-down command)'''\n    frame = Frame.get_selected_python_frame()\n    if not frame:\n        print('Unable to locate python frame')\n        return\n    while frame:\n        if move_up:\n            iter_frame = frame.older()\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "execute",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "def execute(command, from_tty=False, to_string=False):\n    \"\"\"\n    Replace gdb.execute() with this function and have it accept a 'to_string'\n    argument (new in 7.2). Have it properly capture stderr also. Ensure\n    reentrancy.\n    \"\"\"\n    if to_string:\n        with _logging_state as state:\n            _execute(command, from_tty)\n            return state.getoutput()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "get_selected_inferior",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "def get_selected_inferior():\n    \"\"\"\n    Return the selected inferior in gdb.\n    \"\"\"\n    # Woooh, another bug in gdb! Is there an end in sight?\n    # http://sourceware.org/bugzilla/show_bug.cgi?id=12212\n    return gdb.inferiors()[0]\n    selected_thread = gdb.selected_thread()\n    for inferior in gdb.inferiors():\n        for thread in inferior.threads():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "source_gdb_script",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "def source_gdb_script(script_contents, to_string=False):\n    \"\"\"\n    Source a gdb script with script_contents passed as a string. This is useful\n    to provide defines for py-step and py-next to make them repeatable (this is\n    not possible with gdb.execute()). See\n    http://sourceware.org/bugzilla/show_bug.cgi?id=12216\n    \"\"\"\n    fd, filename = tempfile.mkstemp()\n    f = os.fdopen(fd, 'w')\n    f.write(script_contents)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "register_defines",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "def register_defines():\n    source_gdb_script(textwrap.dedent(\"\"\"\\\n        define py-step\n        -py-step\n        end\n        define py-next\n        -py-next\n        end\n        document py-step\n        %s",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "stackdepth",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "def stackdepth(frame):\n    \"Tells the stackdepth of a gdb frame.\"\n    depth = 0\n    while frame:\n        frame = frame.older()\n        depth += 1\n    return depth\nclass ExecutionControlCommandBase(gdb.Command):\n    \"\"\"\n    Superclass for language specific execution control. Language specific",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "pointervalue",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "def pointervalue(gdbval):\n    pointer = _pointervalue(gdbval)\n    try:\n        if pointer < 0:\n            raise gdb.GdbError(\"Negative pointer value, presumably a bug \"\n                               \"in gdb, aborting.\")\n    except RuntimeError:\n        # work around yet another bug in gdb where you get random behaviour\n        # and tracebacks\n        pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "get_inferior_unicode_postfix",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "def get_inferior_unicode_postfix():\n    try:\n        gdb.parse_and_eval('PyUnicode_FromEncodedObject')\n    except RuntimeError:\n        try:\n            gdb.parse_and_eval('PyUnicodeUCS2_FromEncodedObject')\n        except RuntimeError:\n            return 'UCS4'\n        else:\n            return 'UCS2'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "_is_pep393",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "_is_pep393 = None\nPy_TPFLAGS_HEAPTYPE = (1 << 9)\nPy_TPFLAGS_LONG_SUBCLASS     = (1 << 24)\nPy_TPFLAGS_LIST_SUBCLASS     = (1 << 25)\nPy_TPFLAGS_TUPLE_SUBCLASS    = (1 << 26)\nPy_TPFLAGS_BYTES_SUBCLASS    = (1 << 27)\nPy_TPFLAGS_UNICODE_SUBCLASS  = (1 << 28)\nPy_TPFLAGS_DICT_SUBCLASS     = (1 << 29)\nPy_TPFLAGS_BASE_EXC_SUBCLASS = (1 << 30)\nPy_TPFLAGS_TYPE_SUBCLASS     = (1 << 31)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "Py_TPFLAGS_HEAPTYPE",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "Py_TPFLAGS_HEAPTYPE = (1 << 9)\nPy_TPFLAGS_LONG_SUBCLASS     = (1 << 24)\nPy_TPFLAGS_LIST_SUBCLASS     = (1 << 25)\nPy_TPFLAGS_TUPLE_SUBCLASS    = (1 << 26)\nPy_TPFLAGS_BYTES_SUBCLASS    = (1 << 27)\nPy_TPFLAGS_UNICODE_SUBCLASS  = (1 << 28)\nPy_TPFLAGS_DICT_SUBCLASS     = (1 << 29)\nPy_TPFLAGS_BASE_EXC_SUBCLASS = (1 << 30)\nPy_TPFLAGS_TYPE_SUBCLASS     = (1 << 31)\nMAX_OUTPUT_LEN=1024",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "Py_TPFLAGS_BASE_EXC_SUBCLASS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "Py_TPFLAGS_BASE_EXC_SUBCLASS = (1 << 30)\nPy_TPFLAGS_TYPE_SUBCLASS     = (1 << 31)\nMAX_OUTPUT_LEN=1024\nhexdigits = \"0123456789abcdef\"\nENCODING = locale.getpreferredencoding()\nEVALFRAME = '_PyEval_EvalFrameDefault'\nclass NullPyObjectPtr(RuntimeError):\n    pass\ndef safety_limit(val):\n    # Given an integer value from the process being debugged, limit it to some",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "hexdigits",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "hexdigits = \"0123456789abcdef\"\nENCODING = locale.getpreferredencoding()\nEVALFRAME = '_PyEval_EvalFrameDefault'\nclass NullPyObjectPtr(RuntimeError):\n    pass\ndef safety_limit(val):\n    # Given an integer value from the process being debugged, limit it to some\n    # safety threshold so that arbitrary breakage within said process doesn't\n    # break the gdb process too much (e.g. sizes of iterations, sizes of lists)\n    return min(val, 1000)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "ENCODING",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "ENCODING = locale.getpreferredencoding()\nEVALFRAME = '_PyEval_EvalFrameDefault'\nclass NullPyObjectPtr(RuntimeError):\n    pass\ndef safety_limit(val):\n    # Given an integer value from the process being debugged, limit it to some\n    # safety threshold so that arbitrary breakage within said process doesn't\n    # break the gdb process too much (e.g. sizes of iterations, sizes of lists)\n    return min(val, 1000)\ndef safe_range(val):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "EVALFRAME",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "EVALFRAME = '_PyEval_EvalFrameDefault'\nclass NullPyObjectPtr(RuntimeError):\n    pass\ndef safety_limit(val):\n    # Given an integer value from the process being debugged, limit it to some\n    # safety threshold so that arbitrary breakage within said process doesn't\n    # break the gdb process too much (e.g. sizes of iterations, sizes of lists)\n    return min(val, 1000)\ndef safe_range(val):\n    # As per range, but don't trust the value too much: cap it to a safety",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "_PyObject_VAR_SIZE._type_size_t",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "_PyObject_VAR_SIZE._type_size_t = None\nclass HeapTypeObjectPtr(PyObjectPtr):\n    _typename = 'PyObject'\n    def get_attr_dict(self):\n        '''\n        Get the PyDictObject ptr representing the attribute dictionary\n        (or None if there's a problem)\n        '''\n        try:\n            typeobj = self.type()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "_execute",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "_execute = gdb.execute\ngdb.execute = execute\n_logging_state = _LoggingState()\ndef get_selected_inferior():\n    \"\"\"\n    Return the selected inferior in gdb.\n    \"\"\"\n    # Woooh, another bug in gdb! Is there an end in sight?\n    # http://sourceware.org/bugzilla/show_bug.cgi?id=12212\n    return gdb.inferiors()[0]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "gdb.execute",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "gdb.execute = execute\n_logging_state = _LoggingState()\ndef get_selected_inferior():\n    \"\"\"\n    Return the selected inferior in gdb.\n    \"\"\"\n    # Woooh, another bug in gdb! Is there an end in sight?\n    # http://sourceware.org/bugzilla/show_bug.cgi?id=12212\n    return gdb.inferiors()[0]\n    selected_thread = gdb.selected_thread()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "_logging_state",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "peekOfCode": "_logging_state = _LoggingState()\ndef get_selected_inferior():\n    \"\"\"\n    Return the selected inferior in gdb.\n    \"\"\"\n    # Woooh, another bug in gdb! Is there an end in sight?\n    # http://sourceware.org/bugzilla/show_bug.cgi?id=12212\n    return gdb.inferiors()[0]\n    selected_thread = gdb.selected_thread()\n    for inferior in gdb.inferiors():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "new_build_ext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.build_ext",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.build_ext",
        "peekOfCode": "class new_build_ext(_build_ext, object):\n    def finalize_options(self):\n        if self.distribution.ext_modules:\n            nthreads = getattr(self, 'parallel', None)  # -j option in Py3.5+\n            nthreads = int(nthreads) if nthreads else None\n            from Cython.Build.Dependencies import cythonize\n            self.distribution.ext_modules[:] = cythonize(\n                self.distribution.ext_modules, nthreads=nthreads, force=self.force)\n        super(new_build_ext, self).finalize_options()\n# This will become new_build_ext in the future.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.build_ext",
        "documentation": {}
    },
    {
        "label": "Extension",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.extension",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.extension",
        "peekOfCode": "class Extension(_Extension.Extension):\n    # When adding arguments to this constructor, be sure to update\n    # user_options.extend in build_ext.py.\n    def __init__(self, name, sources,\n                 include_dirs=None,\n                 define_macros=None,\n                 undef_macros=None,\n                 library_dirs=None,\n                 libraries=None,\n                 runtime_library_dirs=None,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.extension",
        "documentation": {}
    },
    {
        "label": "__revision__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.extension",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.extension",
        "peekOfCode": "__revision__ = \"$Id:$\"\nimport sys\nimport distutils.extension as _Extension\ntry:\n    import warnings\nexcept ImportError:\n    warnings = None\nclass Extension(_Extension.Extension):\n    # When adding arguments to this constructor, be sure to update\n    # user_options.extend in build_ext.py.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.extension",
        "documentation": {}
    },
    {
        "label": "read_setup_file",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.extension",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.extension",
        "peekOfCode": "read_setup_file = _Extension.read_setup_file\n# reuse and extend original docstring from base class (if we can)\nif sys.version_info[0] < 3 and _Extension.Extension.__doc__:\n    # -OO discards docstrings\n    Extension.__doc__ = _Extension.Extension.__doc__ + \"\"\"\\\n    cython_include_dirs : [string]\n        list of directories to search for Pyrex header files (.pxd) (in\n        Unix form for portability)\n    cython_directives : {string:value}\n        dict of compiler directives",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.extension",
        "documentation": {}
    },
    {
        "label": "Optimization",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "peekOfCode": "class Optimization(object):\n    def __init__(self):\n        self.flags = (\n            'OPT',\n            'CFLAGS',\n            'CPPFLAGS',\n            'EXTRA_CFLAGS',\n            'BASECFLAGS',\n            'PY_CFLAGS',\n        )",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "documentation": {}
    },
    {
        "label": "old_build_ext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "peekOfCode": "class old_build_ext(_build_ext.build_ext):\n    description = \"build C/C++ and Cython extensions (compile/link to build directory)\"\n    sep_by = _build_ext.build_ext.sep_by\n    user_options = _build_ext.build_ext.user_options[:]\n    boolean_options = _build_ext.build_ext.boolean_options[:]\n    help_options = _build_ext.build_ext.help_options[:]\n    # Add the pyrex specific data.\n    user_options.extend([\n        ('cython-cplus', None,\n         \"generate C++ source files\"),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "documentation": {}
    },
    {
        "label": "__revision__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "peekOfCode": "__revision__ = \"$Id:$\"\nimport inspect\nimport sys\nimport os\nfrom distutils.errors import DistutilsPlatformError\nfrom distutils.dep_util import newer, newer_group\nfrom distutils import log\nfrom distutils.command import build_ext as _build_ext\nfrom distutils import sysconfig\nimport warnings",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "documentation": {}
    },
    {
        "label": "extension_name_re",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "peekOfCode": "extension_name_re = _build_ext.extension_name_re\nshow_compilers = _build_ext.show_compilers\nclass Optimization(object):\n    def __init__(self):\n        self.flags = (\n            'OPT',\n            'CFLAGS',\n            'CPPFLAGS',\n            'EXTRA_CFLAGS',\n            'BASECFLAGS',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "documentation": {}
    },
    {
        "label": "show_compilers",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "peekOfCode": "show_compilers = _build_ext.show_compilers\nclass Optimization(object):\n    def __init__(self):\n        self.flags = (\n            'OPT',\n            'CFLAGS',\n            'CPPFLAGS',\n            'EXTRA_CFLAGS',\n            'BASECFLAGS',\n            'PY_CFLAGS',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "documentation": {}
    },
    {
        "label": "optimization",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "peekOfCode": "optimization = Optimization()\nclass old_build_ext(_build_ext.build_ext):\n    description = \"build C/C++ and Cython extensions (compile/link to build directory)\"\n    sep_by = _build_ext.build_ext.sep_by\n    user_options = _build_ext.build_ext.user_options[:]\n    boolean_options = _build_ext.build_ext.boolean_options[:]\n    help_options = _build_ext.build_ext.help_options[:]\n    # Add the pyrex specific data.\n    user_options.extend([\n        ('cython-cplus', None,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Distutils.old_build_ext",
        "documentation": {}
    },
    {
        "label": "Action",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "peekOfCode": "class Action(object):\n    def perform(self, token_stream, text):\n        pass  # abstract\n    def same_as(self, other):\n        return self is other\nclass Return(Action):\n    \"\"\"\n    Internal Plex action which causes |value| to\n    be returned as the value of the associated token\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "Return",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "peekOfCode": "class Return(Action):\n    \"\"\"\n    Internal Plex action which causes |value| to\n    be returned as the value of the associated token\n    \"\"\"\n    def __init__(self, value):\n        self.value = value\n    def perform(self, token_stream, text):\n        return self.value\n    def same_as(self, other):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "Call",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "peekOfCode": "class Call(Action):\n    \"\"\"\n    Internal Plex action which causes a function to be called.\n    \"\"\"\n    def __init__(self, function):\n        self.function = function\n    def perform(self, token_stream, text):\n        return self.function(token_stream, text)\n    def __repr__(self):\n        return \"Call(%s)\" % self.function.__name__",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "Begin",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "peekOfCode": "class Begin(Action):\n    \"\"\"\n    Begin(state_name) is a Plex action which causes the Scanner to\n    enter the state |state_name|. See the docstring of Plex.Lexicon\n    for more information.\n    \"\"\"\n    def __init__(self, state_name):\n        self.state_name = state_name\n    def perform(self, token_stream, text):\n        token_stream.begin(self.state_name)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "Ignore",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "peekOfCode": "class Ignore(Action):\n    \"\"\"\n    IGNORE is a Plex action which causes its associated token\n    to be ignored. See the docstring of Plex.Lexicon  for more\n    information.\n    \"\"\"\n    def perform(self, token_stream, text):\n        return None\n    def __repr__(self):\n        return \"IGNORE\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "Text",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "peekOfCode": "class Text(Action):\n    \"\"\"\n    TEXT is a Plex action which causes the text of a token to\n    be returned as the value of the token. See the docstring of\n    Plex.Lexicon  for more information.\n    \"\"\"\n    def perform(self, token_stream, text):\n        return text\n    def __repr__(self):\n        return \"TEXT\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "IGNORE",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "peekOfCode": "IGNORE = Ignore()\n#IGNORE.__doc__ = Ignore.__doc__\nclass Text(Action):\n    \"\"\"\n    TEXT is a Plex action which causes the text of a token to\n    be returned as the value of the token. See the docstring of\n    Plex.Lexicon  for more information.\n    \"\"\"\n    def perform(self, token_stream, text):\n        return text",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "#IGNORE.__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "peekOfCode": "#IGNORE.__doc__ = Ignore.__doc__\nclass Text(Action):\n    \"\"\"\n    TEXT is a Plex action which causes the text of a token to\n    be returned as the value of the token. See the docstring of\n    Plex.Lexicon  for more information.\n    \"\"\"\n    def perform(self, token_stream, text):\n        return text\n    def __repr__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "peekOfCode": "TEXT = Text()\n#TEXT.__doc__ = Text.__doc__",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "#TEXT.__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "peekOfCode": "#TEXT.__doc__ = Text.__doc__",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "StateMap",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.DFA",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.DFA",
        "peekOfCode": "class StateMap(object):\n    \"\"\"\n    Helper class used by nfa_to_dfa() to map back and forth between\n    sets of states from the old machine and states of the new machine.\n    \"\"\"\n    new_machine = None      # Machine\n    old_to_new_dict = None  # {(old_state,...) : new_state}\n    new_to_old_dict = None  # {id(new_state) : old_state_set}\n    def __init__(self, new_machine):\n        self.new_machine = new_machine",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.DFA",
        "documentation": {}
    },
    {
        "label": "nfa_to_dfa",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.DFA",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.DFA",
        "peekOfCode": "def nfa_to_dfa(old_machine, debug=None):\n    \"\"\"\n    Given a nondeterministic Machine, return a new equivalent\n    Machine which is deterministic.\n    \"\"\"\n    # We build a new machine whose states correspond to sets of states\n    # in the old machine. Initially we add a new state corresponding to\n    # the epsilon-closure of each initial old state. Then we give transitions\n    # to each new state which are the union of all transitions out of any\n    # of the corresponding old states. The new state reached on a given",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.DFA",
        "documentation": {}
    },
    {
        "label": "set_epsilon_closure",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.DFA",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.DFA",
        "peekOfCode": "def set_epsilon_closure(state_set):\n    \"\"\"\n    Given a set of states, return the union of the epsilon\n    closures of its member states.\n    \"\"\"\n    result = {}\n    for state1 in state_set:\n        for state2 in epsilon_closure(state1):\n            result[state2] = 1\n    return result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.DFA",
        "documentation": {}
    },
    {
        "label": "epsilon_closure",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.DFA",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.DFA",
        "peekOfCode": "def epsilon_closure(state):\n    \"\"\"\n    Return the set of states reachable from the given state\n    by epsilon moves.\n    \"\"\"\n    # Cache the result\n    result = state.epsilon_closure\n    if result is None:\n        result = {}\n        state.epsilon_closure = result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.DFA",
        "documentation": {}
    },
    {
        "label": "add_to_epsilon_closure",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.DFA",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.DFA",
        "peekOfCode": "def add_to_epsilon_closure(state_set, state):\n    \"\"\"\n    Recursively add to |state_set| states reachable from the given state\n    by epsilon moves.\n    \"\"\"\n    if not state_set.get(state, 0):\n        state_set[state] = 1\n        state_set_2 = state.transitions.get_epsilon()\n        if state_set_2:\n            for state2 in state_set_2:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.DFA",
        "documentation": {}
    },
    {
        "label": "PlexError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "peekOfCode": "class PlexError(Exception):\n    message = \"\"\nclass PlexTypeError(PlexError, TypeError):\n    pass\nclass PlexValueError(PlexError, ValueError):\n    pass\nclass InvalidRegex(PlexError):\n    pass\nclass InvalidToken(PlexError):\n    def __init__(self, token_number, message):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "PlexTypeError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "peekOfCode": "class PlexTypeError(PlexError, TypeError):\n    pass\nclass PlexValueError(PlexError, ValueError):\n    pass\nclass InvalidRegex(PlexError):\n    pass\nclass InvalidToken(PlexError):\n    def __init__(self, token_number, message):\n        PlexError.__init__(self, \"Token number %d: %s\" % (token_number, message))\nclass InvalidScanner(PlexError):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "PlexValueError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "peekOfCode": "class PlexValueError(PlexError, ValueError):\n    pass\nclass InvalidRegex(PlexError):\n    pass\nclass InvalidToken(PlexError):\n    def __init__(self, token_number, message):\n        PlexError.__init__(self, \"Token number %d: %s\" % (token_number, message))\nclass InvalidScanner(PlexError):\n    pass\nclass AmbiguousAction(PlexError):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "InvalidRegex",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "peekOfCode": "class InvalidRegex(PlexError):\n    pass\nclass InvalidToken(PlexError):\n    def __init__(self, token_number, message):\n        PlexError.__init__(self, \"Token number %d: %s\" % (token_number, message))\nclass InvalidScanner(PlexError):\n    pass\nclass AmbiguousAction(PlexError):\n    message = \"Two tokens with different actions can match the same string\"\n    def __init__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "InvalidToken",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "peekOfCode": "class InvalidToken(PlexError):\n    def __init__(self, token_number, message):\n        PlexError.__init__(self, \"Token number %d: %s\" % (token_number, message))\nclass InvalidScanner(PlexError):\n    pass\nclass AmbiguousAction(PlexError):\n    message = \"Two tokens with different actions can match the same string\"\n    def __init__(self):\n        pass\nclass UnrecognizedInput(PlexError):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "InvalidScanner",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "peekOfCode": "class InvalidScanner(PlexError):\n    pass\nclass AmbiguousAction(PlexError):\n    message = \"Two tokens with different actions can match the same string\"\n    def __init__(self):\n        pass\nclass UnrecognizedInput(PlexError):\n    scanner = None\n    position = None\n    state_name = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "AmbiguousAction",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "peekOfCode": "class AmbiguousAction(PlexError):\n    message = \"Two tokens with different actions can match the same string\"\n    def __init__(self):\n        pass\nclass UnrecognizedInput(PlexError):\n    scanner = None\n    position = None\n    state_name = None\n    def __init__(self, scanner, state_name):\n        self.scanner = scanner",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "UnrecognizedInput",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "peekOfCode": "class UnrecognizedInput(PlexError):\n    scanner = None\n    position = None\n    state_name = None\n    def __init__(self, scanner, state_name):\n        self.scanner = scanner\n        self.position = scanner.get_position()\n        self.state_name = state_name\n    def __str__(self):\n        return (\"'%s', line %d, char %d: Token not recognised in state %r\" % (",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Lexicons",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Lexicons",
        "peekOfCode": "class State(object):\n    \"\"\"\n    This class is used as part of a Plex.Lexicon specification to\n    introduce a user-defined state.\n    Constructor:\n       State(name, token_specifications)\n    \"\"\"\n    name = None\n    tokens = None\n    def __init__(self, name, tokens):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Lexicons",
        "documentation": {}
    },
    {
        "label": "Lexicon",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Lexicons",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Lexicons",
        "peekOfCode": "class Lexicon(object):\n    \"\"\"\n    Lexicon(specification) builds a lexical analyser from the given\n    |specification|. The specification consists of a list of\n    specification items. Each specification item may be either:\n       1) A token definition, which is a tuple:\n             (pattern, action)\n          The |pattern| is a regular axpression built using the\n          constructors defined in the Plex module.\n          The |action| is the action to be performed when this pattern",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Lexicons",
        "documentation": {}
    },
    {
        "label": "DUMP_NFA",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Lexicons",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Lexicons",
        "peekOfCode": "DUMP_NFA = 1\nDUMP_DFA = 2\nclass State(object):\n    \"\"\"\n    This class is used as part of a Plex.Lexicon specification to\n    introduce a user-defined state.\n    Constructor:\n       State(name, token_specifications)\n    \"\"\"\n    name = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Lexicons",
        "documentation": {}
    },
    {
        "label": "DUMP_DFA",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Lexicons",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Lexicons",
        "peekOfCode": "DUMP_DFA = 2\nclass State(object):\n    \"\"\"\n    This class is used as part of a Plex.Lexicon specification to\n    introduce a user-defined state.\n    Constructor:\n       State(name, token_specifications)\n    \"\"\"\n    name = None\n    tokens = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Lexicons",
        "documentation": {}
    },
    {
        "label": "Machine",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Machines",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Machines",
        "peekOfCode": "class Machine(object):\n    \"\"\"A collection of Nodes representing an NFA or DFA.\"\"\"\n    states = None          # [Node]\n    next_state_number = 1\n    initial_states = None  # {(name, bol): Node}\n    def __init__(self):\n        self.states = []\n        self.initial_states = {}\n    def __del__(self):\n        #print \"Destroying\", self ###",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Machines",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Machines",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Machines",
        "peekOfCode": "class Node(object):\n    \"\"\"A state of an NFA or DFA.\"\"\"\n    transitions = None      # TransitionMap\n    action = None           # Action\n    action_priority = None  # integer\n    number = 0              # for debug output\n    epsilon_closure = None  # used by nfa_to_dfa()\n    def __init__(self):\n        # Preinitialise the list of empty transitions, because\n        # the nfa-to-dfa algorithm needs it",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Machines",
        "documentation": {}
    },
    {
        "label": "FastMachine",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Machines",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Machines",
        "peekOfCode": "class FastMachine(object):\n    \"\"\"\n    FastMachine is a deterministic machine represented in a way that\n    allows fast scanning.\n    \"\"\"\n    initial_states = None  # {state_name:state}\n    states = None          # [state]  where state = {event:state, 'else':state, 'action':Action}\n    next_number = 1        # for debugging\n    new_state_template = {\n        '': None, 'bol': None, 'eol': None, 'eof': None, 'else': None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Machines",
        "documentation": {}
    },
    {
        "label": "LOWEST_PRIORITY",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Machines",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Machines",
        "peekOfCode": "LOWEST_PRIORITY = -maxint\nclass Machine(object):\n    \"\"\"A collection of Nodes representing an NFA or DFA.\"\"\"\n    states = None          # [Node]\n    next_state_number = 1\n    initial_states = None  # {(name, bol): Node}\n    def __init__(self):\n        self.states = []\n        self.initial_states = {}\n    def __del__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Machines",
        "documentation": {}
    },
    {
        "label": "RE",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "class RE(object):\n    \"\"\"RE is the base class for regular expression constructors.\n    The following operators are defined on REs:\n         re1 + re2         is an RE which matches |re1| followed by |re2|\n         re1 | re2         is an RE which matches either |re1| or |re2|\n    \"\"\"\n    nullable = 1  # True if this RE can match 0 input symbols\n    match_nl = 1  # True if this RE can match a string ending with '\\n'\n    str = None    # Set to a string to override the class's __str__ result\n    def build_machine(self, machine, initial_state, final_state,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "RawCodeRange",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "class RawCodeRange(RE):\n    \"\"\"\n    RawCodeRange(code1, code2) is a low-level RE which matches any character\n    with a code |c| in the range |code1| <= |c| < |code2|, where the range\n    does not include newline. For internal use only.\n    \"\"\"\n    nullable = 0\n    match_nl = 0\n    range = None            # (code, code)\n    uppercase_range = None  # (code, code) or None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "_RawNewline",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "class _RawNewline(RE):\n    \"\"\"\n    RawNewline is a low-level RE which matches a newline character.\n    For internal use only.\n    \"\"\"\n    nullable = 0\n    match_nl = 1\n    def build_machine(self, m, initial_state, final_state, match_bol, nocase):\n        if match_bol:\n            initial_state = self.build_opt(m, initial_state, BOL)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "SpecialSymbol",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "class SpecialSymbol(RE):\n    \"\"\"\n    SpecialSymbol(sym) is an RE which matches the special input\n    symbol |sym|, which is one of BOL, EOL or EOF.\n    \"\"\"\n    nullable = 0\n    match_nl = 0\n    sym = None\n    def __init__(self, sym):\n        self.sym = sym",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Seq",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "class Seq(RE):\n    \"\"\"Seq(re1, re2, re3...) is an RE which matches |re1| followed by\n    |re2| followed by |re3|...\"\"\"\n    def __init__(self, *re_list):\n        nullable = 1\n        for i, re in enumerate(re_list):\n            self.check_re(i, re)\n            nullable = nullable and re.nullable\n        self.re_list = re_list\n        self.nullable = nullable",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Alt",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "class Alt(RE):\n    \"\"\"Alt(re1, re2, re3...) is an RE which matches either |re1| or\n    |re2| or |re3|...\"\"\"\n    def __init__(self, *re_list):\n        self.re_list = re_list\n        nullable = 0\n        match_nl = 0\n        nullable_res = []\n        non_nullable_res = []\n        i = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Rep1",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "class Rep1(RE):\n    \"\"\"Rep1(re) is an RE which matches one or more repetitions of |re|.\"\"\"\n    def __init__(self, re):\n        self.check_re(1, re)\n        self.re = re\n        self.nullable = re.nullable\n        self.match_nl = re.match_nl\n    def build_machine(self, m, initial_state, final_state, match_bol, nocase):\n        s1 = m.new_state()\n        s2 = m.new_state()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "SwitchCase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "class SwitchCase(RE):\n    \"\"\"\n    SwitchCase(re, nocase) is an RE which matches the same strings as RE,\n    but treating upper and lower case letters according to |nocase|. If\n    |nocase| is true, case is ignored, otherwise it is not.\n    \"\"\"\n    re = None\n    nocase = None\n    def __init__(self, re, nocase):\n        self.re = re",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "chars_to_ranges",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "def chars_to_ranges(s):\n    \"\"\"\n    Return a list of character codes consisting of pairs\n    [code1a, code1b, code2a, code2b,...] which cover all\n    the characters in |s|.\n    \"\"\"\n    char_list = list(s)\n    char_list.sort()\n    i = 0\n    n = len(char_list)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "uppercase_range",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "def uppercase_range(code1, code2):\n    \"\"\"\n    If the range of characters from code1 to code2-1 includes any\n    lower case letters, return the corresponding upper case range.\n    \"\"\"\n    code3 = max(code1, ord('a'))\n    code4 = min(code2, ord('z') + 1)\n    if code3 < code4:\n        d = ord('A') - ord('a')\n        return (code3 + d, code4 + d)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "lowercase_range",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "def lowercase_range(code1, code2):\n    \"\"\"\n    If the range of characters from code1 to code2-1 includes any\n    upper case letters, return the corresponding lower case range.\n    \"\"\"\n    code3 = max(code1, ord('A'))\n    code4 = min(code2, ord('Z') + 1)\n    if code3 < code4:\n        d = ord('a') - ord('A')\n        return (code3 + d, code4 + d)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "CodeRanges",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "def CodeRanges(code_list):\n    \"\"\"\n    Given a list of codes as returned by chars_to_ranges, return\n    an RE which will match a character in any of the ranges.\n    \"\"\"\n    re_list = [CodeRange(code_list[i], code_list[i + 1]) for i in range(0, len(code_list), 2)]\n    return Alt(*re_list)\ndef CodeRange(code1, code2):\n    \"\"\"\n    CodeRange(code1, code2) is an RE which matches any character",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "CodeRange",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "def CodeRange(code1, code2):\n    \"\"\"\n    CodeRange(code1, code2) is an RE which matches any character\n    with a code |c| in the range |code1| <= |c| < |code2|.\n    \"\"\"\n    if code1 <= nl_code < code2:\n        return Alt(RawCodeRange(code1, nl_code),\n                   RawNewline,\n                   RawCodeRange(nl_code + 1, code2))\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Char",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Char(c):\n    \"\"\"\n    Char(c) is an RE which matches the character |c|.\n    \"\"\"\n    if len(c) == 1:\n        result = CodeRange(ord(c), ord(c) + 1)\n    else:\n        result = SpecialSymbol(c)\n    result.str = \"Char(%s)\" % repr(c)\n    return result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Str1",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Str1(s):\n    \"\"\"\n    Str1(s) is an RE which matches the literal string |s|.\n    \"\"\"\n    result = Seq(*tuple(map(Char, s)))\n    result.str = \"Str(%s)\" % repr(s)\n    return result\ndef Str(*strs):\n    \"\"\"\n    Str(s) is an RE which matches the literal string |s|.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Str",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Str(*strs):\n    \"\"\"\n    Str(s) is an RE which matches the literal string |s|.\n    Str(s1, s2, s3, ...) is an RE which matches any of |s1| or |s2| or |s3|...\n    \"\"\"\n    if len(strs) == 1:\n        return Str1(strs[0])\n    else:\n        result = Alt(*tuple(map(Str1, strs)))\n        result.str = \"Str(%s)\" % ','.join(map(repr, strs))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Any",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Any(s):\n    \"\"\"\n    Any(s) is an RE which matches any character in the string |s|.\n    \"\"\"\n    #result = apply(Alt, tuple(map(Char, s)))\n    result = CodeRanges(chars_to_ranges(s))\n    result.str = \"Any(%s)\" % repr(s)\n    return result\ndef AnyBut(s):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "AnyBut",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "def AnyBut(s):\n    \"\"\"\n    AnyBut(s) is an RE which matches any character (including\n    newline) which is not in the string |s|.\n    \"\"\"\n    ranges = chars_to_ranges(s)\n    ranges.insert(0, -maxint)\n    ranges.append(maxint)\n    result = CodeRanges(ranges)\n    result.str = \"AnyBut(%s)\" % repr(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Range",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Range(s1, s2=None):\n    \"\"\"\n    Range(c1, c2) is an RE which matches any single character in the range\n    |c1| to |c2| inclusive.\n    Range(s) where |s| is a string of even length is an RE which matches\n    any single character in the ranges |s[0]| to |s[1]|, |s[2]| to |s[3]|,...\n    \"\"\"\n    if s2:\n        result = CodeRange(ord(s1), ord(s2) + 1)\n        result.str = \"Range(%s,%s)\" % (s1, s2)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Opt",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Opt(re):\n    \"\"\"\n    Opt(re) is an RE which matches either |re| or the empty string.\n    \"\"\"\n    result = Alt(re, Empty)\n    result.str = \"Opt(%s)\" % re\n    return result\ndef Rep(re):\n    \"\"\"\n    Rep(re) is an RE which matches zero or more repetitions of |re|.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Rep",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Rep(re):\n    \"\"\"\n    Rep(re) is an RE which matches zero or more repetitions of |re|.\n    \"\"\"\n    result = Opt(Rep1(re))\n    result.str = \"Rep(%s)\" % re\n    return result\ndef NoCase(re):\n    \"\"\"\n    NoCase(re) is an RE which matches the same strings as RE, but treating",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "NoCase",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "def NoCase(re):\n    \"\"\"\n    NoCase(re) is an RE which matches the same strings as RE, but treating\n    upper and lower case letters as equivalent.\n    \"\"\"\n    return SwitchCase(re, nocase=1)\ndef Case(re):\n    \"\"\"\n    Case(re) is an RE which matches the same strings as RE, but treating\n    upper and lower case letters as distinct, i.e. it cancels the effect",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Case",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Case(re):\n    \"\"\"\n    Case(re) is an RE which matches the same strings as RE, but treating\n    upper and lower case letters as distinct, i.e. it cancels the effect\n    of any enclosing NoCase().\n    \"\"\"\n    return SwitchCase(re, nocase=0)\n#\n#     RE Constants\n#",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "BOL",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "BOL = 'bol'\nEOL = 'eol'\nEOF = 'eof'\nnl_code = ord('\\n')\n#\n#     Helper functions\n#\ndef chars_to_ranges(s):\n    \"\"\"\n    Return a list of character codes consisting of pairs",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "EOL",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "EOL = 'eol'\nEOF = 'eof'\nnl_code = ord('\\n')\n#\n#     Helper functions\n#\ndef chars_to_ranges(s):\n    \"\"\"\n    Return a list of character codes consisting of pairs\n    [code1a, code1b, code2a, code2b,...] which cover all",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "EOF",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "EOF = 'eof'\nnl_code = ord('\\n')\n#\n#     Helper functions\n#\ndef chars_to_ranges(s):\n    \"\"\"\n    Return a list of character codes consisting of pairs\n    [code1a, code1b, code2a, code2b,...] which cover all\n    the characters in |s|.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "nl_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "nl_code = ord('\\n')\n#\n#     Helper functions\n#\ndef chars_to_ranges(s):\n    \"\"\"\n    Return a list of character codes consisting of pairs\n    [code1a, code1b, code2a, code2b,...] which cover all\n    the characters in |s|.\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "RawNewline",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "RawNewline = _RawNewline()\nclass SpecialSymbol(RE):\n    \"\"\"\n    SpecialSymbol(sym) is an RE which matches the special input\n    symbol |sym|, which is one of BOL, EOL or EOF.\n    \"\"\"\n    nullable = 0\n    match_nl = 0\n    sym = None\n    def __init__(self, sym):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Empty",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "Empty = Seq()\nEmpty.__doc__ = \\\n    \"\"\"\n    Empty is an RE which matches the empty string.\n    \"\"\"\nEmpty.str = \"Empty\"\ndef Str1(s):\n    \"\"\"\n    Str1(s) is an RE which matches the literal string |s|.\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Empty.__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "Empty.__doc__ = \\\n    \"\"\"\n    Empty is an RE which matches the empty string.\n    \"\"\"\nEmpty.str = \"Empty\"\ndef Str1(s):\n    \"\"\"\n    Str1(s) is an RE which matches the literal string |s|.\n    \"\"\"\n    result = Seq(*tuple(map(Char, s)))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Empty.str",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "Empty.str = \"Empty\"\ndef Str1(s):\n    \"\"\"\n    Str1(s) is an RE which matches the literal string |s|.\n    \"\"\"\n    result = Seq(*tuple(map(Char, s)))\n    result.str = \"Str(%s)\" % repr(s)\n    return result\ndef Str(*strs):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "AnyChar",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "AnyChar = AnyBut(\"\")\nAnyChar.__doc__ = \\\n    \"\"\"\n    AnyChar is an RE which matches any single character (including a newline).\n    \"\"\"\nAnyChar.str = \"AnyChar\"\ndef Range(s1, s2=None):\n    \"\"\"\n    Range(c1, c2) is an RE which matches any single character in the range\n    |c1| to |c2| inclusive.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "AnyChar.__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "AnyChar.__doc__ = \\\n    \"\"\"\n    AnyChar is an RE which matches any single character (including a newline).\n    \"\"\"\nAnyChar.str = \"AnyChar\"\ndef Range(s1, s2=None):\n    \"\"\"\n    Range(c1, c2) is an RE which matches any single character in the range\n    |c1| to |c2| inclusive.\n    Range(s) where |s| is a string of even length is an RE which matches",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "AnyChar.str",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "AnyChar.str = \"AnyChar\"\ndef Range(s1, s2=None):\n    \"\"\"\n    Range(c1, c2) is an RE which matches any single character in the range\n    |c1| to |c2| inclusive.\n    Range(s) where |s| is a string of even length is an RE which matches\n    any single character in the ranges |s[0]| to |s[1]|, |s[2]| to |s[3]|,...\n    \"\"\"\n    if s2:\n        result = CodeRange(ord(s1), ord(s2) + 1)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Bol",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "Bol = Char(BOL)\nBol.__doc__ = \\\n    \"\"\"\n    Bol is an RE which matches the beginning of a line.\n    \"\"\"\nBol.str = \"Bol\"\nEol = Char(EOL)\nEol.__doc__ = \\\n    \"\"\"\n    Eol is an RE which matches the end of a line.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Bol.__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "Bol.__doc__ = \\\n    \"\"\"\n    Bol is an RE which matches the beginning of a line.\n    \"\"\"\nBol.str = \"Bol\"\nEol = Char(EOL)\nEol.__doc__ = \\\n    \"\"\"\n    Eol is an RE which matches the end of a line.\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Bol.str",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "Bol.str = \"Bol\"\nEol = Char(EOL)\nEol.__doc__ = \\\n    \"\"\"\n    Eol is an RE which matches the end of a line.\n    \"\"\"\nEol.str = \"Eol\"\nEof = Char(EOF)\nEof.__doc__ = \\\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Eol",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "Eol = Char(EOL)\nEol.__doc__ = \\\n    \"\"\"\n    Eol is an RE which matches the end of a line.\n    \"\"\"\nEol.str = \"Eol\"\nEof = Char(EOF)\nEof.__doc__ = \\\n    \"\"\"\n    Eof is an RE which matches the end of the file.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Eol.__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "Eol.__doc__ = \\\n    \"\"\"\n    Eol is an RE which matches the end of a line.\n    \"\"\"\nEol.str = \"Eol\"\nEof = Char(EOF)\nEof.__doc__ = \\\n    \"\"\"\n    Eof is an RE which matches the end of the file.\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Eol.str",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "Eol.str = \"Eol\"\nEof = Char(EOF)\nEof.__doc__ = \\\n    \"\"\"\n    Eof is an RE which matches the end of the file.\n    \"\"\"\nEof.str = \"Eof\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Eof",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "Eof = Char(EOF)\nEof.__doc__ = \\\n    \"\"\"\n    Eof is an RE which matches the end of the file.\n    \"\"\"\nEof.str = \"Eof\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Eof.__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "Eof.__doc__ = \\\n    \"\"\"\n    Eof is an RE which matches the end of the file.\n    \"\"\"\nEof.str = \"Eof\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Eof.str",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "peekOfCode": "Eof.str = \"Eof\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Scanner",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Scanners",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Scanners",
        "peekOfCode": "class Scanner(object):\n    \"\"\"\n    A Scanner is used to read tokens from a stream of characters\n    using the token set specified by a Plex.Lexicon.\n    Constructor:\n      Scanner(lexicon, stream, name = '')\n        See the docstring of the __init__ method for details.\n    Methods:\n      See the docstrings of the individual methods for more\n      information.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Scanners",
        "documentation": {}
    },
    {
        "label": "NOT_FOUND",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Scanners",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Scanners",
        "peekOfCode": "NOT_FOUND = object()\nclass Scanner(object):\n    \"\"\"\n    A Scanner is used to read tokens from a stream of characters\n    using the token set specified by a Plex.Lexicon.\n    Constructor:\n      Scanner(lexicon, stream, name = '')\n        See the docstring of the __init__ method for details.\n    Methods:\n      See the docstrings of the individual methods for more",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Scanners",
        "documentation": {}
    },
    {
        "label": "RegexpSyntaxError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Traditional",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Traditional",
        "peekOfCode": "class RegexpSyntaxError(PlexError):\n    pass\ndef re(s):\n    \"\"\"\n    Convert traditional string representation of regular expression |s|\n    into Plex representation.\n    \"\"\"\n    return REParser(s).parse_re()\nclass REParser(object):\n    def __init__(self, s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Traditional",
        "documentation": {}
    },
    {
        "label": "REParser",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Traditional",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Traditional",
        "peekOfCode": "class REParser(object):\n    def __init__(self, s):\n        self.s = s\n        self.i = -1\n        self.end = 0\n        self.next()\n    def parse_re(self):\n        re = self.parse_alt()\n        if not self.end:\n            self.error(\"Unexpected %s\" % repr(self.c))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Traditional",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Traditional",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Traditional",
        "peekOfCode": "def re(s):\n    \"\"\"\n    Convert traditional string representation of regular expression |s|\n    into Plex representation.\n    \"\"\"\n    return REParser(s).parse_re()\nclass REParser(object):\n    def __init__(self, s):\n        self.s = s\n        self.i = -1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Traditional",
        "documentation": {}
    },
    {
        "label": "TransitionMap",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Transitions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Transitions",
        "peekOfCode": "class TransitionMap(object):\n    \"\"\"\n    A TransitionMap maps an input event to a set of states.\n    An input event is one of: a range of character codes,\n    the empty string (representing an epsilon move), or one\n    of the special symbols BOL, EOL, EOF.\n    For characters, this implementation compactly represents\n    the map by means of a list:\n      [code_0, states_0, code_1, states_1, code_2, states_2,\n        ..., code_n-1, states_n-1, code_n]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Transitions",
        "documentation": {}
    },
    {
        "label": "state_set_str",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Transitions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Transitions",
        "peekOfCode": "def state_set_str(set):\n    return \"[%s]\" % ','.join([\"S%d\" % state.number for state in set])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Plex.Transitions",
        "documentation": {}
    },
    {
        "label": "coerce_text",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita.compat3",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita.compat3",
        "peekOfCode": "def coerce_text(v):\n    if not isinstance(v, basestring_):\n        if sys.version < \"3\":\n            attr = '__unicode__'\n        else:\n            attr = '__str__'\n        if hasattr(v, attr):\n            return unicode(v)\n        else:\n            return bytes(v)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita.compat3",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita.compat3",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita.compat3",
        "peekOfCode": "__all__ = ['b', 'basestring_', 'bytes', 'unicode_', 'next', 'is_unicode']\nif sys.version < \"3\":\n    b = bytes = str\n    basestring_ = basestring\n    unicode_ = unicode\nelse:\n    def b(s):\n        if isinstance(s, str):\n            return s.encode('latin1')\n        return bytes(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita.compat3",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita.compat3",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita.compat3",
        "peekOfCode": "text = str\nif sys.version < \"3\":\n    def next(obj):\n        return obj.next()\nelse:\n    next = next\nif sys.version < \"3\":\n    def is_unicode(obj):\n        return isinstance(obj, unicode)\nelse:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita.compat3",
        "documentation": {}
    },
    {
        "label": "looper",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._looper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._looper",
        "peekOfCode": "class looper(object):\n    \"\"\"\n    Helper for looping (particularly in templates)\n    Use this like::\n        for loop, item in looper(seq):\n            if loop.first:\n                ...\n    \"\"\"\n    def __init__(self, seq):\n        self.seq = seq",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._looper",
        "documentation": {}
    },
    {
        "label": "looper_iter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._looper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._looper",
        "peekOfCode": "class looper_iter(object):\n    def __init__(self, seq):\n        self.seq = list(seq)\n        self.pos = 0\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.pos >= len(self.seq):\n            raise StopIteration\n        result = loop_pos(self.seq, self.pos), self.seq[self.pos]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._looper",
        "documentation": {}
    },
    {
        "label": "loop_pos",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._looper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._looper",
        "peekOfCode": "class loop_pos(object):\n    def __init__(self, seq, pos):\n        self.seq = seq\n        self.pos = pos\n    def __repr__(self):\n        return '<loop pos=%r at %r>' % (\n            self.seq[self.pos], self.pos)\n    def index(self):\n        return self.pos\n    index = property(index)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._looper",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._looper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._looper",
        "peekOfCode": "__all__ = ['looper']\nclass looper(object):\n    \"\"\"\n    Helper for looping (particularly in templates)\n    Use this like::\n        for loop, item in looper(seq):\n            if loop.first:\n                ...\n    \"\"\"\n    def __init__(self, seq):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._looper",
        "documentation": {}
    },
    {
        "label": "TemplateError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "class TemplateError(Exception):\n    \"\"\"Exception raised while parsing a template\n    \"\"\"\n    def __init__(self, message, position, name=None):\n        Exception.__init__(self, message)\n        self.position = position\n        self.name = name\n    def __str__(self):\n        msg = ' '.join(self.args)\n        if self.position:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "_TemplateContinue",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "class _TemplateContinue(Exception):\n    pass\nclass _TemplateBreak(Exception):\n    pass\ndef get_file_template(name, from_template):\n    path = os.path.join(os.path.dirname(from_template.name), name)\n    return from_template.__class__.from_filename(\n        path, namespace=from_template.namespace,\n        get_template=from_template.get_template)\nclass Template(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "_TemplateBreak",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "class _TemplateBreak(Exception):\n    pass\ndef get_file_template(name, from_template):\n    path = os.path.join(os.path.dirname(from_template.name), name)\n    return from_template.__class__.from_filename(\n        path, namespace=from_template.namespace,\n        get_template=from_template.get_template)\nclass Template(object):\n    default_namespace = {\n        'start_braces': '{{',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "Template",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "class Template(object):\n    default_namespace = {\n        'start_braces': '{{',\n        'end_braces': '}}',\n        'looper': looper,\n        }\n    default_encoding = 'utf8'\n    default_inherit = None\n    def __init__(self, content, name=None, namespace=None, stacklevel=None,\n                 get_template=None, default_inherit=None, line_offset=0,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "bunch",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "class bunch(dict):\n    def __init__(self, **kw):\n        for name, value in kw.items():\n            setattr(self, name, value)\n    def __setattr__(self, name, value):\n        self[name] = value\n    def __getattr__(self, name):\n        try:\n            return self[name]\n        except KeyError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "class html(object):\n    def __init__(self, value):\n        self.value = value\n    def __str__(self):\n        return self.value\n    def __html__(self):\n        return self.value\n    def __repr__(self):\n        return '<%s %r>' % (\n            self.__class__.__name__, self.value)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "HTMLTemplate",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "class HTMLTemplate(Template):\n    default_namespace = Template.default_namespace.copy()\n    default_namespace.update(dict(\n        html=html,\n        attr=attr,\n        url=url,\n        html_quote=html_quote,\n        ))\n    def _repr(self, value, pos):\n        if hasattr(value, '__html__'):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "TemplateDef",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "class TemplateDef(object):\n    def __init__(self, template, func_name, func_signature,\n                 body, ns, pos, bound_self=None):\n        self._template = template\n        self._func_name = func_name\n        self._func_signature = func_signature\n        self._body = body\n        self._ns = ns\n        self._pos = pos\n        self._bound_self = bound_self",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "TemplateObject",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "class TemplateObject(object):\n    def __init__(self, name):\n        self.__name = name\n        self.get = TemplateObjectGetter(self)\n    def __repr__(self):\n        return '<%s %s>' % (self.__class__.__name__, self.__name)\nclass TemplateObjectGetter(object):\n    def __init__(self, template_obj):\n        self.__template_obj = template_obj\n    def __getattr__(self, attr):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "TemplateObjectGetter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "class TemplateObjectGetter(object):\n    def __init__(self, template_obj):\n        self.__template_obj = template_obj\n    def __getattr__(self, attr):\n        return getattr(self.__template_obj, attr, Empty)\n    def __repr__(self):\n        return '<%s around %r>' % (self.__class__.__name__, self.__template_obj)\nclass _Empty(object):\n    def __call__(self, *args, **kw):\n        return self",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "_Empty",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "class _Empty(object):\n    def __call__(self, *args, **kw):\n        return self\n    def __str__(self):\n        return ''\n    def __repr__(self):\n        return 'Empty'\n    def __unicode__(self):\n        return u''\n    def __iter__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "get_file_template",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def get_file_template(name, from_template):\n    path = os.path.join(os.path.dirname(from_template.name), name)\n    return from_template.__class__.from_filename(\n        path, namespace=from_template.namespace,\n        get_template=from_template.get_template)\nclass Template(object):\n    default_namespace = {\n        'start_braces': '{{',\n        'end_braces': '}}',\n        'looper': looper,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def sub(content, delimeters=None, **kw):\n    name = kw.get('__name')\n    tmpl = Template(content, name=name, delimeters=delimeters)\n    return tmpl.substitute(kw)\ndef paste_script_template_renderer(content, vars, filename=None):\n    tmpl = Template(content, name=filename)\n    return tmpl.substitute(vars)\nclass bunch(dict):\n    def __init__(self, **kw):\n        for name, value in kw.items():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "paste_script_template_renderer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def paste_script_template_renderer(content, vars, filename=None):\n    tmpl = Template(content, name=filename)\n    return tmpl.substitute(vars)\nclass bunch(dict):\n    def __init__(self, **kw):\n        for name, value in kw.items():\n            setattr(self, name, value)\n    def __setattr__(self, name, value):\n        self[name] = value\n    def __getattr__(self, name):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "html_quote",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def html_quote(value, force=True):\n    if not force and hasattr(value, '__html__'):\n        return value.__html__()\n    if value is None:\n        return ''\n    if not isinstance(value, basestring_):\n        value = coerce_text(value)\n    if sys.version >= \"3\" and isinstance(value, bytes):\n        value = cgi.escape(value.decode('latin1'), 1)\n        value = value.encode('latin1')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def url(v):\n    v = coerce_text(v)\n    if is_unicode(v):\n        v = v.encode('utf8')\n    return url_quote(v)\ndef attr(**kw):\n    parts = []\n    for name, value in sorted(kw.items()):\n        if value is None:\n            continue",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "attr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def attr(**kw):\n    parts = []\n    for name, value in sorted(kw.items()):\n        if value is None:\n            continue\n        if name.endswith('_'):\n            name = name[:-1]\n        parts.append('%s=\"%s\"' % (html_quote(name), html_quote(value)))\n    return html(' '.join(parts))\nclass HTMLTemplate(Template):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "sub_html",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def sub_html(content, **kw):\n    name = kw.get('__name')\n    tmpl = HTMLTemplate(content, name=name)\n    return tmpl.substitute(kw)\nclass TemplateDef(object):\n    def __init__(self, template, func_name, func_signature,\n                 body, ns, pos, bound_self=None):\n        self._template = template\n        self._func_name = func_name\n        self._func_signature = func_signature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "lex",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def lex(s, name=None, trim_whitespace=True, line_offset=0, delimeters=None):\n    \"\"\"\n    Lex a string into chunks:\n        >>> lex('hey')\n        ['hey']\n        >>> lex('hey {{you}}')\n        ['hey ', ('you', (1, 7))]\n        >>> lex('hey {{')\n        Traceback (most recent call last):\n            ...",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "trim_lex",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def trim_lex(tokens):\n    r\"\"\"\n    Takes a lexed set of tokens, and removes whitespace when there is\n    a directive on a line by itself:\n       >>> tokens = lex('{{if x}}\\nx\\n{{endif}}\\ny', trim_whitespace=False)\n       >>> tokens\n       [('if x', (1, 3)), '\\nx\\n', ('endif', (3, 3)), '\\ny']\n       >>> trim_lex(tokens)\n       [('if x', (1, 3)), 'x\\n', ('endif', (3, 3)), 'y']\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "find_position",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def find_position(string, index, last_index, last_pos):\n    \"\"\"Given a string and index, return (line, column)\"\"\"\n    lines = string.count('\\n', last_index, index)\n    if lines > 0:\n        column = index - string.rfind('\\n', last_index, index)\n    else:\n        column = last_pos[1] + (index - last_index)\n    return (last_pos[0] + lines, column)\ndef parse(s, name=None, line_offset=0, delimeters=None):\n    r\"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse(s, name=None, line_offset=0, delimeters=None):\n    r\"\"\"\n    Parses a string into a kind of AST\n        >>> parse('{{x}}')\n        [('expr', (1, 3), 'x')]\n        >>> parse('foo')\n        ['foo']\n        >>> parse('{{if x}}test{{endif}}')\n        [('cond', (1, 3), ('if', (1, 3), 'x', ['test']))]\n        >>> parse('series->{{for x in y}}x={{x}}{{endfor}}')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_expr(tokens, name, context=()):\n    if isinstance(tokens[0], basestring_):\n        return tokens[0], tokens[1:]\n    expr, pos = tokens[0]\n    expr = expr.strip()\n    if expr.startswith('py:'):\n        expr = expr[3:].lstrip(' \\t')\n        if expr.startswith('\\n') or expr.startswith('\\r'):\n            expr = expr.lstrip('\\r\\n')\n            if '\\r' in expr:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_cond",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_cond(tokens, name, context):\n    start = tokens[0][1]\n    pieces = []\n    context = context + ('if',)\n    while 1:\n        if not tokens:\n            raise TemplateError(\n                'Missing {{endif}}',\n                position=start, name=name)\n        if (isinstance(tokens[0], tuple)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_one_cond",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_one_cond(tokens, name, context):\n    (first, pos), tokens = tokens[0], tokens[1:]\n    content = []\n    if first.endswith(':'):\n        first = first[:-1]\n    if first.startswith('if '):\n        part = ('if', pos, first[3:].lstrip(), content)\n    elif first.startswith('elif '):\n        part = ('elif', pos, first[5:].lstrip(), content)\n    elif first == 'else':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_for",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_for(tokens, name, context):\n    first, pos = tokens[0]\n    tokens = tokens[1:]\n    context = ('for',) + context\n    content = []\n    assert first.startswith('for ')\n    if first.endswith(':'):\n        first = first[:-1]\n    first = first[3:].strip()\n    match = in_re.search(first)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_default",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_default(tokens, name, context):\n    first, pos = tokens[0]\n    assert first.startswith('default ')\n    first = first.split(None, 1)[1]\n    parts = first.split('=', 1)\n    if len(parts) == 1:\n        raise TemplateError(\n            \"Expression must be {{default var=value}}; no = found in %r\" % first,\n            position=pos, name=name)\n    var = parts[0].strip()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_inherit",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_inherit(tokens, name, context):\n    first, pos = tokens[0]\n    assert first.startswith('inherit ')\n    expr = first.split(None, 1)[1]\n    return ('inherit', pos, expr), tokens[1:]\ndef parse_def(tokens, name, context):\n    first, start = tokens[0]\n    tokens = tokens[1:]\n    assert first.startswith('def ')\n    first = first.split(None, 1)[1]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_def",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_def(tokens, name, context):\n    first, start = tokens[0]\n    tokens = tokens[1:]\n    assert first.startswith('def ')\n    first = first.split(None, 1)[1]\n    if first.endswith(':'):\n        first = first[:-1]\n    if '(' not in first:\n        func_name = first\n        sig = ((), None, None, {})",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_signature",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_signature(sig_text, name, pos):\n    tokens = tokenize.generate_tokens(StringIO(sig_text).readline)\n    sig_args = []\n    var_arg = None\n    var_kw = None\n    defaults = {}\n    def get_token(pos=False):\n        try:\n            tok_type, tok_string, (srow, scol), (erow, ecol), line = next(tokens)\n        except StopIteration:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "isolate_expression",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def isolate_expression(string, start_pos, end_pos):\n    srow, scol = start_pos\n    srow -= 1\n    erow, ecol = end_pos\n    erow -= 1\n    lines = string.splitlines(True)\n    if srow == erow:\n        return lines[srow][scol:ecol]\n    parts = [lines[srow][scol:]]\n    parts.extend(lines[srow+1:erow])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "fill_command",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "def fill_command(args=None):\n    import sys\n    import optparse\n    import pkg_resources\n    import os\n    if args is None:\n        args = sys.argv[1:]\n    dist = pkg_resources.get_distribution('Paste')\n    parser = optparse.OptionParser(\n        version=coerce_text(dist),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "__all__ = ['TemplateError', 'Template', 'sub', 'HTMLTemplate',\n           'sub_html', 'html', 'bunch']\nin_re = re.compile(r'\\s+in\\s+')\nvar_re = re.compile(r'^[a-z_][a-z0-9_]*$', re.I)\nclass TemplateError(Exception):\n    \"\"\"Exception raised while parsing a template\n    \"\"\"\n    def __init__(self, message, position, name=None):\n        Exception.__init__(self, message)\n        self.position = position",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "in_re",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "in_re = re.compile(r'\\s+in\\s+')\nvar_re = re.compile(r'^[a-z_][a-z0-9_]*$', re.I)\nclass TemplateError(Exception):\n    \"\"\"Exception raised while parsing a template\n    \"\"\"\n    def __init__(self, message, position, name=None):\n        Exception.__init__(self, message)\n        self.position = position\n        self.name = name\n    def __str__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "var_re",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "var_re = re.compile(r'^[a-z_][a-z0-9_]*$', re.I)\nclass TemplateError(Exception):\n    \"\"\"Exception raised while parsing a template\n    \"\"\"\n    def __init__(self, message, position, name=None):\n        Exception.__init__(self, message)\n        self.position = position\n        self.name = name\n    def __str__(self):\n        msg = ' '.join(self.args)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "Empty",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "Empty = _Empty()\ndel _Empty\n############################################################\n## Lexing and Parsing\n############################################################\ndef lex(s, name=None, trim_whitespace=True, line_offset=0, delimeters=None):\n    \"\"\"\n    Lex a string into chunks:\n        >>> lex('hey')\n        ['hey']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "statement_re",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "statement_re = re.compile(r'^(?:if |elif |for |def |inherit |default |py:)')\nsingle_statements = ['else', 'endif', 'endfor', 'enddef', 'continue', 'break']\ntrail_whitespace_re = re.compile(r'\\n\\r?[\\t ]*$')\nlead_whitespace_re = re.compile(r'^[\\t ]*\\n')\ndef trim_lex(tokens):\n    r\"\"\"\n    Takes a lexed set of tokens, and removes whitespace when there is\n    a directive on a line by itself:\n       >>> tokens = lex('{{if x}}\\nx\\n{{endif}}\\ny', trim_whitespace=False)\n       >>> tokens",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "single_statements",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "single_statements = ['else', 'endif', 'endfor', 'enddef', 'continue', 'break']\ntrail_whitespace_re = re.compile(r'\\n\\r?[\\t ]*$')\nlead_whitespace_re = re.compile(r'^[\\t ]*\\n')\ndef trim_lex(tokens):\n    r\"\"\"\n    Takes a lexed set of tokens, and removes whitespace when there is\n    a directive on a line by itself:\n       >>> tokens = lex('{{if x}}\\nx\\n{{endif}}\\ny', trim_whitespace=False)\n       >>> tokens\n       [('if x', (1, 3)), '\\nx\\n', ('endif', (3, 3)), '\\ny']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "trail_whitespace_re",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "trail_whitespace_re = re.compile(r'\\n\\r?[\\t ]*$')\nlead_whitespace_re = re.compile(r'^[\\t ]*\\n')\ndef trim_lex(tokens):\n    r\"\"\"\n    Takes a lexed set of tokens, and removes whitespace when there is\n    a directive on a line by itself:\n       >>> tokens = lex('{{if x}}\\nx\\n{{endif}}\\ny', trim_whitespace=False)\n       >>> tokens\n       [('if x', (1, 3)), '\\nx\\n', ('endif', (3, 3)), '\\ny']\n       >>> trim_lex(tokens)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "lead_whitespace_re",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "lead_whitespace_re = re.compile(r'^[\\t ]*\\n')\ndef trim_lex(tokens):\n    r\"\"\"\n    Takes a lexed set of tokens, and removes whitespace when there is\n    a directive on a line by itself:\n       >>> tokens = lex('{{if x}}\\nx\\n{{endif}}\\ny', trim_whitespace=False)\n       >>> tokens\n       [('if x', (1, 3)), '\\nx\\n', ('endif', (3, 3)), '\\ny']\n       >>> trim_lex(tokens)\n       [('if x', (1, 3)), 'x\\n', ('endif', (3, 3)), 'y']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "_fill_command_usage",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "peekOfCode": "_fill_command_usage = \"\"\"\\\n%prog [OPTIONS] TEMPLATE arg=value\nUse py:arg=value to set a Python value; otherwise all values are\nstrings.\n\"\"\"\ndef fill_command(args=None):\n    import sys\n    import optparse\n    import pkg_resources\n    import os",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "TestCodeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestCodeWriter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestCodeWriter",
        "peekOfCode": "class TestCodeWriter(CythonTest):\n    # CythonTest uses the CodeWriter heavily, so do some checking by\n    # roundtripping Cython code through the test framework.\n    # Note that this test is dependent upon the normal Cython parser\n    # to generate the input trees to the CodeWriter. This save *a lot*\n    # of time; better to spend that time writing other tests than perfecting\n    # this one...\n    # Whitespace is very significant in this process:\n    #  - always newline on new block (!)\n    #  - indent 4 spaces",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestCodeWriter",
        "documentation": {}
    },
    {
        "label": "TestCythonUtils",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestCythonUtils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestCythonUtils",
        "peekOfCode": "class TestCythonUtils(unittest.TestCase):\n    def test_build_hex_version(self):\n        self.assertEqual('0x001D00A1', build_hex_version('0.29a1'))\n        self.assertEqual('0x001D00A1', build_hex_version('0.29a1'))\n        self.assertEqual('0x001D03C4', build_hex_version('0.29.3rc4'))\n        self.assertEqual('0x001D00F0', build_hex_version('0.29'))\n        self.assertEqual('0x040000F0', build_hex_version('4.0'))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestCythonUtils",
        "documentation": {}
    },
    {
        "label": "DeclarationsFinder",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestJediTyper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestJediTyper",
        "peekOfCode": "class DeclarationsFinder(Visitor.VisitorTransform):\n    directives = None\n    visit_Node = Visitor.VisitorTransform.recurse_to_children\n    def visit_CompilerDirectivesNode(self, node):\n        if not self.directives:\n            self.directives = []\n        self.directives.append(node)\n        self.visitchildren(node)\n        return node\nclass TestJediTyper(TransformTest):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestJediTyper",
        "documentation": {}
    },
    {
        "label": "TestJediTyper",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestJediTyper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestJediTyper",
        "peekOfCode": "class TestJediTyper(TransformTest):\n    def _test(self, code):\n        return _test_typing(code)[0]\n    def test_typing_global_int_loop(self):\n        code = '''\\\n        for i in range(10):\n            a = i + 1\n        '''\n        types = self._test(code)\n        self.assertIn((None, (1, 0)), types)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestJediTyper",
        "documentation": {}
    },
    {
        "label": "TestTypeInjection",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestJediTyper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestJediTyper",
        "peekOfCode": "class TestTypeInjection(TestJediTyper):\n    \"\"\"\n    Subtype of TestJediTyper that additionally tests type injection and compilation.\n    \"\"\"\n    def setUp(self):\n        super(TestTypeInjection, self).setUp()\n        compilation_options = Main.CompilationOptions(Main.default_options)\n        ctx = compilation_options.create_context()\n        transform = InterpretCompilerDirectives(ctx, ctx.compiler_directives)\n        transform.module_scope = Symtab.ModuleScope('__main__', None, ctx)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestJediTyper",
        "documentation": {}
    },
    {
        "label": "TOOLS_DIR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestJediTyper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestJediTyper",
        "peekOfCode": "TOOLS_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'Tools'))\n@contextmanager\ndef _tempfile(code):\n    code = dedent(code)\n    if not isinstance(code, bytes):\n        code = code.encode('utf8')\n    with NamedTemporaryFile(suffix='.py') as f:\n        f.write(code)\n        f.seek(0)\n        yield f",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestJediTyper",
        "documentation": {}
    },
    {
        "label": "TestStringIOTree",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestStringIOTree",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestStringIOTree",
        "peekOfCode": "class TestStringIOTree(unittest.TestCase):\n    def setUp(self):\n        self.tree = stringtree.StringIOTree()\n    def test_markers(self):\n        assert not self.tree.allmarkers()\n    def test_insertion(self):\n        self.write_lines((1, 2, 3))\n        line_4_to_6_insertion_point = self.tree.insertion_point()\n        self.write_lines((7, 8))\n        line_9_to_13_insertion_point = self.tree.insertion_point()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestStringIOTree",
        "documentation": {}
    },
    {
        "label": "eggs",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestStringIOTree",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestStringIOTree",
        "peekOfCode": "def eggs():\n    pass\ncpdef bacon():\n    print spam\n    print 'scotch'\n    print 'tea?'\n    print 'or coffee?'          # line 16\n\"\"\"\nlinemap = dict(enumerate(code.splitlines()))\nclass TestStringIOTree(unittest.TestCase):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestStringIOTree",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestStringIOTree",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestStringIOTree",
        "peekOfCode": "code = \"\"\"\ncdef int spam                   # line 1\ncdef ham():\n    a = 1\n    b = 2\n    c = 3\n    d = 4\ndef eggs():\n    pass\ncpdef bacon():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestStringIOTree",
        "documentation": {}
    },
    {
        "label": "linemap",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestStringIOTree",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestStringIOTree",
        "peekOfCode": "linemap = dict(enumerate(code.splitlines()))\nclass TestStringIOTree(unittest.TestCase):\n    def setUp(self):\n        self.tree = stringtree.StringIOTree()\n    def test_markers(self):\n        assert not self.tree.allmarkers()\n    def test_insertion(self):\n        self.write_lines((1, 2, 3))\n        line_4_to_6_insertion_point = self.tree.insertion_point()\n        self.write_lines((7, 8))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.TestStringIOTree",
        "documentation": {}
    },
    {
        "label": "TestSequenceFunctions",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.xmlrunner",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.xmlrunner",
        "peekOfCode": "class TestSequenceFunctions(unittest.TestCase):\n    def setUp(self):\n        self.seq = range(10)\n    def test_shuffle(self):\n        # make sure the shuffled sequence does not lose any elements\n        random.shuffle(self.seq)\n        self.seq.sort()\n        self.assertEqual(self.seq, range(10))\n    def test_choice(self):\n        element = random.choice(self.seq)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.xmlrunner",
        "documentation": {}
    },
    {
        "label": "XMLDocument",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.xmlrunner",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.xmlrunner",
        "peekOfCode": "class XMLDocument(xml.dom.minidom.Document):\n    def createCDATAOrText(self, data):\n        if ']]>' in data:\n            return self.createTextNode(data)\n        return self.createCDATASection(data)\nclass _TestInfo(object):\n    \"\"\"This class is used to keep useful information about the execution of a\n    test method.\n    \"\"\"\n    # Possible test outcomes",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.xmlrunner",
        "documentation": {}
    },
    {
        "label": "_TestInfo",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.xmlrunner",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.xmlrunner",
        "peekOfCode": "class _TestInfo(object):\n    \"\"\"This class is used to keep useful information about the execution of a\n    test method.\n    \"\"\"\n    # Possible test outcomes\n    (SUCCESS, FAILURE, ERROR) = range(3)\n    def __init__(self, test_result, test_method, outcome=SUCCESS, err=None):\n        \"Create a new instance of _TestInfo.\"\n        self.test_result = test_result\n        self.test_method = test_method",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.xmlrunner",
        "documentation": {}
    },
    {
        "label": "_XMLTestResult",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.xmlrunner",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.xmlrunner",
        "peekOfCode": "class _XMLTestResult(TextTestResult):\n    \"\"\"A test result class that can express test results in a XML report.\n    Used by XMLTestRunner.\n    \"\"\"\n    def __init__(self, stream=sys.stderr, descriptions=1, verbosity=1,\n                 elapsed_times=True):\n        \"Create a new instance of _XMLTestResult.\"\n        TextTestResult.__init__(self, stream, descriptions, verbosity)\n        self.successes = []\n        self.callback = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.xmlrunner",
        "documentation": {}
    },
    {
        "label": "XMLTestRunner",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.xmlrunner",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.xmlrunner",
        "peekOfCode": "class XMLTestRunner(TextTestRunner):\n    \"\"\"A test runner class that outputs the results in JUnit like XML files.\n    \"\"\"\n    def __init__(self, output='.', stream=None, descriptions=True, verbose=False, elapsed_times=True):\n        \"Create a new instance of XMLTestRunner.\"\n        if stream is None:\n            stream = sys.stderr\n        verbosity = (1, 2)[verbose]\n        TextTestRunner.__init__(self, stream, descriptions, verbosity)\n        self.output = output",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Tests.xmlrunner",
        "documentation": {}
    },
    {
        "label": "LinesResult",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.CodeWriter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.CodeWriter",
        "peekOfCode": "class LinesResult(object):\n    def __init__(self):\n        self.lines = []\n        self.s = u\"\"\n    def put(self, s):\n        self.s += s\n    def newline(self):\n        self.lines.append(self.s)\n        self.s = u\"\"\n    def putline(self, s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.CodeWriter",
        "documentation": {}
    },
    {
        "label": "DeclarationWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.CodeWriter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.CodeWriter",
        "peekOfCode": "class DeclarationWriter(TreeVisitor):\n    indent_string = u\"    \"\n    def __init__(self, result=None):\n        super(DeclarationWriter, self).__init__()\n        if result is None:\n            result = LinesResult()\n        self.result = result\n        self.numindents = 0\n        self.tempnames = {}\n        self.tempblockindex = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.CodeWriter",
        "documentation": {}
    },
    {
        "label": "CodeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.CodeWriter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.CodeWriter",
        "peekOfCode": "class CodeWriter(DeclarationWriter):\n    def visit_SingleAssignmentNode(self, node):\n        self.startline()\n        self.visit(node.lhs)\n        self.put(u\" = \")\n        self.visit(node.rhs)\n        self.endline()\n    def visit_CascadedAssignmentNode(self, node):\n        self.startline()\n        for lhs in node.lhs_list:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.CodeWriter",
        "documentation": {}
    },
    {
        "label": "PxdWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.CodeWriter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.CodeWriter",
        "peekOfCode": "class PxdWriter(DeclarationWriter):\n    def __call__(self, node):\n        print(u'\\n'.join(self.write(node).lines))\n        return node\n    def visit_CFuncDefNode(self, node):\n        if 'inline' in node.modifiers:\n            return\n        if node.overridable:\n            self.startline(u'cpdef ')\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.CodeWriter",
        "documentation": {}
    },
    {
        "label": "ExpressionWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.CodeWriter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.CodeWriter",
        "peekOfCode": "class ExpressionWriter(TreeVisitor):\n    def __init__(self, result=None):\n        super(ExpressionWriter, self).__init__()\n        if result is None:\n            result = u\"\"\n        self.result = result\n        self.precedence = [0]\n    def write(self, tree):\n        self.visit(tree)\n        return self.result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.CodeWriter",
        "documentation": {}
    },
    {
        "label": "Plugin",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "peekOfCode": "class Plugin(CoveragePlugin):\n    # map from traced file paths to absolute file paths\n    _file_path_map = None\n    # map from traced file paths to corresponding C files\n    _c_files_map = None\n    # map from parsed C files to their content\n    _parsed_c_files = None\n    def sys_info(self):\n        return [('Cython version', __version__)]\n    def file_tracer(self, filename):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "documentation": {}
    },
    {
        "label": "CythonModuleTracer",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "peekOfCode": "class CythonModuleTracer(FileTracer):\n    \"\"\"\n    Find the Python/Cython source file for a Cython module.\n    \"\"\"\n    def __init__(self, module_file, py_file, c_file, c_files_map, file_path_map):\n        super(CythonModuleTracer, self).__init__()\n        self.module_file = module_file\n        self.py_file = py_file\n        self.c_file = c_file\n        self._c_files_map = c_files_map",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "documentation": {}
    },
    {
        "label": "CythonModuleReporter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "peekOfCode": "class CythonModuleReporter(FileReporter):\n    \"\"\"\n    Provide detailed trace information for one source file to coverage.py.\n    \"\"\"\n    def __init__(self, c_file, source_file, rel_file_path, code):\n        super(CythonModuleReporter, self).__init__(source_file)\n        self.name = rel_file_path\n        self.c_file = c_file\n        self._code = code\n    def lines(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "documentation": {}
    },
    {
        "label": "coverage_init",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "peekOfCode": "def coverage_init(reg, options):\n    reg.add_file_tracer(Plugin())",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "documentation": {}
    },
    {
        "label": "C_FILE_EXTENSIONS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "peekOfCode": "C_FILE_EXTENSIONS = ['.c', '.cpp', '.cc', '.cxx']\nMODULE_FILE_EXTENSIONS = set(['.py', '.pyx', '.pxd'] + C_FILE_EXTENSIONS)\ndef _find_c_source(base_path):\n    file_exists = os.path.exists\n    for ext in C_FILE_EXTENSIONS:\n        file_name = base_path + ext\n        if file_exists(file_name):\n            return file_name\n    return None\ndef _find_dep_file_path(main_file, file_path, relative_path_search=False):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "documentation": {}
    },
    {
        "label": "MODULE_FILE_EXTENSIONS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "peekOfCode": "MODULE_FILE_EXTENSIONS = set(['.py', '.pyx', '.pxd'] + C_FILE_EXTENSIONS)\ndef _find_c_source(base_path):\n    file_exists = os.path.exists\n    for ext in C_FILE_EXTENSIONS:\n        file_name = base_path + ext\n        if file_exists(file_name):\n            return file_name\n    return None\ndef _find_dep_file_path(main_file, file_path, relative_path_search=False):\n    abs_path = os.path.abspath(file_path)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Coverage",
        "documentation": {}
    },
    {
        "label": "print_call_chain",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugging",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugging",
        "peekOfCode": "def print_call_chain(*args):\n    import sys\n    print(\" \".join(map(str, args)))\n    f = sys._getframe(1)\n    while f:\n        name = f.f_code.co_name\n        s = f.f_locals.get('self', None)\n        if s:\n            c = getattr(s, \"__class__\", None)\n            if c:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Debugging",
        "documentation": {}
    },
    {
        "label": "_ArrayType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "class _ArrayType(object):\n    is_array = True\n    subtypes = ['dtype']\n    def __init__(self, dtype, ndim, is_c_contig=False, is_f_contig=False,\n                 inner_contig=False, broadcasting=None):\n        self.dtype = dtype\n        self.ndim = ndim\n        self.is_c_contig = is_c_contig\n        self.is_f_contig = is_f_contig\n        self.inner_contig = inner_contig or is_c_contig or is_f_contig",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "_EmptyDecoratorAndManager",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "class _EmptyDecoratorAndManager(object):\n    def __call__(self, x):\n        return x\n    def __enter__(self):\n        pass\n    def __exit__(self, exc_type, exc_value, traceback):\n        pass\nclass _Optimization(object):\n    pass\ncclass = ccall = cfunc = _EmptyDecoratorAndManager()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "_Optimization",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "class _Optimization(object):\n    pass\ncclass = ccall = cfunc = _EmptyDecoratorAndManager()\nreturns = wraparound = boundscheck = initializedcheck = nonecheck = \\\n    embedsignature = cdivision = cdivision_warnings = \\\n    always_allows_keywords = profile = linetrace = infer_types = \\\n    unraisable_tracebacks = freelist = \\\n        lambda _: _EmptyDecoratorAndManager()\nexceptval = lambda _=None, check=True: _EmptyDecoratorAndManager()\noverflowcheck = lambda _: _EmptyDecoratorAndManager()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "_nogil",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "class _nogil(object):\n    \"\"\"Support for 'with nogil' statement and @nogil decorator.\n    \"\"\"\n    def __call__(self, x):\n        if callable(x):\n            # Used as function decorator => return the function unchanged.\n            return x\n        # Used as conditional context manager or to create an \"@nogil(True/False)\" decorator => keep going.\n        return self\n    def __enter__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "CythonMetaType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "class CythonMetaType(type):\n    def __getitem__(type, ix):\n        return array(type, ix)\nCythonTypeObject = CythonMetaType('CythonTypeObject', (object,), {})\nclass CythonType(CythonTypeObject):\n    def _pointer(self, n=1):\n        for i in range(n):\n            self = pointer(self)\n        return self\nclass PointerType(CythonType):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "CythonType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "class CythonType(CythonTypeObject):\n    def _pointer(self, n=1):\n        for i in range(n):\n            self = pointer(self)\n        return self\nclass PointerType(CythonType):\n    def __init__(self, value=None):\n        if isinstance(value, (ArrayType, PointerType)):\n            self._items = [cast(self._basetype, a) for a in value._items]\n        elif isinstance(value, list):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "PointerType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "class PointerType(CythonType):\n    def __init__(self, value=None):\n        if isinstance(value, (ArrayType, PointerType)):\n            self._items = [cast(self._basetype, a) for a in value._items]\n        elif isinstance(value, list):\n            self._items = [cast(self._basetype, a) for a in value]\n        elif value is None or value == 0:\n            self._items = []\n        else:\n            raise ValueError",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "ArrayType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "class ArrayType(PointerType):\n    def __init__(self):\n        self._items = [None] * self._n\nclass StructType(CythonType):\n    def __init__(self, cast_from=_Unspecified, **data):\n        if cast_from is not _Unspecified:\n            # do cast\n            if len(data) > 0:\n                raise ValueError('Cannot accept keyword arguments when casting.')\n            if type(cast_from) is not type(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "StructType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "class StructType(CythonType):\n    def __init__(self, cast_from=_Unspecified, **data):\n        if cast_from is not _Unspecified:\n            # do cast\n            if len(data) > 0:\n                raise ValueError('Cannot accept keyword arguments when casting.')\n            if type(cast_from) is not type(self):\n                raise ValueError('Cannot cast from %s'%cast_from)\n            for key, value in cast_from.__dict__.items():\n                setattr(self, key, value)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "UnionType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "class UnionType(CythonType):\n    def __init__(self, cast_from=_Unspecified, **data):\n        if cast_from is not _Unspecified:\n            # do type cast\n            if len(data) > 0:\n                raise ValueError('Cannot accept keyword arguments when casting.')\n            if isinstance(cast_from, dict):\n                datadict = cast_from\n            elif type(cast_from) is type(self):\n                datadict = cast_from.__dict__",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "typedef",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "class typedef(CythonType):\n    def __init__(self, type, name=None):\n        self._basetype = type\n        self.name = name\n    def __call__(self, *arg):\n        value = cast(self._basetype, *arg)\n        return value\n    def __repr__(self):\n        return self.name or str(self._basetype)\n    __getitem__ = index_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "_FusedType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "class _FusedType(CythonType):\n    __getitem__ = index_type\ndef fused_type(*args):\n    if not args:\n        raise TypeError(\"Expected at least one type as argument\")\n    # Find the numeric type with biggest rank if all types are numeric\n    rank = -1\n    for type in args:\n        if type not in (py_int, py_long, py_float, py_complex):\n            break",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "CythonDotParallel",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "class CythonDotParallel(object):\n    \"\"\"\n    The cython.parallel module.\n    \"\"\"\n    __all__ = ['parallel', 'prange', 'threadid']\n    def parallel(self, num_threads=None):\n        return nogil\n    def prange(self, start=0, stop=None, step=1, nogil=False, schedule=None, chunksize=None, num_threads=None):\n        if stop is None:\n            stop = start",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "index_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def index_type(base_type, item):\n    \"\"\"\n    Support array type creation by slicing, e.g. double[:, :] specifies\n    a 2D strided array of doubles. The syntax is the same as for\n    Cython memoryviews.\n    \"\"\"\n    class InvalidTypeSpecification(Exception):\n        pass\n    def verify_slice(s):\n        if s.start or s.stop or s.step not in (None, 1):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "locals",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def locals(**arg_types):\n    return _empty_decorator\ndef test_assert_path_exists(*paths):\n    return _empty_decorator\ndef test_fail_if_path_exists(*paths):\n    return _empty_decorator\nclass _EmptyDecoratorAndManager(object):\n    def __call__(self, x):\n        return x\n    def __enter__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "test_assert_path_exists",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def test_assert_path_exists(*paths):\n    return _empty_decorator\ndef test_fail_if_path_exists(*paths):\n    return _empty_decorator\nclass _EmptyDecoratorAndManager(object):\n    def __call__(self, x):\n        return x\n    def __enter__(self):\n        pass\n    def __exit__(self, exc_type, exc_value, traceback):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "test_fail_if_path_exists",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def test_fail_if_path_exists(*paths):\n    return _empty_decorator\nclass _EmptyDecoratorAndManager(object):\n    def __call__(self, x):\n        return x\n    def __enter__(self):\n        pass\n    def __exit__(self, exc_type, exc_value, traceback):\n        pass\nclass _Optimization(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "inline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def inline(f, *args, **kwds):\n    if isinstance(f, basestring):\n        global _cython_inline\n        if _cython_inline is None:\n            from Cython.Build.Inline import cython_inline as _cython_inline\n        return _cython_inline(f, *args, **kwds)\n    else:\n        assert len(args) == len(kwds) == 0\n        return f\ndef compile(f):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "compile",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def compile(f):\n    from Cython.Build.Inline import RuntimeCompiledFunction\n    return RuntimeCompiledFunction(f)\n# Special functions\ndef cdiv(a, b):\n    q = a / b\n    if q < 0:\n        q += 1\n    return q\ndef cmod(a, b):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "cdiv",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def cdiv(a, b):\n    q = a / b\n    if q < 0:\n        q += 1\n    return q\ndef cmod(a, b):\n    r = a % b\n    if (a*b) < 0:\n        r -= b\n    return r",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "cmod",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def cmod(a, b):\n    r = a % b\n    if (a*b) < 0:\n        r -= b\n    return r\n# Emulated language constructs\ndef cast(type, *args, **kwargs):\n    kwargs.pop('typecheck', None)\n    assert not kwargs\n    if hasattr(type, '__call__'):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "cast",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def cast(type, *args, **kwargs):\n    kwargs.pop('typecheck', None)\n    assert not kwargs\n    if hasattr(type, '__call__'):\n        return type(*args)\n    else:\n        return args[0]\ndef sizeof(arg):\n    return 1\ndef typeof(arg):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "sizeof",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def sizeof(arg):\n    return 1\ndef typeof(arg):\n    return arg.__class__.__name__\n    # return type(arg)\ndef address(arg):\n    return pointer(type(arg))([arg])\ndef declare(type=None, value=_Unspecified, **kwds):\n    if type not in (None, object) and hasattr(type, '__call__'):\n        if value is not _Unspecified:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "typeof",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def typeof(arg):\n    return arg.__class__.__name__\n    # return type(arg)\ndef address(arg):\n    return pointer(type(arg))([arg])\ndef declare(type=None, value=_Unspecified, **kwds):\n    if type not in (None, object) and hasattr(type, '__call__'):\n        if value is not _Unspecified:\n            return type(value)\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "address",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def address(arg):\n    return pointer(type(arg))([arg])\ndef declare(type=None, value=_Unspecified, **kwds):\n    if type not in (None, object) and hasattr(type, '__call__'):\n        if value is not _Unspecified:\n            return type(value)\n        else:\n            return type()\n    else:\n        return value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "declare",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def declare(type=None, value=_Unspecified, **kwds):\n    if type not in (None, object) and hasattr(type, '__call__'):\n        if value is not _Unspecified:\n            return type(value)\n        else:\n            return type()\n    else:\n        return value\nclass _nogil(object):\n    \"\"\"Support for 'with nogil' statement and @nogil decorator.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "pointer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def pointer(basetype):\n    class PointerInstance(PointerType):\n        _basetype = basetype\n    return PointerInstance\ndef array(basetype, n):\n    class ArrayInstance(ArrayType):\n        _basetype = basetype\n        _n = n\n    return ArrayInstance\ndef struct(**members):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def array(basetype, n):\n    class ArrayInstance(ArrayType):\n        _basetype = basetype\n        _n = n\n    return ArrayInstance\ndef struct(**members):\n    class StructInstance(StructType):\n        _members = members\n    for key in members:\n        setattr(StructInstance, key, None)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def struct(**members):\n    class StructInstance(StructType):\n        _members = members\n    for key in members:\n        setattr(StructInstance, key, None)\n    return StructInstance\ndef union(**members):\n    class UnionInstance(UnionType):\n        _members = members\n    for key in members:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "union",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def union(**members):\n    class UnionInstance(UnionType):\n        _members = members\n    for key in members:\n        setattr(UnionInstance, key, None)\n    return UnionInstance\nclass typedef(CythonType):\n    def __init__(self, type, name=None):\n        self._basetype = type\n        self.name = name",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "fused_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "def fused_type(*args):\n    if not args:\n        raise TypeError(\"Expected at least one type as argument\")\n    # Find the numeric type with biggest rank if all types are numeric\n    rank = -1\n    for type in args:\n        if type not in (py_int, py_long, py_float, py_complex):\n            break\n        if type_ordering.index(type) > rank:\n            result_type = type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "__version__ = \"0.29.32\"\ntry:\n    from __builtin__ import basestring\nexcept ImportError:\n    basestring = str\n# BEGIN shameless copy from Cython/minivect/minitypes.py\nclass _ArrayType(object):\n    is_array = True\n    subtypes = ['dtype']\n    def __init__(self, dtype, ndim, is_c_contig=False, is_f_contig=False,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "compiled",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "compiled = False\n_Unspecified = object()\n# Function decorators\ndef _empty_decorator(x):\n    return x\ndef locals(**arg_types):\n    return _empty_decorator\ndef test_assert_path_exists(*paths):\n    return _empty_decorator\ndef test_fail_if_path_exists(*paths):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "_Unspecified",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "_Unspecified = object()\n# Function decorators\ndef _empty_decorator(x):\n    return x\ndef locals(**arg_types):\n    return _empty_decorator\ndef test_assert_path_exists(*paths):\n    return _empty_decorator\ndef test_fail_if_path_exists(*paths):\n    return _empty_decorator",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "cclass",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "cclass = ccall = cfunc = _EmptyDecoratorAndManager()\nreturns = wraparound = boundscheck = initializedcheck = nonecheck = \\\n    embedsignature = cdivision = cdivision_warnings = \\\n    always_allows_keywords = profile = linetrace = infer_types = \\\n    unraisable_tracebacks = freelist = \\\n        lambda _: _EmptyDecoratorAndManager()\nexceptval = lambda _=None, check=True: _EmptyDecoratorAndManager()\noverflowcheck = lambda _: _EmptyDecoratorAndManager()\noptimization = _Optimization()\noverflowcheck.fold = optimization.use_switch = \\",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "returns",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "returns = wraparound = boundscheck = initializedcheck = nonecheck = \\\n    embedsignature = cdivision = cdivision_warnings = \\\n    always_allows_keywords = profile = linetrace = infer_types = \\\n    unraisable_tracebacks = freelist = \\\n        lambda _: _EmptyDecoratorAndManager()\nexceptval = lambda _=None, check=True: _EmptyDecoratorAndManager()\noverflowcheck = lambda _: _EmptyDecoratorAndManager()\noptimization = _Optimization()\noverflowcheck.fold = optimization.use_switch = \\\n    optimization.unpack_method_calls = lambda arg: _EmptyDecoratorAndManager()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "exceptval",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "exceptval = lambda _=None, check=True: _EmptyDecoratorAndManager()\noverflowcheck = lambda _: _EmptyDecoratorAndManager()\noptimization = _Optimization()\noverflowcheck.fold = optimization.use_switch = \\\n    optimization.unpack_method_calls = lambda arg: _EmptyDecoratorAndManager()\nfinal = internal = type_version_tag = no_gc_clear = no_gc = _empty_decorator\nbinding = lambda _: _empty_decorator\n_cython_inline = None\ndef inline(f, *args, **kwds):\n    if isinstance(f, basestring):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "overflowcheck",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "overflowcheck = lambda _: _EmptyDecoratorAndManager()\noptimization = _Optimization()\noverflowcheck.fold = optimization.use_switch = \\\n    optimization.unpack_method_calls = lambda arg: _EmptyDecoratorAndManager()\nfinal = internal = type_version_tag = no_gc_clear = no_gc = _empty_decorator\nbinding = lambda _: _empty_decorator\n_cython_inline = None\ndef inline(f, *args, **kwds):\n    if isinstance(f, basestring):\n        global _cython_inline",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "optimization",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "optimization = _Optimization()\noverflowcheck.fold = optimization.use_switch = \\\n    optimization.unpack_method_calls = lambda arg: _EmptyDecoratorAndManager()\nfinal = internal = type_version_tag = no_gc_clear = no_gc = _empty_decorator\nbinding = lambda _: _empty_decorator\n_cython_inline = None\ndef inline(f, *args, **kwds):\n    if isinstance(f, basestring):\n        global _cython_inline\n        if _cython_inline is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "overflowcheck.fold",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "overflowcheck.fold = optimization.use_switch = \\\n    optimization.unpack_method_calls = lambda arg: _EmptyDecoratorAndManager()\nfinal = internal = type_version_tag = no_gc_clear = no_gc = _empty_decorator\nbinding = lambda _: _empty_decorator\n_cython_inline = None\ndef inline(f, *args, **kwds):\n    if isinstance(f, basestring):\n        global _cython_inline\n        if _cython_inline is None:\n            from Cython.Build.Inline import cython_inline as _cython_inline",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "final",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "final = internal = type_version_tag = no_gc_clear = no_gc = _empty_decorator\nbinding = lambda _: _empty_decorator\n_cython_inline = None\ndef inline(f, *args, **kwds):\n    if isinstance(f, basestring):\n        global _cython_inline\n        if _cython_inline is None:\n            from Cython.Build.Inline import cython_inline as _cython_inline\n        return _cython_inline(f, *args, **kwds)\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "binding",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "binding = lambda _: _empty_decorator\n_cython_inline = None\ndef inline(f, *args, **kwds):\n    if isinstance(f, basestring):\n        global _cython_inline\n        if _cython_inline is None:\n            from Cython.Build.Inline import cython_inline as _cython_inline\n        return _cython_inline(f, *args, **kwds)\n    else:\n        assert len(args) == len(kwds) == 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "_cython_inline",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "_cython_inline = None\ndef inline(f, *args, **kwds):\n    if isinstance(f, basestring):\n        global _cython_inline\n        if _cython_inline is None:\n            from Cython.Build.Inline import cython_inline as _cython_inline\n        return _cython_inline(f, *args, **kwds)\n    else:\n        assert len(args) == len(kwds) == 0\n        return f",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "nogil",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "nogil = _nogil()\ngil = _nogil()\ndel _nogil\n# Emulated types\nclass CythonMetaType(type):\n    def __getitem__(type, ix):\n        return array(type, ix)\nCythonTypeObject = CythonMetaType('CythonTypeObject', (object,), {})\nclass CythonType(CythonTypeObject):\n    def _pointer(self, n=1):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "gil",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "gil = _nogil()\ndel _nogil\n# Emulated types\nclass CythonMetaType(type):\n    def __getitem__(type, ix):\n        return array(type, ix)\nCythonTypeObject = CythonMetaType('CythonTypeObject', (object,), {})\nclass CythonType(CythonTypeObject):\n    def _pointer(self, n=1):\n        for i in range(n):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "CythonTypeObject",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "CythonTypeObject = CythonMetaType('CythonTypeObject', (object,), {})\nclass CythonType(CythonTypeObject):\n    def _pointer(self, n=1):\n        for i in range(n):\n            self = pointer(self)\n        return self\nclass PointerType(CythonType):\n    def __init__(self, value=None):\n        if isinstance(value, (ArrayType, PointerType)):\n            self._items = [cast(self._basetype, a) for a in value._items]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "py_int",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "py_int = typedef(int, \"int\")\ntry:\n    py_long = typedef(long, \"long\")\nexcept NameError:  # Py3\n    py_long = typedef(int, \"long\")\npy_float = typedef(float, \"float\")\npy_complex = typedef(complex, \"double complex\")\n# Predefined types\nint_types = ['char', 'short', 'Py_UNICODE', 'int', 'Py_UCS4', 'long', 'longlong', 'Py_ssize_t', 'size_t']\nfloat_types = ['longdouble', 'double', 'float']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "py_float",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "py_float = typedef(float, \"float\")\npy_complex = typedef(complex, \"double complex\")\n# Predefined types\nint_types = ['char', 'short', 'Py_UNICODE', 'int', 'Py_UCS4', 'long', 'longlong', 'Py_ssize_t', 'size_t']\nfloat_types = ['longdouble', 'double', 'float']\ncomplex_types = ['longdoublecomplex', 'doublecomplex', 'floatcomplex', 'complex']\nother_types = ['bint', 'void', 'Py_tss_t']\nto_repr = {\n    'longlong': 'long long',\n    'longdouble': 'long double',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "py_complex",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "py_complex = typedef(complex, \"double complex\")\n# Predefined types\nint_types = ['char', 'short', 'Py_UNICODE', 'int', 'Py_UCS4', 'long', 'longlong', 'Py_ssize_t', 'size_t']\nfloat_types = ['longdouble', 'double', 'float']\ncomplex_types = ['longdoublecomplex', 'doublecomplex', 'floatcomplex', 'complex']\nother_types = ['bint', 'void', 'Py_tss_t']\nto_repr = {\n    'longlong': 'long long',\n    'longdouble': 'long double',\n    'longdoublecomplex': 'long double complex',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "int_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "int_types = ['char', 'short', 'Py_UNICODE', 'int', 'Py_UCS4', 'long', 'longlong', 'Py_ssize_t', 'size_t']\nfloat_types = ['longdouble', 'double', 'float']\ncomplex_types = ['longdoublecomplex', 'doublecomplex', 'floatcomplex', 'complex']\nother_types = ['bint', 'void', 'Py_tss_t']\nto_repr = {\n    'longlong': 'long long',\n    'longdouble': 'long double',\n    'longdoublecomplex': 'long double complex',\n    'doublecomplex': 'double complex',\n    'floatcomplex': 'float complex',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "float_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "float_types = ['longdouble', 'double', 'float']\ncomplex_types = ['longdoublecomplex', 'doublecomplex', 'floatcomplex', 'complex']\nother_types = ['bint', 'void', 'Py_tss_t']\nto_repr = {\n    'longlong': 'long long',\n    'longdouble': 'long double',\n    'longdoublecomplex': 'long double complex',\n    'doublecomplex': 'double complex',\n    'floatcomplex': 'float complex',\n}.get",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "complex_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "complex_types = ['longdoublecomplex', 'doublecomplex', 'floatcomplex', 'complex']\nother_types = ['bint', 'void', 'Py_tss_t']\nto_repr = {\n    'longlong': 'long long',\n    'longdouble': 'long double',\n    'longdoublecomplex': 'long double complex',\n    'doublecomplex': 'double complex',\n    'floatcomplex': 'float complex',\n}.get\ngs = globals()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "other_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "other_types = ['bint', 'void', 'Py_tss_t']\nto_repr = {\n    'longlong': 'long long',\n    'longdouble': 'long double',\n    'longdoublecomplex': 'long double complex',\n    'doublecomplex': 'double complex',\n    'floatcomplex': 'float complex',\n}.get\ngs = globals()\n# note: cannot simply name the unicode type here as 2to3 gets in the way and replaces it by str",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "to_repr",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "to_repr = {\n    'longlong': 'long long',\n    'longdouble': 'long double',\n    'longdoublecomplex': 'long double complex',\n    'doublecomplex': 'double complex',\n    'floatcomplex': 'float complex',\n}.get\ngs = globals()\n# note: cannot simply name the unicode type here as 2to3 gets in the way and replaces it by str\ntry:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "gs",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "gs = globals()\n# note: cannot simply name the unicode type here as 2to3 gets in the way and replaces it by str\ntry:\n    import __builtin__ as builtins\nexcept ImportError:  # Py3\n    import builtins\ngs['unicode'] = typedef(getattr(builtins, 'unicode', str), 'unicode')\ndel builtins\nfor name in int_types:\n    reprname = to_repr(name, name)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "gs['unicode']",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "gs['unicode'] = typedef(getattr(builtins, 'unicode', str), 'unicode')\ndel builtins\nfor name in int_types:\n    reprname = to_repr(name, name)\n    gs[name] = typedef(py_int, reprname)\n    if name not in ('Py_UNICODE', 'Py_UCS4') and not name.endswith('size_t'):\n        gs['u'+name] = typedef(py_int, \"unsigned \" + reprname)\n        gs['s'+name] = typedef(py_int, \"signed \" + reprname)\nfor name in float_types:\n    gs[name] = typedef(py_float, to_repr(name, name))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "bint",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "bint = typedef(bool, \"bint\")\nvoid = typedef(None, \"void\")\nPy_tss_t = typedef(None, \"Py_tss_t\")\nfor t in int_types + float_types + complex_types + other_types:\n    for i in range(1, 4):\n        gs[\"%s_%s\" % ('p'*i, t)] = gs[t]._pointer(i)\nNULL = gs['p_void'](0)\n# looks like 'gs' has some users out there by now...\n#del gs\nintegral = floating = numeric = _FusedType()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "void",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "void = typedef(None, \"void\")\nPy_tss_t = typedef(None, \"Py_tss_t\")\nfor t in int_types + float_types + complex_types + other_types:\n    for i in range(1, 4):\n        gs[\"%s_%s\" % ('p'*i, t)] = gs[t]._pointer(i)\nNULL = gs['p_void'](0)\n# looks like 'gs' has some users out there by now...\n#del gs\nintegral = floating = numeric = _FusedType()\ntype_ordering = [py_int, py_long, py_float, py_complex]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "Py_tss_t",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "Py_tss_t = typedef(None, \"Py_tss_t\")\nfor t in int_types + float_types + complex_types + other_types:\n    for i in range(1, 4):\n        gs[\"%s_%s\" % ('p'*i, t)] = gs[t]._pointer(i)\nNULL = gs['p_void'](0)\n# looks like 'gs' has some users out there by now...\n#del gs\nintegral = floating = numeric = _FusedType()\ntype_ordering = [py_int, py_long, py_float, py_complex]\nclass CythonDotParallel(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "NULL",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "NULL = gs['p_void'](0)\n# looks like 'gs' has some users out there by now...\n#del gs\nintegral = floating = numeric = _FusedType()\ntype_ordering = [py_int, py_long, py_float, py_complex]\nclass CythonDotParallel(object):\n    \"\"\"\n    The cython.parallel module.\n    \"\"\"\n    __all__ = ['parallel', 'prange', 'threadid']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "integral",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "integral = floating = numeric = _FusedType()\ntype_ordering = [py_int, py_long, py_float, py_complex]\nclass CythonDotParallel(object):\n    \"\"\"\n    The cython.parallel module.\n    \"\"\"\n    __all__ = ['parallel', 'prange', 'threadid']\n    def parallel(self, num_threads=None):\n        return nogil\n    def prange(self, start=0, stop=None, step=1, nogil=False, schedule=None, chunksize=None, num_threads=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "type_ordering",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "type_ordering = [py_int, py_long, py_float, py_complex]\nclass CythonDotParallel(object):\n    \"\"\"\n    The cython.parallel module.\n    \"\"\"\n    __all__ = ['parallel', 'prange', 'threadid']\n    def parallel(self, num_threads=None):\n        return nogil\n    def prange(self, start=0, stop=None, step=1, nogil=False, schedule=None, chunksize=None, num_threads=None):\n        if stop is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "sys.modules['cython.parallel']",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "peekOfCode": "sys.modules['cython.parallel'] = CythonDotParallel()\ndel sys",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "StringIOTree",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.StringIOTree",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.StringIOTree",
        "peekOfCode": "class StringIOTree(object):\n    \"\"\"\n    See module docs.\n    \"\"\"\n    def __init__(self, stream=None):\n        self.prepended_children = []\n        if stream is None:\n            stream = StringIO()\n        self.stream = stream\n        self.write = stream.write",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.StringIOTree",
        "documentation": {}
    },
    {
        "label": "NodeTypeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "peekOfCode": "class NodeTypeWriter(TreeVisitor):\n    def __init__(self):\n        super(NodeTypeWriter, self).__init__()\n        self._indents = 0\n        self.result = []\n    def visit_Node(self, node):\n        if not self.access_path:\n            name = u\"(root)\"\n        else:\n            tip = self.access_path[-1]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "peekOfCode": "class CythonTest(unittest.TestCase):\n    def setUp(self):\n        self.listing_file = Errors.listing_file\n        self.echo_file = Errors.echo_file\n        Errors.listing_file = Errors.echo_file = None\n    def tearDown(self):\n        Errors.listing_file = self.listing_file\n        Errors.echo_file = self.echo_file\n    def assertLines(self, expected, result):\n        \"Checks that the given strings or lists of strings are equal line by line\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "TransformTest",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "peekOfCode": "class TransformTest(CythonTest):\n    \"\"\"\n    Utility base class for transform unit tests. It is based around constructing\n    test trees (either explicitly or by parsing a Cython code string); running\n    the transform, serialize it using a customized Cython serializer (with\n    special markup for nodes that cannot be represented in Cython),\n    and do a string-comparison line-by-line of the result.\n    To create a test case:\n     - Call run_pipeline. The pipeline should at least contain the transform you\n       are testing; pyx should be either a string (passed to the parser to",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "TreeAssertVisitor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "peekOfCode": "class TreeAssertVisitor(VisitorTransform):\n    # actually, a TreeVisitor would be enough, but this needs to run\n    # as part of the compiler pipeline\n    def visit_CompilerDirectivesNode(self, node):\n        directives = node.directives\n        if 'test_assert_path_exists' in directives:\n            for path in directives['test_assert_path_exists']:\n                if TreePath.find_first(node, path) is None:\n                    Errors.error(\n                        node.pos,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "treetypes",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "peekOfCode": "def treetypes(root):\n    \"\"\"Returns a string representing the tree by class names.\n    There's a leading and trailing whitespace so that it can be\n    compared by simple string comparison while still making test\n    cases look ok.\"\"\"\n    w = NodeTypeWriter()\n    w.visit(root)\n    return u\"\\n\".join([u\"\"] + w.result + [u\"\"])\nclass CythonTest(unittest.TestCase):\n    def setUp(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "unpack_source_tree",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "peekOfCode": "def unpack_source_tree(tree_file, dir=None):\n    if dir is None:\n        dir = tempfile.mkdtemp()\n    header = []\n    cur_file = None\n    f = open(tree_file)\n    try:\n        lines = f.readlines()\n    finally:\n        f.close()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "LazyStr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "class LazyStr:\n    def __init__(self, callback):\n        self.callback = callback\n    def __str__(self):\n        return self.callback()\n    def __repr__(self):\n        return self.callback()\n    def __add__(self, right):\n        return self.callback() + right\n    def __radd__(self, left):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "OrderedSet",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "class OrderedSet(object):\n  def __init__(self, elements=()):\n    self._list = []\n    self._set = set()\n    self.update(elements)\n  def __iter__(self):\n    return iter(self._list)\n  def update(self, elements):\n    for e in elements:\n      self.add(e)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "clear_function_caches",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def clear_function_caches():\n    for cache in _function_caches:\n        cache.clear()\ndef cached_function(f):\n    cache = {}\n    _function_caches.append(cache)\n    uncomputed = object()\n    def wrapper(*args):\n        res = cache.get(args, uncomputed)\n        if res is uncomputed:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "cached_function",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def cached_function(f):\n    cache = {}\n    _function_caches.append(cache)\n    uncomputed = object()\n    def wrapper(*args):\n        res = cache.get(args, uncomputed)\n        if res is uncomputed:\n            res = cache[args] = f(*args)\n        return res\n    wrapper.uncached = f",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "cached_method",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def cached_method(f):\n    cache_name = '__%s_cache' % f.__name__\n    def wrapper(self, *args):\n        cache = getattr(self, cache_name, None)\n        if cache is None:\n            cache = {}\n            setattr(self, cache_name, cache)\n        if args in cache:\n            return cache[args]\n        res = cache[args] = f(self, *args)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "replace_suffix",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def replace_suffix(path, newsuf):\n    base, _ = os.path.splitext(path)\n    return base + newsuf\ndef open_new_file(path):\n    if os.path.exists(path):\n        # Make sure to create a new file here so we can\n        # safely hard link the output files.\n        os.unlink(path)\n    # we use the ISO-8859-1 encoding here because we only write pure\n    # ASCII strings or (e.g. for file names) byte encoded strings as",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "open_new_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def open_new_file(path):\n    if os.path.exists(path):\n        # Make sure to create a new file here so we can\n        # safely hard link the output files.\n        os.unlink(path)\n    # we use the ISO-8859-1 encoding here because we only write pure\n    # ASCII strings or (e.g. for file names) byte encoded strings as\n    # Unicode, so we need a direct mapping from the first 256 Unicode\n    # characters to a byte sequence, which ISO-8859-1 provides\n    # note: can't use io.open() in Py2 as we may be writing str objects",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "castrate_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def castrate_file(path, st):\n    #  Remove junk contents from an output file after a\n    #  failed compilation.\n    #  Also sets access and modification times back to\n    #  those specified by st (a stat struct).\n    try:\n        f = open_new_file(path)\n    except EnvironmentError:\n        pass\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "file_newer_than",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def file_newer_than(path, time):\n    ftime = modification_time(path)\n    return ftime > time\ndef safe_makedirs(path):\n    try:\n        os.makedirs(path)\n    except OSError:\n        if not os.path.isdir(path):\n            raise\ndef copy_file_to_dir_if_newer(sourcefile, destdir):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "safe_makedirs",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def safe_makedirs(path):\n    try:\n        os.makedirs(path)\n    except OSError:\n        if not os.path.isdir(path):\n            raise\ndef copy_file_to_dir_if_newer(sourcefile, destdir):\n    \"\"\"\n    Copy file sourcefile to directory destdir (creating it if needed),\n    preserving metadata. If the destination file exists and is not",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "copy_file_to_dir_if_newer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def copy_file_to_dir_if_newer(sourcefile, destdir):\n    \"\"\"\n    Copy file sourcefile to directory destdir (creating it if needed),\n    preserving metadata. If the destination file exists and is not\n    older than the source file, the copying is skipped.\n    \"\"\"\n    destfile = os.path.join(destdir, os.path.basename(sourcefile))\n    try:\n        desttime = modification_time(destfile)\n    except OSError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "find_root_package_dir",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def find_root_package_dir(file_path):\n    dir = os.path.dirname(file_path)\n    if file_path == dir:\n        return dir\n    elif is_package_dir(dir):\n        return find_root_package_dir(dir)\n    else:\n        return dir\n@cached_function\ndef check_package_dir(dir, package_names):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "check_package_dir",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def check_package_dir(dir, package_names):\n    for dirname in package_names:\n        dir = os.path.join(dir, dirname)\n        if not is_package_dir(dir):\n            return None\n    return dir\n@cached_function\ndef is_package_dir(dir_path):\n    for filename in (\"__init__.py\",\n                     \"__init__.pyc\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "is_package_dir",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def is_package_dir(dir_path):\n    for filename in (\"__init__.py\",\n                     \"__init__.pyc\",\n                     \"__init__.pyx\",\n                     \"__init__.pxd\"):\n        path = os.path.join(dir_path, filename)\n        if path_exists(path):\n            return 1\n@cached_function\ndef path_exists(path):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "path_exists",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def path_exists(path):\n    # try on the filesystem first\n    if os.path.exists(path):\n        return True\n    # figure out if a PEP 302 loader is around\n    try:\n        loader = __loader__\n        # XXX the code below assumes a 'zipimport.zipimporter' instance\n        # XXX should be easy to generalize, but too lazy right now to write it\n        archive_path = getattr(loader, 'archive', None)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "decode_filename",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def decode_filename(filename):\n    if isinstance(filename, bytes):\n        try:\n            filename_encoding = sys.getfilesystemencoding()\n            if filename_encoding is None:\n                filename_encoding = sys.getdefaultencoding()\n            filename = filename.decode(filename_encoding)\n        except UnicodeDecodeError:\n            pass\n    return filename",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "detect_opened_file_encoding",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def detect_opened_file_encoding(f):\n    # PEPs 263 and 3120\n    # Most of the time the first two lines fall in the first couple of hundred chars,\n    # and this bulk read/split is much faster.\n    lines = ()\n    start = b''\n    while len(lines) < 3:\n        data = f.read(500)\n        start += data\n        lines = start.split(b\"\\n\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "skip_bom",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def skip_bom(f):\n    \"\"\"\n    Read past a BOM at the beginning of a source file.\n    This could be added to the scanner, but it's *substantially* easier\n    to keep it at this level.\n    \"\"\"\n    if f.read(1) != u'\\uFEFF':\n        f.seek(0)\ndef open_source_file(source_filename, encoding=None, error_handling=None):\n    stream = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "open_source_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def open_source_file(source_filename, encoding=None, error_handling=None):\n    stream = None\n    try:\n        if encoding is None:\n            # Most of the time the encoding is not specified, so try hard to open the file only once.\n            f = io.open(source_filename, 'rb')\n            encoding = detect_opened_file_encoding(f)\n            f.seek(0)\n            stream = io.TextIOWrapper(f, encoding=encoding, errors=error_handling)\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "open_source_from_loader",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def open_source_from_loader(loader,\n                            source_filename,\n                            encoding=None, error_handling=None):\n    nrmpath = os.path.normpath(source_filename)\n    arcname = nrmpath[len(loader.archive)+1:]\n    data = loader.get_data(arcname)\n    return io.TextIOWrapper(io.BytesIO(data),\n                            encoding=encoding,\n                            errors=error_handling)\ndef str_to_number(value):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "str_to_number",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def str_to_number(value):\n    # note: this expects a string as input that was accepted by the\n    # parser already, with an optional \"-\" sign in front\n    is_neg = False\n    if value[:1] == '-':\n        is_neg = True\n        value = value[1:]\n    if len(value) < 2:\n        value = int(value, 0)\n    elif value[0] == '0':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "long_literal",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def long_literal(value):\n    if isinstance(value, basestring):\n        value = str_to_number(value)\n    return not -2**31 <= value < 2**31\n@cached_function\ndef get_cython_cache_dir():\n    r\"\"\"\n    Return the base directory containing Cython's caches.\n    Priority:\n    1. CYTHON_CACHE_DIR",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "get_cython_cache_dir",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def get_cython_cache_dir():\n    r\"\"\"\n    Return the base directory containing Cython's caches.\n    Priority:\n    1. CYTHON_CACHE_DIR\n    2. (OS X): ~/Library/Caches/Cython\n       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n    3. ~/.cython\n    \"\"\"\n    if 'CYTHON_CACHE_DIR' in os.environ:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "captured_fd",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def captured_fd(stream=2, encoding=None):\n    orig_stream = os.dup(stream)  # keep copy of original stream\n    try:\n        with tempfile.TemporaryFile(mode=\"a+b\") as temp_file:\n            def read_output(_output=[b'']):\n                if not temp_file.closed:\n                    temp_file.seek(0)\n                    _output[0] = temp_file.read()\n                return _output[0]\n            os.dup2(temp_file.fileno(), stream)  # replace stream by copy of pipe",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "print_bytes",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def print_bytes(s, header_text=None, end=b'\\n', file=sys.stdout, flush=True):\n    if header_text:\n        file.write(header_text)  # note: text! => file.write() instead of out.write()\n    file.flush()\n    try:\n        out = file.buffer  # Py3\n    except AttributeError:\n        out = file         # Py2\n    out.write(s)\n    if end:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "add_metaclass",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def add_metaclass(metaclass):\n    \"\"\"Class decorator for creating a class with a metaclass.\"\"\"\n    def wrapper(cls):\n        orig_vars = cls.__dict__.copy()\n        slots = orig_vars.get('__slots__')\n        if slots is not None:\n            if isinstance(slots, str):\n                slots = [slots]\n            for slots_var in slots:\n                orig_vars.pop(slots_var)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "raise_error_if_module_name_forbidden",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def raise_error_if_module_name_forbidden(full_module_name):\n    #it is bad idea to call the pyx-file cython.pyx, so fail early\n    if full_module_name == 'cython' or full_module_name.startswith('cython.'):\n        raise ValueError('cython is a special module, cannot be used as a module name')\ndef build_hex_version(version_string):\n    \"\"\"\n    Parse and translate '4.3a1' into the readable hex representation '0x040300A1' (like PY_VERSION_HEX).\n    \"\"\"\n    # First, parse '4.12a1' into [4, 12, 0, 0xA01].\n    digits = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "build_hex_version",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "def build_hex_version(version_string):\n    \"\"\"\n    Parse and translate '4.3a1' into the readable hex representation '0x040300A1' (like PY_VERSION_HEX).\n    \"\"\"\n    # First, parse '4.12a1' into [4, 12, 0, 0xA01].\n    digits = []\n    release_status = 0xF0\n    for digit in re.split('([.abrc]+)', version_string):\n        if digit in ('a', 'b', 'rc'):\n            release_status = {'a': 0xA0, 'b': 0xB0, 'rc': 0xC0}[digit]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "modification_time",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "modification_time = os.path.getmtime\n_function_caches = []\ndef clear_function_caches():\n    for cache in _function_caches:\n        cache.clear()\ndef cached_function(f):\n    cache = {}\n    _function_caches.append(cache)\n    uncomputed = object()\n    def wrapper(*args):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "_function_caches",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "_function_caches = []\ndef clear_function_caches():\n    for cache in _function_caches:\n        cache.clear()\ndef cached_function(f):\n    cache = {}\n    _function_caches.append(cache)\n    uncomputed = object()\n    def wrapper(*args):\n        res = cache.get(args, uncomputed)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "_match_file_encoding",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "peekOfCode": "_match_file_encoding = re.compile(br\"(\\w*coding)[:=]\\s*([-\\w.]+)\").search\ndef detect_opened_file_encoding(f):\n    # PEPs 263 and 3120\n    # Most of the time the first two lines fall in the first couple of hundred chars,\n    # and this bulk read/split is much faster.\n    lines = ()\n    start = b''\n    while len(lines) < 3:\n        data = f.read(500)\n        start += data",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "pyx_to_dll",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyxbuild",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyxbuild",
        "peekOfCode": "def pyx_to_dll(filename, ext=None, force_rebuild=0, build_in_temp=False, pyxbuild_dir=None,\n               setup_args=None, reload_support=False, inplace=False):\n    \"\"\"Compile a PYX file to a DLL and return the name of the generated .so\n       or .dll .\"\"\"\n    assert os.path.exists(filename), \"Could not find %s\" % os.path.abspath(filename)\n    path, name = os.path.split(os.path.abspath(filename))\n    if not ext:\n        modname, extension = os.path.splitext(name)\n        assert extension in (\".pyx\", \".py\"), extension\n        if not HAS_CYTHON:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyxbuild",
        "documentation": {}
    },
    {
        "label": "out_fname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyxbuild",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyxbuild",
        "peekOfCode": "out_fname = pyx_to_dll(\"foo.pyx\")\n\"\"\"\nimport os\nimport sys\nfrom distutils.errors import DistutilsArgError, DistutilsError, CCompilerError\nfrom distutils.extension import Extension\nfrom distutils.util import grok_environment_error\ntry:\n    from Cython.Distutils.old_build_ext import old_build_ext as build_ext\n    HAS_CYTHON = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyxbuild",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyxbuild",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyxbuild",
        "peekOfCode": "DEBUG = 0\n_reloads={}\ndef pyx_to_dll(filename, ext=None, force_rebuild=0, build_in_temp=False, pyxbuild_dir=None,\n               setup_args=None, reload_support=False, inplace=False):\n    \"\"\"Compile a PYX file to a DLL and return the name of the generated .so\n       or .dll .\"\"\"\n    assert os.path.exists(filename), \"Could not find %s\" % os.path.abspath(filename)\n    path, name = os.path.split(os.path.abspath(filename))\n    if not ext:\n        modname, extension = os.path.splitext(name)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyxbuild",
        "documentation": {}
    },
    {
        "label": "PyxImporter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "class PyxImporter(object):\n    \"\"\"A meta-path importer for .pyx files.\n    \"\"\"\n    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False,\n                 language_level=None):\n        self.extension = extension\n        self.pyxbuild_dir = pyxbuild_dir\n        self.inplace = inplace\n        self.language_level = language_level\n    def find_module(self, fullname, package_path=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "PyImporter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "class PyImporter(PyxImporter):\n    \"\"\"A meta-path importer for normal .py files.\n    \"\"\"\n    def __init__(self, pyxbuild_dir=None, inplace=False, language_level=None):\n        if language_level is None:\n            language_level = sys.version_info[0]\n        self.super = super(PyImporter, self)\n        self.super.__init__(extension='.py', pyxbuild_dir=pyxbuild_dir, inplace=inplace,\n                            language_level=language_level)\n        self.uncompilable_modules = {}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "LibLoader",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "class LibLoader(object):\n    def __init__(self):\n        self._libs = {}\n    def load_module(self, fullname):\n        try:\n            source_path, so_path, is_package = self._libs[fullname]\n        except KeyError:\n            raise ValueError(\"invalid module %s\" % fullname)\n        _debug(\"Loading shared library module '%s' from %s\", fullname, so_path)\n        return load_module(fullname, source_path, so_path=so_path, is_package=is_package)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "PyxLoader",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "class PyxLoader(object):\n    def __init__(self, fullname, path, init_path=None, pyxbuild_dir=None,\n                 inplace=False, language_level=None):\n        _debug(\"PyxLoader created for loading %s from %s (init path: %s)\",\n               fullname, path, init_path)\n        self.fullname = fullname\n        self.path, self.init_path = path, init_path\n        self.pyxbuild_dir = pyxbuild_dir\n        self.inplace = inplace\n        self.language_level = language_level",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "PyxArgs",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "class PyxArgs(object):\n    build_dir=True\n    build_in_temp=True\n    setup_args={}   #None\n##pyxargs=None\ndef _have_importers():\n    has_py_importer = False\n    has_pyx_importer = False\n    for importer in sys.meta_path:\n        if isinstance(importer, PyxImporter):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "make_ext",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "def make_ext(modname, pyxfilename):\n    from distutils.extension import Extension\n    return Extension(name = modname,\n                     sources=[pyxfilename, 'hello.c'],\n                     include_dirs=['/myinclude'] )\ndef make_setup_args():\n    return dict(script_args=[\"--compiler=mingw32\"])\nExtra dependencies can be defined by a <modulename>.pyxdep .\nSee README.\nSince Cython 0.11, the :mod:`pyximport` module also has experimental",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "make_setup_args",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "def make_setup_args():\n    return dict(script_args=[\"--compiler=mingw32\"])\nExtra dependencies can be defined by a <modulename>.pyxdep .\nSee README.\nSince Cython 0.11, the :mod:`pyximport` module also has experimental\ncompilation support for normal Python modules.  This allows you to\nautomatically run Cython on every .pyx and .py module that Python\nimports, including parts of the standard library and installed\npackages.  Cython will still fail to compile a lot of Python modules,\nin which case the import mechanism will fall back to loading the",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "get_distutils_extension",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "def get_distutils_extension(modname, pyxfilename, language_level=None):\n#    try:\n#        import hashlib\n#    except ImportError:\n#        import md5 as hashlib\n#    extra = \"_\" + hashlib.md5(open(pyxfilename).read()).hexdigest()\n#    modname = modname + extra\n    extension_mod,setup_args = handle_special_build(modname, pyxfilename)\n    if not extension_mod:\n        if not isinstance(pyxfilename, str):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "handle_special_build",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "def handle_special_build(modname, pyxfilename):\n    special_build = os.path.splitext(pyxfilename)[0] + PYXBLD_EXT\n    ext = None\n    setup_args={}\n    if os.path.exists(special_build):\n        # globls = {}\n        # locs = {}\n        # execfile(special_build, globls, locs)\n        # ext = locs[\"make_ext\"](modname, pyxfilename)\n        mod = imp.load_source(\"XXXX\", special_build, open(special_build))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "handle_dependencies",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "def handle_dependencies(pyxfilename):\n    testing = '_test_files' in globals()\n    dependfile = os.path.splitext(pyxfilename)[0] + PYXDEP_EXT\n    # by default let distutils decide whether to rebuild on its own\n    # (it has a better idea of what the output file will be)\n    # but we know more about dependencies so force a rebuild if\n    # some of the dependencies are newer than the pyxfile.\n    if os.path.exists(dependfile):\n        depends = open(dependfile).readlines()\n        depends = [depend.strip() for depend in depends]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "build_module",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "def build_module(name, pyxfilename, pyxbuild_dir=None, inplace=False, language_level=None):\n    assert os.path.exists(pyxfilename), \"Path does not exist: %s\" % pyxfilename\n    handle_dependencies(pyxfilename)\n    extension_mod, setup_args = get_distutils_extension(name, pyxfilename, language_level)\n    build_in_temp = pyxargs.build_in_temp\n    sargs = pyxargs.setup_args.copy()\n    sargs.update(setup_args)\n    build_in_temp = sargs.pop('build_in_temp',build_in_temp)\n    from . import pyxbuild\n    so_path = pyxbuild.pyx_to_dll(pyxfilename, extension_mod,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "load_module",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "def load_module(name, pyxfilename, pyxbuild_dir=None, is_package=False,\n                build_inplace=False, language_level=None, so_path=None):\n    try:\n        if so_path is None:\n            if is_package:\n                module_name = name + '.__init__'\n            else:\n                module_name = name\n            so_path = build_module(module_name, pyxfilename, pyxbuild_dir,\n                                   inplace=build_inplace, language_level=language_level)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "def install(pyximport=True, pyimport=False, build_dir=None, build_in_temp=True,\n            setup_args=None, reload_support=False,\n            load_py_module_on_import_failure=False, inplace=False,\n            language_level=None):\n    \"\"\" Main entry point for pyxinstall.\n    Call this to install the ``.pyx`` import hook in\n    your meta-path for a single Python process.  If you want it to be\n    installed whenever you use Python, add it to your ``sitecustomize``\n    (as described above).\n    :param pyximport: If set to False, does not try to import ``.pyx`` files.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "def uninstall(py_importer, pyx_importer):\n    \"\"\"\n    Uninstall an import hook.\n    \"\"\"\n    try:\n        sys.meta_path.remove(py_importer)\n    except ValueError:\n        pass\n    try:\n        sys.meta_path.remove(pyx_importer)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "show_docs",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "def show_docs():\n    import __main__\n    __main__.__name__ = mod_name\n    for name in dir(__main__):\n        item = getattr(__main__, name)\n        try:\n            setattr(item, \"__module__\", mod_name)\n        except (AttributeError, TypeError):\n            pass\n    help(__main__)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "mod_name",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "mod_name = \"pyximport\"\nPYX_EXT = \".pyx\"\nPYXDEP_EXT = \".pyxdep\"\nPYXBLD_EXT = \".pyxbld\"\nDEBUG_IMPORT = False\ndef _print(message, args):\n    if args:\n        message = message % args\n    print(message)\ndef _debug(message, *args):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "PYX_EXT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "PYX_EXT = \".pyx\"\nPYXDEP_EXT = \".pyxdep\"\nPYXBLD_EXT = \".pyxbld\"\nDEBUG_IMPORT = False\ndef _print(message, args):\n    if args:\n        message = message % args\n    print(message)\ndef _debug(message, *args):\n    if DEBUG_IMPORT:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "PYXDEP_EXT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "PYXDEP_EXT = \".pyxdep\"\nPYXBLD_EXT = \".pyxbld\"\nDEBUG_IMPORT = False\ndef _print(message, args):\n    if args:\n        message = message % args\n    print(message)\ndef _debug(message, *args):\n    if DEBUG_IMPORT:\n        _print(message, args)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "PYXBLD_EXT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "PYXBLD_EXT = \".pyxbld\"\nDEBUG_IMPORT = False\ndef _print(message, args):\n    if args:\n        message = message % args\n    print(message)\ndef _debug(message, *args):\n    if DEBUG_IMPORT:\n        _print(message, args)\ndef _info(message, *args):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "DEBUG_IMPORT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "DEBUG_IMPORT = False\ndef _print(message, args):\n    if args:\n        message = message % args\n    print(message)\ndef _debug(message, *args):\n    if DEBUG_IMPORT:\n        _print(message, args)\ndef _info(message, *args):\n    _print(message, args)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "_lib_loader",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "peekOfCode": "_lib_loader = LibLoader()\nclass PyxLoader(object):\n    def __init__(self, fullname, path, init_path=None, pyxbuild_dir=None,\n                 inplace=False, language_level=None):\n        _debug(\"PyxLoader created for loading %s from %s (init path: %s)\",\n               fullname, path, init_path)\n        self.fullname = fullname\n        self.path, self.init_path = path, init_path\n        self.pyxbuild_dir = pyxbuild_dir\n        self.inplace = inplace",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.10.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "TestCyCache",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestCyCache",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestCyCache",
        "peekOfCode": "class TestCyCache(CythonTest):\n    def setUp(self):\n        CythonTest.setUp(self)\n        self.temp_dir = tempfile.mkdtemp(\n            prefix='cycache-test',\n            dir='TEST_TMP' if os.path.isdir('TEST_TMP') else None)\n        self.src_dir = tempfile.mkdtemp(prefix='src', dir=self.temp_dir)\n        self.cache_dir = tempfile.mkdtemp(prefix='cache', dir=self.temp_dir)\n    def cache_files(self, file_glob):\n        return glob.glob(os.path.join(self.cache_dir, file_glob))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestCyCache",
        "documentation": {}
    },
    {
        "label": "TestInline",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestInline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestInline",
        "peekOfCode": "class TestInline(CythonTest):\n    def setUp(self):\n        CythonTest.setUp(self)\n        self.test_kwds = dict(test_kwds)\n        if os.path.isdir('TEST_TMP'):\n            lib_dir = os.path.join('TEST_TMP','inline')\n        else:\n            lib_dir = tempfile.mkdtemp(prefix='cython_inline_')\n        self.test_kwds['lib_dir'] = lib_dir\n    def test_simple(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestInline",
        "documentation": {}
    },
    {
        "label": "test_kwds",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestInline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestInline",
        "peekOfCode": "test_kwds = dict(force=True, quiet=True)\nglobal_value = 100\nclass TestInline(CythonTest):\n    def setUp(self):\n        CythonTest.setUp(self)\n        self.test_kwds = dict(test_kwds)\n        if os.path.isdir('TEST_TMP'):\n            lib_dir = os.path.join('TEST_TMP','inline')\n        else:\n            lib_dir = tempfile.mkdtemp(prefix='cython_inline_')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestInline",
        "documentation": {}
    },
    {
        "label": "global_value",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestInline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestInline",
        "peekOfCode": "global_value = 100\nclass TestInline(CythonTest):\n    def setUp(self):\n        CythonTest.setUp(self)\n        self.test_kwds = dict(test_kwds)\n        if os.path.isdir('TEST_TMP'):\n            lib_dir = os.path.join('TEST_TMP','inline')\n        else:\n            lib_dir = tempfile.mkdtemp(prefix='cython_inline_')\n        self.test_kwds['lib_dir'] = lib_dir",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestInline",
        "documentation": {}
    },
    {
        "label": "TestIPythonMagic",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "class TestIPythonMagic(CythonTest):\n    @classmethod\n    def setUpClass(cls):\n        CythonTest.setUpClass()\n        cls._ip = IPython.testing.globalipapp.get_ipython()\n    def setUp(self):\n        CythonTest.setUp(self)\n        self._ip.extension_manager.load_extension('cython')\n    def test_cython_inline(self):\n        ip = self._ip",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "def f(x):\n    return 2*x\n\"\"\"\ncython3_code = u\"\"\"\\\ndef f(int x):\n    return 2 / x\ndef call(x):\n    return f(*(x,))\n\"\"\"\npgo_cython3_code = cython3_code + u\"\"\"\\",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "def f(int x):\n    return 2 / x\ndef call(x):\n    return f(*(x,))\n\"\"\"\npgo_cython3_code = cython3_code + u\"\"\"\\\ndef main():\n    for _ in range(100): call(5)\nmain()\n\"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "call",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "def call(x):\n    return f(*(x,))\n\"\"\"\npgo_cython3_code = cython3_code + u\"\"\"\\\ndef main():\n    for _ in range(100): call(5)\nmain()\n\"\"\"\nif sys.platform == 'win32':\n    # not using IPython's decorators here because they depend on \"nose\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "def main():\n    for _ in range(100): call(5)\nmain()\n\"\"\"\nif sys.platform == 'win32':\n    # not using IPython's decorators here because they depend on \"nose\"\n    try:\n        from unittest import skip as skip_win32\n    except ImportError:\n        # poor dev's silent @unittest.skip()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "code = u\"\"\"\\\ndef f(x):\n    return 2*x\n\"\"\"\ncython3_code = u\"\"\"\\\ndef f(int x):\n    return 2 / x\ndef call(x):\n    return f(*(x,))\n\"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "cython3_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "cython3_code = u\"\"\"\\\ndef f(int x):\n    return 2 / x\ndef call(x):\n    return f(*(x,))\n\"\"\"\npgo_cython3_code = cython3_code + u\"\"\"\\\ndef main():\n    for _ in range(100): call(5)\nmain()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "pgo_cython3_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "pgo_cython3_code = cython3_code + u\"\"\"\\\ndef main():\n    for _ in range(100): call(5)\nmain()\n\"\"\"\nif sys.platform == 'win32':\n    # not using IPython's decorators here because they depend on \"nose\"\n    try:\n        from unittest import skip as skip_win32\n    except ImportError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "peekOfCode": "x = sin(0.0)\n        \"\"\"\n        ip.user_ns['x'] = 1\n        ip.run_cell_magic('cython', '-l m', code)\n        self.assertEqual(ip.user_ns['x'], 0)\n    def test_cython_verbose(self):\n        ip = self._ip\n        ip.run_cell_magic('cython', '--verbose', code)\n        ip.ex('g = f(10)')\n        self.assertEqual(ip.user_ns['g'], 20.0)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestIpythonMagic",
        "documentation": {}
    },
    {
        "label": "TestStripLiterals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestStripLiterals",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestStripLiterals",
        "peekOfCode": "class TestStripLiterals(CythonTest):\n    def t(self, before, expected):\n        actual, literals = strip_string_literals(before, prefix=\"_L\")\n        self.assertEqual(expected, actual)\n        for key, value in literals.items():\n            actual = actual.replace(key, value)\n        self.assertEqual(before, actual)\n    def test_empty(self):\n        self.t(\"\", \"\")\n    def test_single_quote(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Tests.TestStripLiterals",
        "documentation": {}
    },
    {
        "label": "get_config_var",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def get_config_var(name, default=''):\n    return sysconfig.get_config_var(name) or default\nINCDIR = sysconfig.get_python_inc()\nLIBDIR1 = get_config_var('LIBDIR')\nLIBDIR2 = get_config_var('LIBPL')\nPYLIB = get_config_var('LIBRARY')\nPYLIB_DYN = get_config_var('LDLIBRARY')\nif PYLIB_DYN == PYLIB:\n    # no shared library\n    PYLIB_DYN = ''",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "dump_config",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def dump_config():\n    _debug('INCDIR: %s', INCDIR)\n    _debug('LIBDIR1: %s', LIBDIR1)\n    _debug('LIBDIR2: %s', LIBDIR2)\n    _debug('PYLIB: %s', PYLIB)\n    _debug('PYLIB_DYN: %s', PYLIB_DYN)\n    _debug('CC: %s', CC)\n    _debug('CFLAGS: %s', CFLAGS)\n    _debug('LINKCC: %s', LINKCC)\n    _debug('LINKFORSHARED: %s', LINKFORSHARED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "runcmd",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def runcmd(cmd, shell=True):\n    if shell:\n        cmd = ' '.join(cmd)\n        _debug(cmd)\n    else:\n        _debug(' '.join(cmd))\n    try:\n        import subprocess\n    except ImportError: # Python 2.3 ...\n        returncode = os.system(cmd)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "clink",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def clink(basename):\n    runcmd([LINKCC, '-o', basename + EXE_EXT, basename+'.o', '-L'+LIBDIR1, '-L'+LIBDIR2]\n           + [PYLIB_DYN and ('-l'+PYLIB_DYN) or os.path.join(LIBDIR1, PYLIB)]\n           + LIBS.split() + SYSLIBS.split() + LINKFORSHARED.split())\ndef ccompile(basename):\n    runcmd([CC, '-c', '-o', basename+'.o', basename+'.c', '-I' + INCDIR] + CFLAGS.split())\ndef cycompile(input_file, options=()):\n    from ..Compiler import Version, CmdLine, Main\n    options, sources = CmdLine.parse_command_line(list(options or ()) + ['--embed', input_file])\n    _debug('Using Cython %s to compile %s', Version.version, input_file)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "ccompile",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def ccompile(basename):\n    runcmd([CC, '-c', '-o', basename+'.o', basename+'.c', '-I' + INCDIR] + CFLAGS.split())\ndef cycompile(input_file, options=()):\n    from ..Compiler import Version, CmdLine, Main\n    options, sources = CmdLine.parse_command_line(list(options or ()) + ['--embed', input_file])\n    _debug('Using Cython %s to compile %s', Version.version, input_file)\n    result = Main.compile(sources, options)\n    if result.num_errors > 0:\n        sys.exit(1)\ndef exec_file(program_name, args=()):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "cycompile",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def cycompile(input_file, options=()):\n    from ..Compiler import Version, CmdLine, Main\n    options, sources = CmdLine.parse_command_line(list(options or ()) + ['--embed', input_file])\n    _debug('Using Cython %s to compile %s', Version.version, input_file)\n    result = Main.compile(sources, options)\n    if result.num_errors > 0:\n        sys.exit(1)\ndef exec_file(program_name, args=()):\n    runcmd([os.path.abspath(program_name)] + list(args), shell=False)\ndef build(input_file, compiler_args=(), force=False):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "exec_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def exec_file(program_name, args=()):\n    runcmd([os.path.abspath(program_name)] + list(args), shell=False)\ndef build(input_file, compiler_args=(), force=False):\n    \"\"\"\n    Build an executable program from a Cython module.\n    Returns the name of the executable file.\n    \"\"\"\n    basename = os.path.splitext(input_file)[0]\n    exe_file = basename + EXE_EXT\n    if not force and os.path.abspath(exe_file) == os.path.abspath(input_file):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "build",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def build(input_file, compiler_args=(), force=False):\n    \"\"\"\n    Build an executable program from a Cython module.\n    Returns the name of the executable file.\n    \"\"\"\n    basename = os.path.splitext(input_file)[0]\n    exe_file = basename + EXE_EXT\n    if not force and os.path.abspath(exe_file) == os.path.abspath(input_file):\n        raise ValueError(\"Input and output file names are the same, refusing to overwrite\")\n    if (not force and os.path.exists(exe_file) and os.path.exists(input_file)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "build_and_run",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "def build_and_run(args):\n    \"\"\"\n    Build an executable program from a Cython module and runs it.\n    Arguments after the module name will be passed verbatimely to the\n    program.\n    \"\"\"\n    cy_args = []\n    last_arg = None\n    for i, arg in enumerate(args):\n        if arg.startswith('-'):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "DEBUG = True\nimport sys\nimport os\nfrom distutils import sysconfig\ndef get_config_var(name, default=''):\n    return sysconfig.get_config_var(name) or default\nINCDIR = sysconfig.get_python_inc()\nLIBDIR1 = get_config_var('LIBDIR')\nLIBDIR2 = get_config_var('LIBPL')\nPYLIB = get_config_var('LIBRARY')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "INCDIR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "INCDIR = sysconfig.get_python_inc()\nLIBDIR1 = get_config_var('LIBDIR')\nLIBDIR2 = get_config_var('LIBPL')\nPYLIB = get_config_var('LIBRARY')\nPYLIB_DYN = get_config_var('LDLIBRARY')\nif PYLIB_DYN == PYLIB:\n    # no shared library\n    PYLIB_DYN = ''\nelse:\n    PYLIB_DYN = os.path.splitext(PYLIB_DYN[3:])[0] # 'lib(XYZ).so' -> XYZ",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "LIBDIR1",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "LIBDIR1 = get_config_var('LIBDIR')\nLIBDIR2 = get_config_var('LIBPL')\nPYLIB = get_config_var('LIBRARY')\nPYLIB_DYN = get_config_var('LDLIBRARY')\nif PYLIB_DYN == PYLIB:\n    # no shared library\n    PYLIB_DYN = ''\nelse:\n    PYLIB_DYN = os.path.splitext(PYLIB_DYN[3:])[0] # 'lib(XYZ).so' -> XYZ\nCC = get_config_var('CC', os.environ.get('CC', ''))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "LIBDIR2",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "LIBDIR2 = get_config_var('LIBPL')\nPYLIB = get_config_var('LIBRARY')\nPYLIB_DYN = get_config_var('LDLIBRARY')\nif PYLIB_DYN == PYLIB:\n    # no shared library\n    PYLIB_DYN = ''\nelse:\n    PYLIB_DYN = os.path.splitext(PYLIB_DYN[3:])[0] # 'lib(XYZ).so' -> XYZ\nCC = get_config_var('CC', os.environ.get('CC', ''))\nCFLAGS = get_config_var('CFLAGS') + ' ' + os.environ.get('CFLAGS', '')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "PYLIB",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "PYLIB = get_config_var('LIBRARY')\nPYLIB_DYN = get_config_var('LDLIBRARY')\nif PYLIB_DYN == PYLIB:\n    # no shared library\n    PYLIB_DYN = ''\nelse:\n    PYLIB_DYN = os.path.splitext(PYLIB_DYN[3:])[0] # 'lib(XYZ).so' -> XYZ\nCC = get_config_var('CC', os.environ.get('CC', ''))\nCFLAGS = get_config_var('CFLAGS') + ' ' + os.environ.get('CFLAGS', '')\nLINKCC = get_config_var('LINKCC', os.environ.get('LINKCC', CC))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "PYLIB_DYN",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "PYLIB_DYN = get_config_var('LDLIBRARY')\nif PYLIB_DYN == PYLIB:\n    # no shared library\n    PYLIB_DYN = ''\nelse:\n    PYLIB_DYN = os.path.splitext(PYLIB_DYN[3:])[0] # 'lib(XYZ).so' -> XYZ\nCC = get_config_var('CC', os.environ.get('CC', ''))\nCFLAGS = get_config_var('CFLAGS') + ' ' + os.environ.get('CFLAGS', '')\nLINKCC = get_config_var('LINKCC', os.environ.get('LINKCC', CC))\nLINKFORSHARED = get_config_var('LINKFORSHARED')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "CC",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "CC = get_config_var('CC', os.environ.get('CC', ''))\nCFLAGS = get_config_var('CFLAGS') + ' ' + os.environ.get('CFLAGS', '')\nLINKCC = get_config_var('LINKCC', os.environ.get('LINKCC', CC))\nLINKFORSHARED = get_config_var('LINKFORSHARED')\nLIBS = get_config_var('LIBS')\nSYSLIBS = get_config_var('SYSLIBS')\nEXE_EXT = sysconfig.get_config_var('EXE')\ndef _debug(msg, *args):\n    if DEBUG:\n        if args:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "CFLAGS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "CFLAGS = get_config_var('CFLAGS') + ' ' + os.environ.get('CFLAGS', '')\nLINKCC = get_config_var('LINKCC', os.environ.get('LINKCC', CC))\nLINKFORSHARED = get_config_var('LINKFORSHARED')\nLIBS = get_config_var('LIBS')\nSYSLIBS = get_config_var('SYSLIBS')\nEXE_EXT = sysconfig.get_config_var('EXE')\ndef _debug(msg, *args):\n    if DEBUG:\n        if args:\n            msg = msg % args",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "LINKCC",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "LINKCC = get_config_var('LINKCC', os.environ.get('LINKCC', CC))\nLINKFORSHARED = get_config_var('LINKFORSHARED')\nLIBS = get_config_var('LIBS')\nSYSLIBS = get_config_var('SYSLIBS')\nEXE_EXT = sysconfig.get_config_var('EXE')\ndef _debug(msg, *args):\n    if DEBUG:\n        if args:\n            msg = msg % args\n        sys.stderr.write(msg + '\\n')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "LINKFORSHARED",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "LINKFORSHARED = get_config_var('LINKFORSHARED')\nLIBS = get_config_var('LIBS')\nSYSLIBS = get_config_var('SYSLIBS')\nEXE_EXT = sysconfig.get_config_var('EXE')\ndef _debug(msg, *args):\n    if DEBUG:\n        if args:\n            msg = msg % args\n        sys.stderr.write(msg + '\\n')\ndef dump_config():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "LIBS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "LIBS = get_config_var('LIBS')\nSYSLIBS = get_config_var('SYSLIBS')\nEXE_EXT = sysconfig.get_config_var('EXE')\ndef _debug(msg, *args):\n    if DEBUG:\n        if args:\n            msg = msg % args\n        sys.stderr.write(msg + '\\n')\ndef dump_config():\n    _debug('INCDIR: %s', INCDIR)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "SYSLIBS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "SYSLIBS = get_config_var('SYSLIBS')\nEXE_EXT = sysconfig.get_config_var('EXE')\ndef _debug(msg, *args):\n    if DEBUG:\n        if args:\n            msg = msg % args\n        sys.stderr.write(msg + '\\n')\ndef dump_config():\n    _debug('INCDIR: %s', INCDIR)\n    _debug('LIBDIR1: %s', LIBDIR1)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "EXE_EXT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "peekOfCode": "EXE_EXT = sysconfig.get_config_var('EXE')\ndef _debug(msg, *args):\n    if DEBUG:\n        if args:\n            msg = msg % args\n        sys.stderr.write(msg + '\\n')\ndef dump_config():\n    _debug('INCDIR: %s', INCDIR)\n    _debug('LIBDIR1: %s', LIBDIR1)\n    _debug('LIBDIR2: %s', LIBDIR2)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.BuildExecutable",
        "documentation": {}
    },
    {
        "label": "_FakePool",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "peekOfCode": "class _FakePool(object):\n    def map_async(self, func, args):\n        try:\n            from itertools import imap\n        except ImportError:\n            imap=map\n        for _ in imap(func, args):\n            pass\n    def close(self):\n        pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "parse_directives",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "peekOfCode": "def parse_directives(option, name, value, parser):\n    dest = option.dest\n    old_directives = dict(getattr(parser.values, dest,\n                                  Options.get_directive_defaults()))\n    directives = Options.parse_directive_list(\n        value, relaxed_bool=True, current_settings=old_directives)\n    setattr(parser.values, dest, directives)\ndef parse_options(option, name, value, parser):\n    dest = option.dest\n    options = dict(getattr(parser.values, dest, {}))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "parse_options",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "peekOfCode": "def parse_options(option, name, value, parser):\n    dest = option.dest\n    options = dict(getattr(parser.values, dest, {}))\n    for opt in value.split(','):\n        if '=' in opt:\n            n, v = opt.split('=', 1)\n            v = v.lower() not in ('false', 'f', '0', 'no')\n        else:\n            n, v = opt, True\n        options[n] = v",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "parse_compile_time_env",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "peekOfCode": "def parse_compile_time_env(option, name, value, parser):\n    dest = option.dest\n    old_env = dict(getattr(parser.values, dest, {}))\n    new_env = Options.parse_compile_time_env(value, current_settings=old_env)\n    setattr(parser.values, dest, new_env)\ndef find_package_base(path):\n    base_dir, package_path = os.path.split(path)\n    while os.path.isfile(os.path.join(base_dir, '__init__.py')):\n        base_dir, parent = os.path.split(base_dir)\n        package_path = '%s/%s' % (parent, package_path)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "find_package_base",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "peekOfCode": "def find_package_base(path):\n    base_dir, package_path = os.path.split(path)\n    while os.path.isfile(os.path.join(base_dir, '__init__.py')):\n        base_dir, parent = os.path.split(base_dir)\n        package_path = '%s/%s' % (parent, package_path)\n    return base_dir, package_path\ndef cython_compile(path_pattern, options):\n    pool = None\n    all_paths = map(os.path.abspath, extended_iglob(path_pattern))\n    try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "cython_compile",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "peekOfCode": "def cython_compile(path_pattern, options):\n    pool = None\n    all_paths = map(os.path.abspath, extended_iglob(path_pattern))\n    try:\n        for path in all_paths:\n            if options.build_inplace:\n                base_dir = path\n                while not os.path.isdir(base_dir) or is_package_dir(base_dir):\n                    base_dir = os.path.dirname(base_dir)\n            else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "run_distutils",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "peekOfCode": "def run_distutils(args):\n    base_dir, ext_modules = args\n    script_args = ['build_ext', '-i']\n    cwd = os.getcwd()\n    temp_dir = None\n    try:\n        if base_dir:\n            os.chdir(base_dir)\n            temp_dir = tempfile.mkdtemp(dir=base_dir)\n            script_args.extend(['--build-temp', temp_dir])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "parse_args",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "peekOfCode": "def parse_args(args):\n    from optparse import OptionParser\n    parser = OptionParser(usage='%prog [options] [sources and packages]+')\n    parser.add_option('-X', '--directive', metavar='NAME=VALUE,...',\n                      dest='directives', default={}, type=\"str\",\n                      action='callback', callback=parse_directives,\n                      help='set a compiler directive')\n    parser.add_option('-E', '--compile-time-env', metavar='NAME=VALUE,...',\n                      dest='compile_time_env', default={}, type=\"str\",\n                      action='callback', callback=parse_compile_time_env,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "peekOfCode": "def main(args=None):\n    options, paths = parse_args(args)\n    if options.lenient:\n        # increase Python compatibility by ignoring compile time errors\n        Options.error_on_unknown_names = False\n        Options.error_on_uninitialized = False\n    if options.annotate:\n        Options.annotate = True\n    for path in paths:\n        cython_compile(path, options)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Cythonize",
        "documentation": {}
    },
    {
        "label": "DistutilsInfo",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "class DistutilsInfo(object):\n    def __init__(self, source=None, exn=None):\n        self.values = {}\n        if source is not None:\n            for line in line_iter(source):\n                line = line.lstrip()\n                if not line:\n                    continue\n                if line[0] != '#':\n                    break",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "DependencyTree",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "class DependencyTree(object):\n    def __init__(self, context, quiet=False):\n        self.context = context\n        self.quiet = quiet\n        self._transitive_cache = {}\n    def parse_dependencies(self, source_filename):\n        if path_exists(source_filename):\n            source_filename = os.path.normpath(source_filename)\n        return parse_dependencies(source_filename)\n    @cached_method",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "extended_iglob",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def extended_iglob(pattern):\n    if '{' in pattern:\n        m = re.match('(.*){([^}]+)}(.*)', pattern)\n        if m:\n            before, switch, after = m.groups()\n            for case in switch.split(','):\n                for path in extended_iglob(before + case + after):\n                    yield path\n            return\n    if '**/' in pattern:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "nonempty",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def nonempty(it, error_msg=\"expected non-empty iterator\"):\n    empty = True\n    for value in it:\n        empty = False\n        yield value\n    if empty:\n        raise ValueError(error_msg)\n@cached_function\ndef file_hash(filename):\n    path = os.path.normpath(filename)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "file_hash",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def file_hash(filename):\n    path = os.path.normpath(filename)\n    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n    m = hashlib.md5(prefix)\n    with open(path, 'rb') as f:\n        data = f.read(65000)\n        while data:\n            m.update(data)\n            data = f.read(65000)\n    return m.hexdigest()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "update_pythran_extension",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def update_pythran_extension(ext):\n    if pythran is None:\n        raise RuntimeError(\"You first need to install Pythran to use the np_pythran directive.\")\n    try:\n        pythran_ext = pythran.config.make_extension(python=True)\n    except TypeError:  # older pythran version only\n        pythran_ext = pythran.config.make_extension()\n    ext.include_dirs.extend(pythran_ext['include_dirs'])\n    ext.extra_compile_args.extend(pythran_ext['extra_compile_args'])\n    ext.extra_link_args.extend(pythran_ext['extra_link_args'])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "parse_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def parse_list(s):\n    \"\"\"\n    >>> parse_list(\"\")\n    []\n    >>> parse_list(\"a\")\n    ['a']\n    >>> parse_list(\"a b c\")\n    ['a', 'b', 'c']\n    >>> parse_list(\"[a, b, c]\")\n    ['a', 'b', 'c']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "line_iter",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def line_iter(source):\n    if isinstance(source, basestring):\n        start = 0\n        while True:\n            end = source.find('\\n', start)\n            if end == -1:\n                yield source[start:]\n                return\n            yield source[start:end]\n            start = end+1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "strip_string_literals",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def strip_string_literals(code, prefix='__Pyx_L'):\n    \"\"\"\n    Normalizes every string literal to be of the form '__Pyx_Lxxx',\n    returning the normalized code and a mapping of labels to\n    string literals.\n    \"\"\"\n    new_code = []\n    literals = {}\n    counter = 0\n    start = q = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "normalize_existing",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def normalize_existing(base_path, rel_paths):\n    return normalize_existing0(os.path.dirname(base_path), tuple(set(rel_paths)))\n@cached_function\ndef normalize_existing0(base_dir, rel_paths):\n    \"\"\"\n    Given some base directory ``base_dir`` and a list of path names\n    ``rel_paths``, normalize each relative path name ``rel`` by\n    replacing it by ``os.path.join(base, rel)`` if that file exists.\n    Return a couple ``(normalized, needed_base)`` where ``normalized``\n    if the list of normalized file names and ``needed_base`` is",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "normalize_existing0",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def normalize_existing0(base_dir, rel_paths):\n    \"\"\"\n    Given some base directory ``base_dir`` and a list of path names\n    ``rel_paths``, normalize each relative path name ``rel`` by\n    replacing it by ``os.path.join(base, rel)`` if that file exists.\n    Return a couple ``(normalized, needed_base)`` where ``normalized``\n    if the list of normalized file names and ``needed_base`` is\n    ``base_dir`` if we actually needed ``base_dir``. If no paths were\n    changed (for example, if all paths were already absolute), then\n    ``needed_base`` is ``None``.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "resolve_depends",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def resolve_depends(depends, include_dirs):\n    include_dirs = tuple(include_dirs)\n    resolved = []\n    for depend in depends:\n        path = resolve_depend(depend, include_dirs)\n        if path is not None:\n            resolved.append(path)\n    return resolved\n@cached_function\ndef resolve_depend(depend, include_dirs):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "resolve_depend",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def resolve_depend(depend, include_dirs):\n    if depend[0] == '<' and depend[-1] == '>':\n        return None\n    for dir in include_dirs:\n        path = join_path(dir, depend)\n        if path_exists(path):\n            return os.path.normpath(path)\n    return None\n@cached_function\ndef package(filename):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "package",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def package(filename):\n    dir = os.path.dirname(os.path.abspath(str(filename)))\n    if dir != filename and is_package_dir(dir):\n        return package(dir) + (os.path.basename(dir),)\n    else:\n        return ()\n@cached_function\ndef fully_qualified_name(filename):\n    module = os.path.splitext(os.path.basename(filename))[0]\n    return '.'.join(package(filename) + (module,))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "fully_qualified_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def fully_qualified_name(filename):\n    module = os.path.splitext(os.path.basename(filename))[0]\n    return '.'.join(package(filename) + (module,))\n@cached_function\ndef parse_dependencies(source_filename):\n    # Actual parsing is way too slow, so we use regular expressions.\n    # The only catch is that we must strip comments and string\n    # literals ahead of time.\n    with Utils.open_source_file(source_filename, error_handling='ignore') as fh:\n        source = fh.read()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "parse_dependencies",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def parse_dependencies(source_filename):\n    # Actual parsing is way too slow, so we use regular expressions.\n    # The only catch is that we must strip comments and string\n    # literals ahead of time.\n    with Utils.open_source_file(source_filename, error_handling='ignore') as fh:\n        source = fh.read()\n    distutils_info = DistutilsInfo(source)\n    source, literals = strip_string_literals(source)\n    source = source.replace('\\\\\\n', ' ').replace('\\t', ' ')\n    # TODO: pure mode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "create_dependency_tree",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def create_dependency_tree(ctx=None, quiet=False):\n    global _dep_tree\n    if _dep_tree is None:\n        if ctx is None:\n            ctx = Context([\".\"], CompilationOptions(default_options))\n        _dep_tree = DependencyTree(ctx, quiet=quiet)\n    return _dep_tree\n# If this changes, change also docs/src/reference/compilation.rst\n# which mentions this function\ndef default_create_extension(template, kwds):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "default_create_extension",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def default_create_extension(template, kwds):\n    if 'depends' in kwds:\n        include_dirs = kwds.get('include_dirs', []) + [\".\"]\n        depends = resolve_depends(kwds['depends'], include_dirs)\n        kwds['depends'] = sorted(set(depends + template.depends))\n    t = template.__class__\n    ext = t(**kwds)\n    metadata = dict(distutils=kwds, module_name=kwds['name'])\n    return (ext, metadata)\n# This may be useful for advanced users?",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "create_extension_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def create_extension_list(patterns, exclude=None, ctx=None, aliases=None, quiet=False, language=None,\n                          exclude_failures=False):\n    if language is not None:\n        print('Warning: passing language={0!r} to cythonize() is deprecated. '\n              'Instead, put \"# distutils: language={0}\" in your .pyx or .pxd file(s)'.format(language))\n    if exclude is None:\n        exclude = []\n    if patterns is None:\n        return [], {}\n    elif isinstance(patterns, basestring) or not isinstance(patterns, Iterable):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def cythonize(module_list, exclude=None, nthreads=0, aliases=None, quiet=False, force=False, language=None,\n              exclude_failures=False, **options):\n    \"\"\"\n    Compile a set of source modules into C/C++ files and return a list of distutils\n    Extension objects for them.\n    :param module_list: As module list, pass either a glob pattern, a list of glob\n                        patterns or a list of Extension objects.  The latter\n                        allows you to configure the extensions separately\n                        through the normal distutils options.\n                        You can also pass Extension objects that have",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "cythonize_one",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def cythonize_one(pyx_file, c_file, fingerprint, quiet, options=None,\n                  raise_on_failure=True, embedded_metadata=None, full_module_name=None,\n                  progress=\"\"):\n    from ..Compiler.Main import compile_single, default_options\n    from ..Compiler.Errors import CompileError, PyrexError\n    if fingerprint:\n        if not os.path.exists(options.cache):\n            safe_makedirs(options.cache)\n        # Cython-generated c files are highly compressible.\n        # (E.g. a compression ratio of about 10 for Sage).",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "cythonize_one_helper",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def cythonize_one_helper(m):\n    import traceback\n    try:\n        return cythonize_one(*m)\n    except Exception:\n        traceback.print_exc()\n        raise\ndef _init_multiprocessing_helper():\n    # KeyboardInterrupt kills workers, so don't let them get it\n    import signal",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "cleanup_cache",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "def cleanup_cache(cache, target_size, ratio=.85):\n    try:\n        p = subprocess.Popen(['du', '-s', '-k', os.path.abspath(cache)], stdout=subprocess.PIPE)\n        res = p.wait()\n        if res == 0:\n            total_size = 1024 * int(p.stdout.read().strip().split()[0])\n            if total_size < target_size:\n                return\n    except (OSError, ValueError):\n        pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "join_path",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "join_path = cached_function(os.path.join)\ncopy_once_if_newer = cached_function(copy_file_to_dir_if_newer)\nsafe_makedirs_once = cached_function(safe_makedirs)\nif sys.version_info[0] < 3:\n    # stupid Py2 distutils enforces str type in list of sources\n    _fs_encoding = sys.getfilesystemencoding()\n    if _fs_encoding is None:\n        _fs_encoding = sys.getdefaultencoding()\n    def encode_filename_in_py2(filename):\n        if not isinstance(filename, bytes):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "copy_once_if_newer",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "copy_once_if_newer = cached_function(copy_file_to_dir_if_newer)\nsafe_makedirs_once = cached_function(safe_makedirs)\nif sys.version_info[0] < 3:\n    # stupid Py2 distutils enforces str type in list of sources\n    _fs_encoding = sys.getfilesystemencoding()\n    if _fs_encoding is None:\n        _fs_encoding = sys.getdefaultencoding()\n    def encode_filename_in_py2(filename):\n        if not isinstance(filename, bytes):\n            return filename.encode(_fs_encoding)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "safe_makedirs_once",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "safe_makedirs_once = cached_function(safe_makedirs)\nif sys.version_info[0] < 3:\n    # stupid Py2 distutils enforces str type in list of sources\n    _fs_encoding = sys.getfilesystemencoding()\n    if _fs_encoding is None:\n        _fs_encoding = sys.getdefaultencoding()\n    def encode_filename_in_py2(filename):\n        if not isinstance(filename, bytes):\n            return filename.encode(_fs_encoding)\n        return filename",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "transitive_str",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "transitive_str = object()\ntransitive_list = object()\nbool_or = object()\ndistutils_settings = {\n    'name':                 str,\n    'sources':              list,\n    'define_macros':        list,\n    'undef_macros':         list,\n    'libraries':            transitive_list,\n    'library_dirs':         transitive_list,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "transitive_list",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "transitive_list = object()\nbool_or = object()\ndistutils_settings = {\n    'name':                 str,\n    'sources':              list,\n    'define_macros':        list,\n    'undef_macros':         list,\n    'libraries':            transitive_list,\n    'library_dirs':         transitive_list,\n    'runtime_library_dirs': transitive_list,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "bool_or",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "bool_or = object()\ndistutils_settings = {\n    'name':                 str,\n    'sources':              list,\n    'define_macros':        list,\n    'undef_macros':         list,\n    'libraries':            transitive_list,\n    'library_dirs':         transitive_list,\n    'runtime_library_dirs': transitive_list,\n    'include_dirs':         transitive_list,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "distutils_settings",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "distutils_settings = {\n    'name':                 str,\n    'sources':              list,\n    'define_macros':        list,\n    'undef_macros':         list,\n    'libraries':            transitive_list,\n    'library_dirs':         transitive_list,\n    'runtime_library_dirs': transitive_list,\n    'include_dirs':         transitive_list,\n    'extra_objects':        list,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "dependency_regex",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "dependency_regex = re.compile(r\"(?:^\\s*from +([0-9a-zA-Z_.]+) +cimport)|\"\n                              r\"(?:^\\s*cimport +([0-9a-zA-Z_.]+(?: *, *[0-9a-zA-Z_.]+)*))|\"\n                              r\"(?:^\\s*cdef +extern +from +['\\\"]([^'\\\"]+)['\\\"])|\"\n                              r\"(?:^\\s*include +['\\\"]([^'\\\"]+)['\\\"])\", re.M)\ndependency_after_from_regex = re.compile(\n    r\"(?:^\\s+\\(([0-9a-zA-Z_., ]*)\\)[#\\n])|\"\n    r\"(?:^\\s+([0-9a-zA-Z_., ]*)[#\\n])\",\n    re.M)\ndef normalize_existing(base_path, rel_paths):\n    return normalize_existing0(os.path.dirname(base_path), tuple(set(rel_paths)))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "dependency_after_from_regex",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "dependency_after_from_regex = re.compile(\n    r\"(?:^\\s+\\(([0-9a-zA-Z_., ]*)\\)[#\\n])|\"\n    r\"(?:^\\s+([0-9a-zA-Z_., ]*)[#\\n])\",\n    re.M)\ndef normalize_existing(base_path, rel_paths):\n    return normalize_existing0(os.path.dirname(base_path), tuple(set(rel_paths)))\n@cached_function\ndef normalize_existing0(base_dir, rel_paths):\n    \"\"\"\n    Given some base directory ``base_dir`` and a list of path names",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "_dep_tree",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "peekOfCode": "_dep_tree = None\ndef create_dependency_tree(ctx=None, quiet=False):\n    global _dep_tree\n    if _dep_tree is None:\n        if ctx is None:\n            ctx = Context([\".\"], CompilationOptions(default_options))\n        _dep_tree = DependencyTree(ctx, quiet=quiet)\n    return _dep_tree\n# If this changes, change also docs/src/reference/compilation.rst\n# which mentions this function",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Dependencies",
        "documentation": {}
    },
    {
        "label": "UnboundSymbols",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "peekOfCode": "class UnboundSymbols(EnvTransform, SkipDeclarations):\n    def __init__(self):\n        CythonTransform.__init__(self, None)\n        self.unbound = set()\n    def visit_NameNode(self, node):\n        if not self.current_env().lookup(node.name):\n            self.unbound.add(node.name)\n        return node\n    def __call__(self, node):\n        super(UnboundSymbols, self).__call__(node)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "RuntimeCompiledFunction",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "peekOfCode": "class RuntimeCompiledFunction(object):\n    def __init__(self, f):\n        self._f = f\n        self._body = get_body(inspect.getsource(f))\n    def __call__(self, *args, **kwds):\n        all = getcallargs(self._f, *args, **kwds)\n        if IS_PY3:\n            return cython_inline(self._body, locals=self._f.__globals__, globals=self._f.__globals__, **all)\n        else:\n            return cython_inline(self._body, locals=self._f.func_globals, globals=self._f.func_globals, **all)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "unbound_symbols",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "peekOfCode": "def unbound_symbols(code, context=None):\n    code = to_unicode(code)\n    if context is None:\n        context = Context([], default_options)\n    from ..Compiler.ParseTreeTransforms import AnalyseDeclarationsTransform\n    tree = parse_from_strings('(tree fragment)', code)\n    for phase in Pipeline.create_pipeline(context, 'pyx'):\n        if phase is None:\n            continue\n        tree = phase(tree)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "unsafe_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "peekOfCode": "def unsafe_type(arg, context=None):\n    py_type = type(arg)\n    if py_type is int:\n        return 'long'\n    else:\n        return safe_type(arg, context)\ndef safe_type(arg, context=None):\n    py_type = type(arg)\n    if py_type in (list, tuple, dict, str):\n        return py_type.__name__",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "safe_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "peekOfCode": "def safe_type(arg, context=None):\n    py_type = type(arg)\n    if py_type in (list, tuple, dict, str):\n        return py_type.__name__\n    elif py_type is complex:\n        return 'double complex'\n    elif py_type is float:\n        return 'double'\n    elif py_type is bool:\n        return 'bint'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "cython_inline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "peekOfCode": "def cython_inline(code, get_type=unsafe_type,\n                  lib_dir=os.path.join(get_cython_cache_dir(), 'inline'),\n                  cython_include_dirs=None, cython_compiler_directives=None,\n                  force=False, quiet=False, locals=None, globals=None, language_level=None, **kwds):\n    if get_type is None:\n        get_type = lambda x: 'object'\n    ctx = _create_context(tuple(cython_include_dirs)) if cython_include_dirs else _cython_inline_default_context\n    cython_compiler_directives = dict(cython_compiler_directives) if cython_compiler_directives else {}\n    if language_level is None and 'language_level' not in cython_compiler_directives:\n        language_level = '3str'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "strip_common_indent",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "peekOfCode": "def strip_common_indent(code):\n    min_indent = None\n    lines = code.splitlines()\n    for line in lines:\n        match = _find_non_space(line)\n        if not match:\n            continue  # blank\n        indent = match.start()\n        if line[indent] == '#':\n            continue  # comment",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "extract_func_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "peekOfCode": "def extract_func_code(code):\n    module = []\n    function = []\n    current = function\n    code = code.replace('\\t', ' ')\n    lines = code.split('\\n')\n    for line in lines:\n        if not line.startswith(' '):\n            if module_statement.match(line):\n                current = module",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "get_body",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "peekOfCode": "def get_body(source):\n    ix = source.index(':')\n    if source[:5] == 'lambda':\n        return \"return %s\" % source[ix+1:]\n    else:\n        return source[ix+1:]\n# Lots to be done here... It would be especially cool if compiled functions\n# could invoke each other quickly.\nclass RuntimeCompiledFunction(object):\n    def __init__(self, f):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "IS_PY3",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "peekOfCode": "IS_PY3 = sys.version_info >= (3,)\n# A utility function to convert user-supplied ASCII strings to unicode.\nif not IS_PY3:\n    def to_unicode(s):\n        if isinstance(s, bytes):\n            return s.decode('ascii')\n        else:\n            return s\nelse:\n    to_unicode = lambda x: x",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "_cython_inline_cache",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "peekOfCode": "_cython_inline_cache = {}\n_cython_inline_default_context = _create_context(('.',))\ndef _populate_unbound(kwds, unbound_symbols, locals=None, globals=None):\n    for symbol in unbound_symbols:\n        if symbol not in kwds:\n            if locals is None or globals is None:\n                calling_frame = inspect.currentframe().f_back.f_back.f_back\n                if locals is None:\n                    locals = calling_frame.f_locals\n                if globals is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "_cython_inline_default_context",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "peekOfCode": "_cython_inline_default_context = _create_context(('.',))\ndef _populate_unbound(kwds, unbound_symbols, locals=None, globals=None):\n    for symbol in unbound_symbols:\n        if symbol not in kwds:\n            if locals is None or globals is None:\n                calling_frame = inspect.currentframe().f_back.f_back.f_back\n                if locals is None:\n                    locals = calling_frame.f_locals\n                if globals is None:\n                    globals = calling_frame.f_globals",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "cython_inline.so_ext",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "peekOfCode": "cython_inline.so_ext = None\n_find_non_space = re.compile('[^ ]').search\ndef strip_common_indent(code):\n    min_indent = None\n    lines = code.splitlines()\n    for line in lines:\n        match = _find_non_space(line)\n        if not match:\n            continue  # blank\n        indent = match.start()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "_find_non_space",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "peekOfCode": "_find_non_space = re.compile('[^ ]').search\ndef strip_common_indent(code):\n    min_indent = None\n    lines = code.splitlines()\n    for line in lines:\n        match = _find_non_space(line)\n        if not match:\n            continue  # blank\n        indent = match.start()\n        if line[indent] == '#':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "module_statement",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "peekOfCode": "module_statement = re.compile(r'^((cdef +(extern|class))|cimport|(from .+ cimport)|(from .+ import +[*]))')\ndef extract_func_code(code):\n    module = []\n    function = []\n    current = function\n    code = code.replace('\\t', ' ')\n    lines = code.split('\\n')\n    for line in lines:\n        if not line.startswith(' '):\n            if module_statement.match(line):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.Inline",
        "documentation": {}
    },
    {
        "label": "CythonMagics",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "peekOfCode": "class CythonMagics(Magics):\n    def __init__(self, shell):\n        super(CythonMagics, self).__init__(shell)\n        self._reloads = {}\n        self._code_cache = {}\n        self._pyximport_installed = False\n    def _import_all(self, module):\n        mdict = module.__dict__\n        if '__all__' in mdict:\n            keys = mdict['__all__']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "documentation": {}
    },
    {
        "label": "IO_ENCODING",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "peekOfCode": "IO_ENCODING = sys.getfilesystemencoding()\nIS_PY2 = sys.version_info[0] < 3\ntry:\n    reload\nexcept NameError:   # Python 3\n    from imp import reload\ntry:\n    import hashlib\nexcept ImportError:\n    import md5 as hashlib",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "documentation": {}
    },
    {
        "label": "IS_PY2",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "peekOfCode": "IS_PY2 = sys.version_info[0] < 3\ntry:\n    reload\nexcept NameError:   # Python 3\n    from imp import reload\ntry:\n    import hashlib\nexcept ImportError:\n    import md5 as hashlib\nfrom distutils.core import Distribution, Extension",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "documentation": {}
    },
    {
        "label": "PGO_CONFIG",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "peekOfCode": "PGO_CONFIG = {\n    'gcc': {\n        'gen': ['-fprofile-generate', '-fprofile-dir={TEMPDIR}'],\n        'use': ['-fprofile-use', '-fprofile-correction', '-fprofile-dir={TEMPDIR}'],\n    },\n    # blind copy from 'configure' script in CPython 3.7\n    'icc': {\n        'gen': ['-prof-gen'],\n        'use': ['-prof-use'],\n    }",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "documentation": {}
    },
    {
        "label": "PGO_CONFIG['mingw32']",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "peekOfCode": "PGO_CONFIG['mingw32'] = PGO_CONFIG['gcc']\nif IS_PY2:\n    def encode_fs(name):\n        return name if isinstance(name, bytes) else name.encode(IO_ENCODING)\nelse:\n    def encode_fs(name):\n        return name\n@magics_class\nclass CythonMagics(Magics):\n    def __init__(self, shell):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "documentation": {}
    },
    {
        "label": "__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "peekOfCode": "__doc__ = __doc__.format(\n    # rST doesn't see the -+ flag as part of an option list, so we\n    # hide it from the module-level docstring.\n    CYTHON_DOC=dedent(CythonMagics.cython.__doc__\\\n                                  .replace('-+, --cplus', '--cplus    ')),\n    CYTHON_INLINE_DOC=dedent(CythonMagics.cython_inline.__doc__),\n    CYTHON_PYXIMPORT_DOC=dedent(CythonMagics.cython_pyximport.__doc__),\n)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Build.IpythonMagic",
        "documentation": {}
    },
    {
        "label": "TestBufferParsing",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestBuffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestBuffer",
        "peekOfCode": "class TestBufferParsing(CythonTest):\n    # First, we only test the raw parser, i.e.\n    # the number and contents of arguments are NOT checked.\n    # However \"dtype\"/the first positional argument is special-cased\n    #  to parse a type argument rather than an expression\n    def parse(self, s):\n        return self.should_not_fail(lambda: self.fragment(s)).root\n    def not_parseable(self, expected_error, s):\n        e = self.should_fail(lambda: self.fragment(s),  Errors.CompileError)\n        self.assertEqual(expected_error, e.message_only)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestBuffer",
        "documentation": {}
    },
    {
        "label": "TestBufferOptions",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestBuffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestBuffer",
        "peekOfCode": "class TestBufferOptions(CythonTest):\n    # Tests the full parsing of the options within the brackets\n    def nonfatal_error(self, error):\n        # We're passing self as context to transform to trap this\n        self.error = error\n        self.assertTrue(self.expect_error)\n    def parse_opts(self, opts, expect_error=False):\n        assert opts != \"\"\n        s = u\"def f():\\n  cdef object[%s] x\" % opts\n        self.expect_error = expect_error",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestBuffer",
        "documentation": {}
    },
    {
        "label": "CmdLineParserTest",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestCmdLine",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestCmdLine",
        "peekOfCode": "class CmdLineParserTest(TestCase):\n    def setUp(self):\n        backup = {}\n        for name, value in vars(Options).items():\n            backup[name] = value\n        self._options_backup = backup\n    def tearDown(self):\n        no_value = object()\n        for name, orig_value in self._options_backup.items():\n            if getattr(Options, name, no_value) != orig_value:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestCmdLine",
        "documentation": {}
    },
    {
        "label": "check_global_options",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestCmdLine",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestCmdLine",
        "peekOfCode": "def check_global_options(expected_options, white_list=[]):\n    \"\"\"\n    returns error message of \"\" if check Ok\n    \"\"\"\n    no_value = object()\n    for name, orig_value in expected_options.items():\n        if name not in white_list:\n            if getattr(Options, name, no_value) != orig_value:\n                return \"error in option \" + name\n    return \"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestCmdLine",
        "documentation": {}
    },
    {
        "label": "FakeType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestFlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestFlowControl",
        "peekOfCode": "class FakeType(object):\n    is_pyobject = True\nclass FakeNode(object):\n    pos = ('filename.pyx', 1, 2)\n    cf_state = None\n    type = FakeType()\n    def infer_type(self, scope):\n        return self.type\nclass FakeEntry(object):\n    type = FakeType()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestFlowControl",
        "documentation": {}
    },
    {
        "label": "FakeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestFlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestFlowControl",
        "peekOfCode": "class FakeNode(object):\n    pos = ('filename.pyx', 1, 2)\n    cf_state = None\n    type = FakeType()\n    def infer_type(self, scope):\n        return self.type\nclass FakeEntry(object):\n    type = FakeType()\nclass TestGraph(TestCase):\n    def test_deepcopy(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestFlowControl",
        "documentation": {}
    },
    {
        "label": "FakeEntry",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestFlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestFlowControl",
        "peekOfCode": "class FakeEntry(object):\n    type = FakeType()\nclass TestGraph(TestCase):\n    def test_deepcopy(self):\n        lhs, rhs = FakeNode(), FakeNode()\n        entry = FakeEntry()\n        entry.pos = lhs.pos\n        name_ass = NameAssignment(lhs, rhs, entry)\n        ass = deepcopy(name_ass)\n        self.assertTrue(ass.lhs)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestFlowControl",
        "documentation": {}
    },
    {
        "label": "TestGraph",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestFlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestFlowControl",
        "peekOfCode": "class TestGraph(TestCase):\n    def test_deepcopy(self):\n        lhs, rhs = FakeNode(), FakeNode()\n        entry = FakeEntry()\n        entry.pos = lhs.pos\n        name_ass = NameAssignment(lhs, rhs, entry)\n        ass = deepcopy(name_ass)\n        self.assertTrue(ass.lhs)\n        self.assertTrue(ass.rhs)\n        self.assertTrue(ass.entry)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestFlowControl",
        "documentation": {}
    },
    {
        "label": "TestGrammar",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestGrammar",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestGrammar",
        "peekOfCode": "class TestGrammar(CythonTest):\n    def test_invalid_number_literals(self):\n        for literal in INVALID_UNDERSCORE_LITERALS:\n            for expression in ['%s', '1 + %s', '%s + 1', '2 * %s', '%s * 2']:\n                code = 'x = ' + expression % literal\n                try:\n                    self.fragment(u'''\\\n                    # cython: language_level=3\n                    ''' + code)\n                except CompileError as exc:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestGrammar",
        "documentation": {}
    },
    {
        "label": "VALID_UNDERSCORE_LITERALS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestGrammar",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestGrammar",
        "peekOfCode": "VALID_UNDERSCORE_LITERALS = [\n    '0_0_0',\n    '4_2',\n    '1_0000_0000',\n    '0b1001_0100',\n    '0xffff_ffff',\n    '0o5_7_7',\n    '1_00_00.5',\n    '1_00_00.5j',\n    '1_00_00.5e5',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestGrammar",
        "documentation": {}
    },
    {
        "label": "INVALID_UNDERSCORE_LITERALS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestGrammar",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestGrammar",
        "peekOfCode": "INVALID_UNDERSCORE_LITERALS = [\n    # Trailing underscores:\n    '0_',\n    '42_',\n    '1.4j_',\n    '0b1_',\n    '0xf_',\n    '0o5_',\n    # Underscores in the base selector:\n    '0_b0',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestGrammar",
        "documentation": {}
    },
    {
        "label": "TestMemviewParsing",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestMemView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestMemView",
        "peekOfCode": "class TestMemviewParsing(CythonTest):\n    def parse(self, s):\n        return self.should_not_fail(lambda: self.fragment(s)).root\n    def not_parseable(self, expected_error, s):\n        e = self.should_fail(lambda: self.fragment(s),  Errors.CompileError)\n        self.assertEqual(expected_error, e.message_only)\n    def test_default_1dim(self):\n        self.parse(u\"cdef int[:] x\")\n        self.parse(u\"cdef short int[:] x\")\n    def test_default_ndim(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestMemView",
        "documentation": {}
    },
    {
        "label": "TestNormalizeTree",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "peekOfCode": "class TestNormalizeTree(TransformTest):\n    def test_parserbehaviour_is_what_we_coded_for(self):\n        t = self.fragment(u\"if x: y\").root\n        self.assertLines(u\"\"\"\n(root): StatListNode\n  stats[0]: IfStatNode\n    if_clauses[0]: IfClauseNode\n      condition: NameNode\n      body: ExprStatNode\n        expr: NameNode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "TestWithTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "peekOfCode": "class TestWithTransform(object): # (TransformTest): # Disabled!\n    def test_simplified(self):\n        t = self.run_pipeline([WithTransform(None)], u\"\"\"\n        with x:\n            y = z ** 3\n        \"\"\")\n        self.assertCode(u\"\"\"\n        $0_0 = x\n        $0_2 = $0_0.__exit__\n        $0_0.__enter__()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "TestInterpretCompilerDirectives",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "peekOfCode": "class TestInterpretCompilerDirectives(TransformTest):\n    \"\"\"\n    This class tests the parallel directives AST-rewriting and importing.\n    \"\"\"\n    # Test the parallel directives (c)importing\n    import_code = u\"\"\"\n        cimport cython.parallel\n        cimport cython.parallel as par\n        from cython cimport parallel as par2\n        from cython cimport parallel",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "TestDebugTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "peekOfCode": "class TestDebugTransform(DebuggerTestCase):\n    def elem_hasattrs(self, elem, attrs):\n        return all(attr in elem.attrib for attr in attrs)\n    def test_debug_info(self):\n        try:\n            assert os.path.exists(self.debug_dest)\n            t = DebugWriter.etree.parse(self.debug_dest)\n            # the xpath of the standard ElementTree is primitive, don't use\n            # anything fancy\n            L = list(t.find('/Module/Globals'))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "TestAnalyseDeclarationsTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "peekOfCode": "class TestAnalyseDeclarationsTransform(unittest.TestCase):\n    def test_calculate_pickle_checksums(self):\n        checksums = _calculate_pickle_checksums(['member1', 'member2', 'member3'])\n        assert 2 <= len(checksums) <= 3, checksums  # expecting ['0xc0af380' (MD5), '0x0c75bd4', '0xa7a7b94']\nif __name__ == \"__main__\":\n    import unittest\n    unittest.main()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "SignatureMatcherTest",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "peekOfCode": "class SignatureMatcherTest(unittest.TestCase):\n    \"\"\"\n    Test the signature matching algorithm for overloaded signatures.\n    \"\"\"\n    def assertMatches(self, expected_type, arg_types, functions):\n        match = pt.best_match(arg_types, functions)\n        if expected_type is not None:\n            self.assertNotEqual(None, match)\n        self.assertEqual(expected_type, match.type)\n    def test_cpp_reference_single_arg(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "documentation": {}
    },
    {
        "label": "cfunctype",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "peekOfCode": "def cfunctype(*arg_types):\n    return pt.CFuncType(pt.c_int_type,\n        [ CFuncTypeArg(\"name\", arg_type, None) for arg_type in arg_types ])\ndef cppclasstype(name, base_classes):\n    return pt.CppClassType(name, None, 'CPP_'+name, base_classes)\nclass SignatureMatcherTest(unittest.TestCase):\n    \"\"\"\n    Test the signature matching algorithm for overloaded signatures.\n    \"\"\"\n    def assertMatches(self, expected_type, arg_types, functions):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "documentation": {}
    },
    {
        "label": "cppclasstype",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "peekOfCode": "def cppclasstype(name, base_classes):\n    return pt.CppClassType(name, None, 'CPP_'+name, base_classes)\nclass SignatureMatcherTest(unittest.TestCase):\n    \"\"\"\n    Test the signature matching algorithm for overloaded signatures.\n    \"\"\"\n    def assertMatches(self, expected_type, arg_types, functions):\n        match = pt.best_match(arg_types, functions)\n        if expected_type is not None:\n            self.assertNotEqual(None, match)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestSignatureMatching",
        "documentation": {}
    },
    {
        "label": "StringEncodingTest",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestStringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestStringEncoding",
        "peekOfCode": "class StringEncodingTest(unittest.TestCase):\n    \"\"\"\n    Test the StringEncoding module.\n    \"\"\"\n    def test_string_contains_lone_surrogates(self):\n        self.assertFalse(StringEncoding.string_contains_lone_surrogates(u\"abc\"))\n        self.assertFalse(StringEncoding.string_contains_lone_surrogates(u\"\\uABCD\"))\n        self.assertFalse(StringEncoding.string_contains_lone_surrogates(u\"\\N{SNOWMAN}\"))\n        # This behaves differently in Py2 when freshly parsed and read from a .pyc file,\n        # but it seems to be a marshalling bug in Py2, which doesn't hurt us in Cython.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestStringEncoding",
        "documentation": {}
    },
    {
        "label": "TestTreeFragments",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestTreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestTreeFragment",
        "peekOfCode": "class TestTreeFragments(CythonTest):\n    def test_basic(self):\n        F = self.fragment(u\"x = 4\")\n        T = F.copy()\n        self.assertCode(u\"x = 4\", T)\n    def test_copy_is_taken(self):\n        F = self.fragment(u\"if True: x = 4\")\n        T1 = F.root\n        T2 = F.copy()\n        self.assertEqual(\"x\", T2.stats[0].if_clauses[0].body.lhs.name)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestTreeFragment",
        "documentation": {}
    },
    {
        "label": "TestTreePath",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestTreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestTreePath",
        "peekOfCode": "class TestTreePath(TransformTest):\n    _tree = None\n    def _build_tree(self):\n        if self._tree is None:\n            self._tree = self.run_pipeline([], u\"\"\"\n            def decorator(fun):  # DefNode\n                return fun       # ReturnStatNode, NameNode\n            @decorator           # NameNode\n            def decorated():     # DefNode\n                pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestTreePath",
        "documentation": {}
    },
    {
        "label": "TestMethodDispatcherTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestTypes",
        "peekOfCode": "class TestMethodDispatcherTransform(unittest.TestCase):\n    def test_widest_numeric_type(self):\n        def assert_widest(type1, type2, widest):\n            self.assertEqual(widest, PT.widest_numeric_type(type1, type2))\n        assert_widest(PT.c_int_type, PT.c_long_type, PT.c_long_type)\n        assert_widest(PT.c_double_type, PT.c_long_type, PT.c_double_type)\n        assert_widest(PT.c_longdouble_type, PT.c_long_type, PT.c_longdouble_type)\n        cenum = PT.CEnumType(\"E\", \"cenum\", typedef_flag=False)\n        assert_widest(PT.c_int_type, cenum, PT.c_int_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestTypes",
        "documentation": {}
    },
    {
        "label": "TestUtilityLoader",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "peekOfCode": "class TestUtilityLoader(unittest.TestCase):\n    \"\"\"\n    Test loading UtilityCodes\n    \"\"\"\n    expected = \"test {{loader}} prototype\", \"test {{loader}} impl\"\n    required = \"req {{loader}} proto\", \"req {{loader}} impl\"\n    context = dict(loader='Loader')\n    name = \"TestUtilityLoader\"\n    filename = \"TestUtilityLoader.c\"\n    cls = Code.UtilityCode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "documentation": {}
    },
    {
        "label": "TestTempitaUtilityLoader",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "peekOfCode": "class TestTempitaUtilityLoader(TestUtilityLoader):\n    \"\"\"\n    Test loading UtilityCodes with Tempita substitution\n    \"\"\"\n    expected_tempita = (TestUtilityLoader.expected[0].replace('{{loader}}', 'Loader'),\n                        TestUtilityLoader.expected[1].replace('{{loader}}', 'Loader'))\n    required_tempita = (TestUtilityLoader.required[0].replace('{{loader}}', 'Loader'),\n                        TestUtilityLoader.required[1].replace('{{loader}}', 'Loader'))\n    cls = Code.TempitaUtilityCode\n    def test_load_as_string(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "documentation": {}
    },
    {
        "label": "TestCythonUtilityLoader",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "peekOfCode": "class TestCythonUtilityLoader(TestTempitaUtilityLoader):\n    \"\"\"\n    Test loading CythonUtilityCodes\n    \"\"\"\n    # Just change the attributes and run the same tests\n    expected = None, \"test {{cy_loader}} impl\"\n    expected_tempita = None, \"test CyLoader impl\"\n    required = None, \"req {{cy_loader}} impl\"\n    required_tempita = None, \"req CyLoader impl\"\n    context = dict(cy_loader='CyLoader')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "documentation": {}
    },
    {
        "label": "strip_2tup",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "peekOfCode": "def strip_2tup(tup):\n    return tup[0] and tup[0].strip(), tup[1] and tup[1].strip()\nclass TestUtilityLoader(unittest.TestCase):\n    \"\"\"\n    Test loading UtilityCodes\n    \"\"\"\n    expected = \"test {{loader}} prototype\", \"test {{loader}} impl\"\n    required = \"req {{loader}} proto\", \"req {{loader}} impl\"\n    context = dict(loader='Loader')\n    name = \"TestUtilityLoader\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestUtilityLoad",
        "documentation": {}
    },
    {
        "label": "TestMethodDispatcherTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestVisitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestVisitor",
        "peekOfCode": "class TestMethodDispatcherTransform(TransformTest):\n    _tree = None\n    def _build_tree(self):\n        if self._tree is None:\n            context = None\n            def fake_module(node):\n                scope = ModuleScope('test', None, None)\n                return ModuleNode(node.pos, doc=None, body=node,\n                                  scope=scope, full_module_name='test',\n                                  directive_comments={})",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Tests.TestVisitor",
        "documentation": {}
    },
    {
        "label": "AutoTestDictTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.AnalysedTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.AnalysedTreeTransforms",
        "peekOfCode": "class AutoTestDictTransform(ScopeTrackingTransform):\n    # Handles autotestdict directive\n    blacklist = ['__cinit__', '__dealloc__', '__richcmp__',\n                 '__nonzero__', '__bool__',\n                 '__len__', '__contains__']\n    def visit_ModuleNode(self, node):\n        if node.is_pxd:\n            return node\n        self.scope_type = 'module'\n        self.scope_node = node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.AnalysedTreeTransforms",
        "documentation": {}
    },
    {
        "label": "AnnotationCCodeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Annotate",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Annotate",
        "peekOfCode": "class AnnotationCCodeWriter(CCodeWriter):\n    def __init__(self, create_from=None, buffer=None, copy_formatting=True):\n        CCodeWriter.__init__(self, create_from, buffer, copy_formatting=copy_formatting)\n        if create_from is None:\n            self.annotation_buffer = StringIO()\n            self.last_annotated_pos = None\n            # annotations[filename][line] -> [(column, AnnotationItem)*]\n            self.annotations = defaultdict(partial(defaultdict, list))\n            # code[filename][line] -> str\n            self.code = defaultdict(partial(defaultdict, str))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Annotate",
        "documentation": {}
    },
    {
        "label": "AnnotationItem",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Annotate",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Annotate",
        "peekOfCode": "class AnnotationItem(object):\n    def __init__(self, style, text, tag=\"\", size=0):\n        self.style = style\n        self.text = text\n        self.tag = tag\n        self.size = size\n    def start(self):\n        return u\"<span class='cython tag %s' title='%s'>%s\" % (self.style, self.text, self.tag)\n    def end(self):\n        return self.size, u\"</span>\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Annotate",
        "documentation": {}
    },
    {
        "label": "_parse_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Annotate",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Annotate",
        "peekOfCode": "_parse_code = re.compile((\n    br'(?P<refnanny>__Pyx_X?(?:GOT|GIVE)REF|__Pyx_RefNanny[A-Za-z]+)|'\n    br'(?P<trace>__Pyx_Trace[A-Za-z]+)|'\n    br'(?:'\n    br'(?P<pyx_macro_api>__Pyx_[A-Z][A-Z_]+)|'\n    br'(?P<pyx_c_api>(?:__Pyx_[A-Z][a-z_][A-Za-z_]*)|__pyx_convert_[A-Za-z_]*)|'\n    br'(?P<py_macro_api>Py[A-Z][a-z]+_[A-Z][A-Z_]+)|'\n    br'(?P<py_c_api>Py[A-Z][a-z]+_[A-Z][a-z][A-Za-z_]*)'\n    br')(?=\\()|'       # look-ahead to exclude subsequent '(' from replacement\n    br'(?P<error_goto>(?:(?<=;) *if [^;]* +)?__PYX_ERR\\([^)]+\\))'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Annotate",
        "documentation": {}
    },
    {
        "label": "_replace_pos_comment",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Annotate",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Annotate",
        "peekOfCode": "_replace_pos_comment = re.compile(\n    # this matches what Cython generates as code line marker comment\n    br'^\\s*/\\*(?:(?:[^*]|\\*[^/])*\\n)+\\s*\\*/\\s*\\n'.decode('ascii'),\n    re.M\n).sub\nclass AnnotationItem(object):\n    def __init__(self, style, text, tag=\"\", size=0):\n        self.style = style\n        self.text = text\n        self.tag = tag",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Annotate",
        "documentation": {}
    },
    {
        "label": "AnnotationWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.AutoDocTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.AutoDocTransforms",
        "peekOfCode": "class AnnotationWriter(ExpressionWriter):\n    def visit_Node(self, node):\n        self.put(u\"<???>\")\n    def visit_LambdaNode(self, node):\n        # XXX Should we do better?\n        self.put(\"<lambda>\")\nclass EmbedSignature(CythonTransform):\n    def __init__(self, context):\n        super(EmbedSignature, self).__init__(context)\n        self.class_name = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.AutoDocTransforms",
        "documentation": {}
    },
    {
        "label": "EmbedSignature",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.AutoDocTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.AutoDocTransforms",
        "peekOfCode": "class EmbedSignature(CythonTransform):\n    def __init__(self, context):\n        super(EmbedSignature, self).__init__(context)\n        self.class_name = None\n        self.class_node = None\n    def _fmt_expr(self, node):\n        writer = AnnotationWriter()\n        result = writer.write(node)\n        # print(type(node).__name__, '-->', result)\n        return result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.AutoDocTransforms",
        "documentation": {}
    },
    {
        "label": "IntroduceBufferAuxiliaryVars",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "class IntroduceBufferAuxiliaryVars(CythonTransform):\n    #\n    # Entry point\n    #\n    buffers_exists = False\n    using_memoryview = False\n    def __call__(self, node):\n        assert isinstance(node, ModuleNode)\n        self.max_ndim = 0\n        result = super(IntroduceBufferAuxiliaryVars, self).__call__(node)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "BufferEntry",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "class BufferEntry(object):\n    def __init__(self, entry):\n        self.entry = entry\n        self.type = entry.type\n        self.cname = entry.buffer_aux.buflocal_nd_var.cname\n        self.buf_ptr = \"%s.rcbuffer->pybuffer.buf\" % self.cname\n        self.buf_ptr_type = entry.type.buffer_ptr_type\n        self.init_attributes()\n    def init_attributes(self):\n        self.shape = self.get_buf_shapevars()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "GetAndReleaseBufferUtilityCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "class GetAndReleaseBufferUtilityCode(object):\n    # Emulation of PyObject_GetBuffer and PyBuffer_Release for Python 2.\n    # For >= 2.6 we do double mode -- use the new buffer interface on objects\n    # which has the right tp_flags set, but emulation otherwise.\n    requires = None\n    is_cython_utility = False\n    def __init__(self):\n        pass\n    def __eq__(self, other):\n        return isinstance(other, GetAndReleaseBufferUtilityCode)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "dedent",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def dedent(text, reindent=0):\n    from textwrap import dedent\n    text = dedent(text)\n    if reindent > 0:\n        indent = \" \" * reindent\n        text = '\\n'.join([indent + x for x in text.split('\\n')])\n    return text\nclass IntroduceBufferAuxiliaryVars(CythonTransform):\n    #\n    # Entry point",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "analyse_buffer_options",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called\n    on the dtype argument.\n    posargs and dictargs should consist of a list and a dict\n    of tuples (value, pos). Defaults should be a dict of values.\n    Returns a dict containing all the options a buffer can have and\n    its value (with the positions stripped).\n    \"\"\"\n    if defaults is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "get_flags",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def get_flags(buffer_aux, buffer_type):\n    flags = 'PyBUF_FORMAT'\n    mode = buffer_type.mode\n    if mode == 'full':\n        flags += '| PyBUF_INDIRECT'\n    elif mode == 'strided':\n        flags += '| PyBUF_STRIDES'\n    elif mode == 'c':\n        flags += '| PyBUF_C_CONTIGUOUS'\n    elif mode == 'fortran':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "used_buffer_aux_vars",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def used_buffer_aux_vars(entry):\n    buffer_aux = entry.buffer_aux\n    buffer_aux.buflocal_nd_var.used = True\n    buffer_aux.rcbuf_var.used = True\ndef put_unpack_buffer_aux_into_scope(buf_entry, code):\n    # Generate code to copy the needed struct info into local\n    # variables.\n    buffer_aux, mode = buf_entry.buffer_aux, buf_entry.type.mode\n    pybuffernd_struct = buffer_aux.buflocal_nd_var.cname\n    fldnames = ['strides', 'shape']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "put_unpack_buffer_aux_into_scope",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def put_unpack_buffer_aux_into_scope(buf_entry, code):\n    # Generate code to copy the needed struct info into local\n    # variables.\n    buffer_aux, mode = buf_entry.buffer_aux, buf_entry.type.mode\n    pybuffernd_struct = buffer_aux.buflocal_nd_var.cname\n    fldnames = ['strides', 'shape']\n    if mode == 'full':\n        fldnames.append('suboffsets')\n    ln = []\n    for i in range(buf_entry.type.ndim):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "put_init_vars",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def put_init_vars(entry, code):\n    bufaux = entry.buffer_aux\n    pybuffernd_struct = bufaux.buflocal_nd_var.cname\n    pybuffer_struct = bufaux.rcbuf_var.cname\n    # init pybuffer_struct\n    code.putln(\"%s.pybuffer.buf = NULL;\" % pybuffer_struct)\n    code.putln(\"%s.refcount = 0;\" % pybuffer_struct)\n    # init the buffer object\n    # code.put_init_var_to_py_none(entry)\n    # init the pybuffernd_struct",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "put_acquire_arg_buffer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def put_acquire_arg_buffer(entry, code, pos):\n    buffer_aux = entry.buffer_aux\n    getbuffer = get_getbuffer_call(code, entry.cname, buffer_aux, entry.type)\n    # Acquire any new buffer\n    code.putln(\"{\")\n    code.putln(\"__Pyx_BufFmt_StackElem __pyx_stack[%d];\" % entry.type.dtype.struct_nesting_depth())\n    code.putln(code.error_goto_if(\"%s == -1\" % getbuffer, pos))\n    code.putln(\"}\")\n    # An exception raised in arg parsing cannot be caught, so no\n    # need to care about the buffer then.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "put_release_buffer_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def put_release_buffer_code(code, entry):\n    code.globalstate.use_utility_code(acquire_utility_code)\n    code.putln(\"__Pyx_SafeReleaseBuffer(&%s.rcbuffer->pybuffer);\" % entry.buffer_aux.buflocal_nd_var.cname)\ndef get_getbuffer_call(code, obj_cname, buffer_aux, buffer_type):\n    ndim = buffer_type.ndim\n    cast = int(buffer_type.cast)\n    flags = get_flags(buffer_aux, buffer_type)\n    pybuffernd_struct = buffer_aux.buflocal_nd_var.cname\n    dtype_typeinfo = get_type_information_cname(code, buffer_type.dtype)\n    code.globalstate.use_utility_code(acquire_utility_code)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "get_getbuffer_call",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def get_getbuffer_call(code, obj_cname, buffer_aux, buffer_type):\n    ndim = buffer_type.ndim\n    cast = int(buffer_type.cast)\n    flags = get_flags(buffer_aux, buffer_type)\n    pybuffernd_struct = buffer_aux.buflocal_nd_var.cname\n    dtype_typeinfo = get_type_information_cname(code, buffer_type.dtype)\n    code.globalstate.use_utility_code(acquire_utility_code)\n    return (\"__Pyx_GetBufferAndValidate(&%(pybuffernd_struct)s.rcbuffer->pybuffer, \"\n            \"(PyObject*)%(obj_cname)s, &%(dtype_typeinfo)s, %(flags)s, %(ndim)d, \"\n            \"%(cast)d, __pyx_stack)\" % locals())",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "put_assign_to_buffer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def put_assign_to_buffer(lhs_cname, rhs_cname, buf_entry,\n                         is_initialized, pos, code):\n    \"\"\"\n    Generate code for reassigning a buffer variables. This only deals with getting\n    the buffer auxiliary structure and variables set up correctly, the assignment\n    itself and refcounting is the responsibility of the caller.\n    However, the assignment operation may throw an exception so that the reassignment\n    never happens.\n    Depending on the circumstances there are two possible outcomes:\n    - Old buffer released, new acquired, rhs assigned to lhs",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "put_buffer_lookup_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def put_buffer_lookup_code(entry, index_signeds, index_cnames, directives,\n                           pos, code, negative_indices, in_nogil_context):\n    \"\"\"\n    Generates code to process indices and calculate an offset into\n    a buffer. Returns a C string which gives a pointer which can be\n    read from or written to at will (it is an expression so caller should\n    store it in a temporary if it is used more than once).\n    As the bounds checking can have any number of combinations of unsigned\n    arguments, smart optimizations etc. we insert it directly in the function\n    body. The lookup however is delegated to a inline function that is instantiated",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "use_bufstruct_declare_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def use_bufstruct_declare_code(env):\n    env.use_utility_code(buffer_struct_declare_code)\ndef buf_lookup_full_code(proto, defin, name, nd):\n    \"\"\"\n    Generates a buffer lookup function for the right number\n    of dimensions. The function gives back a void* at the right location.\n    \"\"\"\n    # _i_ndex, _s_tride, sub_o_ffset\n    macroargs = \", \".join([\"i%d, s%d, o%d\" % (i, i, i) for i in range(nd)])\n    proto.putln(\"#define %s(type, buf, %s) (type)(%s_imp(buf, %s))\" % (name, macroargs, name, macroargs))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buf_lookup_full_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def buf_lookup_full_code(proto, defin, name, nd):\n    \"\"\"\n    Generates a buffer lookup function for the right number\n    of dimensions. The function gives back a void* at the right location.\n    \"\"\"\n    # _i_ndex, _s_tride, sub_o_ffset\n    macroargs = \", \".join([\"i%d, s%d, o%d\" % (i, i, i) for i in range(nd)])\n    proto.putln(\"#define %s(type, buf, %s) (type)(%s_imp(buf, %s))\" % (name, macroargs, name, macroargs))\n    funcargs = \", \".join([\"Py_ssize_t i%d, Py_ssize_t s%d, Py_ssize_t o%d\" % (i, i, i) for i in range(nd)])\n    proto.putln(\"static CYTHON_INLINE void* %s_imp(void* buf, %s);\" % (name, funcargs))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buf_lookup_strided_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def buf_lookup_strided_code(proto, defin, name, nd):\n    \"\"\"\n    Generates a buffer lookup function for the right number\n    of dimensions. The function gives back a void* at the right location.\n    \"\"\"\n    # _i_ndex, _s_tride\n    args = \", \".join([\"i%d, s%d\" % (i, i) for i in range(nd)])\n    offset = \" + \".join([\"i%d * s%d\" % (i, i) for i in range(nd)])\n    proto.putln(\"#define %s(type, buf, %s) (type)((char*)buf + %s)\" % (name, args, offset))\ndef buf_lookup_c_code(proto, defin, name, nd):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buf_lookup_c_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def buf_lookup_c_code(proto, defin, name, nd):\n    \"\"\"\n    Similar to strided lookup, but can assume that the last dimension\n    doesn't need a multiplication as long as.\n    Still we keep the same signature for now.\n    \"\"\"\n    if nd == 1:\n        proto.putln(\"#define %s(type, buf, i0, s0) ((type)buf + i0)\" % name)\n    else:\n        args = \", \".join([\"i%d, s%d\" % (i, i) for i in range(nd)])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buf_lookup_fortran_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def buf_lookup_fortran_code(proto, defin, name, nd):\n    \"\"\"\n    Like C lookup, but the first index is optimized instead.\n    \"\"\"\n    if nd == 1:\n        proto.putln(\"#define %s(type, buf, i0, s0) ((type)buf + i0)\" % name)\n    else:\n        args = \", \".join([\"i%d, s%d\" % (i, i) for i in range(nd)])\n        offset = \" + \".join([\"i%d * s%d\" % (i, i) for i in range(1, nd)])\n        proto.putln(\"#define %s(type, buf, %s) ((type)((char*)buf + %s) + i%d)\" % (name, args, offset, 0))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "use_py2_buffer_functions",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def use_py2_buffer_functions(env):\n    env.use_utility_code(GetAndReleaseBufferUtilityCode())\nclass GetAndReleaseBufferUtilityCode(object):\n    # Emulation of PyObject_GetBuffer and PyBuffer_Release for Python 2.\n    # For >= 2.6 we do double mode -- use the new buffer interface on objects\n    # which has the right tp_flags set, but emulation otherwise.\n    requires = None\n    is_cython_utility = False\n    def __init__(self):\n        pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "mangle_dtype_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def mangle_dtype_name(dtype):\n    # Use prefixes to separate user defined types from builtins\n    # (consider \"typedef float unsigned_int\")\n    if dtype.is_pyobject:\n        return \"object\"\n    elif dtype.is_ptr:\n        return \"ptr\"\n    else:\n        if dtype.is_typedef or dtype.is_struct_or_union:\n            prefix = \"nn_\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "get_type_information_cname",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def get_type_information_cname(code, dtype, maxdepth=None):\n    \"\"\"\n    Output the run-time type information (__Pyx_TypeInfo) for given dtype,\n    and return the name of the type info struct.\n    Structs with two floats of the same size are encoded as complex numbers.\n    One can separate between complex numbers declared as struct or with native\n    encoding by inspecting to see if the fields field of the type is\n    filled in.\n    \"\"\"\n    namesuffix = mangle_dtype_name(dtype)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "load_buffer_utility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "def load_buffer_utility(util_code_name, context=None, **kwargs):\n    if context is None:\n        return UtilityCode.load(util_code_name, \"Buffer.c\", **kwargs)\n    else:\n        return TempitaUtilityCode.load(util_code_name, \"Buffer.c\", context=context, **kwargs)\ncontext = dict(max_dims=Options.buffer_max_dims)\nbuffer_struct_declare_code = load_buffer_utility(\"BufferStructDeclare\", context=context)\nbuffer_formats_declare_code = load_buffer_utility(\"BufferFormatStructs\")\n# Utility function to set the right exception\n# The caller should immediately goto_error",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buffer_options",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "buffer_options = (\"dtype\", \"ndim\", \"mode\", \"negative_indices\", \"cast\") # ordered!\nbuffer_defaults = {\"ndim\": 1, \"mode\": \"full\", \"negative_indices\": True, \"cast\": False}\nbuffer_positional_options_count = 1 # anything beyond this needs keyword argument\nERR_BUF_OPTION_UNKNOWN = '\"%s\" is not a buffer option'\nERR_BUF_TOO_MANY = 'Too many buffer options'\nERR_BUF_DUP = '\"%s\" buffer option already supplied'\nERR_BUF_MISSING = '\"%s\" missing'\nERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buffer_defaults",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "buffer_defaults = {\"ndim\": 1, \"mode\": \"full\", \"negative_indices\": True, \"cast\": False}\nbuffer_positional_options_count = 1 # anything beyond this needs keyword argument\nERR_BUF_OPTION_UNKNOWN = '\"%s\" is not a buffer option'\nERR_BUF_TOO_MANY = 'Too many buffer options'\nERR_BUF_DUP = '\"%s\" buffer option already supplied'\nERR_BUF_MISSING = '\"%s\" missing'\nERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buffer_positional_options_count",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "buffer_positional_options_count = 1 # anything beyond this needs keyword argument\nERR_BUF_OPTION_UNKNOWN = '\"%s\" is not a buffer option'\nERR_BUF_TOO_MANY = 'Too many buffer options'\nERR_BUF_DUP = '\"%s\" buffer option already supplied'\nERR_BUF_MISSING = '\"%s\" missing'\nERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_OPTION_UNKNOWN",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_OPTION_UNKNOWN = '\"%s\" is not a buffer option'\nERR_BUF_TOO_MANY = 'Too many buffer options'\nERR_BUF_DUP = '\"%s\" buffer option already supplied'\nERR_BUF_MISSING = '\"%s\" missing'\nERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_TOO_MANY",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_TOO_MANY = 'Too many buffer options'\nERR_BUF_DUP = '\"%s\" buffer option already supplied'\nERR_BUF_MISSING = '\"%s\" missing'\nERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_DUP",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_DUP = '\"%s\" buffer option already supplied'\nERR_BUF_MISSING = '\"%s\" missing'\nERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called\n    on the dtype argument.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_MISSING",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_MISSING = '\"%s\" missing'\nERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called\n    on the dtype argument.\n    posargs and dictargs should consist of a list and a dict",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_MODE",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_MODE = 'Only allowed buffer modes are: \"c\", \"fortran\", \"full\", \"strided\" (as a compile-time string)'\nERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called\n    on the dtype argument.\n    posargs and dictargs should consist of a list and a dict\n    of tuples (value, pos). Defaults should be a dict of values.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_NDIM",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_NDIM = 'ndim must be a non-negative integer'\nERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called\n    on the dtype argument.\n    posargs and dictargs should consist of a list and a dict\n    of tuples (value, pos). Defaults should be a dict of values.\n    Returns a dict containing all the options a buffer can have and",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_DTYPE",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_DTYPE = 'dtype must be \"object\", numeric type or a struct'\nERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called\n    on the dtype argument.\n    posargs and dictargs should consist of a list and a dict\n    of tuples (value, pos). Defaults should be a dict of values.\n    Returns a dict containing all the options a buffer can have and\n    its value (with the positions stripped).",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_BOOL",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "ERR_BUF_BOOL = '\"%s\" must be a boolean'\ndef analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):\n    \"\"\"\n    Must be called during type analysis, as analyse is called\n    on the dtype argument.\n    posargs and dictargs should consist of a list and a dict\n    of tuples (value, pos). Defaults should be a dict of values.\n    Returns a dict containing all the options a buffer can have and\n    its value (with the positions stripped).\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "context",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "context = dict(max_dims=Options.buffer_max_dims)\nbuffer_struct_declare_code = load_buffer_utility(\"BufferStructDeclare\", context=context)\nbuffer_formats_declare_code = load_buffer_utility(\"BufferFormatStructs\")\n# Utility function to set the right exception\n# The caller should immediately goto_error\nraise_indexerror_code = load_buffer_utility(\"BufferIndexError\")\nraise_indexerror_nogil = load_buffer_utility(\"BufferIndexErrorNogil\")\nraise_buffer_fallback_code = load_buffer_utility(\"BufferFallbackError\")\nacquire_utility_code = load_buffer_utility(\"BufferGetAndValidate\", context=context)\nbuffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buffer_struct_declare_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "buffer_struct_declare_code = load_buffer_utility(\"BufferStructDeclare\", context=context)\nbuffer_formats_declare_code = load_buffer_utility(\"BufferFormatStructs\")\n# Utility function to set the right exception\n# The caller should immediately goto_error\nraise_indexerror_code = load_buffer_utility(\"BufferIndexError\")\nraise_indexerror_nogil = load_buffer_utility(\"BufferIndexErrorNogil\")\nraise_buffer_fallback_code = load_buffer_utility(\"BufferFallbackError\")\nacquire_utility_code = load_buffer_utility(\"BufferGetAndValidate\", context=context)\nbuffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)\n# See utility code BufferFormatFromTypeInfo",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buffer_formats_declare_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "buffer_formats_declare_code = load_buffer_utility(\"BufferFormatStructs\")\n# Utility function to set the right exception\n# The caller should immediately goto_error\nraise_indexerror_code = load_buffer_utility(\"BufferIndexError\")\nraise_indexerror_nogil = load_buffer_utility(\"BufferIndexErrorNogil\")\nraise_buffer_fallback_code = load_buffer_utility(\"BufferFallbackError\")\nacquire_utility_code = load_buffer_utility(\"BufferGetAndValidate\", context=context)\nbuffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)\n# See utility code BufferFormatFromTypeInfo\n_typeinfo_to_format_code = load_buffer_utility(\"TypeInfoToFormat\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "raise_indexerror_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "raise_indexerror_code = load_buffer_utility(\"BufferIndexError\")\nraise_indexerror_nogil = load_buffer_utility(\"BufferIndexErrorNogil\")\nraise_buffer_fallback_code = load_buffer_utility(\"BufferFallbackError\")\nacquire_utility_code = load_buffer_utility(\"BufferGetAndValidate\", context=context)\nbuffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)\n# See utility code BufferFormatFromTypeInfo\n_typeinfo_to_format_code = load_buffer_utility(\"TypeInfoToFormat\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "raise_indexerror_nogil",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "raise_indexerror_nogil = load_buffer_utility(\"BufferIndexErrorNogil\")\nraise_buffer_fallback_code = load_buffer_utility(\"BufferFallbackError\")\nacquire_utility_code = load_buffer_utility(\"BufferGetAndValidate\", context=context)\nbuffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)\n# See utility code BufferFormatFromTypeInfo\n_typeinfo_to_format_code = load_buffer_utility(\"TypeInfoToFormat\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "raise_buffer_fallback_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "raise_buffer_fallback_code = load_buffer_utility(\"BufferFallbackError\")\nacquire_utility_code = load_buffer_utility(\"BufferGetAndValidate\", context=context)\nbuffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)\n# See utility code BufferFormatFromTypeInfo\n_typeinfo_to_format_code = load_buffer_utility(\"TypeInfoToFormat\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "acquire_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "acquire_utility_code = load_buffer_utility(\"BufferGetAndValidate\", context=context)\nbuffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)\n# See utility code BufferFormatFromTypeInfo\n_typeinfo_to_format_code = load_buffer_utility(\"TypeInfoToFormat\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "buffer_format_check_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "buffer_format_check_code = load_buffer_utility(\"BufferFormatCheck\", context=context)\n# See utility code BufferFormatFromTypeInfo\n_typeinfo_to_format_code = load_buffer_utility(\"TypeInfoToFormat\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "_typeinfo_to_format_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "peekOfCode": "_typeinfo_to_format_code = load_buffer_utility(\"TypeInfoToFormat\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Buffer",
        "documentation": {}
    },
    {
        "label": "_BuiltinOverride",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "class _BuiltinOverride(object):\n    def __init__(self, py_name, args, ret_type, cname, py_equiv=\"*\",\n                 utility_code=None, sig=None, func_type=None,\n                 is_strict_signature=False, builtin_return_type=None):\n        self.py_name, self.cname, self.py_equiv = py_name, cname, py_equiv\n        self.args, self.ret_type = args, ret_type\n        self.func_type, self.sig = func_type, sig\n        self.builtin_return_type = builtin_return_type\n        self.is_strict_signature = is_strict_signature\n        self.utility_code = utility_code",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "BuiltinAttribute",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "class BuiltinAttribute(object):\n    def __init__(self, py_name, cname=None, field_type=None, field_type_name=None):\n        self.py_name = py_name\n        self.cname = cname or py_name\n        self.field_type_name = field_type_name # can't do the lookup before the type is declared!\n        self.field_type = field_type\n    def declare_in_type(self, self_type):\n        if self.field_type_name is not None:\n            # lazy type lookup\n            field_type = builtin_scope.lookup(self.field_type_name).type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "BuiltinFunction",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "class BuiltinFunction(_BuiltinOverride):\n    def declare_in_scope(self, scope):\n        func_type, sig = self.func_type, self.sig\n        if func_type is None:\n            func_type = self.build_func_type(sig)\n        scope.declare_builtin_cfunction(self.py_name, func_type, self.cname,\n                                        self.py_equiv, self.utility_code)\nclass BuiltinMethod(_BuiltinOverride):\n    def declare_in_type(self, self_type):\n        method_type, sig = self.func_type, self.sig",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "BuiltinMethod",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "class BuiltinMethod(_BuiltinOverride):\n    def declare_in_type(self, self_type):\n        method_type, sig = self.func_type, self.sig\n        if method_type is None:\n            # override 'self' type (first argument)\n            self_arg = PyrexTypes.CFuncTypeArg(\"\", self_type, None)\n            self_arg.not_none = True\n            self_arg.accept_builtin_subtypes = True\n            method_type = self.build_func_type(sig, self_arg)\n        self_type.scope.declare_builtin_cfunction(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "init_builtin_funcs",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "def init_builtin_funcs():\n    for bf in builtin_function_table:\n        bf.declare_in_scope(builtin_scope)\nbuiltin_types = {}\ndef init_builtin_types():\n    global builtin_types\n    for name, cname, methods in builtin_types_table:\n        utility = builtin_utility_code.get(name)\n        if name == 'frozenset':\n            objstruct_cname = 'PySetObject'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "init_builtin_types",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "def init_builtin_types():\n    global builtin_types\n    for name, cname, methods in builtin_types_table:\n        utility = builtin_utility_code.get(name)\n        if name == 'frozenset':\n            objstruct_cname = 'PySetObject'\n        elif name == 'bytearray':\n            objstruct_cname = 'PyByteArrayObject'\n        elif name == 'bool':\n            objstruct_cname = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "init_builtin_structs",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "def init_builtin_structs():\n    for name, cname, attribute_types in builtin_structs_table:\n        scope = StructOrUnionScope(name)\n        for attribute_name, attribute_type in attribute_types:\n            scope.declare_var(attribute_name, attribute_type, None,\n                              attribute_name, allow_pyobject=True)\n        builtin_scope.declare_struct_or_union(\n            name, \"struct\", scope, 1, None, cname = cname)\ndef init_builtins():\n    init_builtin_structs()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "init_builtins",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "def init_builtins():\n    init_builtin_structs()\n    init_builtin_types()\n    init_builtin_funcs()\n    builtin_scope.declare_var(\n        '__debug__', PyrexTypes.c_const_type(PyrexTypes.c_bint_type),\n        pos=None, cname='(!Py_OptimizeFlag)', is_cdef=True)\n    global list_type, tuple_type, dict_type, set_type, frozenset_type\n    global bytes_type, str_type, unicode_type, basestring_type, slice_type\n    global float_type, bool_type, type_type, complex_type, bytearray_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "iter_next_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "iter_next_utility_code = UtilityCode.load(\"IterNext\", \"ObjectHandling.c\")\ngetattr_utility_code = UtilityCode.load(\"GetAttr\", \"ObjectHandling.c\")\ngetattr3_utility_code = UtilityCode.load(\"GetAttr3\", \"Builtins.c\")\npyexec_utility_code = UtilityCode.load(\"PyExec\", \"Builtins.c\")\npyexec_globals_utility_code = UtilityCode.load(\"PyExecGlobals\", \"Builtins.c\")\nglobals_utility_code = UtilityCode.load(\"Globals\", \"Builtins.c\")\nbuiltin_utility_code = {\n    'StopAsyncIteration': UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"),\n}\n# mapping from builtins to their C-level equivalents",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "getattr_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "getattr_utility_code = UtilityCode.load(\"GetAttr\", \"ObjectHandling.c\")\ngetattr3_utility_code = UtilityCode.load(\"GetAttr3\", \"Builtins.c\")\npyexec_utility_code = UtilityCode.load(\"PyExec\", \"Builtins.c\")\npyexec_globals_utility_code = UtilityCode.load(\"PyExecGlobals\", \"Builtins.c\")\nglobals_utility_code = UtilityCode.load(\"Globals\", \"Builtins.c\")\nbuiltin_utility_code = {\n    'StopAsyncIteration': UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"),\n}\n# mapping from builtins to their C-level equivalents\nclass _BuiltinOverride(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "getattr3_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "getattr3_utility_code = UtilityCode.load(\"GetAttr3\", \"Builtins.c\")\npyexec_utility_code = UtilityCode.load(\"PyExec\", \"Builtins.c\")\npyexec_globals_utility_code = UtilityCode.load(\"PyExecGlobals\", \"Builtins.c\")\nglobals_utility_code = UtilityCode.load(\"Globals\", \"Builtins.c\")\nbuiltin_utility_code = {\n    'StopAsyncIteration': UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"),\n}\n# mapping from builtins to their C-level equivalents\nclass _BuiltinOverride(object):\n    def __init__(self, py_name, args, ret_type, cname, py_equiv=\"*\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "pyexec_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "pyexec_utility_code = UtilityCode.load(\"PyExec\", \"Builtins.c\")\npyexec_globals_utility_code = UtilityCode.load(\"PyExecGlobals\", \"Builtins.c\")\nglobals_utility_code = UtilityCode.load(\"Globals\", \"Builtins.c\")\nbuiltin_utility_code = {\n    'StopAsyncIteration': UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"),\n}\n# mapping from builtins to their C-level equivalents\nclass _BuiltinOverride(object):\n    def __init__(self, py_name, args, ret_type, cname, py_equiv=\"*\",\n                 utility_code=None, sig=None, func_type=None,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "pyexec_globals_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "pyexec_globals_utility_code = UtilityCode.load(\"PyExecGlobals\", \"Builtins.c\")\nglobals_utility_code = UtilityCode.load(\"Globals\", \"Builtins.c\")\nbuiltin_utility_code = {\n    'StopAsyncIteration': UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"),\n}\n# mapping from builtins to their C-level equivalents\nclass _BuiltinOverride(object):\n    def __init__(self, py_name, args, ret_type, cname, py_equiv=\"*\",\n                 utility_code=None, sig=None, func_type=None,\n                 is_strict_signature=False, builtin_return_type=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "globals_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "globals_utility_code = UtilityCode.load(\"Globals\", \"Builtins.c\")\nbuiltin_utility_code = {\n    'StopAsyncIteration': UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"),\n}\n# mapping from builtins to their C-level equivalents\nclass _BuiltinOverride(object):\n    def __init__(self, py_name, args, ret_type, cname, py_equiv=\"*\",\n                 utility_code=None, sig=None, func_type=None,\n                 is_strict_signature=False, builtin_return_type=None):\n        self.py_name, self.cname, self.py_equiv = py_name, cname, py_equiv",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "builtin_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "builtin_utility_code = {\n    'StopAsyncIteration': UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"),\n}\n# mapping from builtins to their C-level equivalents\nclass _BuiltinOverride(object):\n    def __init__(self, py_name, args, ret_type, cname, py_equiv=\"*\",\n                 utility_code=None, sig=None, func_type=None,\n                 is_strict_signature=False, builtin_return_type=None):\n        self.py_name, self.cname, self.py_equiv = py_name, cname, py_equiv\n        self.args, self.ret_type = args, ret_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "builtin_function_table",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "builtin_function_table = [\n    # name,        args,   return,  C API func,           py equiv = \"*\"\n    BuiltinFunction('abs',        \"d\",    \"d\",     \"fabs\",\n                    is_strict_signature = True),\n    BuiltinFunction('abs',        \"f\",    \"f\",     \"fabsf\",\n                    is_strict_signature = True),\n    BuiltinFunction('abs',        \"i\",    \"i\",     \"abs\",\n                    is_strict_signature = True),\n    BuiltinFunction('abs',        \"l\",    \"l\",     \"labs\",\n                    is_strict_signature = True),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "builtin_types_table",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "builtin_types_table = [\n    (\"type\",    \"PyType_Type\",     []),\n# This conflicts with the C++ bool type, and unfortunately\n# C++ is too liberal about PyObject* <-> bool conversions,\n# resulting in unintuitive runtime behavior and segfaults.\n#    (\"bool\",    \"PyBool_Type\",     []),\n    (\"int\",     \"PyInt_Type\",      []),\n    (\"long\",    \"PyLong_Type\",     []),\n    (\"float\",   \"PyFloat_Type\",    []),\n    (\"complex\", \"PyComplex_Type\",  [BuiltinAttribute('cval', field_type_name = 'Py_complex'),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "types_that_construct_their_instance",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "types_that_construct_their_instance = set([\n    # some builtin types do not always return an instance of\n    # themselves - these do:\n    'type', 'bool', 'long', 'float', 'complex',\n    'bytes', 'unicode', 'bytearray',\n    'tuple', 'list', 'dict', 'set', 'frozenset'\n    # 'str',             # only in Py3.x\n    # 'file',            # only in Py2.x\n])\nbuiltin_structs_table = [",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "builtin_structs_table",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "builtin_structs_table = [\n    ('Py_buffer', 'Py_buffer',\n     [(\"buf\",        PyrexTypes.c_void_ptr_type),\n      (\"obj\",        PyrexTypes.py_object_type),\n      (\"len\",        PyrexTypes.c_py_ssize_t_type),\n      (\"itemsize\",   PyrexTypes.c_py_ssize_t_type),\n      (\"readonly\",   PyrexTypes.c_bint_type),\n      (\"ndim\",       PyrexTypes.c_int_type),\n      (\"format\",     PyrexTypes.c_char_ptr_type),\n      (\"shape\",      PyrexTypes.c_py_ssize_t_ptr_type),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "builtin_scope",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "builtin_scope = BuiltinScope()\ndef init_builtin_funcs():\n    for bf in builtin_function_table:\n        bf.declare_in_scope(builtin_scope)\nbuiltin_types = {}\ndef init_builtin_types():\n    global builtin_types\n    for name, cname, methods in builtin_types_table:\n        utility = builtin_utility_code.get(name)\n        if name == 'frozenset':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "builtin_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "peekOfCode": "builtin_types = {}\ndef init_builtin_types():\n    global builtin_types\n    for name, cname, methods in builtin_types_table:\n        utility = builtin_utility_code.get(name)\n        if name == 'frozenset':\n            objstruct_cname = 'PySetObject'\n        elif name == 'bytearray':\n            objstruct_cname = 'PyByteArrayObject'\n        elif name == 'bool':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Builtin",
        "documentation": {}
    },
    {
        "label": "bad_usage",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CmdLine",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CmdLine",
        "peekOfCode": "def bad_usage():\n    sys.stderr.write(usage)\n    sys.exit(1)\ndef parse_command_line(args):\n    from .Main import CompilationOptions, default_options\n    pending_arg = []\n    def pop_arg():\n        if not args or pending_arg:\n            bad_usage()\n        if '=' in args[0] and args[0].startswith('--'):  # allow \"--long-option=xyz\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CmdLine",
        "documentation": {}
    },
    {
        "label": "parse_command_line",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CmdLine",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CmdLine",
        "peekOfCode": "def parse_command_line(args):\n    from .Main import CompilationOptions, default_options\n    pending_arg = []\n    def pop_arg():\n        if not args or pending_arg:\n            bad_usage()\n        if '=' in args[0] and args[0].startswith('--'):  # allow \"--long-option=xyz\"\n            name, value = args.pop(0).split('=', 1)\n            pending_arg.append(value)\n            return name",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CmdLine",
        "documentation": {}
    },
    {
        "label": "usage",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CmdLine",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CmdLine",
        "peekOfCode": "usage = \"\"\"\\\nCython (http://cython.org) is a compiler for code written in the\nCython language.  Cython is based on Pyrex by Greg Ewing.\nUsage: cython [options] sourcefile.{pyx,py} ...\nOptions:\n  -V, --version                  Display version number of cython compiler\n  -l, --create-listing           Write error messages to a listing file\n  -I, --include-dir <directory>  Search for include files in named directory\n                                 (multiple include directories are allowed).\n  -o, --output-file <filename>   Specify name of generated C file",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CmdLine",
        "documentation": {}
    },
    {
        "label": "IncludeCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class IncludeCode(object):\n    \"\"\"\n    An include file and/or verbatim C code to be included in the\n    generated sources.\n    \"\"\"\n    # attributes:\n    #\n    #  pieces    {order: unicode}: pieces of C code to be generated.\n    #            For the included file, the key \"order\" is zero.\n    #            For verbatim include code, the \"order\" is the \"order\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "UtilityCodeBase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class UtilityCodeBase(object):\n    \"\"\"\n    Support for loading utility code from a file.\n    Code sections in the file can be specified as follows:\n        ##### MyUtility.proto #####\n        [proto declarations]\n        ##### MyUtility.init #####\n        [code run at module initialization]\n        ##### MyUtility #####\n        #@requires: MyOtherUtility",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "UtilityCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class UtilityCode(UtilityCodeBase):\n    \"\"\"\n    Stores utility code to add during code generation.\n    See GlobalState.put_utility_code.\n    hashes/equals by instance\n    proto           C prototypes\n    impl            implementation code\n    init            code to call on module initialization\n    requires        utility code dependencies\n    proto_block     the place in the resulting file where the prototype should",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "TempitaUtilityCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class TempitaUtilityCode(UtilityCode):\n    def __init__(self, name=None, proto=None, impl=None, init=None, file=None, context=None, **kwargs):\n        if context is None:\n            context = {}\n        proto = sub_tempita(proto, context, file, name)\n        impl = sub_tempita(impl, context, file, name)\n        init = sub_tempita(init, context, file, name)\n        super(TempitaUtilityCode, self).__init__(\n            proto, impl, init=init, name=name, file=file, **kwargs)\n    @classmethod",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "LazyUtilityCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class LazyUtilityCode(UtilityCodeBase):\n    \"\"\"\n    Utility code that calls a callback with the root code writer when\n    available. Useful when you only have 'env' but not 'code'.\n    \"\"\"\n    __name__ = '<lazy>'\n    requires = None\n    def __init__(self, callback):\n        self.callback = callback\n    def put_code(self, globalstate):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "FunctionState",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class FunctionState(object):\n    # return_label     string          function return point label\n    # error_label      string          error catch point label\n    # continue_label   string          loop continue point label\n    # break_label      string          loop break point label\n    # return_from_error_cleanup_label string\n    # label_counter    integer         counter for naming labels\n    # in_try_finally   boolean         inside try of try...finally\n    # exc_vars         (string * 3)    exception variables for reraise, or None\n    # can_trace        boolean         line tracing is supported in the current context",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "NumConst",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class NumConst(object):\n    \"\"\"Global info about a Python number constant held by GlobalState.\n    cname       string\n    value       string\n    py_type     string     int, long, float\n    value_code  string     evaluation code if different from value\n    \"\"\"\n    def __init__(self, cname, value, py_type, value_code=None):\n        self.cname = cname\n        self.value = value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "PyObjectConst",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class PyObjectConst(object):\n    \"\"\"Global info about a generic constant held by GlobalState.\n    \"\"\"\n    # cname       string\n    # type        PyrexType\n    def __init__(self, cname, type):\n        self.cname = cname\n        self.type = type\ncython.declare(possible_unicode_identifier=object, possible_bytes_identifier=object,\n               replace_identifier=object, find_alphanums=object)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "StringConst",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class StringConst(object):\n    \"\"\"Global info about a C string constant held by GlobalState.\n    \"\"\"\n    # cname            string\n    # text             EncodedString or BytesLiteral\n    # py_strings       {(identifier, encoding) : PyStringConst}\n    def __init__(self, cname, text, byte_string):\n        self.cname = cname\n        self.text = text\n        self.escaped_value = StringEncoding.escape_byte_string(byte_string)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "PyStringConst",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class PyStringConst(object):\n    \"\"\"Global info about a Python string constant held by GlobalState.\n    \"\"\"\n    # cname       string\n    # py3str_cstring string\n    # encoding    string\n    # intern      boolean\n    # is_unicode  boolean\n    # is_str      boolean\n    def __init__(self, cname, encoding, is_unicode, is_str=False,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "GlobalState",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class GlobalState(object):\n    # filename_table   {string : int}  for finding filename table indexes\n    # filename_list    [string]        filenames in filename table order\n    # input_file_contents dict         contents (=list of lines) of any file that was used as input\n    #                                  to create this output C code.  This is\n    #                                  used to annotate the comments.\n    #\n    # utility_codes   set                IDs of used utility code (to avoid reinsertion)\n    #\n    # declared_cnames  {string:Entry}  used in a transition phase to merge pxd-declared",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "CCodeConfig",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class CCodeConfig(object):\n    # emit_linenums       boolean         write #line pragmas?\n    # emit_code_comments  boolean         copy the original code into C comments?\n    # c_line_in_traceback boolean         append the c file and line number to the traceback for exceptions?\n    def __init__(self, emit_linenums=True, emit_code_comments=True, c_line_in_traceback=True):\n        self.emit_code_comments = emit_code_comments\n        self.emit_linenums = emit_linenums\n        self.c_line_in_traceback = c_line_in_traceback\nclass CCodeWriter(object):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "CCodeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class CCodeWriter(object):\n    \"\"\"\n    Utility class to output C code.\n    When creating an insertion point one must care about the state that is\n    kept:\n    - formatting state (level, bol) is cloned and used in insertion points\n      as well\n    - labels, temps, exc_vars: One must construct a scope in which these can\n      exist by calling enter_cfunc_scope/exit_cfunc_scope (these are for\n      sanity checking and forward compatibility). Created insertion points",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "PyrexCodeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class PyrexCodeWriter(object):\n    # f                file      output file\n    # level            int       indentation level\n    def __init__(self, outfile_name):\n        self.f = Utils.open_new_file(outfile_name)\n        self.level = 0\n    def putln(self, code):\n        self.f.write(\"%s%s\\n\" % (\" \" * self.level, code))\n    def indent(self):\n        self.level += 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "PyxCodeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class PyxCodeWriter(object):\n    \"\"\"\n    Can be used for writing out some Cython code. To use the indenter\n    functionality, the Cython.Compiler.Importer module will have to be used\n    to load the code to support python 2.4\n    \"\"\"\n    def __init__(self, buffer=None, indent_level=0, context=None, encoding='ascii'):\n        self.buffer = buffer or StringIOTree()\n        self.level = indent_level\n        self.context = context",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "ClosureTempAllocator",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "class ClosureTempAllocator(object):\n    def __init__(self, klass):\n        self.klass = klass\n        self.temps_allocated = {}\n        self.temps_free = {}\n        self.temps_count = 0\n    def reset(self):\n        for type, cnames in self.temps_allocated.items():\n            self.temps_free[type] = list(cnames)\n    def allocate_temp(self, type):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "get_utility_dir",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "def get_utility_dir():\n    # make this a function and not global variables:\n    # http://trac.cython.org/cython_trac/ticket/475\n    Cython_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    return os.path.join(Cython_dir, \"Utility\")\nclass UtilityCodeBase(object):\n    \"\"\"\n    Support for loading utility code from a file.\n    Code sections in the file can be specified as follows:\n        ##### MyUtility.proto #####",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "sub_tempita",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "def sub_tempita(s, context, file=None, name=None):\n    \"Run tempita on string s with given context.\"\n    if not s:\n        return None\n    if file:\n        context['__name'] = \"%s:%s\" % (file, name)\n    elif name:\n        context['__name'] = name\n    from ..Tempita import sub\n    return sub(s, **context)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "funccontext_property",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "def funccontext_property(func):\n    name = func.__name__\n    attribute_of = operator.attrgetter(name)\n    def get(self):\n        return attribute_of(self.funcstate)\n    def set(self, value):\n        setattr(self.funcstate, name, value)\n    return property(get, set)\nclass CCodeConfig(object):\n    # emit_linenums       boolean         write #line pragmas?",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "KEYWORDS_MUST_BE_BYTES",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "KEYWORDS_MUST_BE_BYTES = sys.version_info < (2, 7)\nnon_portable_builtins_map = {\n    # builtins that have different names in different Python versions\n    'bytes'         : ('PY_MAJOR_VERSION < 3',  'str'),\n    'unicode'       : ('PY_MAJOR_VERSION >= 3', 'str'),\n    'basestring'    : ('PY_MAJOR_VERSION >= 3', 'str'),\n    'xrange'        : ('PY_MAJOR_VERSION >= 3', 'range'),\n    'raw_input'     : ('PY_MAJOR_VERSION >= 3', 'input'),\n}\nctypedef_builtins_map = {",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "non_portable_builtins_map",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "non_portable_builtins_map = {\n    # builtins that have different names in different Python versions\n    'bytes'         : ('PY_MAJOR_VERSION < 3',  'str'),\n    'unicode'       : ('PY_MAJOR_VERSION >= 3', 'str'),\n    'basestring'    : ('PY_MAJOR_VERSION >= 3', 'str'),\n    'xrange'        : ('PY_MAJOR_VERSION >= 3', 'range'),\n    'raw_input'     : ('PY_MAJOR_VERSION >= 3', 'input'),\n}\nctypedef_builtins_map = {\n    # types of builtins in \"ctypedef class\" statements which we don't",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "ctypedef_builtins_map",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "ctypedef_builtins_map = {\n    # types of builtins in \"ctypedef class\" statements which we don't\n    # import either because the names conflict with C types or because\n    # the type simply is not exposed.\n    'py_int'             : '&PyInt_Type',\n    'py_long'            : '&PyLong_Type',\n    'py_float'           : '&PyFloat_Type',\n    'wrapper_descriptor' : '&PyWrapperDescr_Type',\n}\nbasicsize_builtins_map = {",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "basicsize_builtins_map",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "basicsize_builtins_map = {\n    # builtins whose type has a different tp_basicsize than sizeof(...)\n    'PyTypeObject': 'PyHeapTypeObject',\n}\nuncachable_builtins = [\n    # Global/builtin names that cannot be cached because they may or may not\n    # be available at import time, for various reasons:\n    ## - Py3.7+\n    'breakpoint',  # might deserve an implementation in Cython\n    ## - Py3.4+",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "uncachable_builtins",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "uncachable_builtins = [\n    # Global/builtin names that cannot be cached because they may or may not\n    # be available at import time, for various reasons:\n    ## - Py3.7+\n    'breakpoint',  # might deserve an implementation in Cython\n    ## - Py3.4+\n    '__loader__',\n    '__spec__',\n    ## - Py3+\n    'BlockingIOError',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "special_py_methods",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "special_py_methods = set([\n    '__cinit__', '__dealloc__', '__richcmp__', '__next__',\n    '__await__', '__aiter__', '__anext__',\n    '__getreadbuffer__', '__getwritebuffer__', '__getsegcount__',\n    '__getcharbuffer__', '__getbuffer__', '__releasebuffer__'\n])\nmodifier_output_mapper = {\n    'inline': 'CYTHON_INLINE'\n}.get\nclass IncludeCode(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "modifier_output_mapper",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "modifier_output_mapper = {\n    'inline': 'CYTHON_INLINE'\n}.get\nclass IncludeCode(object):\n    \"\"\"\n    An include file and/or verbatim C code to be included in the\n    generated sources.\n    \"\"\"\n    # attributes:\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "possible_unicode_identifier",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "possible_unicode_identifier = re.compile(br\"(?![0-9])\\w+$\".decode('ascii'), re.U).match\npossible_bytes_identifier = re.compile(r\"(?![0-9])\\w+$\".encode('ASCII')).match\nreplace_identifier = re.compile(r'[^a-zA-Z0-9_]+').sub\nfind_alphanums = re.compile('([a-zA-Z0-9]+)').findall\nclass StringConst(object):\n    \"\"\"Global info about a C string constant held by GlobalState.\n    \"\"\"\n    # cname            string\n    # text             EncodedString or BytesLiteral\n    # py_strings       {(identifier, encoding) : PyStringConst}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "possible_bytes_identifier",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "possible_bytes_identifier = re.compile(r\"(?![0-9])\\w+$\".encode('ASCII')).match\nreplace_identifier = re.compile(r'[^a-zA-Z0-9_]+').sub\nfind_alphanums = re.compile('([a-zA-Z0-9]+)').findall\nclass StringConst(object):\n    \"\"\"Global info about a C string constant held by GlobalState.\n    \"\"\"\n    # cname            string\n    # text             EncodedString or BytesLiteral\n    # py_strings       {(identifier, encoding) : PyStringConst}\n    def __init__(self, cname, text, byte_string):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "replace_identifier",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "replace_identifier = re.compile(r'[^a-zA-Z0-9_]+').sub\nfind_alphanums = re.compile('([a-zA-Z0-9]+)').findall\nclass StringConst(object):\n    \"\"\"Global info about a C string constant held by GlobalState.\n    \"\"\"\n    # cname            string\n    # text             EncodedString or BytesLiteral\n    # py_strings       {(identifier, encoding) : PyStringConst}\n    def __init__(self, cname, text, byte_string):\n        self.cname = cname",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "find_alphanums",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "peekOfCode": "find_alphanums = re.compile('([a-zA-Z0-9]+)').findall\nclass StringConst(object):\n    \"\"\"Global info about a C string constant held by GlobalState.\n    \"\"\"\n    # cname            string\n    # text             EncodedString or BytesLiteral\n    # py_strings       {(identifier, encoding) : PyStringConst}\n    def __init__(self, cname, text, byte_string):\n        self.cname = cname\n        self.text = text",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Code",
        "documentation": {}
    },
    {
        "label": "ExtractPxdCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CodeGeneration",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CodeGeneration",
        "peekOfCode": "class ExtractPxdCode(VisitorTransform):\n    \"\"\"\n    Finds nodes in a pxd file that should generate code, and\n    returns them in a StatListNode.\n    The result is a tuple (StatListNode, ModuleScope), i.e.\n    everything that is needed from the pxd after it is processed.\n    A purer approach would be to separately compile the pxd code,\n    but the result would have to be slightly more sophisticated\n    than pure strings (functions + wanted interned strings +\n    wanted utility code + wanted cached objects) so for now this",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CodeGeneration",
        "documentation": {}
    },
    {
        "label": "CythonScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "class CythonScope(ModuleScope):\n    is_cython_builtin = 1\n    _cythonscope_initialized = False\n    def __init__(self, context):\n        ModuleScope.__init__(self, u'cython', None, None)\n        self.pxd_file_loaded = True\n        self.populate_cython_scope()\n        # The Main.Context object\n        self.context = context\n        for fused_type in (cy_integral_type, cy_floating_type, cy_numeric_type):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "create_cython_scope",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "def create_cython_scope(context):\n    # One could in fact probably make it a singleton,\n    # but not sure yet whether any code mutates it (which would kill reusing\n    # it across different contexts)\n    return CythonScope(context)\n# Load test utilities for the cython scope\ndef load_testscope_utility(cy_util_name, **kwargs):\n    return CythonUtilityCode.load(cy_util_name, \"TestCythonScope.pyx\", **kwargs)\nundecorated_methods_protos = UtilityCode(proto=u\"\"\"\n    /* These methods are undecorated and have therefore no prototype */",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "load_testscope_utility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "def load_testscope_utility(cy_util_name, **kwargs):\n    return CythonUtilityCode.load(cy_util_name, \"TestCythonScope.pyx\", **kwargs)\nundecorated_methods_protos = UtilityCode(proto=u\"\"\"\n    /* These methods are undecorated and have therefore no prototype */\n    static PyObject *__pyx_TestClass_cdef_method(\n            struct __pyx_TestClass_obj *self, int value);\n    static PyObject *__pyx_TestClass_cpdef_method(\n            struct __pyx_TestClass_obj *self, int value, int skip_dispatch);\n    static PyObject *__pyx_TestClass_def_method(\n            PyObject *self, PyObject *value);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "undecorated_methods_protos",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "undecorated_methods_protos = UtilityCode(proto=u\"\"\"\n    /* These methods are undecorated and have therefore no prototype */\n    static PyObject *__pyx_TestClass_cdef_method(\n            struct __pyx_TestClass_obj *self, int value);\n    static PyObject *__pyx_TestClass_cpdef_method(\n            struct __pyx_TestClass_obj *self, int value, int skip_dispatch);\n    static PyObject *__pyx_TestClass_def_method(\n            PyObject *self, PyObject *value);\n\"\"\")\ncython_testscope_utility_code = load_testscope_utility(\"TestScope\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "cython_testscope_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "cython_testscope_utility_code = load_testscope_utility(\"TestScope\")\ntest_cython_utility_dep = load_testscope_utility(\"TestDep\")\ncython_test_extclass_utility_code = \\\n    load_testscope_utility(\"TestClass\", name=\"TestClass\",\n                           requires=[undecorated_methods_protos,\n                                     test_cython_utility_dep])\ncythonview_testscope_utility_code = load_testscope_utility(\"View.TestScope\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "test_cython_utility_dep",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "test_cython_utility_dep = load_testscope_utility(\"TestDep\")\ncython_test_extclass_utility_code = \\\n    load_testscope_utility(\"TestClass\", name=\"TestClass\",\n                           requires=[undecorated_methods_protos,\n                                     test_cython_utility_dep])\ncythonview_testscope_utility_code = load_testscope_utility(\"View.TestScope\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "cython_test_extclass_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "cython_test_extclass_utility_code = \\\n    load_testscope_utility(\"TestClass\", name=\"TestClass\",\n                           requires=[undecorated_methods_protos,\n                                     test_cython_utility_dep])\ncythonview_testscope_utility_code = load_testscope_utility(\"View.TestScope\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "cythonview_testscope_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "peekOfCode": "cythonview_testscope_utility_code = load_testscope_utility(\"View.TestScope\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.CythonScope",
        "documentation": {}
    },
    {
        "label": "debug_disposal_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_disposal_code = 0\ndebug_temp_alloc = 0\ndebug_coercion = 0\n# Write comments into the C code that show where temporary variables\n# are allocated and released.\ndebug_temp_code_comments = 0\n# Write a call trace of the code generation phase into the C code.\ndebug_trace_code_generation = 0\n# Do not replace exceptions with user-friendly error messages.\ndebug_no_exception_intercept = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "debug_temp_alloc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_temp_alloc = 0\ndebug_coercion = 0\n# Write comments into the C code that show where temporary variables\n# are allocated and released.\ndebug_temp_code_comments = 0\n# Write a call trace of the code generation phase into the C code.\ndebug_trace_code_generation = 0\n# Do not replace exceptions with user-friendly error messages.\ndebug_no_exception_intercept = 0\n# Print a message each time a new stage in the pipeline is entered.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "debug_coercion",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_coercion = 0\n# Write comments into the C code that show where temporary variables\n# are allocated and released.\ndebug_temp_code_comments = 0\n# Write a call trace of the code generation phase into the C code.\ndebug_trace_code_generation = 0\n# Do not replace exceptions with user-friendly error messages.\ndebug_no_exception_intercept = 0\n# Print a message each time a new stage in the pipeline is entered.\ndebug_verbose_pipeline = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "debug_temp_code_comments",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_temp_code_comments = 0\n# Write a call trace of the code generation phase into the C code.\ndebug_trace_code_generation = 0\n# Do not replace exceptions with user-friendly error messages.\ndebug_no_exception_intercept = 0\n# Print a message each time a new stage in the pipeline is entered.\ndebug_verbose_pipeline = 0\n# Raise an exception when an error is encountered.\ndebug_exception_on_error = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "debug_trace_code_generation",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_trace_code_generation = 0\n# Do not replace exceptions with user-friendly error messages.\ndebug_no_exception_intercept = 0\n# Print a message each time a new stage in the pipeline is entered.\ndebug_verbose_pipeline = 0\n# Raise an exception when an error is encountered.\ndebug_exception_on_error = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "debug_no_exception_intercept",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_no_exception_intercept = 0\n# Print a message each time a new stage in the pipeline is entered.\ndebug_verbose_pipeline = 0\n# Raise an exception when an error is encountered.\ndebug_exception_on_error = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "debug_verbose_pipeline",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_verbose_pipeline = 0\n# Raise an exception when an error is encountered.\ndebug_exception_on_error = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "debug_exception_on_error",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "peekOfCode": "debug_exception_on_error = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.DebugFlags",
        "documentation": {}
    },
    {
        "label": "PyrexError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "class PyrexError(Exception):\n    pass\nclass PyrexWarning(Exception):\n    pass\ndef context(position):\n    source = position[0]\n    assert not (isinstance(source, any_string_type)), (\n        \"Please replace filename strings with Scanning.FileSourceDescriptor instances %r\" % source)\n    try:\n        F = source.get_lines()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "PyrexWarning",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "class PyrexWarning(Exception):\n    pass\ndef context(position):\n    source = position[0]\n    assert not (isinstance(source, any_string_type)), (\n        \"Please replace filename strings with Scanning.FileSourceDescriptor instances %r\" % source)\n    try:\n        F = source.get_lines()\n    except UnicodeDecodeError:\n        # file has an encoding problem",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "CompileError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "class CompileError(PyrexError):\n    def __init__(self, position = None, message = u\"\"):\n        self.position = position\n        self.message_only = message\n        self.formatted_message = format_error(message, position)\n        self.reported = False\n    # Deprecated and withdrawn in 2.6:\n    #   self.message = message\n        Exception.__init__(self, self.formatted_message)\n        # Python Exception subclass pickling is broken,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "CompileWarning",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "class CompileWarning(PyrexWarning):\n    def __init__(self, position = None, message = \"\"):\n        self.position = position\n    # Deprecated and withdrawn in 2.6:\n    #   self.message = message\n        Exception.__init__(self, format_position(position) + message)\nclass InternalError(Exception):\n    # If this is ever raised, there is a bug in the compiler.\n    def __init__(self, message):\n        self.message_only = message",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "InternalError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "class InternalError(Exception):\n    # If this is ever raised, there is a bug in the compiler.\n    def __init__(self, message):\n        self.message_only = message\n        Exception.__init__(self, u\"Internal compiler error: %s\"\n            % message)\nclass AbortError(Exception):\n    # Throw this to stop the compilation immediately.\n    def __init__(self, message):\n        self.message_only = message",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "AbortError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "class AbortError(Exception):\n    # Throw this to stop the compilation immediately.\n    def __init__(self, message):\n        self.message_only = message\n        Exception.__init__(self, u\"Abort error: %s\" % message)\nclass CompilerCrash(CompileError):\n    # raised when an unexpected exception occurs in a transform\n    def __init__(self, pos, context, message, cause, stacktrace=None):\n        if message:\n            message = u'\\n' + message",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "CompilerCrash",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "class CompilerCrash(CompileError):\n    # raised when an unexpected exception occurs in a transform\n    def __init__(self, pos, context, message, cause, stacktrace=None):\n        if message:\n            message = u'\\n' + message\n        else:\n            message = u'\\n'\n        self.message_only = message\n        if context:\n            message = u\"Compiler crash in %s%s\" % (context, message)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "NoElementTreeInstalledException",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "class NoElementTreeInstalledException(PyrexError):\n    \"\"\"raised when the user enabled options.gdb_debug but no ElementTree\n    implementation was found\n    \"\"\"\nlisting_file = None\nnum_errors = 0\necho_file = None\ndef open_listing_file(path, echo_to_stderr = 1):\n    # Begin a new error listing. If path is None, no file\n    # is opened, the error counter is just reset.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "context",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "def context(position):\n    source = position[0]\n    assert not (isinstance(source, any_string_type)), (\n        \"Please replace filename strings with Scanning.FileSourceDescriptor instances %r\" % source)\n    try:\n        F = source.get_lines()\n    except UnicodeDecodeError:\n        # file has an encoding problem\n        s = u\"[unprintable code]\\n\"\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "format_position",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "def format_position(position):\n    if position:\n        return u\"%s:%d:%d: \" % (position[0].get_error_description(),\n                                position[1], position[2])\n    return u''\ndef format_error(message, position):\n    if position:\n        pos_str = format_position(position)\n        cont = context(position)\n        message = u'\\nError compiling Cython file:\\n%s\\n%s%s' % (cont, pos_str, message or u'')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "format_error",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "def format_error(message, position):\n    if position:\n        pos_str = format_position(position)\n        cont = context(position)\n        message = u'\\nError compiling Cython file:\\n%s\\n%s%s' % (cont, pos_str, message or u'')\n    return message\nclass CompileError(PyrexError):\n    def __init__(self, position = None, message = u\"\"):\n        self.position = position\n        self.message_only = message",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "open_listing_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "def open_listing_file(path, echo_to_stderr = 1):\n    # Begin a new error listing. If path is None, no file\n    # is opened, the error counter is just reset.\n    global listing_file, num_errors, echo_file\n    if path is not None:\n        listing_file = open_new_file(path)\n    else:\n        listing_file = None\n    if echo_to_stderr:\n        echo_file = sys.stderr",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "close_listing_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "def close_listing_file():\n    global listing_file\n    if listing_file:\n        listing_file.close()\n        listing_file = None\ndef report_error(err, use_stack=True):\n    if error_stack and use_stack:\n        error_stack[-1].append(err)\n    else:\n        global num_errors",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "report_error",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "def report_error(err, use_stack=True):\n    if error_stack and use_stack:\n        error_stack[-1].append(err)\n    else:\n        global num_errors\n        # See Main.py for why dual reporting occurs. Quick fix for now.\n        if err.reported: return\n        err.reported = True\n        try: line = u\"%s\\n\" % err\n        except UnicodeEncodeError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "def error(position, message):\n    #print(\"Errors.error:\", repr(position), repr(message)) ###\n    if position is None:\n        raise InternalError(message)\n    err = CompileError(position, message)\n    if DebugFlags.debug_exception_on_error: raise Exception(err) # debug\n    report_error(err)\n    return err\nLEVEL = 1 # warn about all errors level 1 or higher\ndef message(position, message, level=1):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "def message(position, message, level=1):\n    if level < LEVEL:\n        return\n    warn = CompileWarning(position, message)\n    line = \"note: %s\\n\" % warn\n    if listing_file:\n        listing_file.write(line)\n    if echo_file:\n        echo_file.write(line)\n    return warn",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "warning",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "def warning(position, message, level=0):\n    if level < LEVEL:\n        return\n    if Options.warning_errors and position:\n        return error(position, message)\n    warn = CompileWarning(position, message)\n    line = \"warning: %s\\n\" % warn\n    if listing_file:\n        listing_file.write(line)\n    if echo_file:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "warn_once",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "def warn_once(position, message, level=0):\n    if level < LEVEL or message in _warn_once_seen:\n        return\n    warn = CompileWarning(position, message)\n    line = \"warning: %s\\n\" % warn\n    if listing_file:\n        listing_file.write(line)\n    if echo_file:\n        echo_file.write(line)\n    _warn_once_seen[message] = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "hold_errors",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "def hold_errors():\n    error_stack.append([])\ndef release_errors(ignore=False):\n    held_errors = error_stack.pop()\n    if not ignore:\n        for err in held_errors:\n            report_error(err)\ndef held_errors():\n    return error_stack[-1]\n# same as context manager:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "release_errors",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "def release_errors(ignore=False):\n    held_errors = error_stack.pop()\n    if not ignore:\n        for err in held_errors:\n            report_error(err)\ndef held_errors():\n    return error_stack[-1]\n# same as context manager:\n@contextmanager\ndef local_errors(ignore=False):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "held_errors",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "def held_errors():\n    return error_stack[-1]\n# same as context manager:\n@contextmanager\ndef local_errors(ignore=False):\n    errors = []\n    error_stack.append(errors)\n    try:\n        yield errors\n    finally:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "local_errors",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "def local_errors(ignore=False):\n    errors = []\n    error_stack.append(errors)\n    try:\n        yield errors\n    finally:\n        release_errors(ignore=ignore)\n# this module needs a redesign to support parallel cythonisation, but\n# for now, the following works at least in sequential compiler runs\ndef reset():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "reset",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "def reset():\n    _warn_once_seen.clear()\n    del error_stack[:]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "listing_file",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "listing_file = None\nnum_errors = 0\necho_file = None\ndef open_listing_file(path, echo_to_stderr = 1):\n    # Begin a new error listing. If path is None, no file\n    # is opened, the error counter is just reset.\n    global listing_file, num_errors, echo_file\n    if path is not None:\n        listing_file = open_new_file(path)\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "num_errors",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "num_errors = 0\necho_file = None\ndef open_listing_file(path, echo_to_stderr = 1):\n    # Begin a new error listing. If path is None, no file\n    # is opened, the error counter is just reset.\n    global listing_file, num_errors, echo_file\n    if path is not None:\n        listing_file = open_new_file(path)\n    else:\n        listing_file = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "echo_file",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "echo_file = None\ndef open_listing_file(path, echo_to_stderr = 1):\n    # Begin a new error listing. If path is None, no file\n    # is opened, the error counter is just reset.\n    global listing_file, num_errors, echo_file\n    if path is not None:\n        listing_file = open_new_file(path)\n    else:\n        listing_file = None\n    if echo_to_stderr:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "LEVEL",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "LEVEL = 1 # warn about all errors level 1 or higher\ndef message(position, message, level=1):\n    if level < LEVEL:\n        return\n    warn = CompileWarning(position, message)\n    line = \"note: %s\\n\" % warn\n    if listing_file:\n        listing_file.write(line)\n    if echo_file:\n        echo_file.write(line)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "_warn_once_seen",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "_warn_once_seen = {}\ndef warn_once(position, message, level=0):\n    if level < LEVEL or message in _warn_once_seen:\n        return\n    warn = CompileWarning(position, message)\n    line = \"warning: %s\\n\" % warn\n    if listing_file:\n        listing_file.write(line)\n    if echo_file:\n        echo_file.write(line)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "error_stack",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "peekOfCode": "error_stack = []\ndef hold_errors():\n    error_stack.append([])\ndef release_errors(ignore=False):\n    held_errors = error_stack.pop()\n    if not ignore:\n        for err in held_errors:\n            report_error(err)\ndef held_errors():\n    return error_stack[-1]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Errors",
        "documentation": {}
    },
    {
        "label": "NotConstant",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NotConstant(object):\n    _obj = None\n    def __new__(cls):\n        if NotConstant._obj is None:\n            NotConstant._obj = super(NotConstant, cls).__new__(cls)\n        return NotConstant._obj\n    def __repr__(self):\n        return \"<NOT CONSTANT>\"\nnot_a_constant = NotConstant()\nconstant_value_not_set = object()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ExprNode(Node):\n    #  subexprs     [string]     Class var holding names of subexpr node attrs\n    #  type         PyrexType    Type of the result\n    #  result_code  string       Code fragment\n    #  result_ctype string       C type of result_code if different from type\n    #  is_temp      boolean      Result is in a temporary variable\n    #  is_sequence_constructor\n    #               boolean      Is a list or tuple constructor expression\n    #  is_starred   boolean      Is a starred expression (e.g. '*a')\n    #  saved_subexpr_nodes",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AtomicExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AtomicExprNode(ExprNode):\n    #  Abstract base class for expression nodes which have\n    #  no sub-expressions.\n    subexprs = []\n    # Override to optimize -- we know we have no children\n    def generate_subexpr_evaluation_code(self, code):\n        pass\n    def generate_subexpr_disposal_code(self, code):\n        pass\nclass PyConstNode(AtomicExprNode):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyConstNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyConstNode(AtomicExprNode):\n    #  Abstract base class for constant Python values.\n    is_literal = 1\n    type = py_object_type\n    def is_simple(self):\n        return 1\n    def may_be_none(self):\n        return False\n    def analyse_types(self, env):\n        return self",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NoneNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NoneNode(PyConstNode):\n    #  The constant value None\n    is_none = 1\n    value = \"Py_None\"\n    constant_result = None\n    nogil_check = None\n    def compile_time_value(self, denv):\n        return None\n    def may_be_none(self):\n        return True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "EllipsisNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class EllipsisNode(PyConstNode):\n    #  '...' in a subscript list.\n    value = \"Py_Ellipsis\"\n    constant_result = Ellipsis\n    def compile_time_value(self, denv):\n        return Ellipsis\nclass ConstNode(AtomicExprNode):\n    # Abstract base type for literal constant nodes.\n    #\n    # value     string      C code fragment",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ConstNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ConstNode(AtomicExprNode):\n    # Abstract base type for literal constant nodes.\n    #\n    # value     string      C code fragment\n    is_literal = 1\n    nogil_check = None\n    def is_simple(self):\n        return 1\n    def nonlocally_immutable(self):\n        return 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "BoolNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class BoolNode(ConstNode):\n    type = PyrexTypes.c_bint_type\n    #  The constant value True or False\n    def calculate_constant_result(self):\n        self.constant_result = self.value\n    def compile_time_value(self, denv):\n        return self.value\n    def calculate_result_code(self):\n        if self.type.is_pyobject:\n            return self.value and 'Py_True' or 'Py_False'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NullNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NullNode(ConstNode):\n    type = PyrexTypes.c_null_ptr_type\n    value = \"NULL\"\n    constant_result = 0\n    def get_constant_c_result_code(self):\n        return self.value\nclass CharNode(ConstNode):\n    type = PyrexTypes.c_char_type\n    def calculate_constant_result(self):\n        self.constant_result = ord(self.value)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CharNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CharNode(ConstNode):\n    type = PyrexTypes.c_char_type\n    def calculate_constant_result(self):\n        self.constant_result = ord(self.value)\n    def compile_time_value(self, denv):\n        return ord(self.value)\n    def calculate_result_code(self):\n        return \"'%s'\" % StringEncoding.escape_char(self.value)\nclass IntNode(ConstNode):\n    # unsigned     \"\" or \"U\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "IntNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class IntNode(ConstNode):\n    # unsigned     \"\" or \"U\"\n    # longness     \"\" or \"L\" or \"LL\"\n    # is_c_literal   True/False/None   creator considers this a C integer literal\n    unsigned = \"\"\n    longness = \"\"\n    is_c_literal = None # unknown\n    def __init__(self, pos, **kwds):\n        ExprNode.__init__(self, pos, **kwds)\n        if 'type' not in kwds:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "FloatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class FloatNode(ConstNode):\n    type = PyrexTypes.c_double_type\n    def calculate_constant_result(self):\n        self.constant_result = float(self.value)\n    def compile_time_value(self, denv):\n        return float(self.value)\n    def coerce_to(self, dst_type, env):\n        if dst_type.is_pyobject and self.type.is_float:\n            return FloatNode(\n                self.pos, value=self.value,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "BytesNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class BytesNode(ConstNode):\n    # A char* or bytes literal\n    #\n    # value      BytesLiteral\n    is_string_literal = True\n    # start off as Python 'bytes' to support len() in O(1)\n    type = bytes_type\n    def calculate_constant_result(self):\n        self.constant_result = self.value\n    def as_sliced_node(self, start, stop, step=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "UnicodeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class UnicodeNode(ConstNode):\n    # A Py_UNICODE* or unicode literal\n    #\n    # value        EncodedString\n    # bytes_value  BytesLiteral    the literal parsed as bytes string\n    #                              ('-3' unicode literals only)\n    is_string_literal = True\n    bytes_value = None\n    type = unicode_type\n    def calculate_constant_result(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "StringNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class StringNode(PyConstNode):\n    # A Python str object, i.e. a byte string in Python 2.x and a\n    # unicode string in Python 3.x\n    #\n    # value          BytesLiteral (or EncodedString with ASCII content)\n    # unicode_value  EncodedString or None\n    # is_identifier  boolean\n    type = str_type\n    is_string_literal = True\n    is_identifier = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "IdentifierStringNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class IdentifierStringNode(StringNode):\n    # A special str value that represents an identifier (bytes in Py2,\n    # unicode in Py3).\n    is_identifier = True\nclass ImagNode(AtomicExprNode):\n    #  Imaginary number literal\n    #\n    #  value   string    imaginary part (float value)\n    type = PyrexTypes.c_double_complex_type\n    def calculate_constant_result(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ImagNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ImagNode(AtomicExprNode):\n    #  Imaginary number literal\n    #\n    #  value   string    imaginary part (float value)\n    type = PyrexTypes.c_double_complex_type\n    def calculate_constant_result(self):\n        self.constant_result = complex(0.0, float(self.value))\n    def compile_time_value(self, denv):\n        return complex(0.0, float(self.value))\n    def analyse_types(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NewExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NewExprNode(AtomicExprNode):\n    # C++ new statement\n    #\n    # cppclass              node                 c++ class to create\n    type = None\n    def infer_type(self, env):\n        type = self.cppclass.analyse_as_type(env)\n        if type is None or not type.is_cpp_class:\n            error(self.pos, \"new operator can only be applied to a C++ class\")\n            self.type = error_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NameNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NameNode(AtomicExprNode):\n    #  Reference to a local or global variable name.\n    #\n    #  name            string    Python name of the variable\n    #  entry           Entry     Symbol table entry\n    #  type_entry      Entry     For extension type names, the original type entry\n    #  cf_is_null      boolean   Is uninitialized before this node\n    #  cf_maybe_null   boolean   Maybe uninitialized before this node\n    #  allow_null      boolean   Don't raise UnboundLocalError\n    #  nogil           boolean   Whether it is used in a nogil context",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "BackquoteNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class BackquoteNode(ExprNode):\n    #  `expr`\n    #\n    #  arg    ExprNode\n    type = py_object_type\n    subexprs = ['arg']\n    def analyse_types(self, env):\n        self.arg = self.arg.analyse_types(env)\n        self.arg = self.arg.coerce_to_pyobject(env)\n        self.is_temp = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ImportNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ImportNode(ExprNode):\n    #  Used as part of import statement implementation.\n    #  Implements result =\n    #    __import__(module_name, globals(), None, name_list, level)\n    #\n    #  module_name   StringNode            dotted name of module. Empty module\n    #                       name means importing the parent package according\n    #                       to level\n    #  name_list     ListNode or None      list of names to be imported\n    #  level         int                   relative import level:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "IteratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class IteratorNode(ExprNode):\n    #  Used as part of for statement implementation.\n    #\n    #  Implements result = iter(sequence)\n    #\n    #  sequence   ExprNode\n    type = py_object_type\n    iter_func_ptr = None\n    counter_cname = None\n    cpp_iterator_cname = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NextNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NextNode(AtomicExprNode):\n    #  Used as part of for statement implementation.\n    #  Implements result = next(iterator)\n    #  Created during analyse_types phase.\n    #  The iterator is not owned by this node.\n    #\n    #  iterator   IteratorNode\n    def __init__(self, iterator):\n        AtomicExprNode.__init__(self, iterator.pos)\n        self.iterator = iterator",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AsyncIteratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AsyncIteratorNode(ExprNode):\n    #  Used as part of 'async for' statement implementation.\n    #\n    #  Implements result = sequence.__aiter__()\n    #\n    #  sequence   ExprNode\n    subexprs = ['sequence']\n    is_async = True\n    type = py_object_type\n    is_temp = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AsyncNextNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AsyncNextNode(AtomicExprNode):\n    #  Used as part of 'async for' statement implementation.\n    #  Implements result = iterator.__anext__()\n    #  Created during analyse_types phase.\n    #  The iterator is not owned by this node.\n    #\n    #  iterator   IteratorNode\n    type = py_object_type\n    is_temp = 1\n    def __init__(self, iterator):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "WithExitCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class WithExitCallNode(ExprNode):\n    # The __exit__() call of a 'with' statement.  Used in both the\n    # except and finally clauses.\n    # with_stat   WithStatNode                the surrounding 'with' statement\n    # args        TupleNode or ResultStatNode the exception info tuple\n    # await_expr  AwaitExprNode               the await expression of an 'async with' statement\n    subexprs = ['args', 'await_expr']\n    test_if_run = True\n    await_expr = None\n    def analyse_types(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ExcValueNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ExcValueNode(AtomicExprNode):\n    #  Node created during analyse_types phase\n    #  of an ExceptClauseNode to fetch the current\n    #  exception value.\n    type = py_object_type\n    def __init__(self, pos):\n        ExprNode.__init__(self, pos)\n    def set_var(self, var):\n        self.var = var\n    def calculate_result_code(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "TempNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class TempNode(ExprNode):\n    # Node created during analyse_types phase\n    # of some nodes to hold a temporary value.\n    #\n    # Note: One must call \"allocate\" and \"release\" on\n    # the node during code generation to get/release the temp.\n    # This is because the temp result is often used outside of\n    # the regular cycle.\n    subexprs = []\n    def __init__(self, pos, type, env=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyTempNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyTempNode(TempNode):\n    #  TempNode holding a Python value.\n    def __init__(self, pos, env):\n        TempNode.__init__(self, pos, PyrexTypes.py_object_type, env)\nclass RawCNameExprNode(ExprNode):\n    subexprs = []\n    def __init__(self, pos, type=None, cname=None):\n        ExprNode.__init__(self, pos, type=type)\n        if cname is not None:\n            self.cname = cname",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "RawCNameExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class RawCNameExprNode(ExprNode):\n    subexprs = []\n    def __init__(self, pos, type=None, cname=None):\n        ExprNode.__init__(self, pos, type=type)\n        if cname is not None:\n            self.cname = cname\n    def analyse_types(self, env):\n        return self\n    def set_cname(self, cname):\n        self.cname = cname",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "JoinedStrNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class JoinedStrNode(ExprNode):\n    # F-strings\n    #\n    # values   [UnicodeNode|FormattedValueNode]   Substrings of the f-string\n    #\n    type = unicode_type\n    is_temp = True\n    subexprs = ['values']\n    def analyse_types(self, env):\n        self.values = [v.analyse_types(env).coerce_to_pyobject(env) for v in self.values]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "FormattedValueNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class FormattedValueNode(ExprNode):\n    # {}-delimited portions of an f-string\n    #\n    # value           ExprNode                The expression itself\n    # conversion_char str or None             Type conversion (!s, !r, !a, or none, or 'd' for integer conversion)\n    # format_spec     JoinedStrNode or None   Format string passed to __format__\n    # c_format_spec   str or None             If not None, formatting can be done at the C level\n    subexprs = ['value', 'format_spec']\n    type = unicode_type\n    is_temp = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ParallelThreadsAvailableNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ParallelThreadsAvailableNode(AtomicExprNode):\n    \"\"\"\n    Note: this is disabled and not a valid directive at this moment\n    Implements cython.parallel.threadsavailable(). If we are called from the\n    sequential part of the application, we need to call omp_get_max_threads(),\n    and in the parallel part we can just call omp_get_num_threads()\n    \"\"\"\n    type = PyrexTypes.c_int_type\n    def analyse_types(self, env):\n        self.is_temp = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ParallelThreadIdNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ParallelThreadIdNode(AtomicExprNode): #, Nodes.ParallelNode):\n    \"\"\"\n    Implements cython.parallel.threadid()\n    \"\"\"\n    type = PyrexTypes.c_int_type\n    def analyse_types(self, env):\n        self.is_temp = True\n        # env.add_include_file(\"omp.h\")\n        return self\n    def generate_result_code(self, code):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "_IndexingBaseNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class _IndexingBaseNode(ExprNode):\n    # Base class for indexing nodes.\n    #\n    # base   ExprNode   the value being indexed\n    def is_ephemeral(self):\n        # in most cases, indexing will return a safe reference to an object in a container,\n        # so we consider the result safe if the base object is\n        return self.base.is_ephemeral() or self.base.type in (\n            basestring_type, str_type, bytes_type, bytearray_type, unicode_type)\n    def check_const_addr(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "IndexNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class IndexNode(_IndexingBaseNode):\n    #  Sequence indexing.\n    #\n    #  base     ExprNode\n    #  index    ExprNode\n    #  type_indices  [PyrexType]\n    #\n    #  is_fused_index boolean   Whether the index is used to specialize a\n    #                           c(p)def function\n    subexprs = ['base', 'index']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "BufferIndexNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class BufferIndexNode(_IndexingBaseNode):\n    \"\"\"\n    Indexing of buffers and memoryviews. This node is created during type\n    analysis from IndexNode and replaces it.\n    Attributes:\n        base - base node being indexed\n        indices - list of indexing expressions\n    \"\"\"\n    subexprs = ['base', 'indices']\n    is_buffer_access = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MemoryViewIndexNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MemoryViewIndexNode(BufferIndexNode):\n    is_memview_index = True\n    is_buffer_access = False\n    warned_untyped_idx = False\n    def analyse_types(self, env, getting=True):\n        # memoryviewslice indexing or slicing\n        from . import MemoryView\n        self.is_pythran_mode = has_np_pythran(env)\n        indices = self.indices\n        have_slices, indices, newaxes = MemoryView.unellipsify(indices, self.base.type.ndim)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MemoryViewSliceNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MemoryViewSliceNode(MemoryViewIndexNode):\n    is_memview_slice = True\n    # No-op slicing operation, this node will be replaced\n    is_ellipsis_noop = False\n    is_memview_scalar_assignment = False\n    is_memview_index = False\n    is_memview_broadcast = False\n    def analyse_ellipsis_noop(self, env, getting):\n        \"\"\"Slicing operations needing no evaluation, i.e. m[...] or m[:, :]\"\"\"\n        ### FIXME: replace directly",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MemoryCopyNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MemoryCopyNode(ExprNode):\n    \"\"\"\n    Wraps a memoryview slice for slice assignment.\n        dst: destination mememoryview slice\n    \"\"\"\n    subexprs = ['dst']\n    def __init__(self, pos, dst):\n        super(MemoryCopyNode, self).__init__(pos)\n        self.dst = dst\n        self.type = dst.type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MemoryCopySlice",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MemoryCopySlice(MemoryCopyNode):\n    \"\"\"\n    Copy the contents of slice src to slice dst. Does not support indirect\n    slices.\n        memslice1[...] = memslice2\n        memslice1[:] = memslice2\n    \"\"\"\n    is_memview_copy_assignment = True\n    copy_slice_cname = \"__pyx_memoryview_copy_contents\"\n    def _generate_assignment_code(self, src, code):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MemoryCopyScalar",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MemoryCopyScalar(MemoryCopyNode):\n    \"\"\"\n    Assign a scalar to a slice. dst must be simple, scalar will be assigned\n    to a correct type and not just something assignable.\n        memslice1[...] = 0.0\n        memslice1[:] = 0.0\n    \"\"\"\n    def __init__(self, pos, dst):\n        super(MemoryCopyScalar, self).__init__(pos, dst)\n        self.type = dst.type.dtype",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SliceIndexNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SliceIndexNode(ExprNode):\n    #  2-element slice indexing\n    #\n    #  base      ExprNode\n    #  start     ExprNode or None\n    #  stop      ExprNode or None\n    #  slice     ExprNode or None   constant slice object\n    subexprs = ['base', 'start', 'stop', 'slice']\n    slice = None\n    def infer_type(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SliceNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SliceNode(ExprNode):\n    #  start:stop:step in subscript list\n    #\n    #  start     ExprNode\n    #  stop      ExprNode\n    #  step      ExprNode\n    subexprs = ['start', 'stop', 'step']\n    is_slice = True\n    type = slice_type\n    is_temp = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SliceIntNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SliceIntNode(SliceNode):\n    #  start:stop:step in subscript list\n    # This is just a node to hold start,stop and step nodes that can be\n    # converted to integers. This does not generate a slice python object.\n    #\n    #  start     ExprNode\n    #  stop      ExprNode\n    #  step      ExprNode\n    is_temp = 0\n    def calculate_constant_result(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CallNode(ExprNode):\n    # allow overriding the default 'may_be_none' behaviour\n    may_return_none = None\n    def infer_type(self, env):\n        # TODO(robertwb): Reduce redundancy with analyse_types.\n        function = self.function\n        func_type = function.infer_type(env)\n        if isinstance(function, NewExprNode):\n            # note: needs call to infer_type() above\n            return PyrexTypes.CPtrType(function.class_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SimpleCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SimpleCallNode(CallNode):\n    #  Function call without keyword, * or ** args.\n    #\n    #  function       ExprNode\n    #  args           [ExprNode]\n    #  arg_tuple      ExprNode or None     used internally\n    #  self           ExprNode or None     used internally\n    #  coerced_self   ExprNode or None     used internally\n    #  wrapper_call   bool                 used internally\n    #  has_optional_args   bool            used internally",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NumPyMethodCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NumPyMethodCallNode(ExprNode):\n    # Pythran call to a NumPy function or method.\n    #\n    # function_cname  string      the function/method to call\n    # arg_tuple       TupleNode   the arguments as an args tuple\n    subexprs = ['arg_tuple']\n    is_temp = True\n    may_return_none = True\n    def generate_evaluation_code(self, code):\n        code.mark_pos(self.pos)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyMethodCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyMethodCallNode(SimpleCallNode):\n    # Specialised call to a (potential) PyMethodObject with non-constant argument tuple.\n    # Allows the self argument to be injected directly instead of repacking a tuple for it.\n    #\n    # function    ExprNode      the function/method object to call\n    # arg_tuple   TupleNode     the arguments for the args tuple\n    subexprs = ['function', 'arg_tuple']\n    is_temp = True\n    def generate_evaluation_code(self, code):\n        code.mark_pos(self.pos)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "InlinedDefNodeCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class InlinedDefNodeCallNode(CallNode):\n    #  Inline call to defnode\n    #\n    #  function       PyCFunctionNode\n    #  function_name  NameNode\n    #  args           [ExprNode]\n    subexprs = ['args', 'function_name']\n    is_temp = 1\n    type = py_object_type\n    function = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PythonCapiFunctionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PythonCapiFunctionNode(ExprNode):\n    subexprs = []\n    def __init__(self, pos, py_name, cname, func_type, utility_code = None):\n        ExprNode.__init__(self, pos, name=py_name, cname=cname,\n                          type=func_type, utility_code=utility_code)\n    def analyse_types(self, env):\n        return self\n    def generate_result_code(self, code):\n        if self.utility_code:\n            code.globalstate.use_utility_code(self.utility_code)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PythonCapiCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PythonCapiCallNode(SimpleCallNode):\n    # Python C-API Function call (only created in transforms)\n    # By default, we assume that the call never returns None, as this\n    # is true for most C-API functions in CPython.  If this does not\n    # apply to a call, set the following to True (or None to inherit\n    # the default behaviour).\n    may_return_none = False\n    def __init__(self, pos, function_name, func_type,\n                 utility_code = None, py_name=None, **kwargs):\n        self.type = func_type.return_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CachedBuiltinMethodCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CachedBuiltinMethodCallNode(CallNode):\n    # Python call to a method of a known Python builtin (only created in transforms)\n    subexprs = ['obj', 'args']\n    is_temp = True\n    def __init__(self, call_node, obj, method_name, args):\n        super(CachedBuiltinMethodCallNode, self).__init__(\n            call_node.pos,\n            obj=obj, method_name=method_name, args=args,\n            may_return_none=call_node.may_return_none,\n            type=call_node.type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "GeneralCallNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class GeneralCallNode(CallNode):\n    #  General Python function call, including keyword,\n    #  * and ** arguments.\n    #\n    #  function         ExprNode\n    #  positional_args  ExprNode          Tuple of positional arguments\n    #  keyword_args     ExprNode or None  Dict of keyword arguments\n    type = py_object_type\n    subexprs = ['function', 'positional_args', 'keyword_args']\n    nogil_check = Node.gil_error",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AsTupleNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AsTupleNode(ExprNode):\n    #  Convert argument to tuple. Used for normalising\n    #  the * argument of a function call.\n    #\n    #  arg    ExprNode\n    subexprs = ['arg']\n    is_temp = 1\n    def calculate_constant_result(self):\n        self.constant_result = tuple(self.arg.constant_result)\n    def compile_time_value(self, denv):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MergedDictNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MergedDictNode(ExprNode):\n    #  Helper class for keyword arguments and other merged dicts.\n    #\n    #  keyword_args      [DictNode or other ExprNode]\n    subexprs = ['keyword_args']\n    is_temp = 1\n    type = dict_type\n    reject_duplicates = True\n    def calculate_constant_result(self):\n        result = {}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AttributeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AttributeNode(ExprNode):\n    #  obj.attribute\n    #\n    #  obj          ExprNode\n    #  attribute    string\n    #  needs_none_check boolean        Used if obj is an extension type.\n    #                                  If set to True, it is known that the type is not None.\n    #\n    #  Used internally:\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "StarredUnpackingNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class StarredUnpackingNode(ExprNode):\n    #  A starred expression like \"*a\"\n    #\n    #  This is only allowed in sequence assignment or construction such as\n    #\n    #      a, *b = (1,2,3,4)    =>     a = 1 ; b = [2,3,4]\n    #\n    #  and will be special cased during type analysis (or generate an error\n    #  if it's found at unexpected places).\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SequenceNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SequenceNode(ExprNode):\n    #  Base class for list and tuple constructor nodes.\n    #  Contains common code for performing sequence unpacking.\n    #\n    #  args                    [ExprNode]\n    #  unpacked_items          [ExprNode] or None\n    #  coerced_unpacked_items  [ExprNode] or None\n    # mult_factor              ExprNode     the integer number of content repetitions ([1,2]*3)\n    subexprs = ['args', 'mult_factor']\n    is_sequence_constructor = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "TupleNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class TupleNode(SequenceNode):\n    #  Tuple constructor.\n    type = tuple_type\n    is_partly_literal = False\n    gil_message = \"Constructing Python tuple\"\n    def infer_type(self, env):\n        if self.mult_factor or not self.args:\n            return tuple_type\n        arg_types = [arg.infer_type(env) for arg in self.args]\n        if any(type.is_pyobject or type.is_memoryviewslice or type.is_unspecified or type.is_fused",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ListNode(SequenceNode):\n    #  List constructor.\n    # obj_conversion_errors    [PyrexError]   used internally\n    # orignial_args            [ExprNode]     used internally\n    obj_conversion_errors = []\n    type = list_type\n    in_module_scope = False\n    gil_message = \"Constructing Python list\"\n    def type_dependencies(self, env):\n        return ()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ScopedExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ScopedExprNode(ExprNode):\n    # Abstract base class for ExprNodes that have their own local\n    # scope, such as generator expressions.\n    #\n    # expr_scope    Scope  the inner scope of the expression\n    subexprs = []\n    expr_scope = None\n    # does this node really have a local scope, e.g. does it leak loop\n    # variables or not?  non-leaking Py3 behaviour is default, except\n    # for list comprehensions where the behaviour differs in Py2 and",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ComprehensionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ComprehensionNode(ScopedExprNode):\n    # A list/set/dict comprehension\n    child_attrs = [\"loop\"]\n    is_temp = True\n    constant_result = not_a_constant\n    def infer_type(self, env):\n        return self.type\n    def analyse_declarations(self, env):\n        self.append.target = self # this is used in the PyList_Append of the inner loop\n        self.init_scope(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ComprehensionAppendNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ComprehensionAppendNode(Node):\n    # Need to be careful to avoid infinite recursion:\n    # target must not be in child_attrs/subexprs\n    child_attrs = ['expr']\n    target = None\n    type = PyrexTypes.c_int_type\n    def analyse_expressions(self, env):\n        self.expr = self.expr.analyse_expressions(env)\n        if not self.expr.type.is_pyobject:\n            self.expr = self.expr.coerce_to_pyobject(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DictComprehensionAppendNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DictComprehensionAppendNode(ComprehensionAppendNode):\n    child_attrs = ['key_expr', 'value_expr']\n    def analyse_expressions(self, env):\n        self.key_expr = self.key_expr.analyse_expressions(env)\n        if not self.key_expr.type.is_pyobject:\n            self.key_expr = self.key_expr.coerce_to_pyobject(env)\n        self.value_expr = self.value_expr.analyse_expressions(env)\n        if not self.value_expr.type.is_pyobject:\n            self.value_expr = self.value_expr.coerce_to_pyobject(env)\n        return self",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "InlinedGeneratorExpressionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class InlinedGeneratorExpressionNode(ExprNode):\n    # An inlined generator expression for which the result is calculated\n    # inside of the loop and returned as a single, first and only Generator\n    # return value.\n    # This will only be created by transforms when replacing safe builtin\n    # calls on generator expressions.\n    #\n    # gen            GeneratorExpressionNode      the generator, not containing any YieldExprNodes\n    # orig_func      String                       the name of the builtin function this node replaces\n    # target         ExprNode or None             a 'target' for a ComprehensionAppend node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MergedSequenceNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MergedSequenceNode(ExprNode):\n    \"\"\"\n    Merge a sequence of iterables into a set/list/tuple.\n    The target collection is determined by self.type, which must be set externally.\n    args    [ExprNode]\n    \"\"\"\n    subexprs = ['args']\n    is_temp = True\n    gil_message = \"Constructing Python collection\"\n    def __init__(self, pos, args, type):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SetNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SetNode(ExprNode):\n    \"\"\"\n    Set constructor.\n    \"\"\"\n    subexprs = ['args']\n    type = set_type\n    is_set_literal = True\n    gil_message = \"Constructing Python set\"\n    def analyse_types(self, env):\n        for i in range(len(self.args)):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DictNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DictNode(ExprNode):\n    #  Dictionary constructor.\n    #\n    #  key_value_pairs     [DictItemNode]\n    #  exclude_null_values [boolean]          Do not add NULL values to dict\n    #\n    # obj_conversion_errors    [PyrexError]   used internally\n    subexprs = ['key_value_pairs']\n    is_temp = 1\n    exclude_null_values = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DictItemNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DictItemNode(ExprNode):\n    # Represents a single item in a DictNode\n    #\n    # key          ExprNode\n    # value        ExprNode\n    subexprs = ['key', 'value']\n    nogil_check = None # Parent DictNode takes care of it\n    def calculate_constant_result(self):\n        self.constant_result = (\n            self.key.constant_result, self.value.constant_result)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SortedDictKeysNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SortedDictKeysNode(ExprNode):\n    # build sorted list of dict keys, e.g. for dir()\n    subexprs = ['arg']\n    is_temp = True\n    def __init__(self, arg):\n        ExprNode.__init__(self, arg.pos, arg=arg)\n        self.type = Builtin.list_type\n    def analyse_types(self, env):\n        arg = self.arg.analyse_types(env)\n        if arg.type is Builtin.dict_type:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ModuleNameMixin",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ModuleNameMixin(object):\n    def get_py_mod_name(self, code):\n        return code.get_py_string_const(\n            self.module_name, identifier=True)\n    def get_py_qualified_name(self, code):\n        return code.get_py_string_const(\n            self.qualname, identifier=True)\nclass ClassNode(ExprNode, ModuleNameMixin):\n    #  Helper class used in the implementation of Python\n    #  class definitions. Constructs a class object given",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ClassNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ClassNode(ExprNode, ModuleNameMixin):\n    #  Helper class used in the implementation of Python\n    #  class definitions. Constructs a class object given\n    #  a name, tuple of bases and class dictionary.\n    #\n    #  name         EncodedString      Name of the class\n    #  class_def_node  PyClassDefNode  PyClassDefNode defining this class\n    #  doc          ExprNode or None   Doc string\n    #  module_name  EncodedString      Name of defining module\n    subexprs = ['doc']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "Py3ClassNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class Py3ClassNode(ExprNode):\n    #  Helper class used in the implementation of Python3+\n    #  class definitions. Constructs a class object given\n    #  a name, tuple of bases and class dictionary.\n    #\n    #  name         EncodedString      Name of the class\n    #  module_name  EncodedString      Name of defining module\n    #  class_def_node  PyClassDefNode  PyClassDefNode defining this class\n    #  calculate_metaclass  bool       should call CalculateMetaclass()\n    #  allow_py2_metaclass  bool       should look for Py2 metaclass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyClassMetaclassNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyClassMetaclassNode(ExprNode):\n    # Helper class holds Python3 metaclass object\n    #\n    #  class_def_node  PyClassDefNode  PyClassDefNode defining this class\n    subexprs = []\n    def analyse_types(self, env):\n        self.type = py_object_type\n        self.is_temp = True\n        return self\n    def may_be_none(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyClassNamespaceNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyClassNamespaceNode(ExprNode, ModuleNameMixin):\n    # Helper class holds Python3 namespace object\n    #\n    # All this are not owned by this node\n    #  class_def_node  PyClassDefNode  PyClassDefNode defining this class\n    #  doc          ExprNode or None   Doc string (owned)\n    subexprs = ['doc']\n    def analyse_types(self, env):\n        if self.doc:\n            self.doc = self.doc.analyse_types(env).coerce_to_pyobject(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ClassCellInjectorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ClassCellInjectorNode(ExprNode):\n    # Initialize CyFunction.func_classobj\n    is_temp = True\n    type = py_object_type\n    subexprs = []\n    is_active = False\n    def analyse_expressions(self, env):\n        return self\n    def generate_result_code(self, code):\n        assert self.is_active",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ClassCellNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ClassCellNode(ExprNode):\n    # Class Cell for noargs super()\n    subexprs = []\n    is_temp = True\n    is_generator = False\n    type = py_object_type\n    def analyse_types(self, env):\n        return self\n    def generate_result_code(self, code):\n        if not self.is_generator:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyCFunctionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyCFunctionNode(ExprNode, ModuleNameMixin):\n    #  Helper class used in the implementation of Python\n    #  functions.  Constructs a PyCFunction object\n    #  from a PyMethodDef struct.\n    #\n    #  pymethdef_cname   string             PyMethodDef structure\n    #  self_object       ExprNode or None\n    #  binding           bool\n    #  def_node          DefNode            the Python function node\n    #  module_name       EncodedString      Name of defining module",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "InnerFunctionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class InnerFunctionNode(PyCFunctionNode):\n    # Special PyCFunctionNode that depends on a closure class\n    #\n    binding = True\n    needs_self_code = True\n    def self_result_code(self):\n        if self.needs_self_code:\n            return \"((PyObject*)%s)\" % Naming.cur_scope_cname\n        return \"NULL\"\nclass CodeObjectNode(ExprNode):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CodeObjectNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CodeObjectNode(ExprNode):\n    # Create a PyCodeObject for a CyFunction instance.\n    #\n    # def_node   DefNode    the Python function node\n    # varnames   TupleNode  a tuple with all local variable names\n    subexprs = ['varnames']\n    is_temp = False\n    result_code = None\n    def __init__(self, def_node):\n        ExprNode.__init__(self, def_node.pos, def_node=def_node)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DefaultLiteralArgNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DefaultLiteralArgNode(ExprNode):\n    # CyFunction's literal argument default value\n    #\n    # Evaluate literal only once.\n    subexprs = []\n    is_literal = True\n    is_temp = False\n    def __init__(self, pos, arg):\n        super(DefaultLiteralArgNode, self).__init__(pos)\n        self.arg = arg",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DefaultNonLiteralArgNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DefaultNonLiteralArgNode(ExprNode):\n    # CyFunction's non-literal argument default value\n    subexprs = []\n    def __init__(self, pos, arg, defaults_struct):\n        super(DefaultNonLiteralArgNode, self).__init__(pos)\n        self.arg = arg\n        self.defaults_struct = defaults_struct\n    def analyse_types(self, env):\n        self.type = self.arg.type\n        self.is_temp = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DefaultsTupleNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DefaultsTupleNode(TupleNode):\n    # CyFunction's __defaults__ tuple\n    def __init__(self, pos, defaults, defaults_struct):\n        args = []\n        for arg in defaults:\n            if not arg.default.is_literal:\n                arg = DefaultNonLiteralArgNode(pos, arg, defaults_struct)\n            else:\n                arg = arg.default\n            args.append(arg)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DefaultsKwDictNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DefaultsKwDictNode(DictNode):\n    # CyFunction's __kwdefaults__ dict\n    def __init__(self, pos, defaults, defaults_struct):\n        items = []\n        for arg in defaults:\n            name = IdentifierStringNode(arg.pos, value=arg.name)\n            if not arg.default.is_literal:\n                arg = DefaultNonLiteralArgNode(pos, arg, defaults_struct)\n            else:\n                arg = arg.default",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "LambdaNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class LambdaNode(InnerFunctionNode):\n    # Lambda expression node (only used as a function reference)\n    #\n    # args          [CArgDeclNode]         formal arguments\n    # star_arg      PyArgDeclNode or None  * argument\n    # starstar_arg  PyArgDeclNode or None  ** argument\n    # lambda_name   string                 a module-globally unique lambda name\n    # result_expr   ExprNode\n    # def_node      DefNode                the underlying function 'def' node\n    child_attrs = ['def_node']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "GeneratorExpressionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class GeneratorExpressionNode(LambdaNode):\n    # A generator expression, e.g.  (i for i in range(10))\n    #\n    # Result is a generator.\n    #\n    # loop      ForStatNode   the for-loop, containing a YieldExprNode\n    # def_node  DefNode       the underlying generator 'def' node\n    name = StringEncoding.EncodedString('genexpr')\n    binding = False\n    def analyse_declarations(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "YieldExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class YieldExprNode(ExprNode):\n    # Yield expression node\n    #\n    # arg         ExprNode   the value to return from the generator\n    # label_num   integer    yield label number\n    # is_yield_from  boolean is a YieldFromExprNode to delegate to another generator\n    subexprs = ['arg']\n    type = py_object_type\n    label_num = 0\n    is_yield_from = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "_YieldDelegationExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class _YieldDelegationExprNode(YieldExprNode):\n    def yield_from_func(self, code):\n        raise NotImplementedError()\n    def generate_evaluation_code(self, code, source_cname=None, decref_source=False):\n        if source_cname is None:\n            self.arg.generate_evaluation_code(code)\n        code.putln(\"%s = %s(%s, %s);\" % (\n            Naming.retval_cname,\n            self.yield_from_func(code),\n            Naming.generator_cname,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "YieldFromExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class YieldFromExprNode(_YieldDelegationExprNode):\n    # \"yield from GEN\" expression\n    is_yield_from = True\n    expr_keyword = 'yield from'\n    def coerce_yield_argument(self, env):\n        if not self.arg.type.is_string:\n            # FIXME: support C arrays and C++ iterators?\n            error(self.pos, \"yielding from non-Python object not supported\")\n        self.arg = self.arg.coerce_to_pyobject(env)\n    def yield_from_func(self, code):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AwaitExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AwaitExprNode(_YieldDelegationExprNode):\n    # 'await' expression node\n    #\n    # arg         ExprNode   the Awaitable value to await\n    # label_num   integer    yield label number\n    is_await = True\n    expr_keyword = 'await'\n    def coerce_yield_argument(self, env):\n        if self.arg is not None:\n            # FIXME: use same check as in YieldFromExprNode.coerce_yield_argument() ?",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AwaitIterNextExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AwaitIterNextExprNode(AwaitExprNode):\n    # 'await' expression node as part of 'async for' iteration\n    #\n    # Breaks out of loop on StopAsyncIteration exception.\n    def _generate_break(self, code):\n        code.globalstate.use_utility_code(UtilityCode.load_cached(\"StopAsyncIteration\", \"Coroutine.c\"))\n        code.putln(\"PyObject* exc_type = __Pyx_PyErr_Occurred();\")\n        code.putln(\"if (unlikely(exc_type && (exc_type == __Pyx_PyExc_StopAsyncIteration || (\"\n                   \" exc_type != PyExc_StopIteration && exc_type != PyExc_GeneratorExit &&\"\n                   \" __Pyx_PyErr_GivenExceptionMatches(exc_type, __Pyx_PyExc_StopAsyncIteration))))) {\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "GlobalsExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class GlobalsExprNode(AtomicExprNode):\n    type = dict_type\n    is_temp = 1\n    def analyse_types(self, env):\n        env.use_utility_code(Builtin.globals_utility_code)\n        return self\n    gil_message = \"Constructing globals dict\"\n    def may_be_none(self):\n        return False\n    def generate_result_code(self, code):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "LocalsDictItemNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class LocalsDictItemNode(DictItemNode):\n    def analyse_types(self, env):\n        self.key = self.key.analyse_types(env)\n        self.value = self.value.analyse_types(env)\n        self.key = self.key.coerce_to_pyobject(env)\n        if self.value.type.can_coerce_to_pyobject(env):\n            self.value = self.value.coerce_to_pyobject(env)\n        else:\n            self.value = None\n        return self",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "FuncLocalsExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class FuncLocalsExprNode(DictNode):\n    def __init__(self, pos, env):\n        local_vars = sorted([\n            entry.name for entry in env.entries.values() if entry.name])\n        items = [LocalsDictItemNode(\n            pos, key=IdentifierStringNode(pos, value=var),\n            value=NameNode(pos, name=var, allow_null=True))\n                 for var in local_vars]\n        DictNode.__init__(self, pos, key_value_pairs=items,\n                          exclude_null_values=True)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyClassLocalsExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyClassLocalsExprNode(AtomicExprNode):\n    def __init__(self, pos, pyclass_dict):\n        AtomicExprNode.__init__(self, pos)\n        self.pyclass_dict = pyclass_dict\n    def analyse_types(self, env):\n        self.type = self.pyclass_dict.type\n        self.is_temp = False\n        return self\n    def may_be_none(self):\n        return False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "UnopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class UnopNode(ExprNode):\n    #  operator     string\n    #  operand      ExprNode\n    #\n    #  Processing during analyse_expressions phase:\n    #\n    #    analyse_c_operation\n    #      Called when the operand is not a pyobject.\n    #      - Check operand type and coerce if needed.\n    #      - Determine result type and result code fragment.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NotNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NotNode(UnopNode):\n    #  'not' operator\n    #\n    #  operand   ExprNode\n    operator = '!'\n    type = PyrexTypes.c_bint_type\n    def calculate_constant_result(self):\n        self.constant_result = not self.operand.constant_result\n    def compile_time_value(self, denv):\n        operand = self.operand.compile_time_value(denv)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "UnaryPlusNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class UnaryPlusNode(UnopNode):\n    #  unary '+' operator\n    operator = '+'\n    def analyse_c_operation(self, env):\n        self.type = PyrexTypes.widest_numeric_type(\n            self.operand.type, PyrexTypes.c_int_type)\n    def py_operation_function(self, code):\n        return \"PyNumber_Positive\"\n    def calculate_result_code(self):\n        if self.is_cpp_operation():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "UnaryMinusNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class UnaryMinusNode(UnopNode):\n    #  unary '-' operator\n    operator = '-'\n    def analyse_c_operation(self, env):\n        if self.operand.type.is_numeric:\n            self.type = PyrexTypes.widest_numeric_type(\n                self.operand.type, PyrexTypes.c_int_type)\n        elif self.operand.type.is_enum:\n            self.type = PyrexTypes.c_int_type\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "TildeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class TildeNode(UnopNode):\n    #  unary '~' operator\n    def analyse_c_operation(self, env):\n        if self.operand.type.is_int:\n            self.type = PyrexTypes.widest_numeric_type(\n                self.operand.type, PyrexTypes.c_int_type)\n        elif self.operand.type.is_enum:\n            self.type = PyrexTypes.c_int_type\n        else:\n            self.type_error()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CUnopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CUnopNode(UnopNode):\n    def is_py_operation(self):\n        return False\nclass DereferenceNode(CUnopNode):\n    #  unary * operator\n    operator = '*'\n    def infer_unop_type(self, env, operand_type):\n        if operand_type.is_ptr:\n            return operand_type.base_type\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DereferenceNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DereferenceNode(CUnopNode):\n    #  unary * operator\n    operator = '*'\n    def infer_unop_type(self, env, operand_type):\n        if operand_type.is_ptr:\n            return operand_type.base_type\n        else:\n            return PyrexTypes.error_type\n    def analyse_c_operation(self, env):\n        if self.operand.type.is_ptr:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DecrementIncrementNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DecrementIncrementNode(CUnopNode):\n    #  unary ++/-- operator\n    def analyse_c_operation(self, env):\n        if self.operand.type.is_numeric:\n            self.type = PyrexTypes.widest_numeric_type(\n                self.operand.type, PyrexTypes.c_int_type)\n        elif self.operand.type.is_ptr:\n            self.type = self.operand.type\n        else:\n            self.type_error()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AmpersandNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AmpersandNode(CUnopNode):\n    #  The C address-of operator.\n    #\n    #  operand  ExprNode\n    operator = '&'\n    def infer_unop_type(self, env, operand_type):\n        return PyrexTypes.c_ptr_type(operand_type)\n    def analyse_types(self, env):\n        self.operand = self.operand.analyse_types(env)\n        argtype = self.operand.type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "TypecastNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class TypecastNode(ExprNode):\n    #  C type cast\n    #\n    #  operand      ExprNode\n    #  base_type    CBaseTypeNode\n    #  declarator   CDeclaratorNode\n    #  typecheck    boolean\n    #\n    #  If used from a transform, one can if wanted specify the attribute\n    #  \"type\" directly and leave base_type and declarator to None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CythonArrayNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CythonArrayNode(ExprNode):\n    \"\"\"\n    Used when a pointer of base_type is cast to a memoryviewslice with that\n    base type. i.e.\n        <int[:M:1, :N]> p\n    creates a fortran-contiguous cython.array.\n    We leave the type set to object so coercions to object are more efficient\n    and less work. Acquiring a memoryviewslice from this will be just as\n    efficient. ExprNode.coerce_to() will do the additional typecheck on\n    self.compile_time_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SizeofNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SizeofNode(ExprNode):\n    #  Abstract base class for sizeof(x) expression nodes.\n    type = PyrexTypes.c_size_t_type\n    def check_const(self):\n        return True\n    def generate_result_code(self, code):\n        pass\nclass SizeofTypeNode(SizeofNode):\n    #  C sizeof function applied to a type\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SizeofTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SizeofTypeNode(SizeofNode):\n    #  C sizeof function applied to a type\n    #\n    #  base_type   CBaseTypeNode\n    #  declarator  CDeclaratorNode\n    subexprs = []\n    arg_type = None\n    def analyse_types(self, env):\n        # we may have incorrectly interpreted a dotted name as a type rather than an attribute\n        # this could be better handled by more uniformly treating types as runtime-available objects",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SizeofVarNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SizeofVarNode(SizeofNode):\n    #  C sizeof function applied to a variable\n    #\n    #  operand   ExprNode\n    subexprs = ['operand']\n    def analyse_types(self, env):\n        # We may actually be looking at a type rather than a variable...\n        # If we are, traditional analysis would fail...\n        operand_as_type = self.operand.analyse_as_type(env)\n        if operand_as_type:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "TypeidNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class TypeidNode(ExprNode):\n    #  C++ typeid operator applied to a type or variable\n    #\n    #  operand       ExprNode\n    #  arg_type      ExprNode\n    #  is_variable   boolean\n    type = PyrexTypes.error_type\n    subexprs = ['operand']\n    arg_type = None\n    is_variable = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "TypeofNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class TypeofNode(ExprNode):\n    #  Compile-time type of an expression, as a string.\n    #\n    #  operand   ExprNode\n    #  literal   StringNode # internal\n    literal = None\n    type = py_object_type\n    subexprs = ['literal'] # 'operand' will be ignored after type analysis!\n    def analyse_types(self, env):\n        self.operand = self.operand.analyse_types(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "BinopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class BinopNode(ExprNode):\n    #  operator     string\n    #  operand1     ExprNode\n    #  operand2     ExprNode\n    #\n    #  Processing during analyse_expressions phase:\n    #\n    #    analyse_c_operation\n    #      Called when neither operand is a pyobject.\n    #      - Check operand types and coerce if needed.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CBinopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CBinopNode(BinopNode):\n    def analyse_types(self, env):\n        node = BinopNode.analyse_types(self, env)\n        if node.is_py_operation():\n            node.type = PyrexTypes.error_type\n        return node\n    def py_operation_function(self, code):\n        return \"\"\n    def calculate_result_code(self):\n        return \"(%s %s %s)\" % (",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NumBinopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NumBinopNode(BinopNode):\n    #  Binary operation taking numeric arguments.\n    infix = True\n    overflow_check = False\n    overflow_bit_node = None\n    def analyse_c_operation(self, env):\n        type1 = self.operand1.type\n        type2 = self.operand2.type\n        self.type = self.compute_c_result_type(type1, type2)\n        if not self.type:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "IntBinopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class IntBinopNode(NumBinopNode):\n    #  Binary operation taking integer arguments.\n    def c_types_okay(self, type1, type2):\n        #print \"IntBinopNode.c_types_okay:\", type1, type2 ###\n        return (type1.is_int or type1.is_enum) \\\n            and (type2.is_int or type2.is_enum)\nclass AddNode(NumBinopNode):\n    #  '+' operator.\n    def is_py_operation_types(self, type1, type2):\n        if type1.is_string and type2.is_string or type1.is_pyunicode_ptr and type2.is_pyunicode_ptr:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "AddNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class AddNode(NumBinopNode):\n    #  '+' operator.\n    def is_py_operation_types(self, type1, type2):\n        if type1.is_string and type2.is_string or type1.is_pyunicode_ptr and type2.is_pyunicode_ptr:\n            return 1\n        else:\n            return NumBinopNode.is_py_operation_types(self, type1, type2)\n    def infer_builtin_types_operation(self, type1, type2):\n        # b'abc' + 'abc' raises an exception in Py3,\n        # so we can safely infer the Py2 type for bytes here",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "SubNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class SubNode(NumBinopNode):\n    #  '-' operator.\n    def compute_c_result_type(self, type1, type2):\n        if (type1.is_ptr or type1.is_array) and (type2.is_int or type2.is_enum):\n            return type1\n        elif (type1.is_ptr or type1.is_array) and (type2.is_ptr or type2.is_array):\n            return PyrexTypes.c_ptrdiff_t_type\n        else:\n            return NumBinopNode.compute_c_result_type(\n                self, type1, type2)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MulNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MulNode(NumBinopNode):\n    #  '*' operator.\n    def is_py_operation_types(self, type1, type2):\n        if ((type1.is_string and type2.is_int) or\n                (type2.is_string and type1.is_int)):\n            return 1\n        else:\n            return NumBinopNode.is_py_operation_types(self, type1, type2)\n    def infer_builtin_types_operation(self, type1, type2):\n        # let's assume that whatever builtin type you multiply a string with",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "MatMultNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class MatMultNode(NumBinopNode):\n    #  '@' operator.\n    def is_py_operation_types(self, type1, type2):\n        return True\n    def generate_evaluation_code(self, code):\n        code.globalstate.use_utility_code(UtilityCode.load_cached(\"MatrixMultiply\", \"ObjectHandling.c\"))\n        super(MatMultNode, self).generate_evaluation_code(code)\nclass DivNode(NumBinopNode):\n    #  '/' or '//' operator.\n    cdivision = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DivNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DivNode(NumBinopNode):\n    #  '/' or '//' operator.\n    cdivision = None\n    truedivision = None   # == \"unknown\" if operator == '/'\n    ctruedivision = False\n    cdivision_warnings = False\n    zerodivision_check = None\n    def find_compile_time_binary_operator(self, op1, op2):\n        func = compile_time_binary_operators[self.operator]\n        if self.operator == '/' and self.truedivision is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ModNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ModNode(DivNode):\n    #  '%' operator.\n    def is_py_operation_types(self, type1, type2):\n        return (type1.is_string\n                or type2.is_string\n                or NumBinopNode.is_py_operation_types(self, type1, type2))\n    def infer_builtin_types_operation(self, type1, type2):\n        # b'%s' % xyz  raises an exception in Py3<3.5, so it's safe to infer the type for Py2 and later Py3's.\n        if type1 is unicode_type:\n            # None + xyz  may be implemented by RHS",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PowNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PowNode(NumBinopNode):\n    #  '**' operator.\n    def analyse_c_operation(self, env):\n        NumBinopNode.analyse_c_operation(self, env)\n        if self.type.is_complex:\n            if self.type.real_type.is_float:\n                self.operand1 = self.operand1.coerce_to(self.type, env)\n                self.operand2 = self.operand2.coerce_to(self.type, env)\n                self.pow_func = self.type.binary_op('**')\n            else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "BoolBinopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class BoolBinopNode(ExprNode):\n    \"\"\"\n    Short-circuiting boolean operation.\n    Note that this node provides the same code generation method as\n    BoolBinopResultNode to simplify expression nesting.\n    operator  string                              \"and\"/\"or\"\n    operand1  BoolBinopNode/BoolBinopResultNode   left operand\n    operand2  BoolBinopNode/BoolBinopResultNode   right operand\n    \"\"\"\n    subexprs = ['operand1', 'operand2']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "BoolBinopResultNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class BoolBinopResultNode(ExprNode):\n    \"\"\"\n    Intermediate result of a short-circuiting and/or expression.\n    Tests the result for 'truthiness' and takes care of coercing the final result\n    of the overall expression to the target type.\n    Note that this node provides the same code generation method as\n    BoolBinopNode to simplify expression nesting.\n    arg     ExprNode    the argument to test\n    value   ExprNode    the coerced result value node\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CondExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CondExprNode(ExprNode):\n    #  Short-circuiting conditional expression.\n    #\n    #  test        ExprNode\n    #  true_val    ExprNode\n    #  false_val   ExprNode\n    true_val = None\n    false_val = None\n    is_temp = True\n    subexprs = ['test', 'true_val', 'false_val']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CmpNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CmpNode(object):\n    #  Mixin class containing code common to PrimaryCmpNodes\n    #  and CascadedCmpNodes.\n    special_bool_cmp_function = None\n    special_bool_cmp_utility_code = None\n    def infer_type(self, env):\n        # TODO: Actually implement this (after merging with -unstable).\n        return py_object_type\n    def calculate_cascaded_constant_result(self, operand1_result):\n        func = compile_time_binary_operators[self.operator]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PrimaryCmpNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PrimaryCmpNode(ExprNode, CmpNode):\n    #  Non-cascaded comparison or first comparison of\n    #  a cascaded sequence.\n    #\n    #  operator      string\n    #  operand1      ExprNode\n    #  operand2      ExprNode\n    #  cascade       CascadedCmpNode\n    #  We don't use the subexprs mechanism, because\n    #  things here are too complicated for it to handle.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CascadedCmpNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CascadedCmpNode(Node, CmpNode):\n    #  A CascadedCmpNode is not a complete expression node. It\n    #  hangs off the side of another comparison node, shares\n    #  its left operand with that node, and shares its result\n    #  with the PrimaryCmpNode at the head of the chain.\n    #\n    #  operator      string\n    #  operand2      ExprNode\n    #  cascade       CascadedCmpNode\n    child_attrs = ['operand2', 'coerced_operand2', 'cascade']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoercionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoercionNode(ExprNode):\n    #  Abstract base class for coercion nodes.\n    #\n    #  arg       ExprNode       node being coerced\n    subexprs = ['arg']\n    constant_result = not_a_constant\n    def __init__(self, arg):\n        super(CoercionNode, self).__init__(arg.pos)\n        self.arg = arg\n        if debug_coercion:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoerceToMemViewSliceNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoerceToMemViewSliceNode(CoercionNode):\n    \"\"\"\n    Coerce an object to a memoryview slice. This holds a new reference in\n    a managed temp.\n    \"\"\"\n    def __init__(self, arg, dst_type, env):\n        assert dst_type.is_memoryviewslice\n        assert not arg.type.is_memoryviewslice\n        CoercionNode.__init__(self, arg)\n        self.type = dst_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CastNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CastNode(CoercionNode):\n    #  Wrap a node in a C type cast.\n    def __init__(self, arg, new_type):\n        CoercionNode.__init__(self, arg)\n        self.type = new_type\n    def may_be_none(self):\n        return self.arg.may_be_none()\n    def calculate_result_code(self):\n        return self.arg.result_as(self.type)\n    def generate_result_code(self, code):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "PyTypeTestNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class PyTypeTestNode(CoercionNode):\n    #  This node is used to check that a generic Python\n    #  object is an instance of a particular extension type.\n    #  This node borrows the result of its argument node.\n    exact_builtin_type = True\n    def __init__(self, arg, dst_type, env, notnone=False):\n        #  The arg is know to be a Python object, and\n        #  the dst_type is known to be an extension type.\n        assert dst_type.is_extension_type or dst_type.is_builtin_type, \"PyTypeTest on non extension type\"\n        CoercionNode.__init__(self, arg)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "NoneCheckNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class NoneCheckNode(CoercionNode):\n    # This node is used to check that a Python object is not None and\n    # raises an appropriate exception (as specified by the creating\n    # transform).\n    is_nonecheck = True\n    def __init__(self, arg, exception_type_cname, exception_message,\n                 exception_format_args=()):\n        CoercionNode.__init__(self, arg)\n        self.type = arg.type\n        self.result_ctype = arg.ctype()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoerceToPyTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoerceToPyTypeNode(CoercionNode):\n    #  This node is used to convert a C data type\n    #  to a Python object.\n    type = py_object_type\n    target_type = py_object_type\n    is_temp = 1\n    def __init__(self, arg, env, type=py_object_type):\n        if not arg.type.create_to_py_utility_code(env):\n            error(arg.pos, \"Cannot convert '%s' to Python object\" % arg.type)\n        elif arg.type.is_complex:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoerceIntToBytesNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoerceIntToBytesNode(CoerceToPyTypeNode):\n    #  This node is used to convert a C int type to a Python bytes\n    #  object.\n    is_temp = 1\n    def __init__(self, arg, env):\n        arg = arg.coerce_to_simple(env)\n        CoercionNode.__init__(self, arg)\n        self.type = Builtin.bytes_type\n    def generate_result_code(self, code):\n        arg = self.arg",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoerceFromPyTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoerceFromPyTypeNode(CoercionNode):\n    #  This node is used to convert a Python object\n    #  to a C data type.\n    def __init__(self, result_type, arg, env):\n        CoercionNode.__init__(self, arg)\n        self.type = result_type\n        self.is_temp = 1\n        if not result_type.create_from_py_utility_code(env):\n            error(arg.pos,\n                  \"Cannot convert Python object to '%s'\" % result_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoerceToBooleanNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoerceToBooleanNode(CoercionNode):\n    #  This node is used when a result needs to be used\n    #  in a boolean context.\n    type = PyrexTypes.c_bint_type\n    _special_builtins = {\n        Builtin.list_type:       'PyList_GET_SIZE',\n        Builtin.tuple_type:      'PyTuple_GET_SIZE',\n        Builtin.set_type:        'PySet_GET_SIZE',\n        Builtin.frozenset_type:  'PySet_GET_SIZE',\n        Builtin.bytes_type:      'PyBytes_GET_SIZE',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoerceToComplexNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoerceToComplexNode(CoercionNode):\n    def __init__(self, arg, dst_type, env):\n        if arg.type.is_complex:\n            arg = arg.coerce_to_simple(env)\n        self.type = dst_type\n        CoercionNode.__init__(self, arg)\n        dst_type.create_declaration_utility_code(env)\n    def calculate_result_code(self):\n        if self.arg.type.is_complex:\n            real_part = \"__Pyx_CREAL(%s)\" % self.arg.result()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CoerceToTempNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CoerceToTempNode(CoercionNode):\n    #  This node is used to force the result of another node\n    #  to be stored in a temporary. It is only used if the\n    #  argument node's result is not already in a temporary.\n    def __init__(self, arg, env):\n        CoercionNode.__init__(self, arg)\n        self.type = self.arg.type.as_argument_type()\n        self.constant_result = self.arg.constant_result\n        self.is_temp = 1\n        if self.type.is_pyobject:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ProxyNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ProxyNode(CoercionNode):\n    \"\"\"\n    A node that should not be replaced by transforms or other means,\n    and hence can be useful to wrap the argument to a clone node\n    MyNode    -> ProxyNode -> ArgNode\n    CloneNode -^\n    \"\"\"\n    nogil_check = None\n    def __init__(self, arg):\n        super(ProxyNode, self).__init__(arg)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CloneNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CloneNode(CoercionNode):\n    #  This node is employed when the result of another node needs\n    #  to be used multiple times. The argument node's result must\n    #  be in a temporary. This node \"borrows\" the result from the\n    #  argument node, and does not generate any evaluation or\n    #  disposal code for it. The original owner of the argument\n    #  node is responsible for doing those things.\n    subexprs = [] # Arg is not considered a subexpr\n    nogil_check = None\n    def __init__(self, arg):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "CMethodSelfCloneNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class CMethodSelfCloneNode(CloneNode):\n    # Special CloneNode for the self argument of builtin C methods\n    # that accepts subtypes of the builtin type.  This is safe only\n    # for 'final' subtypes, as subtypes of the declared type may\n    # override the C method.\n    def coerce_to(self, dst_type, env):\n        if dst_type.is_builtin_type and self.type.subtype_of(dst_type):\n            return self\n        return CloneNode.coerce_to(self, dst_type, env)\nclass ModuleRefNode(ExprNode):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ModuleRefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class ModuleRefNode(ExprNode):\n    # Simple returns the module object\n    type = py_object_type\n    is_temp = False\n    subexprs = []\n    def analyse_types(self, env):\n        return self\n    def may_be_none(self):\n        return False\n    def calculate_result_code(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "DocstringRefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "class DocstringRefNode(ExprNode):\n    # Extracts the docstring of the body element\n    subexprs = ['body']\n    type = py_object_type\n    is_temp = True\n    def __init__(self, pos, body):\n        ExprNode.__init__(self, pos)\n        assert body.type.is_pyobject\n        self.body = body\n    def analyse_types(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "find_coercion_error",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def find_coercion_error(type_tuple, default, env):\n    err = coercion_error_dict.get(type_tuple)\n    if err is None:\n        return default\n    elif (env.directives['c_string_encoding'] and\n              any(t in type_tuple for t in (PyrexTypes.c_char_ptr_type, PyrexTypes.c_uchar_ptr_type,\n                                            PyrexTypes.c_const_char_ptr_type, PyrexTypes.c_const_uchar_ptr_type))):\n        if type_tuple[1].is_pyobject:\n            return default\n        elif env.directives['c_string_encoding'] in ('ascii', 'default'):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "default_str_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def default_str_type(env):\n    return {\n        'bytes': bytes_type,\n        'bytearray': bytearray_type,\n        'str': str_type,\n        'unicode': unicode_type\n    }.get(env.directives['c_string_type'])\ndef check_negative_indices(*nodes):\n    \"\"\"\n    Raise a warning on nodes that are known to have negative numeric values.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "check_negative_indices",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def check_negative_indices(*nodes):\n    \"\"\"\n    Raise a warning on nodes that are known to have negative numeric values.\n    Used to find (potential) bugs inside of \"wraparound=False\" sections.\n    \"\"\"\n    for node in nodes:\n        if node is None or (\n                not isinstance(node.constant_result, _py_int_types) and\n                not isinstance(node.constant_result, float)):\n            continue",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "infer_sequence_item_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def infer_sequence_item_type(env, seq_node, index_node=None, seq_type=None):\n    if not seq_node.is_sequence_constructor:\n        if seq_type is None:\n            seq_type = seq_node.infer_type(env)\n        if seq_type is tuple_type:\n            # tuples are immutable => we can safely follow assignments\n            if seq_node.cf_state and len(seq_node.cf_state) == 1:\n                try:\n                    seq_node = seq_node.cf_state[0].rhs\n                except AttributeError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "make_dedup_key",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def make_dedup_key(outer_type, item_nodes):\n    \"\"\"\n    Recursively generate a deduplication key from a sequence of values.\n    Includes Cython node types to work around the fact that (1, 2.0) == (1.0, 2), for example.\n    @param outer_type: The type of the outer container.\n    @param item_nodes: A sequence of constant nodes that will be traversed recursively.\n    @return: A tuple that can be used as a dict key for deduplication.\n    \"\"\"\n    item_keys = [\n        (py_object_type, None, type(None)) if node is None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "get_exception_handler",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def get_exception_handler(exception_value):\n    if exception_value is None:\n        return \"__Pyx_CppExn2PyErr();\", False\n    elif (exception_value.type == PyrexTypes.c_char_type\n          and exception_value.value == '*'):\n        return \"__Pyx_CppExn2PyErr();\", True\n    elif exception_value.type.is_pyobject:\n        return (\n            'try { throw; } catch(const std::exception& exn) {'\n            'PyErr_SetString(%s, exn.what());'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "maybe_check_py_error",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def maybe_check_py_error(code, check_py_exception, pos, nogil):\n    if check_py_exception:\n        if nogil:\n            code.putln(code.error_goto_if(\"__Pyx_ErrOccurredWithGIL()\", pos))\n        else:\n            code.putln(code.error_goto_if(\"PyErr_Occurred()\", pos))\ndef translate_cpp_exception(code, pos, inside, py_result, exception_value, nogil):\n    raise_py_exception, check_py_exception = get_exception_handler(exception_value)\n    code.putln(\"try {\")\n    code.putln(\"%s\" % inside)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "translate_cpp_exception",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def translate_cpp_exception(code, pos, inside, py_result, exception_value, nogil):\n    raise_py_exception, check_py_exception = get_exception_handler(exception_value)\n    code.putln(\"try {\")\n    code.putln(\"%s\" % inside)\n    if py_result:\n      code.putln(code.error_goto_if_null(py_result, pos))\n    maybe_check_py_error(code, check_py_exception, pos, nogil)\n    code.putln(\"} catch(...) {\")\n    if nogil:\n        code.put_ensure_gil(declare_gilstate=True)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "translate_double_cpp_exception",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def translate_double_cpp_exception(code, pos, lhs_type, lhs_code, rhs_code,\n    lhs_exc_val, assign_exc_val, nogil):\n    handle_lhs_exc, lhc_check_py_exc = get_exception_handler(lhs_exc_val)\n    handle_assignment_exc, assignment_check_py_exc = get_exception_handler(assign_exc_val)\n    code.putln(\"try {\")\n    code.putln(lhs_type.declaration_code(\"__pyx_local_lvalue = %s;\" % lhs_code))\n    maybe_check_py_error(code, lhc_check_py_exc, pos, nogil)\n    code.putln(\"try {\")\n    code.putln(\"__pyx_local_lvalue = %s;\" % rhs_code)\n    maybe_check_py_error(code, assignment_check_py_exc, pos, nogil)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "LocalsExprNode",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def LocalsExprNode(pos, scope_node, env):\n    if env.is_module_scope:\n        return GlobalsExprNode(pos)\n    if env.is_py_class_scope:\n        return PyClassLocalsExprNode(pos, scope_node.dict)\n    return FuncLocalsExprNode(pos, env)\n#-------------------------------------------------------------------\n#\n#  Unary operator nodes\n#",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "inc_dec_constructor",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def inc_dec_constructor(is_prefix, operator):\n    return lambda pos, **kwds: DecrementIncrementNode(pos, is_prefix=is_prefix, operator=operator, **kwds)\nclass AmpersandNode(CUnopNode):\n    #  The C address-of operator.\n    #\n    #  operand  ExprNode\n    operator = '&'\n    def infer_unop_type(self, env, operand_type):\n        return PyrexTypes.c_ptr_type(operand_type)\n    def analyse_types(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "unop_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def unop_node(pos, operator, operand):\n    # Construct unnop node of appropriate class for\n    # given operator.\n    if isinstance(operand, IntNode) and operator == '-':\n        return IntNode(pos = operand.pos, value = str(-Utils.str_to_number(operand.value)),\n                       longness=operand.longness, unsigned=operand.unsigned)\n    elif isinstance(operand, UnopNode) and operand.operator == operator in '+-':\n        warning(pos, \"Python has no increment/decrement operator: %s%sx == %s(%sx) == x\" % ((operator,)*4), 5)\n    return unop_node_classes[operator](pos,\n        operator = operator,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "get_compile_time_binop",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def get_compile_time_binop(node):\n    func = compile_time_binary_operators.get(node.operator)\n    if not func:\n        error(node.pos,\n            \"Binary '%s' not supported in compile-time expression\"\n                % node.operator)\n    return func\nclass BinopNode(ExprNode):\n    #  operator     string\n    #  operand1     ExprNode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "c_binop_constructor",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def c_binop_constructor(operator):\n    def make_binop_node(pos, **operands):\n        return CBinopNode(pos, operator=operator, **operands)\n    return make_binop_node\nclass NumBinopNode(BinopNode):\n    #  Binary operation taking numeric arguments.\n    infix = True\n    overflow_check = False\n    overflow_bit_node = None\n    def analyse_c_operation(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "binop_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "def binop_node(pos, operator, operand1, operand2, inplace=False, **kwargs):\n    # Construct binop node of appropriate class for\n    # given operator.\n    return binop_node_classes[operator](\n        pos,\n        operator=operator,\n        operand1=operand1,\n        operand2=operand2,\n        inplace=inplace,\n        **kwargs)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "not_a_constant",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "not_a_constant = NotConstant()\nconstant_value_not_set = object()\n# error messages when coercing from key[0] to key[1]\ncoercion_error_dict = {\n    # string related errors\n    (unicode_type, str_type): (\"Cannot convert Unicode string to 'str' implicitly.\"\n                               \" This is not portable and requires explicit encoding.\"),\n    (unicode_type, bytes_type): \"Cannot convert Unicode string to 'bytes' implicitly, encoding required.\",\n    (unicode_type, PyrexTypes.c_char_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",\n    (unicode_type, PyrexTypes.c_const_char_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "constant_value_not_set",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "constant_value_not_set = object()\n# error messages when coercing from key[0] to key[1]\ncoercion_error_dict = {\n    # string related errors\n    (unicode_type, str_type): (\"Cannot convert Unicode string to 'str' implicitly.\"\n                               \" This is not portable and requires explicit encoding.\"),\n    (unicode_type, bytes_type): \"Cannot convert Unicode string to 'bytes' implicitly, encoding required.\",\n    (unicode_type, PyrexTypes.c_char_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",\n    (unicode_type, PyrexTypes.c_const_char_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",\n    (unicode_type, PyrexTypes.c_uchar_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "coercion_error_dict",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "coercion_error_dict = {\n    # string related errors\n    (unicode_type, str_type): (\"Cannot convert Unicode string to 'str' implicitly.\"\n                               \" This is not portable and requires explicit encoding.\"),\n    (unicode_type, bytes_type): \"Cannot convert Unicode string to 'bytes' implicitly, encoding required.\",\n    (unicode_type, PyrexTypes.c_char_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",\n    (unicode_type, PyrexTypes.c_const_char_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",\n    (unicode_type, PyrexTypes.c_uchar_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",\n    (unicode_type, PyrexTypes.c_const_uchar_ptr_type): \"Unicode objects only support coercion to Py_UNICODE*.\",\n    (bytes_type, unicode_type): \"Cannot convert 'bytes' object to unicode implicitly, decoding required\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "compile_time_unary_operators",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "compile_time_unary_operators = {\n    'not': operator.not_,\n    '~': operator.inv,\n    '-': operator.neg,\n    '+': operator.pos,\n}\nclass UnopNode(ExprNode):\n    #  operator     string\n    #  operand      ExprNode\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "unop_node_classes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "unop_node_classes = {\n    \"+\":  UnaryPlusNode,\n    \"-\":  UnaryMinusNode,\n    \"~\":  TildeNode,\n}\ndef unop_node(pos, operator, operand):\n    # Construct unnop node of appropriate class for\n    # given operator.\n    if isinstance(operand, IntNode) and operator == '-':\n        return IntNode(pos = operand.pos, value = str(-Utils.str_to_number(operand.value)),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ERR_START",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "ERR_START = \"Start may not be given\"\nERR_NOT_STOP = \"Stop must be provided to indicate shape\"\nERR_STEPS = (\"Strides may only be given to indicate contiguity. \"\n             \"Consider slicing it after conversion\")\nERR_NOT_POINTER = \"Can only create cython.array from pointer or array\"\nERR_BASE_TYPE = \"Pointer base type does not match cython.array base type\"\nclass CythonArrayNode(ExprNode):\n    \"\"\"\n    Used when a pointer of base_type is cast to a memoryviewslice with that\n    base type. i.e.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ERR_NOT_STOP",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "ERR_NOT_STOP = \"Stop must be provided to indicate shape\"\nERR_STEPS = (\"Strides may only be given to indicate contiguity. \"\n             \"Consider slicing it after conversion\")\nERR_NOT_POINTER = \"Can only create cython.array from pointer or array\"\nERR_BASE_TYPE = \"Pointer base type does not match cython.array base type\"\nclass CythonArrayNode(ExprNode):\n    \"\"\"\n    Used when a pointer of base_type is cast to a memoryviewslice with that\n    base type. i.e.\n        <int[:M:1, :N]> p",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ERR_STEPS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "ERR_STEPS = (\"Strides may only be given to indicate contiguity. \"\n             \"Consider slicing it after conversion\")\nERR_NOT_POINTER = \"Can only create cython.array from pointer or array\"\nERR_BASE_TYPE = \"Pointer base type does not match cython.array base type\"\nclass CythonArrayNode(ExprNode):\n    \"\"\"\n    Used when a pointer of base_type is cast to a memoryviewslice with that\n    base type. i.e.\n        <int[:M:1, :N]> p\n    creates a fortran-contiguous cython.array.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ERR_NOT_POINTER",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "ERR_NOT_POINTER = \"Can only create cython.array from pointer or array\"\nERR_BASE_TYPE = \"Pointer base type does not match cython.array base type\"\nclass CythonArrayNode(ExprNode):\n    \"\"\"\n    Used when a pointer of base_type is cast to a memoryviewslice with that\n    base type. i.e.\n        <int[:M:1, :N]> p\n    creates a fortran-contiguous cython.array.\n    We leave the type set to object so coercions to object are more efficient\n    and less work. Acquiring a memoryviewslice from this will be just as",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "ERR_BASE_TYPE",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "ERR_BASE_TYPE = \"Pointer base type does not match cython.array base type\"\nclass CythonArrayNode(ExprNode):\n    \"\"\"\n    Used when a pointer of base_type is cast to a memoryviewslice with that\n    base type. i.e.\n        <int[:M:1, :N]> p\n    creates a fortran-contiguous cython.array.\n    We leave the type set to object so coercions to object are more efficient\n    and less work. Acquiring a memoryviewslice from this will be just as\n    efficient. ExprNode.coerce_to() will do the additional typecheck on",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "compile_time_binary_operators",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "compile_time_binary_operators = {\n    '<': operator.lt,\n    '<=': operator.le,\n    '==': operator.eq,\n    '!=': operator.ne,\n    '>=': operator.ge,\n    '>': operator.gt,\n    'is': operator.is_,\n    'is_not': operator.is_not,\n    '+': operator.add,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "_find_formatting_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "_find_formatting_types = re.compile(\n    br\"%\"\n    br\"(?:%|\"  # %%\n    br\"(?:\\([^)]+\\))?\"  # %(name)\n    br\"[-+#,0-9 ]*([a-z])\"  # %.2f  etc.\n    br\")\").findall\n# These format conversion types can never trigger a Unicode string conversion in Py2.\n_safe_bytes_formats = set([\n    # Excludes 's' and 'r', which can generate non-bytes strings.\n    b'd', b'i', b'o', b'u', b'x', b'X', b'e', b'E', b'f', b'F', b'g', b'G', b'c', b'b', b'a',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "_safe_bytes_formats",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "_safe_bytes_formats = set([\n    # Excludes 's' and 'r', which can generate non-bytes strings.\n    b'd', b'i', b'o', b'u', b'x', b'X', b'e', b'E', b'f', b'F', b'g', b'G', b'c', b'b', b'a',\n])\nclass ModNode(DivNode):\n    #  '%' operator.\n    def is_py_operation_types(self, type1, type2):\n        return (type1.is_string\n                or type2.is_string\n                or NumBinopNode.is_py_operation_types(self, type1, type2))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "richcmp_constants",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "richcmp_constants = {\n    \"<\" : \"Py_LT\",\n    \"<=\": \"Py_LE\",\n    \"==\": \"Py_EQ\",\n    \"!=\": \"Py_NE\",\n    \"<>\": \"Py_NE\",\n    \">\" : \"Py_GT\",\n    \">=\": \"Py_GE\",\n    # the following are faked by special compare functions\n    \"in\"    : \"Py_EQ\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "binop_node_classes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "binop_node_classes = {\n    \"or\":       BoolBinopNode,\n    \"and\":      BoolBinopNode,\n    \"|\":        IntBinopNode,\n    \"^\":        IntBinopNode,\n    \"&\":        IntBinopNode,\n    \"<<\":       IntBinopNode,\n    \">>\":       IntBinopNode,\n    \"+\":        AddNode,\n    \"-\":        SubNode,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "proto",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "proto = \"\"\"\nstatic CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void); /* proto */\n\"\"\",\nimpl = \"\"\"\nstatic CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {\n  int err;\n  #ifdef WITH_THREAD\n  PyGILState_STATE _save = PyGILState_Ensure();\n  #endif\n  err = !!PyErr_Occurred();",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "impl",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "impl = \"\"\"\nstatic CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {\n  int err;\n  #ifdef WITH_THREAD\n  PyGILState_STATE _save = PyGILState_Ensure();\n  #endif\n  err = !!PyErr_Occurred();\n  #ifdef WITH_THREAD\n  PyGILState_Release(_save);\n  #endif",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "raise_unbound_local_error_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "raise_unbound_local_error_utility_code = UtilityCode(\nproto = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);\n\"\"\",\nimpl = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {\n    PyErr_Format(PyExc_UnboundLocalError, \"local variable '%s' referenced before assignment\", varname);\n}\n\"\"\")\nraise_closure_name_error_utility_code = UtilityCode(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "proto",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "proto = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);\n\"\"\",\nimpl = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {\n    PyErr_Format(PyExc_UnboundLocalError, \"local variable '%s' referenced before assignment\", varname);\n}\n\"\"\")\nraise_closure_name_error_utility_code = UtilityCode(\nproto = \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "impl",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "impl = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {\n    PyErr_Format(PyExc_UnboundLocalError, \"local variable '%s' referenced before assignment\", varname);\n}\n\"\"\")\nraise_closure_name_error_utility_code = UtilityCode(\nproto = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);\n\"\"\",\nimpl = \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "raise_closure_name_error_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "raise_closure_name_error_utility_code = UtilityCode(\nproto = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);\n\"\"\",\nimpl = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {\n    PyErr_Format(PyExc_NameError, \"free variable '%s' referenced before assignment in enclosing scope\", varname);\n}\n\"\"\")\n# Don't inline the function, it should really never be called in production",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "proto",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "proto = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);\n\"\"\",\nimpl = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {\n    PyErr_Format(PyExc_NameError, \"free variable '%s' referenced before assignment in enclosing scope\", varname);\n}\n\"\"\")\n# Don't inline the function, it should really never be called in production\nraise_unbound_memoryview_utility_code_nogil = UtilityCode(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "impl",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "impl = \"\"\"\nstatic CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {\n    PyErr_Format(PyExc_NameError, \"free variable '%s' referenced before assignment in enclosing scope\", varname);\n}\n\"\"\")\n# Don't inline the function, it should really never be called in production\nraise_unbound_memoryview_utility_code_nogil = UtilityCode(\nproto = \"\"\"\nstatic void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname);\n\"\"\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "raise_unbound_memoryview_utility_code_nogil",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "raise_unbound_memoryview_utility_code_nogil = UtilityCode(\nproto = \"\"\"\nstatic void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname);\n\"\"\",\nimpl = \"\"\"\nstatic void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname) {\n    #ifdef WITH_THREAD\n    PyGILState_STATE gilstate = PyGILState_Ensure();\n    #endif\n    __Pyx_RaiseUnboundLocalError(varname);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "proto",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "proto = \"\"\"\nstatic void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname);\n\"\"\",\nimpl = \"\"\"\nstatic void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname) {\n    #ifdef WITH_THREAD\n    PyGILState_STATE gilstate = PyGILState_Ensure();\n    #endif\n    __Pyx_RaiseUnboundLocalError(varname);\n    #ifdef WITH_THREAD",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "impl",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "impl = \"\"\"\nstatic void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname) {\n    #ifdef WITH_THREAD\n    PyGILState_STATE gilstate = PyGILState_Ensure();\n    #endif\n    __Pyx_RaiseUnboundLocalError(varname);\n    #ifdef WITH_THREAD\n    PyGILState_Release(gilstate);\n    #endif\n}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "requires",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "requires = [raise_unbound_local_error_utility_code])\n#------------------------------------------------------------------------------------\nraise_too_many_values_to_unpack = UtilityCode.load_cached(\"RaiseTooManyValuesToUnpack\", \"ObjectHandling.c\")\nraise_need_more_values_to_unpack = UtilityCode.load_cached(\"RaiseNeedMoreValuesToUnpack\", \"ObjectHandling.c\")\ntuple_unpacking_error_code = UtilityCode.load_cached(\"UnpackTupleError\", \"ObjectHandling.c\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "raise_too_many_values_to_unpack",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "raise_too_many_values_to_unpack = UtilityCode.load_cached(\"RaiseTooManyValuesToUnpack\", \"ObjectHandling.c\")\nraise_need_more_values_to_unpack = UtilityCode.load_cached(\"RaiseNeedMoreValuesToUnpack\", \"ObjectHandling.c\")\ntuple_unpacking_error_code = UtilityCode.load_cached(\"UnpackTupleError\", \"ObjectHandling.c\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "raise_need_more_values_to_unpack",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "raise_need_more_values_to_unpack = UtilityCode.load_cached(\"RaiseNeedMoreValuesToUnpack\", \"ObjectHandling.c\")\ntuple_unpacking_error_code = UtilityCode.load_cached(\"UnpackTupleError\", \"ObjectHandling.c\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "tuple_unpacking_error_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "peekOfCode": "tuple_unpacking_error_code = UtilityCode.load_cached(\"UnpackTupleError\", \"ObjectHandling.c\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ExprNodes",
        "documentation": {}
    },
    {
        "label": "TypedExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class TypedExprNode(ExprNodes.ExprNode):\n    # Used for declaring assignments of a specified type without a known entry.\n    def __init__(self, type, may_be_none=None, pos=None):\n        super(TypedExprNode, self).__init__(pos)\n        self.type = type\n        self._may_be_none = may_be_none\n    def may_be_none(self):\n        return self._may_be_none != False\nobject_expr = TypedExprNode(py_object_type, may_be_none=True)\n# Fake rhs to silence \"unused variable\" warning",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "ControlBlock",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class ControlBlock(object):\n    \"\"\"Control flow graph node. Sequence of assignments and name references.\n       children  set of children nodes\n       parents   set of parent nodes\n       positions set of position markers\n       stats     list of block statements\n       gen       dict of assignments generated by this block\n       bounded   set  of entries that are definitely bounded in this block\n       Example:\n        a = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "ExitBlock",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class ExitBlock(ControlBlock):\n    \"\"\"Non-empty exit point block.\"\"\"\n    def empty(self):\n        return False\nclass AssignmentList(object):\n    def __init__(self):\n        self.stats = []\nclass ControlFlow(object):\n    \"\"\"Control-flow graph.\n       entry_point ControlBlock entry point for this graph",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "AssignmentList",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class AssignmentList(object):\n    def __init__(self):\n        self.stats = []\nclass ControlFlow(object):\n    \"\"\"Control-flow graph.\n       entry_point ControlBlock entry point for this graph\n       exit_point  ControlBlock normal exit point\n       block       ControlBlock current block\n       blocks      set    children nodes\n       entries     set    tracked entries",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "ControlFlow",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class ControlFlow(object):\n    \"\"\"Control-flow graph.\n       entry_point ControlBlock entry point for this graph\n       exit_point  ControlBlock normal exit point\n       block       ControlBlock current block\n       blocks      set    children nodes\n       entries     set    tracked entries\n       loops       list   stack for loop descriptors\n       exceptions  list   stack for exception descriptors\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "LoopDescr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class LoopDescr(object):\n    def __init__(self, next_block, loop_block):\n        self.next_block = next_block\n        self.loop_block = loop_block\n        self.exceptions = []\nclass ExceptionDescr(object):\n    \"\"\"Exception handling helper.\n    entry_point   ControlBlock Exception handling entry point\n    finally_enter ControlBlock Normal finally clause entry point\n    finally_exit  ControlBlock Normal finally clause exit point",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "ExceptionDescr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class ExceptionDescr(object):\n    \"\"\"Exception handling helper.\n    entry_point   ControlBlock Exception handling entry point\n    finally_enter ControlBlock Normal finally clause entry point\n    finally_exit  ControlBlock Normal finally clause exit point\n    \"\"\"\n    def __init__(self, entry_point, finally_enter=None, finally_exit=None):\n        self.entry_point = entry_point\n        self.finally_enter = finally_enter\n        self.finally_exit = finally_exit",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "NameAssignment",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class NameAssignment(object):\n    def __init__(self, lhs, rhs, entry):\n        if lhs.cf_state is None:\n            lhs.cf_state = set()\n        self.lhs = lhs\n        self.rhs = rhs\n        self.entry = entry\n        self.pos = lhs.pos\n        self.refs = set()\n        self.is_arg = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "StaticAssignment",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class StaticAssignment(NameAssignment):\n    \"\"\"Initialised at declaration time, e.g. stack allocation.\"\"\"\n    def __init__(self, entry):\n        if not entry.type.is_pyobject:\n            may_be_none = False\n        else:\n            may_be_none = None  # unknown\n        lhs = TypedExprNode(\n            entry.type, may_be_none=may_be_none, pos=entry.pos)\n        super(StaticAssignment, self).__init__(lhs, lhs, entry)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "Argument",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class Argument(NameAssignment):\n    def __init__(self, lhs, rhs, entry):\n        NameAssignment.__init__(self, lhs, rhs, entry)\n        self.is_arg = True\nclass NameDeletion(NameAssignment):\n    def __init__(self, lhs, entry):\n        NameAssignment.__init__(self, lhs, lhs, entry)\n        self.is_deletion = True\n    def infer_type(self):\n        inferred_type = self.rhs.infer_type(self.entry.scope)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "NameDeletion",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class NameDeletion(NameAssignment):\n    def __init__(self, lhs, entry):\n        NameAssignment.__init__(self, lhs, lhs, entry)\n        self.is_deletion = True\n    def infer_type(self):\n        inferred_type = self.rhs.infer_type(self.entry.scope)\n        if (not inferred_type.is_pyobject and\n            inferred_type.can_coerce_to_pyobject(self.entry.scope)):\n            return py_object_type\n        self.inferred_type = inferred_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "Uninitialized",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class Uninitialized(object):\n    \"\"\"Definitely not initialised yet.\"\"\"\nclass Unknown(object):\n    \"\"\"Coming from outer closure, might be initialised or not.\"\"\"\nclass NameReference(object):\n    def __init__(self, node, entry):\n        if node.cf_state is None:\n            node.cf_state = set()\n        self.node = node\n        self.entry = entry",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "Unknown",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class Unknown(object):\n    \"\"\"Coming from outer closure, might be initialised or not.\"\"\"\nclass NameReference(object):\n    def __init__(self, node, entry):\n        if node.cf_state is None:\n            node.cf_state = set()\n        self.node = node\n        self.entry = entry\n        self.pos = node.pos\n    def __repr__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "NameReference",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class NameReference(object):\n    def __init__(self, node, entry):\n        if node.cf_state is None:\n            node.cf_state = set()\n        self.node = node\n        self.entry = entry\n        self.pos = node.pos\n    def __repr__(self):\n        return '%s(entry=%r)' % (self.__class__.__name__, self.entry)\nclass ControlFlowState(list):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "ControlFlowState",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class ControlFlowState(list):\n    # Keeps track of Node's entry assignments\n    #\n    # cf_is_null        [boolean] It is uninitialized\n    # cf_maybe_null     [boolean] May be uninitialized\n    # is_single         [boolean] Has only one assignment at this point\n    cf_maybe_null = False\n    cf_is_null = False\n    is_single = False\n    def __init__(self, state):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "GVContext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class GVContext(object):\n    \"\"\"Graphviz subgraph object.\"\"\"\n    def __init__(self):\n        self.blockids = {}\n        self.nextid = 0\n        self.children = []\n        self.sources = {}\n    def add(self, child):\n        self.children.append(child)\n    def nodeid(self, block):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "GV",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class GV(object):\n    \"\"\"Graphviz DOT renderer.\"\"\"\n    def __init__(self, name, flow):\n        self.name = name\n        self.flow = flow\n    def render(self, fp, ctx, annotate_defs=False):\n        fp.write(' subgraph %s {\\n' % self.name)\n        for block in self.flow.blocks:\n            label = ctx.extract_sources(block)\n            if annotate_defs:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "MessageCollection",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class MessageCollection(object):\n    \"\"\"Collect error/warnings messages first then sort\"\"\"\n    def __init__(self):\n        self.messages = set()\n    def error(self, pos, message):\n        self.messages.add((pos, True, message))\n    def warning(self, pos, message):\n        self.messages.add((pos, False, message))\n    def report(self):\n        for pos, is_error, message in sorted(self.messages):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "AssignmentCollector",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class AssignmentCollector(TreeVisitor):\n    def __init__(self):\n        super(AssignmentCollector, self).__init__()\n        self.assignments = []\n    def visit_Node(self):\n        self._visitchildren(self, None)\n    def visit_SingleAssignmentNode(self, node):\n        self.assignments.append((node.lhs, node.rhs))\n    def visit_CascadedAssignmentNode(self, node):\n        for lhs in node.lhs_list:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "ControlFlowAnalysis",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "class ControlFlowAnalysis(CythonTransform):\n    def visit_ModuleNode(self, node):\n        self.gv_ctx = GVContext()\n        self.constant_folder = ConstantFolding()\n        # Set of NameNode reductions\n        self.reductions = set()\n        self.in_inplace_assignment = False\n        self.env_stack = []\n        self.env = node.scope\n        self.stack = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "check_definitions",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "def check_definitions(flow, compiler_directives):\n    flow.initialize()\n    flow.reaching_definitions()\n    # Track down state\n    assignments = set()\n    # Node to entry map\n    references = {}\n    assmt_nodes = set()\n    for block in flow.blocks:\n        i_state = block.i_input",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "object_expr",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "object_expr = TypedExprNode(py_object_type, may_be_none=True)\n# Fake rhs to silence \"unused variable\" warning\nfake_rhs_expr = TypedExprNode(unspecified_type)\nclass ControlBlock(object):\n    \"\"\"Control flow graph node. Sequence of assignments and name references.\n       children  set of children nodes\n       parents   set of parent nodes\n       positions set of position markers\n       stats     list of block statements\n       gen       dict of assignments generated by this block",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "fake_rhs_expr",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "peekOfCode": "fake_rhs_expr = TypedExprNode(unspecified_type)\nclass ControlBlock(object):\n    \"\"\"Control flow graph node. Sequence of assignments and name references.\n       children  set of children nodes\n       parents   set of parent nodes\n       positions set of position markers\n       stats     list of block statements\n       gen       dict of assignments generated by this block\n       bounded   set  of entries that are definitely bounded in this block\n       Example:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FlowControl",
        "documentation": {}
    },
    {
        "label": "FusedCFuncDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FusedNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FusedNode",
        "peekOfCode": "class FusedCFuncDefNode(StatListNode):\n    \"\"\"\n    This node replaces a function with fused arguments. It deep-copies the\n    function for every permutation of fused types, and allocates a new local\n    scope for it. It keeps track of the original function in self.node, and\n    the entry of the original function in the symbol table is given the\n    'fused_cfunction' attribute which points back to us.\n    Then when a function lookup occurs (to e.g. call it), the call can be\n    dispatched to the right function.\n    node    FuncDefNode    the original function",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.FusedNode",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "peekOfCode": "unicode_literals = _get_feature(\"unicode_literals\")\nwith_statement = _get_feature(\"with_statement\")  # dummy\ndivision = _get_feature(\"division\")\nprint_function = _get_feature(\"print_function\")\nabsolute_import = _get_feature(\"absolute_import\")\nnested_scopes = _get_feature(\"nested_scopes\")  # dummy\ngenerators = _get_feature(\"generators\")  # dummy\ngenerator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "with_statement",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "peekOfCode": "with_statement = _get_feature(\"with_statement\")  # dummy\ndivision = _get_feature(\"division\")\nprint_function = _get_feature(\"print_function\")\nabsolute_import = _get_feature(\"absolute_import\")\nnested_scopes = _get_feature(\"nested_scopes\")  # dummy\ngenerators = _get_feature(\"generators\")  # dummy\ngenerator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "division",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "peekOfCode": "division = _get_feature(\"division\")\nprint_function = _get_feature(\"print_function\")\nabsolute_import = _get_feature(\"absolute_import\")\nnested_scopes = _get_feature(\"nested_scopes\")  # dummy\ngenerators = _get_feature(\"generators\")  # dummy\ngenerator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "print_function",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "peekOfCode": "print_function = _get_feature(\"print_function\")\nabsolute_import = _get_feature(\"absolute_import\")\nnested_scopes = _get_feature(\"nested_scopes\")  # dummy\ngenerators = _get_feature(\"generators\")  # dummy\ngenerator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "peekOfCode": "absolute_import = _get_feature(\"absolute_import\")\nnested_scopes = _get_feature(\"nested_scopes\")  # dummy\ngenerators = _get_feature(\"generators\")  # dummy\ngenerator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "nested_scopes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "peekOfCode": "nested_scopes = _get_feature(\"nested_scopes\")  # dummy\ngenerators = _get_feature(\"generators\")  # dummy\ngenerator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "generators",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "peekOfCode": "generators = _get_feature(\"generators\")  # dummy\ngenerator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "generator_stop",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "peekOfCode": "generator_stop = _get_feature(\"generator_stop\")\ndel _get_feature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Future",
        "documentation": {}
    },
    {
        "label": "EmptyScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Interpreter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Interpreter",
        "peekOfCode": "class EmptyScope(object):\n    def lookup(self, name):\n        return None\nempty_scope = EmptyScope()\ndef interpret_compiletime_options(optlist, optdict, type_env=None, type_args=()):\n    \"\"\"\n    Tries to interpret a list of compile time option nodes.\n    The result will be a tuple (optlist, optdict) but where\n    all expression nodes have been interpreted. The result is\n    in the form of tuples (value, pos).",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Interpreter",
        "documentation": {}
    },
    {
        "label": "interpret_compiletime_options",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Interpreter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Interpreter",
        "peekOfCode": "def interpret_compiletime_options(optlist, optdict, type_env=None, type_args=()):\n    \"\"\"\n    Tries to interpret a list of compile time option nodes.\n    The result will be a tuple (optlist, optdict) but where\n    all expression nodes have been interpreted. The result is\n    in the form of tuples (value, pos).\n    optlist is a list of nodes, while optdict is a DictNode (the\n    result optdict is a dict)\n    If type_env is set, all type nodes will be analysed and the resulting\n    type set. Otherwise only interpretateable ExprNodes",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Interpreter",
        "documentation": {}
    },
    {
        "label": "empty_scope",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Interpreter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Interpreter",
        "peekOfCode": "empty_scope = EmptyScope()\ndef interpret_compiletime_options(optlist, optdict, type_env=None, type_args=()):\n    \"\"\"\n    Tries to interpret a list of compile time option nodes.\n    The result will be a tuple (optlist, optdict) but where\n    all expression nodes have been interpreted. The result is\n    in the form of tuples (value, pos).\n    optlist is a list of nodes, while optdict is a DictNode (the\n    result optdict is a dict)\n    If type_env is set, all type nodes will be analysed and the resulting",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Interpreter",
        "documentation": {}
    },
    {
        "label": "make_lexicon",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "peekOfCode": "def make_lexicon():\n    from ..Plex import \\\n        Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \\\n        TEXT, IGNORE, State, Lexicon\n    from .Scanning import Method\n    letter = Any(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_\")\n    digit = Any(\"0123456789\")\n    bindigit = Any(\"01\")\n    octdigit = Any(\"01234567\")\n    hexdigit = Any(\"0123456789ABCDEFabcdef\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "documentation": {}
    },
    {
        "label": "raw_prefixes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "peekOfCode": "raw_prefixes = \"rR\"\nbytes_prefixes = \"bB\"\nstring_prefixes = \"fFuU\" + bytes_prefixes\nchar_prefixes = \"cC\"\nany_string_prefix = raw_prefixes + string_prefixes + char_prefixes\nIDENT = 'IDENT'\ndef make_lexicon():\n    from ..Plex import \\\n        Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \\\n        TEXT, IGNORE, State, Lexicon",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "documentation": {}
    },
    {
        "label": "bytes_prefixes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "peekOfCode": "bytes_prefixes = \"bB\"\nstring_prefixes = \"fFuU\" + bytes_prefixes\nchar_prefixes = \"cC\"\nany_string_prefix = raw_prefixes + string_prefixes + char_prefixes\nIDENT = 'IDENT'\ndef make_lexicon():\n    from ..Plex import \\\n        Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \\\n        TEXT, IGNORE, State, Lexicon\n    from .Scanning import Method",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "documentation": {}
    },
    {
        "label": "string_prefixes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "peekOfCode": "string_prefixes = \"fFuU\" + bytes_prefixes\nchar_prefixes = \"cC\"\nany_string_prefix = raw_prefixes + string_prefixes + char_prefixes\nIDENT = 'IDENT'\ndef make_lexicon():\n    from ..Plex import \\\n        Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \\\n        TEXT, IGNORE, State, Lexicon\n    from .Scanning import Method\n    letter = Any(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "documentation": {}
    },
    {
        "label": "char_prefixes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "peekOfCode": "char_prefixes = \"cC\"\nany_string_prefix = raw_prefixes + string_prefixes + char_prefixes\nIDENT = 'IDENT'\ndef make_lexicon():\n    from ..Plex import \\\n        Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \\\n        TEXT, IGNORE, State, Lexicon\n    from .Scanning import Method\n    letter = Any(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_\")\n    digit = Any(\"0123456789\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "documentation": {}
    },
    {
        "label": "any_string_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "peekOfCode": "any_string_prefix = raw_prefixes + string_prefixes + char_prefixes\nIDENT = 'IDENT'\ndef make_lexicon():\n    from ..Plex import \\\n        Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \\\n        TEXT, IGNORE, State, Lexicon\n    from .Scanning import Method\n    letter = Any(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_\")\n    digit = Any(\"0123456789\")\n    bindigit = Any(\"01\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "documentation": {}
    },
    {
        "label": "IDENT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "peekOfCode": "IDENT = 'IDENT'\ndef make_lexicon():\n    from ..Plex import \\\n        Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \\\n        TEXT, IGNORE, State, Lexicon\n    from .Scanning import Method\n    letter = Any(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_\")\n    digit = Any(\"0123456789\")\n    bindigit = Any(\"01\")\n    octdigit = Any(\"01234567\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Lexicon",
        "documentation": {}
    },
    {
        "label": "CompilationData",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "class CompilationData(object):\n    #  Bundles the information that is passed from transform to transform.\n    #  (For now, this is only)\n    #  While Context contains every pxd ever loaded, path information etc.,\n    #  this only contains the data related to a single compilation pass\n    #\n    #  pyx                   ModuleNode              Main code tree of this compilation.\n    #  pxds                  {string : ModuleNode}   Trees for the pxds used in the pyx.\n    #  codewriter            CCodeWriter             Where to output final code.\n    #  options               CompilationOptions",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "Context",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "class Context(object):\n    #  This class encapsulates the context needed for compiling\n    #  one or more Cython implementation files along with their\n    #  associated and imported declaration files. It includes\n    #  the root of the module import namespace and the list\n    #  of directories to search for include files.\n    #\n    #  modules               {string : ModuleScope}\n    #  include_directories   [string]\n    #  future_directives     [object]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "CompilationSource",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "class CompilationSource(object):\n    \"\"\"\n    Contains the data necessary to start up a compilation pipeline for\n    a single compilation unit.\n    \"\"\"\n    def __init__(self, source_desc, full_module_name, cwd):\n        self.source_desc = source_desc\n        self.full_module_name = full_module_name\n        self.cwd = cwd\nclass CompilationOptions(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "CompilationOptions",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "class CompilationOptions(object):\n    r\"\"\"\n    See default_options at the end of this module for a list of all possible\n    options and CmdLine.usage and CmdLine.parse_command_line() for their\n    meaning.\n    \"\"\"\n    def __init__(self, defaults=None, **kw):\n        self.include_path = []\n        if defaults:\n            if isinstance(defaults, CompilationOptions):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "CompilationResult",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "class CompilationResult(object):\n    \"\"\"\n    Results from the Cython compiler:\n    c_file           string or None   The generated C source file\n    h_file           string or None   The generated C header file\n    i_file           string or None   The generated .pxi file\n    api_file         string or None   The generated C API .h file\n    listing_file     string or None   File of error messages\n    object_file      string or None   Result of compiling the C file\n    extension_file   string or None   Result of linking the object file",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "CompilationResultSet",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "class CompilationResultSet(dict):\n    \"\"\"\n    Results from compiling multiple Pyrex source files. A mapping\n    from source file paths to CompilationResult instances. Also\n    has the following attributes:\n    num_errors   integer   Total number of compilation errors\n    \"\"\"\n    num_errors = 0\n    def add(self, source, result):\n        self[source] = result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "get_output_filename",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "def get_output_filename(source_filename, cwd, options):\n    if options.cplus:\n        c_suffix = \".cpp\"\n    else:\n        c_suffix = \".c\"\n    suggested_file_name = Utils.replace_suffix(source_filename, c_suffix)\n    if options.output_file:\n        out_path = os.path.join(cwd, options.output_file)\n        if os.path.isdir(out_path):\n            return os.path.join(out_path, os.path.basename(suggested_file_name))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "create_default_resultobj",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "def create_default_resultobj(compilation_source, options):\n    result = CompilationResult()\n    result.main_source_file = compilation_source.source_desc.filename\n    result.compilation_source = compilation_source\n    source_desc = compilation_source.source_desc\n    result.c_file = get_output_filename(source_desc.filename,\n                        compilation_source.cwd, options)\n    result.embedded_metadata = options.embedded_metadata\n    return result\ndef run_pipeline(source, options, full_module_name=None, context=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "run_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "def run_pipeline(source, options, full_module_name=None, context=None):\n    from . import Pipeline\n    source_ext = os.path.splitext(source)[1]\n    options.configure_language_defaults(source_ext[1:]) # py/pyx\n    if context is None:\n        context = options.create_context()\n    # Set up source object\n    cwd = os.getcwd()\n    abs_path = os.path.abspath(source)\n    full_module_name = full_module_name or context.extract_module_name(source, options)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "compile_single",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "def compile_single(source, options, full_module_name = None):\n    \"\"\"\n    compile_single(source, options, full_module_name)\n    Compile the given Pyrex implementation file and return a CompilationResult.\n    Always compiles a single file; does not perform timestamp checking or\n    recursion.\n    \"\"\"\n    return run_pipeline(source, options, full_module_name)\ndef compile_multiple(sources, options):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "compile_multiple",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "def compile_multiple(sources, options):\n    \"\"\"\n    compile_multiple(sources, options)\n    Compiles the given sequence of Pyrex implementation files and returns\n    a CompilationResultSet. Performs timestamp checking and/or recursion\n    if these are specified in the options.\n    \"\"\"\n    if options.module_name and len(sources) > 1:\n        raise RuntimeError('Full module name can only be set '\n                           'for single source compilation')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "compile",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "def compile(source, options = None, full_module_name = None, **kwds):\n    \"\"\"\n    compile(source [, options], [, <option> = <value>]...)\n    Compile one or more Pyrex implementation files, with optional timestamp\n    checking and recursing on dependencies.  The source argument may be a string\n    or a sequence of strings.  If it is a string and no recursion or timestamp\n    checking is requested, a CompilationResult is returned, otherwise a\n    CompilationResultSet is returned.\n    \"\"\"\n    options = CompilationOptions(defaults = options, **kwds)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "search_include_directories",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "def search_include_directories(dirs, qualified_name, suffix, pos, include=False):\n    \"\"\"\n    Search the list of include directories for the given file name.\n    If a source file position is given, first searches the directory\n    containing that file. Returns None if not found, but does not\n    report an error.\n    The 'include' option will disable package dereferencing.\n    \"\"\"\n    if pos:\n        file_desc = pos[0]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "setuptools_main",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "def setuptools_main():\n    return main(command_line = 1)\ndef main(command_line = 0):\n    args = sys.argv[1:]\n    any_failures = 0\n    if command_line:\n        from .CmdLine import parse_command_line\n        options, sources = parse_command_line(args)\n    else:\n        options = CompilationOptions(default_options)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "def main(command_line = 0):\n    args = sys.argv[1:]\n    any_failures = 0\n    if command_line:\n        from .CmdLine import parse_command_line\n        options, sources = parse_command_line(args)\n    else:\n        options = CompilationOptions(default_options)\n        sources = args\n    if options.show_version:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "version = Version.version  # legacy attribute - use \"Cython.__version__\" instead\nmodule_name_pattern = re.compile(r\"[A-Za-z_][A-Za-z0-9_]*(\\.[A-Za-z_][A-Za-z0-9_]*)*$\")\nverbose = 0\nstandard_include_path = os.path.abspath(os.path.join(os.path.dirname(__file__),\n                                        os.path.pardir, 'Includes'))\nclass CompilationData(object):\n    #  Bundles the information that is passed from transform to transform.\n    #  (For now, this is only)\n    #  While Context contains every pxd ever loaded, path information etc.,\n    #  this only contains the data related to a single compilation pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "module_name_pattern",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "module_name_pattern = re.compile(r\"[A-Za-z_][A-Za-z0-9_]*(\\.[A-Za-z_][A-Za-z0-9_]*)*$\")\nverbose = 0\nstandard_include_path = os.path.abspath(os.path.join(os.path.dirname(__file__),\n                                        os.path.pardir, 'Includes'))\nclass CompilationData(object):\n    #  Bundles the information that is passed from transform to transform.\n    #  (For now, this is only)\n    #  While Context contains every pxd ever loaded, path information etc.,\n    #  this only contains the data related to a single compilation pass\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "verbose = 0\nstandard_include_path = os.path.abspath(os.path.join(os.path.dirname(__file__),\n                                        os.path.pardir, 'Includes'))\nclass CompilationData(object):\n    #  Bundles the information that is passed from transform to transform.\n    #  (For now, this is only)\n    #  While Context contains every pxd ever loaded, path information etc.,\n    #  this only contains the data related to a single compilation pass\n    #\n    #  pyx                   ModuleNode              Main code tree of this compilation.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "standard_include_path",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "standard_include_path = os.path.abspath(os.path.join(os.path.dirname(__file__),\n                                        os.path.pardir, 'Includes'))\nclass CompilationData(object):\n    #  Bundles the information that is passed from transform to transform.\n    #  (For now, this is only)\n    #  While Context contains every pxd ever loaded, path information etc.,\n    #  this only contains the data related to a single compilation pass\n    #\n    #  pyx                   ModuleNode              Main code tree of this compilation.\n    #  pxds                  {string : ModuleNode}   Trees for the pxds used in the pyx.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "default_options",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "peekOfCode": "default_options = dict(\n    show_version = 0,\n    use_listing_file = 0,\n    errors_to_stderr = 1,\n    cplus = 0,\n    output_file = None,\n    annotate = None,\n    annotate_coverage_xml = None,\n    generate_pxi = 0,\n    capi_reexport_cincludes = 0,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Main",
        "documentation": {}
    },
    {
        "label": "MemoryViewSliceBufferEntry",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "class MemoryViewSliceBufferEntry(Buffer.BufferEntry):\n    \"\"\"\n    May be used during code generation time to be queried for\n    shape/strides/suboffsets attributes, or to perform indexing or slicing.\n    \"\"\"\n    def __init__(self, entry):\n        self.entry = entry\n        self.type = entry.type\n        self.cname = entry.cname\n        self.buf_ptr = \"%s.data\" % self.cname",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "SliceIter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "class SliceIter(object):\n    def __init__(self, slice_type, slice_result, ndim, code):\n        self.slice_type = slice_type\n        self.slice_result = slice_result\n        self.code = code\n        self.ndim = ndim\nclass ContigSliceIter(SliceIter):\n    def start_loops(self):\n        code = self.code\n        code.begin_block()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "ContigSliceIter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "class ContigSliceIter(SliceIter):\n    def start_loops(self):\n        code = self.code\n        code.begin_block()\n        type_decl = self.slice_type.dtype.empty_declaration_code()\n        total_size = ' * '.join(\"%s.shape[%d]\" % (self.slice_result, i)\n                                for i in range(self.ndim))\n        code.putln(\"Py_ssize_t __pyx_temp_extent = %s;\" % total_size)\n        code.putln(\"Py_ssize_t __pyx_temp_idx;\")\n        code.putln(\"%s *__pyx_temp_pointer = (%s *) %s.data;\" % (",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "StridedSliceIter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "class StridedSliceIter(SliceIter):\n    def start_loops(self):\n        code = self.code\n        code.begin_block()\n        for i in range(self.ndim):\n            t = i, self.slice_result, i\n            code.putln(\"Py_ssize_t __pyx_temp_extent_%d = %s.shape[%d];\" % t)\n            code.putln(\"Py_ssize_t __pyx_temp_stride_%d = %s.strides[%d];\" % t)\n            code.putln(\"char *__pyx_temp_pointer_%d;\" % i)\n            code.putln(\"Py_ssize_t __pyx_temp_idx_%d;\" % i)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "concat_flags",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)\nformat_flag = \"PyBUF_FORMAT\"\nmemview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_full_access = \"PyBUF_FULL_RO\"\n#memview_strided_access = \"PyBUF_STRIDED_RO\"\nmemview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "put_init_entry",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def put_init_entry(mv_cname, code):\n    code.putln(\"%s.data = NULL;\" % mv_cname)\n    code.putln(\"%s.memview = NULL;\" % mv_cname)\n#def axes_to_str(axes):\n#    return \"\".join([access[0].upper()+packing[0] for (access, packing) in axes])\ndef put_acquire_memoryviewslice(lhs_cname, lhs_type, lhs_pos, rhs, code,\n                                have_gil=False, first_assignment=True):\n    \"We can avoid decreffing the lhs if we know it is the first assignment\"\n    assert rhs.type.is_memoryviewslice\n    pretty_rhs = rhs.result_in_temp() or rhs.is_simple()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "put_acquire_memoryviewslice",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def put_acquire_memoryviewslice(lhs_cname, lhs_type, lhs_pos, rhs, code,\n                                have_gil=False, first_assignment=True):\n    \"We can avoid decreffing the lhs if we know it is the first assignment\"\n    assert rhs.type.is_memoryviewslice\n    pretty_rhs = rhs.result_in_temp() or rhs.is_simple()\n    if pretty_rhs:\n        rhstmp = rhs.result()\n    else:\n        rhstmp = code.funcstate.allocate_temp(lhs_type, manage_ref=False)\n        code.putln(\"%s = %s;\" % (rhstmp, rhs.result_as(lhs_type)))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "put_assign_to_memviewslice",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def put_assign_to_memviewslice(lhs_cname, rhs, rhs_cname, memviewslicetype, code,\n                               have_gil=False, first_assignment=False):\n    if not first_assignment:\n        code.put_xdecref_memoryviewslice(lhs_cname, have_gil=have_gil)\n    if not rhs.result_in_temp():\n        rhs.make_owned_memoryviewslice(code)\n    code.putln(\"%s = %s;\" % (lhs_cname, rhs_cname))\ndef get_buf_flags(specs):\n    is_c_contig, is_f_contig = is_cf_contig(specs)\n    if is_c_contig:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "get_buf_flags",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def get_buf_flags(specs):\n    is_c_contig, is_f_contig = is_cf_contig(specs)\n    if is_c_contig:\n        return memview_c_contiguous\n    elif is_f_contig:\n        return memview_f_contiguous\n    access, packing = zip(*specs)\n    if 'full' in access or 'ptr' in access:\n        return memview_full_access\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "insert_newaxes",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def insert_newaxes(memoryviewtype, n):\n    axes = [('direct', 'strided')] * n\n    axes.extend(memoryviewtype.axes)\n    return PyrexTypes.MemoryViewSliceType(memoryviewtype.dtype, axes)\ndef broadcast_types(src, dst):\n    n = abs(src.ndim - dst.ndim)\n    if src.ndim < dst.ndim:\n        return insert_newaxes(src, n), dst\n    else:\n        return src, insert_newaxes(dst, n)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "broadcast_types",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def broadcast_types(src, dst):\n    n = abs(src.ndim - dst.ndim)\n    if src.ndim < dst.ndim:\n        return insert_newaxes(src, n), dst\n    else:\n        return src, insert_newaxes(dst, n)\ndef valid_memslice_dtype(dtype, i=0):\n    \"\"\"\n    Return whether type dtype can be used as the base type of a\n    memoryview slice.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "valid_memslice_dtype",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def valid_memslice_dtype(dtype, i=0):\n    \"\"\"\n    Return whether type dtype can be used as the base type of a\n    memoryview slice.\n    We support structs, numeric types and objects\n    \"\"\"\n    if dtype.is_complex and dtype.real_type.is_int:\n        return False\n    if dtype is PyrexTypes.c_bint_type:\n        return False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "empty_slice",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def empty_slice(pos):\n    none = ExprNodes.NoneNode(pos)\n    return ExprNodes.SliceNode(pos, start=none,\n                               stop=none, step=none)\ndef unellipsify(indices, ndim):\n    result = []\n    seen_ellipsis = False\n    have_slices = False\n    newaxes = [newaxis for newaxis in indices if newaxis.is_none]\n    n_indices = len(indices) - len(newaxes)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "unellipsify",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def unellipsify(indices, ndim):\n    result = []\n    seen_ellipsis = False\n    have_slices = False\n    newaxes = [newaxis for newaxis in indices if newaxis.is_none]\n    n_indices = len(indices) - len(newaxes)\n    for index in indices:\n        if isinstance(index, ExprNodes.EllipsisNode):\n            have_slices = True\n            full_slice = empty_slice(index.pos)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "get_memoryview_flag",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def get_memoryview_flag(access, packing):\n    if access == 'full' and packing in ('strided', 'follow'):\n        return 'generic'\n    elif access == 'full' and packing == 'contig':\n        return 'generic_contiguous'\n    elif access == 'ptr' and packing in ('strided', 'follow'):\n        return 'indirect'\n    elif access == 'ptr' and packing == 'contig':\n        return 'indirect_contiguous'\n    elif access == 'direct' and packing in ('strided', 'follow'):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "get_is_contig_func_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def get_is_contig_func_name(contig_type, ndim):\n    assert contig_type in ('C', 'F')\n    return \"__pyx_memviewslice_is_contig_%s%d\" % (contig_type, ndim)\ndef get_is_contig_utility(contig_type, ndim):\n    assert contig_type in ('C', 'F')\n    C = dict(context, ndim=ndim, contig_type=contig_type)\n    utility = load_memview_c_utility(\"MemviewSliceCheckContig\", C, requires=[is_contig_utility])\n    return utility\ndef slice_iter(slice_type, slice_result, ndim, code):\n    if slice_type.is_c_contig or slice_type.is_f_contig:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "get_is_contig_utility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def get_is_contig_utility(contig_type, ndim):\n    assert contig_type in ('C', 'F')\n    C = dict(context, ndim=ndim, contig_type=contig_type)\n    utility = load_memview_c_utility(\"MemviewSliceCheckContig\", C, requires=[is_contig_utility])\n    return utility\ndef slice_iter(slice_type, slice_result, ndim, code):\n    if slice_type.is_c_contig or slice_type.is_f_contig:\n        return ContigSliceIter(slice_type, slice_result, ndim, code)\n    else:\n        return StridedSliceIter(slice_type, slice_result, ndim, code)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "slice_iter",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def slice_iter(slice_type, slice_result, ndim, code):\n    if slice_type.is_c_contig or slice_type.is_f_contig:\n        return ContigSliceIter(slice_type, slice_result, ndim, code)\n    else:\n        return StridedSliceIter(slice_type, slice_result, ndim, code)\nclass SliceIter(object):\n    def __init__(self, slice_type, slice_result, ndim, code):\n        self.slice_type = slice_type\n        self.slice_result = slice_result\n        self.code = code",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "copy_c_or_fortran_cname",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def copy_c_or_fortran_cname(memview):\n    if memview.is_c_contig:\n        c_or_f = 'c'\n    else:\n        c_or_f = 'f'\n    return \"__pyx_memoryview_copy_slice_%s_%s\" % (\n            memview.specialization_suffix(), c_or_f)\ndef get_copy_new_utility(pos, from_memview, to_memview):\n    if (from_memview.dtype != to_memview.dtype and\n            not (from_memview.dtype.is_const and from_memview.dtype.const_base_type == to_memview.dtype)):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "get_copy_new_utility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def get_copy_new_utility(pos, from_memview, to_memview):\n    if (from_memview.dtype != to_memview.dtype and\n            not (from_memview.dtype.is_const and from_memview.dtype.const_base_type == to_memview.dtype)):\n        error(pos, \"dtypes must be the same!\")\n        return\n    if len(from_memview.axes) != len(to_memview.axes):\n        error(pos, \"number of dimensions must be same\")\n        return\n    if not (to_memview.is_c_contig or to_memview.is_f_contig):\n        error(pos, \"to_memview must be c or f contiguous.\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "get_axes_specs",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def get_axes_specs(env, axes):\n    '''\n    get_axes_specs(env, axes) -> list of (access, packing) specs for each axis.\n    access is one of 'full', 'ptr' or 'direct'\n    packing is one of 'contig', 'strided' or 'follow'\n    '''\n    cythonscope = env.global_scope().context.cython_scope\n    cythonscope.load_cythonscope()\n    viewscope = cythonscope.viewscope\n    access_specs = tuple([viewscope.lookup(name)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "validate_axes",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def validate_axes(pos, axes):\n    if len(axes) >= Options.buffer_max_dims:\n        error(pos, \"More dimensions than the maximum number\"\n                   \" of buffer dimensions were used.\")\n        return False\n    return True\ndef is_cf_contig(specs):\n    is_c_contig = is_f_contig = False\n    if len(specs) == 1 and specs == [('direct', 'contig')]:\n        is_c_contig = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "is_cf_contig",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def is_cf_contig(specs):\n    is_c_contig = is_f_contig = False\n    if len(specs) == 1 and specs == [('direct', 'contig')]:\n        is_c_contig = True\n    elif (specs[-1] == ('direct','contig') and\n          all(axis == ('direct','follow') for axis in specs[:-1])):\n        # c_contiguous: 'follow', 'follow', ..., 'follow', 'contig'\n        is_c_contig = True\n    elif (len(specs) > 1 and\n        specs[0] == ('direct','contig') and",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "get_mode",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def get_mode(specs):\n    is_c_contig, is_f_contig = is_cf_contig(specs)\n    if is_c_contig:\n        return 'c'\n    elif is_f_contig:\n        return 'fortran'\n    for access, packing in specs:\n        if access in ('ptr', 'full'):\n            return 'full'\n    return 'strided'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "validate_axes_specs",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def validate_axes_specs(positions, specs, is_c_contig, is_f_contig):\n    packing_specs = ('contig', 'strided', 'follow')\n    access_specs = ('direct', 'ptr', 'full')\n    # is_c_contig, is_f_contig = is_cf_contig(specs)\n    has_contig = has_follow = has_strided = has_generic_contig = False\n    last_indirect_dimension = -1\n    for idx, (access, packing) in enumerate(specs):\n        if access == 'ptr':\n            last_indirect_dimension = idx\n    for idx, (pos, (access, packing)) in enumerate(zip(positions, specs)):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "load_memview_cy_utility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def load_memview_cy_utility(util_code_name, context=None, **kwargs):\n    return CythonUtilityCode.load(util_code_name, \"MemoryView.pyx\",\n                                  context=context, **kwargs)\ndef load_memview_c_utility(util_code_name, context=None, **kwargs):\n    if context is None:\n        return UtilityCode.load(util_code_name, \"MemoryView_C.c\", **kwargs)\n    else:\n        return TempitaUtilityCode.load(util_code_name, \"MemoryView_C.c\",\n                                       context=context, **kwargs)\ndef use_cython_array_utility_code(env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "load_memview_c_utility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def load_memview_c_utility(util_code_name, context=None, **kwargs):\n    if context is None:\n        return UtilityCode.load(util_code_name, \"MemoryView_C.c\", **kwargs)\n    else:\n        return TempitaUtilityCode.load(util_code_name, \"MemoryView_C.c\",\n                                       context=context, **kwargs)\ndef use_cython_array_utility_code(env):\n    cython_scope = env.global_scope().context.cython_scope\n    cython_scope.load_cythonscope()\n    cython_scope.viewscope.lookup('array_cwrapper').used = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "use_cython_array_utility_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "def use_cython_array_utility_code(env):\n    cython_scope = env.global_scope().context.cython_scope\n    cython_scope.load_cythonscope()\n    cython_scope.viewscope.lookup('array_cwrapper').used = True\ncontext = {\n    'memview_struct_name': memview_objstruct_cname,\n    'max_dims': Options.buffer_max_dims,\n    'memviewslice_name': memviewslice_cname,\n    'memslice_init': memslice_entry_init,\n}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "START_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "START_ERR = \"Start must not be given.\"\nSTOP_ERR = \"Axis specification only allowed in the 'step' slot.\"\nSTEP_ERR = \"Step must be omitted, 1, or a valid specifier.\"\nBOTH_CF_ERR = \"Cannot specify an array that is both C and Fortran contiguous.\"\nINVALID_ERR = \"Invalid axis specification.\"\nNOT_CIMPORTED_ERR = \"Variable was not cimported from cython.view\"\nEXPR_ERR = \"no expressions allowed in axis spec, only names and literals.\"\nCF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "STOP_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "STOP_ERR = \"Axis specification only allowed in the 'step' slot.\"\nSTEP_ERR = \"Step must be omitted, 1, or a valid specifier.\"\nBOTH_CF_ERR = \"Cannot specify an array that is both C and Fortran contiguous.\"\nINVALID_ERR = \"Invalid axis specification.\"\nNOT_CIMPORTED_ERR = \"Variable was not cimported from cython.view\"\nEXPR_ERR = \"no expressions allowed in axis spec, only names and literals.\"\nCF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "STEP_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "STEP_ERR = \"Step must be omitted, 1, or a valid specifier.\"\nBOTH_CF_ERR = \"Cannot specify an array that is both C and Fortran contiguous.\"\nINVALID_ERR = \"Invalid axis specification.\"\nNOT_CIMPORTED_ERR = \"Variable was not cimported from cython.view\"\nEXPR_ERR = \"no expressions allowed in axis spec, only names and literals.\"\nCF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "BOTH_CF_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "BOTH_CF_ERR = \"Cannot specify an array that is both C and Fortran contiguous.\"\nINVALID_ERR = \"Invalid axis specification.\"\nNOT_CIMPORTED_ERR = \"Variable was not cimported from cython.view\"\nEXPR_ERR = \"no expressions allowed in axis spec, only names and literals.\"\nCF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)\nformat_flag = \"PyBUF_FORMAT\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "INVALID_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "INVALID_ERR = \"Invalid axis specification.\"\nNOT_CIMPORTED_ERR = \"Variable was not cimported from cython.view\"\nEXPR_ERR = \"no expressions allowed in axis spec, only names and literals.\"\nCF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)\nformat_flag = \"PyBUF_FORMAT\"\nmemview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "NOT_CIMPORTED_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "NOT_CIMPORTED_ERR = \"Variable was not cimported from cython.view\"\nEXPR_ERR = \"no expressions allowed in axis spec, only names and literals.\"\nCF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)\nformat_flag = \"PyBUF_FORMAT\"\nmemview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "EXPR_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "EXPR_ERR = \"no expressions allowed in axis spec, only names and literals.\"\nCF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)\nformat_flag = \"PyBUF_FORMAT\"\nmemview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "CF_ERR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "CF_ERR = \"Invalid axis specification for a C/Fortran contiguous array.\"\nERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)\nformat_flag = \"PyBUF_FORMAT\"\nmemview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_full_access = \"PyBUF_FULL_RO\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "ERR_UNINITIALIZED",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "ERR_UNINITIALIZED = (\"Cannot check if memoryview %s is initialized without the \"\n                     \"GIL, consider using initializedcheck(False)\")\ndef concat_flags(*flags):\n    return \"(%s)\" % \"|\".join(flags)\nformat_flag = \"PyBUF_FORMAT\"\nmemview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_full_access = \"PyBUF_FULL_RO\"\n#memview_strided_access = \"PyBUF_STRIDED_RO\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "format_flag",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "format_flag = \"PyBUF_FORMAT\"\nmemview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_full_access = \"PyBUF_FULL_RO\"\n#memview_strided_access = \"PyBUF_STRIDED_RO\"\nmemview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_c_contiguous",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_c_contiguous = \"(PyBUF_C_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_full_access = \"PyBUF_FULL_RO\"\n#memview_strided_access = \"PyBUF_STRIDED_RO\"\nmemview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'\nMEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_f_contiguous",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_f_contiguous = \"(PyBUF_F_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_full_access = \"PyBUF_FULL_RO\"\n#memview_strided_access = \"PyBUF_STRIDED_RO\"\nmemview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'\nMEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'\nMEMVIEW_STRIDED= '__Pyx_MEMVIEW_STRIDED'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_any_contiguous",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_any_contiguous = \"(PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)\"\nmemview_full_access = \"PyBUF_FULL_RO\"\n#memview_strided_access = \"PyBUF_STRIDED_RO\"\nmemview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'\nMEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'\nMEMVIEW_STRIDED= '__Pyx_MEMVIEW_STRIDED'\nMEMVIEW_FOLLOW = '__Pyx_MEMVIEW_FOLLOW'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_full_access",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_full_access = \"PyBUF_FULL_RO\"\n#memview_strided_access = \"PyBUF_STRIDED_RO\"\nmemview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'\nMEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'\nMEMVIEW_STRIDED= '__Pyx_MEMVIEW_STRIDED'\nMEMVIEW_FOLLOW = '__Pyx_MEMVIEW_FOLLOW'\n_spec_to_const = {",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "#memview_strided_access",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "#memview_strided_access = \"PyBUF_STRIDED_RO\"\nmemview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'\nMEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'\nMEMVIEW_STRIDED= '__Pyx_MEMVIEW_STRIDED'\nMEMVIEW_FOLLOW = '__Pyx_MEMVIEW_FOLLOW'\n_spec_to_const = {\n        'direct' : MEMVIEW_DIRECT,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_strided_access",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_strided_access = \"PyBUF_RECORDS_RO\"\nMEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'\nMEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'\nMEMVIEW_STRIDED= '__Pyx_MEMVIEW_STRIDED'\nMEMVIEW_FOLLOW = '__Pyx_MEMVIEW_FOLLOW'\n_spec_to_const = {\n        'direct' : MEMVIEW_DIRECT,\n        'ptr'    : MEMVIEW_PTR,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "MEMVIEW_DIRECT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "MEMVIEW_DIRECT = '__Pyx_MEMVIEW_DIRECT'\nMEMVIEW_PTR    = '__Pyx_MEMVIEW_PTR'\nMEMVIEW_FULL   = '__Pyx_MEMVIEW_FULL'\nMEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'\nMEMVIEW_STRIDED= '__Pyx_MEMVIEW_STRIDED'\nMEMVIEW_FOLLOW = '__Pyx_MEMVIEW_FOLLOW'\n_spec_to_const = {\n        'direct' : MEMVIEW_DIRECT,\n        'ptr'    : MEMVIEW_PTR,\n        'full'   : MEMVIEW_FULL,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "MEMVIEW_CONTIG",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "MEMVIEW_CONTIG = '__Pyx_MEMVIEW_CONTIG'\nMEMVIEW_STRIDED= '__Pyx_MEMVIEW_STRIDED'\nMEMVIEW_FOLLOW = '__Pyx_MEMVIEW_FOLLOW'\n_spec_to_const = {\n        'direct' : MEMVIEW_DIRECT,\n        'ptr'    : MEMVIEW_PTR,\n        'full'   : MEMVIEW_FULL,\n        'contig' : MEMVIEW_CONTIG,\n        'strided': MEMVIEW_STRIDED,\n        'follow' : MEMVIEW_FOLLOW,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "MEMVIEW_FOLLOW",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "MEMVIEW_FOLLOW = '__Pyx_MEMVIEW_FOLLOW'\n_spec_to_const = {\n        'direct' : MEMVIEW_DIRECT,\n        'ptr'    : MEMVIEW_PTR,\n        'full'   : MEMVIEW_FULL,\n        'contig' : MEMVIEW_CONTIG,\n        'strided': MEMVIEW_STRIDED,\n        'follow' : MEMVIEW_FOLLOW,\n        }\n_spec_to_abbrev = {",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "_spec_to_const",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "_spec_to_const = {\n        'direct' : MEMVIEW_DIRECT,\n        'ptr'    : MEMVIEW_PTR,\n        'full'   : MEMVIEW_FULL,\n        'contig' : MEMVIEW_CONTIG,\n        'strided': MEMVIEW_STRIDED,\n        'follow' : MEMVIEW_FOLLOW,\n        }\n_spec_to_abbrev = {\n    'direct'  : 'd',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "_spec_to_abbrev",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "_spec_to_abbrev = {\n    'direct'  : 'd',\n    'ptr'     : 'p',\n    'full'    : 'f',\n    'contig'  : 'c',\n    'strided' : 's',\n    'follow'  : '_',\n}\nmemslice_entry_init = \"{ 0, 0, { 0 }, { 0 }, { 0 } }\"\nmemview_name = u'memoryview'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memslice_entry_init",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memslice_entry_init = \"{ 0, 0, { 0 }, { 0 }, { 0 } }\"\nmemview_name = u'memoryview'\nmemview_typeptr_cname = '__pyx_memoryview_type'\nmemview_objstruct_cname = '__pyx_memoryview_obj'\nmemviewslice_cname = u'__Pyx_memviewslice'\ndef put_init_entry(mv_cname, code):\n    code.putln(\"%s.data = NULL;\" % mv_cname)\n    code.putln(\"%s.memview = NULL;\" % mv_cname)\n#def axes_to_str(axes):\n#    return \"\".join([access[0].upper()+packing[0] for (access, packing) in axes])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_name",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_name = u'memoryview'\nmemview_typeptr_cname = '__pyx_memoryview_type'\nmemview_objstruct_cname = '__pyx_memoryview_obj'\nmemviewslice_cname = u'__Pyx_memviewslice'\ndef put_init_entry(mv_cname, code):\n    code.putln(\"%s.data = NULL;\" % mv_cname)\n    code.putln(\"%s.memview = NULL;\" % mv_cname)\n#def axes_to_str(axes):\n#    return \"\".join([access[0].upper()+packing[0] for (access, packing) in axes])\ndef put_acquire_memoryviewslice(lhs_cname, lhs_type, lhs_pos, rhs, code,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_typeptr_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_typeptr_cname = '__pyx_memoryview_type'\nmemview_objstruct_cname = '__pyx_memoryview_obj'\nmemviewslice_cname = u'__Pyx_memviewslice'\ndef put_init_entry(mv_cname, code):\n    code.putln(\"%s.data = NULL;\" % mv_cname)\n    code.putln(\"%s.memview = NULL;\" % mv_cname)\n#def axes_to_str(axes):\n#    return \"\".join([access[0].upper()+packing[0] for (access, packing) in axes])\ndef put_acquire_memoryviewslice(lhs_cname, lhs_type, lhs_pos, rhs, code,\n                                have_gil=False, first_assignment=True):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memview_objstruct_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memview_objstruct_cname = '__pyx_memoryview_obj'\nmemviewslice_cname = u'__Pyx_memviewslice'\ndef put_init_entry(mv_cname, code):\n    code.putln(\"%s.data = NULL;\" % mv_cname)\n    code.putln(\"%s.memview = NULL;\" % mv_cname)\n#def axes_to_str(axes):\n#    return \"\".join([access[0].upper()+packing[0] for (access, packing) in axes])\ndef put_acquire_memoryviewslice(lhs_cname, lhs_type, lhs_pos, rhs, code,\n                                have_gil=False, first_assignment=True):\n    \"We can avoid decreffing the lhs if we know it is the first assignment\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memviewslice_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memviewslice_cname = u'__Pyx_memviewslice'\ndef put_init_entry(mv_cname, code):\n    code.putln(\"%s.data = NULL;\" % mv_cname)\n    code.putln(\"%s.memview = NULL;\" % mv_cname)\n#def axes_to_str(axes):\n#    return \"\".join([access[0].upper()+packing[0] for (access, packing) in axes])\ndef put_acquire_memoryviewslice(lhs_cname, lhs_type, lhs_pos, rhs, code,\n                                have_gil=False, first_assignment=True):\n    \"We can avoid decreffing the lhs if we know it is the first assignment\"\n    assert rhs.type.is_memoryviewslice",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "view_constant_to_access_packing",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "view_constant_to_access_packing = {\n    'generic':              ('full',   'strided'),\n    'strided':              ('direct', 'strided'),\n    'indirect':             ('ptr',    'strided'),\n    'generic_contiguous':   ('full',   'contig'),\n    'contiguous':           ('direct', 'contig'),\n    'indirect_contiguous':  ('ptr',    'contig'),\n}\ndef validate_axes_specs(positions, specs, is_c_contig, is_f_contig):\n    packing_specs = ('contig', 'strided', 'follow')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "context",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "context = {\n    'memview_struct_name': memview_objstruct_cname,\n    'max_dims': Options.buffer_max_dims,\n    'memviewslice_name': memviewslice_cname,\n    'memslice_init': memslice_entry_init,\n}\nmemviewslice_declare_code = load_memview_c_utility(\n        \"MemviewSliceStruct\",\n        context=context,\n        requires=[])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memviewslice_declare_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memviewslice_declare_code = load_memview_c_utility(\n        \"MemviewSliceStruct\",\n        context=context,\n        requires=[])\natomic_utility = load_memview_c_utility(\"Atomics\", context)\nmemviewslice_init_code = load_memview_c_utility(\n    \"MemviewSliceInit\",\n    context=dict(context, BUF_MAX_NDIMS=Options.buffer_max_dims),\n    requires=[memviewslice_declare_code,\n              atomic_utility],",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "atomic_utility",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "atomic_utility = load_memview_c_utility(\"Atomics\", context)\nmemviewslice_init_code = load_memview_c_utility(\n    \"MemviewSliceInit\",\n    context=dict(context, BUF_MAX_NDIMS=Options.buffer_max_dims),\n    requires=[memviewslice_declare_code,\n              atomic_utility],\n)\nmemviewslice_index_helpers = load_memview_c_utility(\"MemviewSliceIndex\")\ntypeinfo_to_format_code = load_memview_cy_utility(\n        \"BufferFormatFromTypeInfo\", requires=[Buffer._typeinfo_to_format_code])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memviewslice_init_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memviewslice_init_code = load_memview_c_utility(\n    \"MemviewSliceInit\",\n    context=dict(context, BUF_MAX_NDIMS=Options.buffer_max_dims),\n    requires=[memviewslice_declare_code,\n              atomic_utility],\n)\nmemviewslice_index_helpers = load_memview_c_utility(\"MemviewSliceIndex\")\ntypeinfo_to_format_code = load_memview_cy_utility(\n        \"BufferFormatFromTypeInfo\", requires=[Buffer._typeinfo_to_format_code])\nis_contig_utility = load_memview_c_utility(\"MemviewSliceIsContig\", context)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "memviewslice_index_helpers",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "memviewslice_index_helpers = load_memview_c_utility(\"MemviewSliceIndex\")\ntypeinfo_to_format_code = load_memview_cy_utility(\n        \"BufferFormatFromTypeInfo\", requires=[Buffer._typeinfo_to_format_code])\nis_contig_utility = load_memview_c_utility(\"MemviewSliceIsContig\", context)\noverlapping_utility = load_memview_c_utility(\"OverlappingSlices\", context)\ncopy_contents_new_utility = load_memview_c_utility(\n    \"MemviewSliceCopyTemplate\",\n    context,\n    requires=[], # require cython_array_utility_code\n)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "typeinfo_to_format_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "typeinfo_to_format_code = load_memview_cy_utility(\n        \"BufferFormatFromTypeInfo\", requires=[Buffer._typeinfo_to_format_code])\nis_contig_utility = load_memview_c_utility(\"MemviewSliceIsContig\", context)\noverlapping_utility = load_memview_c_utility(\"OverlappingSlices\", context)\ncopy_contents_new_utility = load_memview_c_utility(\n    \"MemviewSliceCopyTemplate\",\n    context,\n    requires=[], # require cython_array_utility_code\n)\nview_utility_code = load_memview_cy_utility(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "is_contig_utility",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "is_contig_utility = load_memview_c_utility(\"MemviewSliceIsContig\", context)\noverlapping_utility = load_memview_c_utility(\"OverlappingSlices\", context)\ncopy_contents_new_utility = load_memview_c_utility(\n    \"MemviewSliceCopyTemplate\",\n    context,\n    requires=[], # require cython_array_utility_code\n)\nview_utility_code = load_memview_cy_utility(\n        \"View.MemoryView\",\n        context=context,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "overlapping_utility",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "overlapping_utility = load_memview_c_utility(\"OverlappingSlices\", context)\ncopy_contents_new_utility = load_memview_c_utility(\n    \"MemviewSliceCopyTemplate\",\n    context,\n    requires=[], # require cython_array_utility_code\n)\nview_utility_code = load_memview_cy_utility(\n        \"View.MemoryView\",\n        context=context,\n        requires=[Buffer.GetAndReleaseBufferUtilityCode(),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "copy_contents_new_utility",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "copy_contents_new_utility = load_memview_c_utility(\n    \"MemviewSliceCopyTemplate\",\n    context,\n    requires=[], # require cython_array_utility_code\n)\nview_utility_code = load_memview_cy_utility(\n        \"View.MemoryView\",\n        context=context,\n        requires=[Buffer.GetAndReleaseBufferUtilityCode(),\n                  Buffer.buffer_struct_declare_code,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "view_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "view_utility_code = load_memview_cy_utility(\n        \"View.MemoryView\",\n        context=context,\n        requires=[Buffer.GetAndReleaseBufferUtilityCode(),\n                  Buffer.buffer_struct_declare_code,\n                  Buffer.buffer_formats_declare_code,\n                  memviewslice_init_code,\n                  is_contig_utility,\n                  overlapping_utility,\n                  copy_contents_new_utility,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "view_utility_whitelist",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "peekOfCode": "view_utility_whitelist = ('array', 'memoryview', 'array_cwrapper',\n                          'generic', 'strided', 'indirect', 'contiguous',\n                          'indirect_contiguous')\nmemviewslice_declare_code.requires.append(view_utility_code)\ncopy_contents_new_utility.requires.append(view_utility_code)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.MemoryView",
        "documentation": {}
    },
    {
        "label": "ModuleNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "class ModuleNode(Nodes.Node, Nodes.BlockNode):\n    #  doc       string or None\n    #  body      StatListNode\n    #\n    #  referenced_modules   [ModuleScope]\n    #  full_module_name     string\n    #\n    #  scope                The module scope.\n    #  compilation_source   A CompilationSource (see Main)\n    #  directives           Top-level compiler directives",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "ModuleImportGenerator",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "class ModuleImportGenerator(object):\n    \"\"\"\n    Helper to generate module import while importing external types.\n    This is used to avoid excessive re-imports of external modules when multiple types are looked up.\n    \"\"\"\n    def __init__(self, code, imported_modules=None):\n        self.code = code\n        self.imported = {}\n        if imported_modules:\n            for name, cname in imported_modules.items():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "check_c_declarations_pxd",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "def check_c_declarations_pxd(module_node):\n    module_node.scope.check_c_classes_pxd()\n    return module_node\ndef check_c_declarations(module_node):\n    module_node.scope.check_c_classes()\n    module_node.scope.check_c_functions()\n    return module_node\ndef generate_c_code_config(env, options):\n    if Options.annotate or options.annotate:\n        emit_linenums = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "check_c_declarations",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "def check_c_declarations(module_node):\n    module_node.scope.check_c_classes()\n    module_node.scope.check_c_functions()\n    return module_node\ndef generate_c_code_config(env, options):\n    if Options.annotate or options.annotate:\n        emit_linenums = False\n    else:\n        emit_linenums = options.emit_linenums\n    return Code.CCodeConfig(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "generate_c_code_config",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "def generate_c_code_config(env, options):\n    if Options.annotate or options.annotate:\n        emit_linenums = False\n    else:\n        emit_linenums = options.emit_linenums\n    return Code.CCodeConfig(\n        emit_linenums=emit_linenums,\n        emit_code_comments=env.directives['emit_code_comments'],\n        c_line_in_traceback=options.c_line_in_traceback)\nclass ModuleNode(Nodes.Node, Nodes.BlockNode):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "generate_cfunction_declaration",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "def generate_cfunction_declaration(entry, env, code, definition):\n    from_cy_utility = entry.used and entry.utility_code_definition\n    if entry.used and entry.inline_func_in_pxd or (not entry.in_cinclude and (\n            definition or entry.defined_in_pxd or entry.visibility == 'extern' or from_cy_utility)):\n        if entry.visibility == 'extern':\n            storage_class = Naming.extern_c_macro\n            dll_linkage = \"DL_IMPORT\"\n        elif entry.visibility == 'public':\n            storage_class = Naming.extern_c_macro\n            dll_linkage = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "refnanny_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "refnanny_utility_code = UtilityCode.load(\"Refnanny\", \"ModuleSetupCode.c\")\npacked_struct_utility_code = UtilityCode(proto=\"\"\"\n#if defined(__GNUC__)\n#define __Pyx_PACKED __attribute__((__packed__))\n#else\n#define __Pyx_PACKED\n#endif\n\"\"\", impl=\"\", proto_block='utility_code_proto_before_types')\ncapsule_utility_code = UtilityCode.load(\"Capsule\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "packed_struct_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "packed_struct_utility_code = UtilityCode(proto=\"\"\"\n#if defined(__GNUC__)\n#define __Pyx_PACKED __attribute__((__packed__))\n#else\n#define __Pyx_PACKED\n#endif\n\"\"\", impl=\"\", proto_block='utility_code_proto_before_types')\ncapsule_utility_code = UtilityCode.load(\"Capsule\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "capsule_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "peekOfCode": "capsule_utility_code = UtilityCode.load(\"Capsule\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ModuleNode",
        "documentation": {}
    },
    {
        "label": "py_version_hex",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "def py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):\n    return (major << 24) | (minor << 16) | (micro << 8) | (release_level << 4) | (release_serial)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "codewriter_temp_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "codewriter_temp_prefix = pyrex_prefix + \"t_\"\ntemp_prefix       = u\"__cyt_\"\nbuiltin_prefix    = pyrex_prefix + \"builtin_\"\narg_prefix        = pyrex_prefix + \"arg_\"\nfuncdoc_prefix    = pyrex_prefix + \"doc_\"\nenum_prefix       = pyrex_prefix + \"e_\"\nfunc_prefix       = pyrex_prefix + \"f_\"\nfunc_prefix_api   = pyrex_prefix + \"api_f_\"\npyfunc_prefix     = pyrex_prefix + \"pf_\"\npywrap_prefix     = pyrex_prefix + \"pw_\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "method_wrapper_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "method_wrapper_prefix = pyrex_prefix + \"specialmethod_\"\nmethtab_prefix    = pyrex_prefix + \"methods_\"\nmemtab_prefix     = pyrex_prefix + \"members_\"\nobjstruct_prefix  = pyrex_prefix + \"obj_\"\ntypeptr_prefix    = pyrex_prefix + \"ptype_\"\nprop_set_prefix   = pyrex_prefix + \"setprop_\"\ntype_prefix       = pyrex_prefix + \"t_\"\ntypeobj_prefix    = pyrex_prefix + \"type_\"\nvar_prefix        = pyrex_prefix + \"v_\"\nvarptr_prefix     = pyrex_prefix + \"vp_\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "varptr_prefix_api",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "varptr_prefix_api = pyrex_prefix + \"api_vp_\"\nwrapperbase_prefix= pyrex_prefix + \"wrapperbase_\"\npybuffernd_prefix   = pyrex_prefix + \"pybuffernd_\"\npybufferstruct_prefix  = pyrex_prefix + \"pybuffer_\"\nvtable_prefix     = pyrex_prefix + \"vtable_\"\nvtabptr_prefix    = pyrex_prefix + \"vtabptr_\"\nvtabstruct_prefix = pyrex_prefix + \"vtabstruct_\"\nopt_arg_prefix    = pyrex_prefix + \"opt_args_\"\nconvert_func_prefix = pyrex_prefix + \"convert_\"\nclosure_scope_prefix = pyrex_prefix + \"scope_\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "vtabstruct_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "vtabstruct_prefix = pyrex_prefix + \"vtabstruct_\"\nopt_arg_prefix    = pyrex_prefix + \"opt_args_\"\nconvert_func_prefix = pyrex_prefix + \"convert_\"\nclosure_scope_prefix = pyrex_prefix + \"scope_\"\nclosure_class_prefix = pyrex_prefix + \"scope_struct_\"\nlambda_func_prefix = pyrex_prefix + \"lambda_\"\nmodule_is_main   = pyrex_prefix + \"module_is_main_\"\ndefaults_struct_prefix = pyrex_prefix + \"defaults\"\ndynamic_args_cname = pyrex_prefix + \"dynamic_args\"\ninterned_prefixes = {",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "convert_func_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "convert_func_prefix = pyrex_prefix + \"convert_\"\nclosure_scope_prefix = pyrex_prefix + \"scope_\"\nclosure_class_prefix = pyrex_prefix + \"scope_struct_\"\nlambda_func_prefix = pyrex_prefix + \"lambda_\"\nmodule_is_main   = pyrex_prefix + \"module_is_main_\"\ndefaults_struct_prefix = pyrex_prefix + \"defaults\"\ndynamic_args_cname = pyrex_prefix + \"dynamic_args\"\ninterned_prefixes = {\n    'str': pyrex_prefix + \"n_\",\n    'int': pyrex_prefix + \"int_\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "closure_scope_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "closure_scope_prefix = pyrex_prefix + \"scope_\"\nclosure_class_prefix = pyrex_prefix + \"scope_struct_\"\nlambda_func_prefix = pyrex_prefix + \"lambda_\"\nmodule_is_main   = pyrex_prefix + \"module_is_main_\"\ndefaults_struct_prefix = pyrex_prefix + \"defaults\"\ndynamic_args_cname = pyrex_prefix + \"dynamic_args\"\ninterned_prefixes = {\n    'str': pyrex_prefix + \"n_\",\n    'int': pyrex_prefix + \"int_\",\n    'float': pyrex_prefix + \"float_\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "closure_class_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "closure_class_prefix = pyrex_prefix + \"scope_struct_\"\nlambda_func_prefix = pyrex_prefix + \"lambda_\"\nmodule_is_main   = pyrex_prefix + \"module_is_main_\"\ndefaults_struct_prefix = pyrex_prefix + \"defaults\"\ndynamic_args_cname = pyrex_prefix + \"dynamic_args\"\ninterned_prefixes = {\n    'str': pyrex_prefix + \"n_\",\n    'int': pyrex_prefix + \"int_\",\n    'float': pyrex_prefix + \"float_\",\n    'tuple': pyrex_prefix + \"tuple_\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "lambda_func_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "lambda_func_prefix = pyrex_prefix + \"lambda_\"\nmodule_is_main   = pyrex_prefix + \"module_is_main_\"\ndefaults_struct_prefix = pyrex_prefix + \"defaults\"\ndynamic_args_cname = pyrex_prefix + \"dynamic_args\"\ninterned_prefixes = {\n    'str': pyrex_prefix + \"n_\",\n    'int': pyrex_prefix + \"int_\",\n    'float': pyrex_prefix + \"float_\",\n    'tuple': pyrex_prefix + \"tuple_\",\n    'codeobj': pyrex_prefix + \"codeobj_\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "defaults_struct_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "defaults_struct_prefix = pyrex_prefix + \"defaults\"\ndynamic_args_cname = pyrex_prefix + \"dynamic_args\"\ninterned_prefixes = {\n    'str': pyrex_prefix + \"n_\",\n    'int': pyrex_prefix + \"int_\",\n    'float': pyrex_prefix + \"float_\",\n    'tuple': pyrex_prefix + \"tuple_\",\n    'codeobj': pyrex_prefix + \"codeobj_\",\n    'slice': pyrex_prefix + \"slice_\",\n    'ustring': pyrex_prefix + \"ustring_\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "dynamic_args_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "dynamic_args_cname = pyrex_prefix + \"dynamic_args\"\ninterned_prefixes = {\n    'str': pyrex_prefix + \"n_\",\n    'int': pyrex_prefix + \"int_\",\n    'float': pyrex_prefix + \"float_\",\n    'tuple': pyrex_prefix + \"tuple_\",\n    'codeobj': pyrex_prefix + \"codeobj_\",\n    'slice': pyrex_prefix + \"slice_\",\n    'ustring': pyrex_prefix + \"ustring_\",\n    'umethod': pyrex_prefix + \"umethod_\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "interned_prefixes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "interned_prefixes = {\n    'str': pyrex_prefix + \"n_\",\n    'int': pyrex_prefix + \"int_\",\n    'float': pyrex_prefix + \"float_\",\n    'tuple': pyrex_prefix + \"tuple_\",\n    'codeobj': pyrex_prefix + \"codeobj_\",\n    'slice': pyrex_prefix + \"slice_\",\n    'ustring': pyrex_prefix + \"ustring_\",\n    'umethod': pyrex_prefix + \"umethod_\",\n}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "ctuple_type_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "ctuple_type_prefix = pyrex_prefix + \"ctuple_\"\nargs_cname       = pyrex_prefix + \"args\"\ngenerator_cname  = pyrex_prefix + \"generator\"\nsent_value_cname = pyrex_prefix + \"sent_value\"\npykwdlist_cname  = pyrex_prefix + \"pyargnames\"\nobj_base_cname   = pyrex_prefix + \"base\"\nbuiltins_cname   = pyrex_prefix + \"b\"\npreimport_cname  = pyrex_prefix + \"i\"\nmoddict_cname    = pyrex_prefix + \"d\"\ndummy_cname      = pyrex_prefix + \"dummy\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "sent_value_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "sent_value_cname = pyrex_prefix + \"sent_value\"\npykwdlist_cname  = pyrex_prefix + \"pyargnames\"\nobj_base_cname   = pyrex_prefix + \"base\"\nbuiltins_cname   = pyrex_prefix + \"b\"\npreimport_cname  = pyrex_prefix + \"i\"\nmoddict_cname    = pyrex_prefix + \"d\"\ndummy_cname      = pyrex_prefix + \"dummy\"\nfilename_cname   = pyrex_prefix + \"filename\"\nmodulename_cname = pyrex_prefix + \"modulename\"\nfiletable_cname  = pyrex_prefix + \"f\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "modulename_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "modulename_cname = pyrex_prefix + \"modulename\"\nfiletable_cname  = pyrex_prefix + \"f\"\nintern_tab_cname = pyrex_prefix + \"intern_tab\"\nkwds_cname       = pyrex_prefix + \"kwds\"\nlineno_cname     = pyrex_prefix + \"lineno\"\nclineno_cname    = pyrex_prefix + \"clineno\"\ncfilenm_cname    = pyrex_prefix + \"cfilenm\"\nlocal_tstate_cname = pyrex_prefix + \"tstate\"\nmodule_cname     = pyrex_prefix + \"m\"\nmoddoc_cname     = pyrex_prefix + \"mdoc\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "intern_tab_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "intern_tab_cname = pyrex_prefix + \"intern_tab\"\nkwds_cname       = pyrex_prefix + \"kwds\"\nlineno_cname     = pyrex_prefix + \"lineno\"\nclineno_cname    = pyrex_prefix + \"clineno\"\ncfilenm_cname    = pyrex_prefix + \"cfilenm\"\nlocal_tstate_cname = pyrex_prefix + \"tstate\"\nmodule_cname     = pyrex_prefix + \"m\"\nmoddoc_cname     = pyrex_prefix + \"mdoc\"\nmethtable_cname  = pyrex_prefix + \"methods\"\nretval_cname     = pyrex_prefix + \"r\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "local_tstate_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "local_tstate_cname = pyrex_prefix + \"tstate\"\nmodule_cname     = pyrex_prefix + \"m\"\nmoddoc_cname     = pyrex_prefix + \"mdoc\"\nmethtable_cname  = pyrex_prefix + \"methods\"\nretval_cname     = pyrex_prefix + \"r\"\nreqd_kwds_cname  = pyrex_prefix + \"reqd_kwds\"\nself_cname       = pyrex_prefix + \"self\"\nstringtab_cname  = pyrex_prefix + \"string_tab\"\nvtabslot_cname   = pyrex_prefix + \"vtab\"\nc_api_tab_cname  = pyrex_prefix + \"c_api_tab\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "skip_dispatch_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "skip_dispatch_cname = pyrex_prefix + \"skip_dispatch\"\nempty_tuple      = pyrex_prefix + \"empty_tuple\"\nempty_bytes      = pyrex_prefix + \"empty_bytes\"\nempty_unicode\t = pyrex_prefix + \"empty_unicode\"\nprint_function   = pyrex_prefix + \"print\"\nprint_function_kwargs   = pyrex_prefix + \"print_kwargs\"\ncleanup_cname    = pyrex_prefix + \"module_cleanup\"\npymoduledef_cname = pyrex_prefix + \"moduledef\"\npymoduledef_slots_cname = pyrex_prefix + \"moduledef_slots\"\npymodinit_module_arg = pyrex_prefix + \"pyinit_module\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "empty_unicode\t",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "empty_unicode\t = pyrex_prefix + \"empty_unicode\"\nprint_function   = pyrex_prefix + \"print\"\nprint_function_kwargs   = pyrex_prefix + \"print_kwargs\"\ncleanup_cname    = pyrex_prefix + \"module_cleanup\"\npymoduledef_cname = pyrex_prefix + \"moduledef\"\npymoduledef_slots_cname = pyrex_prefix + \"moduledef_slots\"\npymodinit_module_arg = pyrex_prefix + \"pyinit_module\"\npymodule_create_func_cname = pyrex_prefix + \"pymod_create\"\npymodule_exec_func_cname = pyrex_prefix + \"pymod_exec\"\noptional_args_cname = pyrex_prefix + \"optional_args\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "pymoduledef_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "pymoduledef_cname = pyrex_prefix + \"moduledef\"\npymoduledef_slots_cname = pyrex_prefix + \"moduledef_slots\"\npymodinit_module_arg = pyrex_prefix + \"pyinit_module\"\npymodule_create_func_cname = pyrex_prefix + \"pymod_create\"\npymodule_exec_func_cname = pyrex_prefix + \"pymod_exec\"\noptional_args_cname = pyrex_prefix + \"optional_args\"\nimport_star      = pyrex_prefix + \"import_star\"\nimport_star_set  = pyrex_prefix + \"import_star_set\"\nouter_scope_cname= pyrex_prefix + \"outer_scope\"\ncur_scope_cname  = pyrex_prefix + \"cur_scope\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "pymoduledef_slots_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "pymoduledef_slots_cname = pyrex_prefix + \"moduledef_slots\"\npymodinit_module_arg = pyrex_prefix + \"pyinit_module\"\npymodule_create_func_cname = pyrex_prefix + \"pymod_create\"\npymodule_exec_func_cname = pyrex_prefix + \"pymod_exec\"\noptional_args_cname = pyrex_prefix + \"optional_args\"\nimport_star      = pyrex_prefix + \"import_star\"\nimport_star_set  = pyrex_prefix + \"import_star_set\"\nouter_scope_cname= pyrex_prefix + \"outer_scope\"\ncur_scope_cname  = pyrex_prefix + \"cur_scope\"\nenc_scope_cname  = pyrex_prefix + \"enc_scope\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "pymodinit_module_arg",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "pymodinit_module_arg = pyrex_prefix + \"pyinit_module\"\npymodule_create_func_cname = pyrex_prefix + \"pymod_create\"\npymodule_exec_func_cname = pyrex_prefix + \"pymod_exec\"\noptional_args_cname = pyrex_prefix + \"optional_args\"\nimport_star      = pyrex_prefix + \"import_star\"\nimport_star_set  = pyrex_prefix + \"import_star_set\"\nouter_scope_cname= pyrex_prefix + \"outer_scope\"\ncur_scope_cname  = pyrex_prefix + \"cur_scope\"\nenc_scope_cname  = pyrex_prefix + \"enc_scope\"\nframe_cname      = pyrex_prefix + \"frame\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "pymodule_create_func_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "pymodule_create_func_cname = pyrex_prefix + \"pymod_create\"\npymodule_exec_func_cname = pyrex_prefix + \"pymod_exec\"\noptional_args_cname = pyrex_prefix + \"optional_args\"\nimport_star      = pyrex_prefix + \"import_star\"\nimport_star_set  = pyrex_prefix + \"import_star_set\"\nouter_scope_cname= pyrex_prefix + \"outer_scope\"\ncur_scope_cname  = pyrex_prefix + \"cur_scope\"\nenc_scope_cname  = pyrex_prefix + \"enc_scope\"\nframe_cname      = pyrex_prefix + \"frame\"\nframe_code_cname = pyrex_prefix + \"frame_code\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "pymodule_exec_func_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "pymodule_exec_func_cname = pyrex_prefix + \"pymod_exec\"\noptional_args_cname = pyrex_prefix + \"optional_args\"\nimport_star      = pyrex_prefix + \"import_star\"\nimport_star_set  = pyrex_prefix + \"import_star_set\"\nouter_scope_cname= pyrex_prefix + \"outer_scope\"\ncur_scope_cname  = pyrex_prefix + \"cur_scope\"\nenc_scope_cname  = pyrex_prefix + \"enc_scope\"\nframe_cname      = pyrex_prefix + \"frame\"\nframe_code_cname = pyrex_prefix + \"frame_code\"\nbinding_cfunc    = pyrex_prefix + \"binding_PyCFunctionType\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "optional_args_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "optional_args_cname = pyrex_prefix + \"optional_args\"\nimport_star      = pyrex_prefix + \"import_star\"\nimport_star_set  = pyrex_prefix + \"import_star_set\"\nouter_scope_cname= pyrex_prefix + \"outer_scope\"\ncur_scope_cname  = pyrex_prefix + \"cur_scope\"\nenc_scope_cname  = pyrex_prefix + \"enc_scope\"\nframe_cname      = pyrex_prefix + \"frame\"\nframe_code_cname = pyrex_prefix + \"frame_code\"\nbinding_cfunc    = pyrex_prefix + \"binding_PyCFunctionType\"\nfused_func_prefix = pyrex_prefix + 'fuse_'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "frame_code_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "frame_code_cname = pyrex_prefix + \"frame_code\"\nbinding_cfunc    = pyrex_prefix + \"binding_PyCFunctionType\"\nfused_func_prefix = pyrex_prefix + 'fuse_'\nquick_temp_cname = pyrex_prefix + \"temp\" # temp variable for quick'n'dirty temping\ntp_dict_version_temp = pyrex_prefix + \"tp_dict_version\"\nobj_dict_version_temp = pyrex_prefix + \"obj_dict_version\"\ntype_dict_guard_temp = pyrex_prefix + \"type_dict_guard\"\ncython_runtime_cname   = pyrex_prefix + \"cython_runtime\"\nglobal_code_object_cache_find = pyrex_prefix + 'find_code_object'\nglobal_code_object_cache_insert = pyrex_prefix + 'insert_code_object'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "fused_func_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "fused_func_prefix = pyrex_prefix + 'fuse_'\nquick_temp_cname = pyrex_prefix + \"temp\" # temp variable for quick'n'dirty temping\ntp_dict_version_temp = pyrex_prefix + \"tp_dict_version\"\nobj_dict_version_temp = pyrex_prefix + \"obj_dict_version\"\ntype_dict_guard_temp = pyrex_prefix + \"type_dict_guard\"\ncython_runtime_cname   = pyrex_prefix + \"cython_runtime\"\nglobal_code_object_cache_find = pyrex_prefix + 'find_code_object'\nglobal_code_object_cache_insert = pyrex_prefix + 'insert_code_object'\ngenexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "quick_temp_cname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "quick_temp_cname = pyrex_prefix + \"temp\" # temp variable for quick'n'dirty temping\ntp_dict_version_temp = pyrex_prefix + \"tp_dict_version\"\nobj_dict_version_temp = pyrex_prefix + \"obj_dict_version\"\ntype_dict_guard_temp = pyrex_prefix + \"type_dict_guard\"\ncython_runtime_cname   = pyrex_prefix + \"cython_runtime\"\nglobal_code_object_cache_find = pyrex_prefix + 'find_code_object'\nglobal_code_object_cache_insert = pyrex_prefix + 'insert_code_object'\ngenexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'\nfreecount_name = 'freecount'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "tp_dict_version_temp",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "tp_dict_version_temp = pyrex_prefix + \"tp_dict_version\"\nobj_dict_version_temp = pyrex_prefix + \"obj_dict_version\"\ntype_dict_guard_temp = pyrex_prefix + \"type_dict_guard\"\ncython_runtime_cname   = pyrex_prefix + \"cython_runtime\"\nglobal_code_object_cache_find = pyrex_prefix + 'find_code_object'\nglobal_code_object_cache_insert = pyrex_prefix + 'insert_code_object'\ngenexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'\nfreecount_name = 'freecount'\nline_c_macro = \"__LINE__\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "obj_dict_version_temp",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "obj_dict_version_temp = pyrex_prefix + \"obj_dict_version\"\ntype_dict_guard_temp = pyrex_prefix + \"type_dict_guard\"\ncython_runtime_cname   = pyrex_prefix + \"cython_runtime\"\nglobal_code_object_cache_find = pyrex_prefix + 'find_code_object'\nglobal_code_object_cache_insert = pyrex_prefix + 'insert_code_object'\ngenexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'\nfreecount_name = 'freecount'\nline_c_macro = \"__LINE__\"\nfile_c_macro = \"__FILE__\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "type_dict_guard_temp",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "type_dict_guard_temp = pyrex_prefix + \"type_dict_guard\"\ncython_runtime_cname   = pyrex_prefix + \"cython_runtime\"\nglobal_code_object_cache_find = pyrex_prefix + 'find_code_object'\nglobal_code_object_cache_insert = pyrex_prefix + 'insert_code_object'\ngenexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'\nfreecount_name = 'freecount'\nline_c_macro = \"__LINE__\"\nfile_c_macro = \"__FILE__\"\nextern_c_macro  = pyrex_prefix.upper() + \"EXTERN_C\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "global_code_object_cache_find",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "global_code_object_cache_find = pyrex_prefix + 'find_code_object'\nglobal_code_object_cache_insert = pyrex_prefix + 'insert_code_object'\ngenexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'\nfreecount_name = 'freecount'\nline_c_macro = \"__LINE__\"\nfile_c_macro = \"__FILE__\"\nextern_c_macro  = pyrex_prefix.upper() + \"EXTERN_C\"\nexc_type_name   = pyrex_prefix + \"exc_type\"\nexc_value_name  = pyrex_prefix + \"exc_value\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "global_code_object_cache_insert",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "global_code_object_cache_insert = pyrex_prefix + 'insert_code_object'\ngenexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'\nfreecount_name = 'freecount'\nline_c_macro = \"__LINE__\"\nfile_c_macro = \"__FILE__\"\nextern_c_macro  = pyrex_prefix.upper() + \"EXTERN_C\"\nexc_type_name   = pyrex_prefix + \"exc_type\"\nexc_value_name  = pyrex_prefix + \"exc_value\"\nexc_tb_name     = pyrex_prefix + \"exc_tb\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "genexpr_id_ref",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "genexpr_id_ref = 'genexpr'\nfreelist_name  = 'freelist'\nfreecount_name = 'freecount'\nline_c_macro = \"__LINE__\"\nfile_c_macro = \"__FILE__\"\nextern_c_macro  = pyrex_prefix.upper() + \"EXTERN_C\"\nexc_type_name   = pyrex_prefix + \"exc_type\"\nexc_value_name  = pyrex_prefix + \"exc_value\"\nexc_tb_name     = pyrex_prefix + \"exc_tb\"\nexc_lineno_name = pyrex_prefix + \"exc_lineno\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "freecount_name",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "freecount_name = 'freecount'\nline_c_macro = \"__LINE__\"\nfile_c_macro = \"__FILE__\"\nextern_c_macro  = pyrex_prefix.upper() + \"EXTERN_C\"\nexc_type_name   = pyrex_prefix + \"exc_type\"\nexc_value_name  = pyrex_prefix + \"exc_value\"\nexc_tb_name     = pyrex_prefix + \"exc_tb\"\nexc_lineno_name = pyrex_prefix + \"exc_lineno\"\nparallel_exc_type = pyrex_prefix + \"parallel_exc_type\"\nparallel_exc_value = pyrex_prefix + \"parallel_exc_value\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "line_c_macro",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "line_c_macro = \"__LINE__\"\nfile_c_macro = \"__FILE__\"\nextern_c_macro  = pyrex_prefix.upper() + \"EXTERN_C\"\nexc_type_name   = pyrex_prefix + \"exc_type\"\nexc_value_name  = pyrex_prefix + \"exc_value\"\nexc_tb_name     = pyrex_prefix + \"exc_tb\"\nexc_lineno_name = pyrex_prefix + \"exc_lineno\"\nparallel_exc_type = pyrex_prefix + \"parallel_exc_type\"\nparallel_exc_value = pyrex_prefix + \"parallel_exc_value\"\nparallel_exc_tb = pyrex_prefix + \"parallel_exc_tb\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "file_c_macro",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "file_c_macro = \"__FILE__\"\nextern_c_macro  = pyrex_prefix.upper() + \"EXTERN_C\"\nexc_type_name   = pyrex_prefix + \"exc_type\"\nexc_value_name  = pyrex_prefix + \"exc_value\"\nexc_tb_name     = pyrex_prefix + \"exc_tb\"\nexc_lineno_name = pyrex_prefix + \"exc_lineno\"\nparallel_exc_type = pyrex_prefix + \"parallel_exc_type\"\nparallel_exc_value = pyrex_prefix + \"parallel_exc_value\"\nparallel_exc_tb = pyrex_prefix + \"parallel_exc_tb\"\nparallel_filename = pyrex_prefix + \"parallel_filename\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "exc_lineno_name",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "exc_lineno_name = pyrex_prefix + \"exc_lineno\"\nparallel_exc_type = pyrex_prefix + \"parallel_exc_type\"\nparallel_exc_value = pyrex_prefix + \"parallel_exc_value\"\nparallel_exc_tb = pyrex_prefix + \"parallel_exc_tb\"\nparallel_filename = pyrex_prefix + \"parallel_filename\"\nparallel_lineno = pyrex_prefix + \"parallel_lineno\"\nparallel_clineno = pyrex_prefix + \"parallel_clineno\"\nparallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "parallel_exc_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "parallel_exc_type = pyrex_prefix + \"parallel_exc_type\"\nparallel_exc_value = pyrex_prefix + \"parallel_exc_value\"\nparallel_exc_tb = pyrex_prefix + \"parallel_exc_tb\"\nparallel_filename = pyrex_prefix + \"parallel_filename\"\nparallel_lineno = pyrex_prefix + \"parallel_lineno\"\nparallel_clineno = pyrex_prefix + \"parallel_clineno\"\nparallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "parallel_exc_value",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "parallel_exc_value = pyrex_prefix + \"parallel_exc_value\"\nparallel_exc_tb = pyrex_prefix + \"parallel_exc_tb\"\nparallel_filename = pyrex_prefix + \"parallel_filename\"\nparallel_lineno = pyrex_prefix + \"parallel_lineno\"\nparallel_clineno = pyrex_prefix + \"parallel_clineno\"\nparallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"\napi_guard_prefix = \"__PYX_HAVE_API__\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "parallel_exc_tb",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "parallel_exc_tb = pyrex_prefix + \"parallel_exc_tb\"\nparallel_filename = pyrex_prefix + \"parallel_filename\"\nparallel_lineno = pyrex_prefix + \"parallel_lineno\"\nparallel_clineno = pyrex_prefix + \"parallel_clineno\"\nparallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"\napi_guard_prefix = \"__PYX_HAVE_API__\"\napi_func_guard   = \"__PYX_HAVE_API_FUNC_\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "parallel_filename",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "parallel_filename = pyrex_prefix + \"parallel_filename\"\nparallel_lineno = pyrex_prefix + \"parallel_lineno\"\nparallel_clineno = pyrex_prefix + \"parallel_clineno\"\nparallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"\napi_guard_prefix = \"__PYX_HAVE_API__\"\napi_func_guard   = \"__PYX_HAVE_API_FUNC_\"\nPYX_NAN          = \"__PYX_NAN()\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "parallel_lineno",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "parallel_lineno = pyrex_prefix + \"parallel_lineno\"\nparallel_clineno = pyrex_prefix + \"parallel_clineno\"\nparallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"\napi_guard_prefix = \"__PYX_HAVE_API__\"\napi_func_guard   = \"__PYX_HAVE_API_FUNC_\"\nPYX_NAN          = \"__PYX_NAN()\"\ndef py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "parallel_clineno",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "parallel_clineno = pyrex_prefix + \"parallel_clineno\"\nparallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"\napi_guard_prefix = \"__PYX_HAVE_API__\"\napi_func_guard   = \"__PYX_HAVE_API_FUNC_\"\nPYX_NAN          = \"__PYX_NAN()\"\ndef py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):\n    return (major << 24) | (minor << 16) | (micro << 8) | (release_level << 4) | (release_serial)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "parallel_why",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "parallel_why = pyrex_prefix + \"parallel_why\"\nexc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"\napi_guard_prefix = \"__PYX_HAVE_API__\"\napi_func_guard   = \"__PYX_HAVE_API_FUNC_\"\nPYX_NAN          = \"__PYX_NAN()\"\ndef py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):\n    return (major << 24) | (minor << 16) | (micro << 8) | (release_level << 4) | (release_serial)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "exc_vars",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "exc_vars = (exc_type_name, exc_value_name, exc_tb_name)\napi_name        = pyrex_prefix + \"capi__\"\nh_guard_prefix   = \"__PYX_HAVE__\"\napi_guard_prefix = \"__PYX_HAVE_API__\"\napi_func_guard   = \"__PYX_HAVE_API_FUNC_\"\nPYX_NAN          = \"__PYX_NAN()\"\ndef py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):\n    return (major << 24) | (minor << 16) | (micro << 8) | (release_level << 4) | (release_serial)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "api_guard_prefix",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "peekOfCode": "api_guard_prefix = \"__PYX_HAVE_API__\"\napi_func_guard   = \"__PYX_HAVE_API_FUNC_\"\nPYX_NAN          = \"__PYX_NAN()\"\ndef py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):\n    return (major << 24) | (minor << 16) | (micro << 8) | (release_level << 4) | (release_serial)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Naming",
        "documentation": {}
    },
    {
        "label": "VerboseCodeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class VerboseCodeWriter(type):\n    # Set this as a metaclass to trace function calls in code.\n    # This slows down code generation and makes much larger files.\n    def __new__(cls, name, bases, attrs):\n        from types import FunctionType\n        from .Code import CCodeWriter\n        attrs = dict(attrs)\n        for mname, m in attrs.items():\n            if isinstance(m, FunctionType):\n                attrs[mname] = write_func_call(m, CCodeWriter)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CheckAnalysers",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CheckAnalysers(type):\n    \"\"\"Metaclass to check that type analysis functions return a node.\n    \"\"\"\n    methods = set(['analyse_types',\n                   'analyse_expressions',\n                   'analyse_target_types'])\n    def __new__(cls, name, bases, attrs):\n        from types import FunctionType\n        def check(name, func):\n            def call(*args, **kwargs):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class Node(object):\n    #  pos         (string, int, int)   Source file position\n    #  is_name     boolean              Is a NameNode\n    #  is_literal  boolean              Is a ConstNode\n    is_name = 0\n    is_none = 0\n    is_nonecheck = 0\n    is_literal = 0\n    is_terminator = 0\n    is_wrapper = False  # is a DefNode wrapper for a C function",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CompilerDirectivesNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CompilerDirectivesNode(Node):\n    \"\"\"\n    Sets compiler directives for the children nodes\n    \"\"\"\n    #  directives     {string:value}  A dictionary holding the right value for\n    #                                 *all* possible directives.\n    #  body           Node\n    child_attrs = [\"body\"]\n    def analyse_declarations(self, env):\n        old = env.directives",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "BlockNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class BlockNode(object):\n    #  Mixin class for nodes representing a declaration block.\n    def generate_cached_builtins_decls(self, env, code):\n        entries = env.global_scope().undeclared_cached_builtins\n        for entry in entries:\n            code.globalstate.add_cached_builtin_decl(entry)\n        del entries[:]\n    def generate_lambda_definitions(self, env, code):\n        for node in env.lambda_defs:\n            node.generate_function_definitions(env, code)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "StatListNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class StatListNode(Node):\n    # stats     a list of StatNode\n    child_attrs = [\"stats\"]\n    @staticmethod\n    def create_analysed(pos, env, *args, **kw):\n        node = StatListNode(pos, *args, **kw)\n        return node  # No node-specific analysis needed\n    def analyse_declarations(self, env):\n        #print \"StatListNode.analyse_declarations\" ###\n        for stat in self.stats:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "StatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class StatNode(Node):\n    #\n    #  Code generation for statements is split into the following subphases:\n    #\n    #  (1) generate_function_definitions\n    #        Emit C code for the definitions of any structs,\n    #        unions, enums and functions defined in the current\n    #        scope-block.\n    #\n    #  (2) generate_execution_code",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CDefExternNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CDefExternNode(StatNode):\n    #  include_file       string or None\n    #  verbatim_include   string or None\n    #  body               StatListNode\n    child_attrs = [\"body\"]\n    def analyse_declarations(self, env):\n        old_cinclude_flag = env.in_cinclude\n        env.in_cinclude = 1\n        self.body.analyse_declarations(env)\n        env.in_cinclude = old_cinclude_flag",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CDeclaratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CDeclaratorNode(Node):\n    # Part of a C declaration.\n    #\n    # Processing during analyse_declarations phase:\n    #\n    #   analyse\n    #      Returns (name, type) pair where name is the\n    #      CNameDeclaratorNode of the name being declared\n    #      and type is the type it is being declared as.\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CNameDeclaratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CNameDeclaratorNode(CDeclaratorNode):\n    #  name    string             The Cython name being declared\n    #  cname   string or None     C name, if specified\n    #  default ExprNode or None   the value assigned on declaration\n    child_attrs = ['default']\n    default = None\n    def analyse(self, base_type, env, nonempty=0, visibility=None, in_pxd=False):\n        if nonempty and self.name == '':\n            # May have mistaken the name for the type.\n            if base_type.is_ptr or base_type.is_array or base_type.is_buffer:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CPtrDeclaratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CPtrDeclaratorNode(CDeclaratorNode):\n    # base     CDeclaratorNode\n    child_attrs = [\"base\"]\n    def analyse_templates(self):\n        return self.base.analyse_templates()\n    def analyse(self, base_type, env, nonempty=0, visibility=None, in_pxd=False):\n        if base_type.is_pyobject:\n            error(self.pos, \"Pointer base type cannot be a Python object\")\n        ptr_type = PyrexTypes.c_ptr_type(base_type)\n        return self.base.analyse(ptr_type, env, nonempty=nonempty, visibility=visibility, in_pxd=in_pxd)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CReferenceDeclaratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CReferenceDeclaratorNode(CDeclaratorNode):\n    # base     CDeclaratorNode\n    child_attrs = [\"base\"]\n    def analyse_templates(self):\n        return self.base.analyse_templates()\n    def analyse(self, base_type, env, nonempty=0, visibility=None, in_pxd=False):\n        if base_type.is_pyobject:\n            error(self.pos, \"Reference base type cannot be a Python object\")\n        ref_type = PyrexTypes.c_ref_type(base_type)\n        return self.base.analyse(ref_type, env, nonempty=nonempty, visibility=visibility, in_pxd=in_pxd)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CArrayDeclaratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CArrayDeclaratorNode(CDeclaratorNode):\n    # base        CDeclaratorNode\n    # dimension   ExprNode\n    child_attrs = [\"base\", \"dimension\"]\n    def analyse(self, base_type, env, nonempty=0, visibility=None, in_pxd=False):\n        if (base_type.is_cpp_class and base_type.is_template_type()) or base_type.is_cfunction:\n            from .ExprNodes import TupleNode\n            if isinstance(self.dimension, TupleNode):\n                args = self.dimension.args\n            else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CFuncDeclaratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CFuncDeclaratorNode(CDeclaratorNode):\n    # base             CDeclaratorNode\n    # args             [CArgDeclNode]\n    # templates        [TemplatePlaceholderType]\n    # has_varargs      boolean\n    # exception_value  ConstNode\n    # exception_check  boolean    True if PyErr_Occurred check needed\n    # nogil            boolean    Can be called without gil\n    # with_gil         boolean    Acquire gil around function body\n    # is_const_method  boolean    Whether this is a const method",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CConstDeclaratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CConstDeclaratorNode(CDeclaratorNode):\n    # base     CDeclaratorNode\n    child_attrs = [\"base\"]\n    def analyse(self, base_type, env, nonempty=0, visibility=None, in_pxd=False):\n        if base_type.is_pyobject:\n            error(self.pos,\n                  \"Const base type cannot be a Python object\")\n        const = PyrexTypes.c_const_type(base_type)\n        return self.base.analyse(const, env, nonempty=nonempty, visibility=visibility, in_pxd=in_pxd)\nclass CArgDeclNode(Node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CArgDeclNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CArgDeclNode(Node):\n    # Item in a function declaration argument list.\n    #\n    # base_type      CBaseTypeNode\n    # declarator     CDeclaratorNode\n    # not_none       boolean            Tagged with 'not None'\n    # or_none        boolean            Tagged with 'or None'\n    # accept_none    boolean            Resolved boolean for not_none/or_none\n    # default        ExprNode or None\n    # default_value  PyObjectConst      constant for default value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CBaseTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CBaseTypeNode(Node):\n    # Abstract base class for C base type nodes.\n    #\n    # Processing during analyse_declarations phase:\n    #\n    #   analyse\n    #     Returns the type.\n    def analyse_as_type(self, env):\n        return self.analyse(env)\nclass CAnalysedBaseTypeNode(Node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CAnalysedBaseTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CAnalysedBaseTypeNode(Node):\n    # type            type\n    child_attrs = []\n    def analyse(self, env, could_be_name=False):\n        return self.type\nclass CSimpleBaseTypeNode(CBaseTypeNode):\n    # name             string\n    # module_path      [string]     Qualifying name components\n    # is_basic_c_type  boolean\n    # signed           boolean",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CSimpleBaseTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CSimpleBaseTypeNode(CBaseTypeNode):\n    # name             string\n    # module_path      [string]     Qualifying name components\n    # is_basic_c_type  boolean\n    # signed           boolean\n    # longness         integer\n    # complex          boolean\n    # is_self_arg      boolean      Is self argument of C method\n    # ##is_type_arg      boolean      Is type argument of class method\n    child_attrs = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "MemoryViewSliceTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class MemoryViewSliceTypeNode(CBaseTypeNode):\n    name = 'memoryview'\n    child_attrs = ['base_type_node', 'axes']\n    def analyse(self, env, could_be_name=False):\n        base_type = self.base_type_node.analyse(env)\n        if base_type.is_error: return base_type\n        from . import MemoryView\n        try:\n            axes_specs = MemoryView.get_axes_specs(env, self.axes)\n        except CompileError as e:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CNestedBaseTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CNestedBaseTypeNode(CBaseTypeNode):\n    # For C++ classes that live inside other C++ classes.\n    # name             string\n    # base_type        CBaseTypeNode\n    child_attrs = ['base_type']\n    def analyse(self, env, could_be_name=None):\n        base_type = self.base_type.analyse(env)\n        if base_type is PyrexTypes.error_type:\n            return PyrexTypes.error_type\n        if not base_type.is_cpp_class:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "TemplatedTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class TemplatedTypeNode(CBaseTypeNode):\n    #  After parsing:\n    #  positional_args  [ExprNode]        List of positional arguments\n    #  keyword_args     DictNode          Keyword arguments\n    #  base_type_node   CBaseTypeNode\n    #  After analysis:\n    #  type             PyrexTypes.BufferType or PyrexTypes.CppClassType  ...containing the right options\n    child_attrs = [\"base_type_node\", \"positional_args\",\n                   \"keyword_args\", \"dtype_node\"]\n    dtype_node = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CComplexBaseTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CComplexBaseTypeNode(CBaseTypeNode):\n    # base_type   CBaseTypeNode\n    # declarator  CDeclaratorNode\n    child_attrs = [\"base_type\", \"declarator\"]\n    def analyse(self, env, could_be_name=False):\n        base = self.base_type.analyse(env, could_be_name)\n        _, type = self.declarator.analyse(base, env)\n        return type\nclass CTupleBaseTypeNode(CBaseTypeNode):\n    # components [CBaseTypeNode]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CTupleBaseTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CTupleBaseTypeNode(CBaseTypeNode):\n    # components [CBaseTypeNode]\n    child_attrs = [\"components\"]\n    def analyse(self, env, could_be_name=False):\n        component_types = []\n        for c in self.components:\n            type = c.analyse(env)\n            if type.is_pyobject:\n                error(c.pos, \"Tuple types can't (yet) contain Python objects.\")\n                return error_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "FusedTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class FusedTypeNode(CBaseTypeNode):\n    \"\"\"\n    Represents a fused type in a ctypedef statement:\n        ctypedef cython.fused_type(int, long, long long) integral\n    name            str                     name of this fused type\n    types           [CSimpleBaseTypeNode]   is the list of types to be fused\n    \"\"\"\n    child_attrs = []\n    def analyse_declarations(self, env):\n        type = self.analyse(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CConstTypeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CConstTypeNode(CBaseTypeNode):\n    # base_type     CBaseTypeNode\n    child_attrs = [\"base_type\"]\n    def analyse(self, env, could_be_name=False):\n        base = self.base_type.analyse(env, could_be_name)\n        if base.is_pyobject:\n            error(self.pos,\n                  \"Const base type cannot be a Python object\")\n        return PyrexTypes.c_const_type(base)\nclass CVarDefNode(StatNode):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CVarDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CVarDefNode(StatNode):\n    #  C variable definition or forward/extern function declaration.\n    #\n    #  visibility    'private' or 'public' or 'extern'\n    #  base_type     CBaseTypeNode\n    #  declarators   [CDeclaratorNode]\n    #  in_pxd        boolean\n    #  api           boolean\n    #  overridable   boolean        whether it is a cpdef\n    #  modifiers     ['inline']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CStructOrUnionDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CStructOrUnionDefNode(StatNode):\n    #  name          string\n    #  cname         string or None\n    #  kind          \"struct\" or \"union\"\n    #  typedef_flag  boolean\n    #  visibility    \"public\" or \"private\"\n    #  api           boolean\n    #  in_pxd        boolean\n    #  attributes    [CVarDefNode] or None\n    #  entry         Entry",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CppClassNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CppClassNode(CStructOrUnionDefNode, BlockNode):\n    #  name          string\n    #  cname         string or None\n    #  visibility    \"extern\"\n    #  in_pxd        boolean\n    #  attributes    [CVarDefNode] or None\n    #  entry         Entry\n    #  base_classes  [CBaseTypeNode]\n    #  templates     [(string, bool)] or None\n    #  decorators    [DecoratorNode] or None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CEnumDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CEnumDefNode(StatNode):\n    #  name           string or None\n    #  cname          string or None\n    #  items          [CEnumDefItemNode]\n    #  typedef_flag   boolean\n    #  visibility     \"public\" or \"private\" or \"extern\"\n    #  api            boolean\n    #  in_pxd         boolean\n    #  create_wrapper boolean\n    #  entry          Entry",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CEnumDefItemNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CEnumDefItemNode(StatNode):\n    #  name     string\n    #  cname    string or None\n    #  value    ExprNode or None\n    child_attrs = [\"value\"]\n    def analyse_declarations(self, env, enum_entry):\n        if self.value:\n            self.value = self.value.analyse_const_expression(env)\n            if not self.value.type.is_int:\n                self.value = self.value.coerce_to(PyrexTypes.c_int_type, env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CTypeDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CTypeDefNode(StatNode):\n    #  base_type    CBaseTypeNode\n    #  declarator   CDeclaratorNode\n    #  visibility   \"public\" or \"private\"\n    #  api          boolean\n    #  in_pxd       boolean\n    child_attrs = [\"base_type\", \"declarator\"]\n    def analyse_declarations(self, env):\n        base = self.base_type.analyse(env)\n        name_declarator, type = self.declarator.analyse(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "FuncDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class FuncDefNode(StatNode, BlockNode):\n    #  Base class for function definition nodes.\n    #\n    #  return_type     PyrexType\n    #  #filename        string        C name of filename string const\n    #  entry           Symtab.Entry\n    #  needs_closure   boolean        Whether or not this function has inner functions/classes/yield\n    #  needs_outer_scope boolean      Whether or not this function requires outer scope\n    #  pymethdef_required boolean     Force Python method struct generation\n    #  directive_locals { string : ExprNode } locals defined by cython.locals(...)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CFuncDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CFuncDefNode(FuncDefNode):\n    #  C function definition.\n    #\n    #  modifiers     ['inline']\n    #  visibility    'private' or 'public' or 'extern'\n    #  base_type     CBaseTypeNode\n    #  declarator    CDeclaratorNode\n    #  cfunc_declarator  the CFuncDeclarator of this function\n    #                    (this is also available through declarator or a\n    #                     base thereof)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "PyArgDeclNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class PyArgDeclNode(Node):\n    # Argument which must be a Python object (used\n    # for * and ** arguments).\n    #\n    # name        string\n    # entry       Symtab.Entry\n    # annotation  ExprNode or None   Py3 argument annotation\n    child_attrs = []\n    is_self_arg = False\n    is_type_arg = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "DecoratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class DecoratorNode(Node):\n    # A decorator\n    #\n    # decorator    NameNode or CallNode or AttributeNode\n    child_attrs = ['decorator']\nclass DefNode(FuncDefNode):\n    # A Python function definition.\n    #\n    # name          string                 the Python name of the function\n    # lambda_name   string                 the internal name of a lambda 'function'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "DefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class DefNode(FuncDefNode):\n    # A Python function definition.\n    #\n    # name          string                 the Python name of the function\n    # lambda_name   string                 the internal name of a lambda 'function'\n    # decorators    [DecoratorNode]        list of decorators\n    # args          [CArgDeclNode]         formal arguments\n    # doc           EncodedString or None\n    # body          StatListNode\n    # return_type_annotation",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "DefNodeWrapper",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class DefNodeWrapper(FuncDefNode):\n    # DefNode python wrapper code generator\n    defnode = None\n    target = None # Target DefNode\n    def __init__(self, *args, **kwargs):\n        FuncDefNode.__init__(self, *args, **kwargs)\n        self.num_kwonly_args = self.target.num_kwonly_args\n        self.num_required_kw_args = self.target.num_required_kw_args\n        self.num_required_args = self.target.num_required_args\n        self.self_in_stararg = self.target.self_in_stararg",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "GeneratorDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class GeneratorDefNode(DefNode):\n    # Generator function node that creates a new generator instance when called.\n    #\n    # gbody          GeneratorBodyDefNode   the function implementing the generator\n    #\n    is_generator = True\n    is_coroutine = False\n    is_iterable_coroutine = False\n    is_asyncgen = False\n    gen_type_name = 'Generator'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "AsyncDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class AsyncDefNode(GeneratorDefNode):\n    gen_type_name = 'Coroutine'\n    is_coroutine = True\nclass IterableAsyncDefNode(AsyncDefNode):\n    gen_type_name = 'IterableCoroutine'\n    is_iterable_coroutine = True\nclass AsyncGenNode(AsyncDefNode):\n    gen_type_name = 'AsyncGen'\n    is_asyncgen = True\nclass GeneratorBodyDefNode(DefNode):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "IterableAsyncDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class IterableAsyncDefNode(AsyncDefNode):\n    gen_type_name = 'IterableCoroutine'\n    is_iterable_coroutine = True\nclass AsyncGenNode(AsyncDefNode):\n    gen_type_name = 'AsyncGen'\n    is_asyncgen = True\nclass GeneratorBodyDefNode(DefNode):\n    # Main code body of a generator implemented as a DefNode.\n    #\n    is_generator_body = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "AsyncGenNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class AsyncGenNode(AsyncDefNode):\n    gen_type_name = 'AsyncGen'\n    is_asyncgen = True\nclass GeneratorBodyDefNode(DefNode):\n    # Main code body of a generator implemented as a DefNode.\n    #\n    is_generator_body = True\n    is_inlined = False\n    is_async_gen_body = False\n    inlined_comprehension_type = None  # container type for inlined comprehensions",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "GeneratorBodyDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class GeneratorBodyDefNode(DefNode):\n    # Main code body of a generator implemented as a DefNode.\n    #\n    is_generator_body = True\n    is_inlined = False\n    is_async_gen_body = False\n    inlined_comprehension_type = None  # container type for inlined comprehensions\n    def __init__(self, pos=None, name=None, body=None, is_async_gen_body=False):\n        super(GeneratorBodyDefNode, self).__init__(\n            pos=pos, body=body, name=name, is_async_gen_body=is_async_gen_body,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "OverrideCheckNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class OverrideCheckNode(StatNode):\n    # A Node for dispatching to the def method if it\n    # is overridden.\n    #\n    #  py_func\n    #\n    #  args\n    #  func_temp\n    #  body\n    child_attrs = ['body']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ClassDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ClassDefNode(StatNode, BlockNode):\n    pass\nclass PyClassDefNode(ClassDefNode):\n    #  A Python class definition.\n    #\n    #  name     EncodedString   Name of the class\n    #  doc      string or None\n    #  body     StatNode        Attribute definition code\n    #  entry    Symtab.Entry\n    #  scope    PyClassScope",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "PyClassDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class PyClassDefNode(ClassDefNode):\n    #  A Python class definition.\n    #\n    #  name     EncodedString   Name of the class\n    #  doc      string or None\n    #  body     StatNode        Attribute definition code\n    #  entry    Symtab.Entry\n    #  scope    PyClassScope\n    #  decorators    [DecoratorNode]        list of decorators or None\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CClassDefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CClassDefNode(ClassDefNode):\n    #  An extension type definition.\n    #\n    #  visibility         'private' or 'public' or 'extern'\n    #  typedef_flag       boolean\n    #  api                boolean\n    #  module_name        string or None    For import of extern type objects\n    #  class_name         string            Unqualified name of class\n    #  as_name            string or None    Name to declare as in this scope\n    #  bases              TupleNode         Base class(es)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "PropertyNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class PropertyNode(StatNode):\n    #  Definition of a property in an extension type.\n    #\n    #  name   string\n    #  doc    EncodedString or None    Doc string\n    #  entry  Symtab.Entry\n    #  body   StatListNode\n    child_attrs = [\"body\"]\n    def analyse_declarations(self, env):\n        self.entry = env.declare_property(self.name, self.doc, self.pos)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "GlobalNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class GlobalNode(StatNode):\n    # Global variable declaration.\n    #\n    # names    [string]\n    child_attrs = []\n    def analyse_declarations(self, env):\n        for name in self.names:\n            env.declare_global(name, self.pos)\n    def analyse_expressions(self, env):\n        return self",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "NonlocalNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class NonlocalNode(StatNode):\n    # Nonlocal variable declaration via the 'nonlocal' keyword.\n    #\n    # names    [string]\n    child_attrs = []\n    def analyse_declarations(self, env):\n        for name in self.names:\n            env.declare_nonlocal(name, self.pos)\n    def analyse_expressions(self, env):\n        return self",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ExprStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ExprStatNode(StatNode):\n    #  Expression used as a statement.\n    #\n    #  expr   ExprNode\n    child_attrs = [\"expr\"]\n    def analyse_declarations(self, env):\n        from . import ExprNodes\n        expr = self.expr\n        if isinstance(expr, ExprNodes.GeneralCallNode):\n            func = expr.function.as_cython_attribute()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "AssignmentNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class AssignmentNode(StatNode):\n    #  Abstract base class for assignment nodes.\n    #\n    #  The analyse_expressions and generate_execution_code\n    #  phases of assignments are split into two sub-phases\n    #  each, to enable all the right hand sides of a\n    #  parallel assignment to be evaluated before assigning\n    #  to any of the left hand sides.\n    def analyse_expressions(self, env):\n        node = self.analyse_types(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "SingleAssignmentNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class SingleAssignmentNode(AssignmentNode):\n    #  The simplest case:\n    #\n    #    a = b\n    #\n    #  lhs                      ExprNode      Left hand side\n    #  rhs                      ExprNode      Right hand side\n    #  first                    bool          Is this guaranteed the first assignment to lhs?\n    #  is_overloaded_assignment bool          Is this assignment done via an overloaded operator=\n    #  exception_check",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CascadedAssignmentNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CascadedAssignmentNode(AssignmentNode):\n    #  An assignment with multiple left hand sides:\n    #\n    #    a = b = c\n    #\n    #  lhs_list   [ExprNode]   Left hand sides\n    #  rhs        ExprNode     Right hand sides\n    #\n    #  Used internally:\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ParallelAssignmentNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ParallelAssignmentNode(AssignmentNode):\n    #  A combined packing/unpacking assignment:\n    #\n    #    a, b, c =  d, e, f\n    #\n    #  This has been rearranged by the parser into\n    #\n    #    a = d ; b = e ; c = f\n    #\n    #  but we must evaluate all the right hand sides",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "InPlaceAssignmentNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class InPlaceAssignmentNode(AssignmentNode):\n    #  An in place arithmetic operand:\n    #\n    #    a += b\n    #    a -= b\n    #    ...\n    #\n    #  lhs      ExprNode      Left hand side\n    #  rhs      ExprNode      Right hand side\n    #  operator char          one of \"+-*/%^&|\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "PrintStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class PrintStatNode(StatNode):\n    #  print statement\n    #\n    #  arg_tuple         TupleNode\n    #  stream            ExprNode or None (stdout)\n    #  append_newline    boolean\n    child_attrs = [\"arg_tuple\", \"stream\"]\n    def analyse_expressions(self, env):\n        if self.stream:\n            stream = self.stream.analyse_expressions(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ExecStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ExecStatNode(StatNode):\n    #  exec statement\n    #\n    #  args     [ExprNode]\n    child_attrs = [\"args\"]\n    def analyse_expressions(self, env):\n        for i, arg in enumerate(self.args):\n            arg = arg.analyse_expressions(env)\n            arg = arg.coerce_to_pyobject(env)\n            self.args[i] = arg",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "DelStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class DelStatNode(StatNode):\n    #  del statement\n    #\n    #  args     [ExprNode]\n    child_attrs = [\"args\"]\n    ignore_nonexisting = False\n    def analyse_declarations(self, env):\n        for arg in self.args:\n            arg.analyse_target_declaration(env)\n    def analyse_expressions(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "PassStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class PassStatNode(StatNode):\n    #  pass statement\n    child_attrs = []\n    def analyse_expressions(self, env):\n        return self\n    def generate_execution_code(self, code):\n        pass\nclass IndirectionNode(StatListNode):\n    \"\"\"\n    This adds an indirection so that the node can be shared and a subtree can",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "IndirectionNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class IndirectionNode(StatListNode):\n    \"\"\"\n    This adds an indirection so that the node can be shared and a subtree can\n    be removed at any time by clearing self.stats.\n    \"\"\"\n    def __init__(self, stats):\n        super(IndirectionNode, self).__init__(stats[0].pos, stats=stats)\nclass BreakStatNode(StatNode):\n    child_attrs = []\n    is_terminator = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "BreakStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class BreakStatNode(StatNode):\n    child_attrs = []\n    is_terminator = True\n    def analyse_expressions(self, env):\n        return self\n    def generate_execution_code(self, code):\n        code.mark_pos(self.pos)\n        if not code.break_label:\n            error(self.pos, \"break statement not inside loop\")\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ContinueStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ContinueStatNode(StatNode):\n    child_attrs = []\n    is_terminator = True\n    def analyse_expressions(self, env):\n        return self\n    def generate_execution_code(self, code):\n        if not code.continue_label:\n            error(self.pos, \"continue statement not inside loop\")\n            return\n        code.mark_pos(self.pos)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ReturnStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ReturnStatNode(StatNode):\n    #  return statement\n    #\n    #  value         ExprNode or None\n    #  return_type   PyrexType\n    #  in_generator  return inside of generator => raise StopIteration\n    #  in_async_gen  return inside of async generator\n    child_attrs = [\"value\"]\n    is_terminator = True\n    in_generator = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "RaiseStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class RaiseStatNode(StatNode):\n    #  raise statement\n    #\n    #  exc_type    ExprNode or None\n    #  exc_value   ExprNode or None\n    #  exc_tb      ExprNode or None\n    #  cause       ExprNode or None\n    child_attrs = [\"exc_type\", \"exc_value\", \"exc_tb\", \"cause\"]\n    is_terminator = True\n    def analyse_expressions(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ReraiseStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ReraiseStatNode(StatNode):\n    child_attrs = []\n    is_terminator = True\n    def analyse_expressions(self, env):\n        return self\n    nogil_check = Node.gil_error\n    gil_message = \"Raising exception\"\n    def generate_execution_code(self, code):\n        code.mark_pos(self.pos)\n        vars = code.funcstate.exc_vars",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "AssertStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class AssertStatNode(StatNode):\n    #  assert statement\n    #\n    #  cond    ExprNode\n    #  value   ExprNode or None\n    child_attrs = [\"cond\", \"value\"]\n    def analyse_expressions(self, env):\n        self.cond = self.cond.analyse_boolean_expression(env)\n        if self.value:\n            value = self.value.analyse_types(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "IfStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class IfStatNode(StatNode):\n    #  if statement\n    #\n    #  if_clauses   [IfClauseNode]\n    #  else_clause  StatNode or None\n    child_attrs = [\"if_clauses\", \"else_clause\"]\n    def analyse_declarations(self, env):\n        for if_clause in self.if_clauses:\n            if_clause.analyse_declarations(env)\n        if self.else_clause:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "IfClauseNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class IfClauseNode(Node):\n    #  if or elif clause in an if statement\n    #\n    #  condition   ExprNode\n    #  body        StatNode\n    child_attrs = [\"condition\", \"body\"]\n    branch_hint = None\n    def analyse_declarations(self, env):\n        self.body.analyse_declarations(env)\n    def analyse_expressions(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "SwitchCaseNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class SwitchCaseNode(StatNode):\n    # Generated in the optimization of an if-elif-else node\n    #\n    # conditions    [ExprNode]\n    # body          StatNode\n    child_attrs = ['conditions', 'body']\n    def generate_condition_evaluation_code(self, code):\n        for cond in self.conditions:\n            cond.generate_evaluation_code(code)\n    def generate_execution_code(self, code):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "SwitchStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class SwitchStatNode(StatNode):\n    # Generated in the optimization of an if-elif-else node\n    #\n    # test          ExprNode\n    # cases         [SwitchCaseNode]\n    # else_clause   StatNode or None\n    child_attrs = ['test', 'cases', 'else_clause']\n    def generate_execution_code(self, code):\n        self.test.generate_evaluation_code(code)\n        # Make sure all conditions are evaluated before going into the switch() statement.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "LoopNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class LoopNode(object):\n    pass\nclass WhileStatNode(LoopNode, StatNode):\n    #  while statement\n    #\n    #  condition    ExprNode\n    #  body         StatNode\n    #  else_clause  StatNode\n    child_attrs = [\"condition\", \"body\", \"else_clause\"]\n    def analyse_declarations(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "WhileStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class WhileStatNode(LoopNode, StatNode):\n    #  while statement\n    #\n    #  condition    ExprNode\n    #  body         StatNode\n    #  else_clause  StatNode\n    child_attrs = [\"condition\", \"body\", \"else_clause\"]\n    def analyse_declarations(self, env):\n        self.body.analyse_declarations(env)\n        if self.else_clause:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "DictIterationNextNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class DictIterationNextNode(Node):\n    # Helper node for calling PyDict_Next() inside of a WhileStatNode\n    # and checking the dictionary size for changes.  Created in\n    # Optimize.py.\n    child_attrs = ['dict_obj', 'expected_size', 'pos_index_var',\n                   'coerced_key_var', 'coerced_value_var', 'coerced_tuple_var',\n                   'key_target', 'value_target', 'tuple_target', 'is_dict_flag']\n    coerced_key_var = key_ref = None\n    coerced_value_var = value_ref = None\n    coerced_tuple_var = tuple_ref = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "SetIterationNextNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class SetIterationNextNode(Node):\n    # Helper node for calling _PySet_NextEntry() inside of a WhileStatNode\n    # and checking the set size for changes.  Created in Optimize.py.\n    child_attrs = ['set_obj', 'expected_size', 'pos_index_var',\n                   'coerced_value_var', 'value_target', 'is_set_flag']\n    coerced_value_var = value_ref = None\n    def __init__(self, set_obj, expected_size, pos_index_var, value_target, is_set_flag):\n        Node.__init__(\n            self, set_obj.pos,\n            set_obj=set_obj,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "_ForInStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class _ForInStatNode(LoopNode, StatNode):\n    #  Base class of 'for-in' statements.\n    #\n    #  target        ExprNode\n    #  iterator      IteratorNode | AIterAwaitExprNode(AsyncIteratorNode)\n    #  body          StatNode\n    #  else_clause   StatNode\n    #  item          NextNode | AwaitExprNode(AsyncNextNode)\n    #  is_async      boolean        true for 'async for' statements\n    child_attrs = [\"target\", \"item\", \"iterator\", \"body\", \"else_clause\"]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ForInStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ForInStatNode(_ForInStatNode):\n    #  'for' statement\n    is_async = False\n    def _create_item_node(self):\n        from .ExprNodes import NextNode\n        self.item = NextNode(self.iterator)\nclass AsyncForStatNode(_ForInStatNode):\n    #  'async for' statement\n    #\n    #  iterator      AIterAwaitExprNode(AsyncIteratorNode)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "AsyncForStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class AsyncForStatNode(_ForInStatNode):\n    #  'async for' statement\n    #\n    #  iterator      AIterAwaitExprNode(AsyncIteratorNode)\n    #  item          AwaitIterNextExprNode(AsyncIteratorNode)\n    is_async = True\n    def __init__(self, pos, **kw):\n        assert 'item' not in kw\n        from . import ExprNodes\n        # AwaitExprNodes must appear before running MarkClosureVisitor",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ForFromStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ForFromStatNode(LoopNode, StatNode):\n    #  for name from expr rel name rel expr\n    #\n    #  target        NameNode\n    #  bound1        ExprNode\n    #  relation1     string\n    #  relation2     string\n    #  bound2        ExprNode\n    #  step          ExprNode or None\n    #  body          StatNode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "WithStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class WithStatNode(StatNode):\n    \"\"\"\n    Represents a Python with statement.\n    Implemented by the WithTransform as follows:\n        MGR = EXPR\n        EXIT = MGR.__exit__\n        VALUE = MGR.__enter__()\n        EXC = True\n        try:\n            try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "WithTargetAssignmentStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class WithTargetAssignmentStatNode(AssignmentNode):\n    # The target assignment of the 'with' statement value (return\n    # value of the __enter__() call).\n    #\n    # This is a special cased assignment that properly cleans up the RHS.\n    #\n    # lhs       ExprNode      the assignment target\n    # rhs       ExprNode      a (coerced) TempNode for the rhs (from WithStatNode)\n    # with_node WithStatNode  the surrounding with-statement\n    child_attrs = [\"rhs\", \"lhs\"]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "TryExceptStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class TryExceptStatNode(StatNode):\n    #  try .. except statement\n    #\n    #  body             StatNode\n    #  except_clauses   [ExceptClauseNode]\n    #  else_clause      StatNode or None\n    child_attrs = [\"body\", \"except_clauses\", \"else_clause\"]\n    in_generator = False\n    def analyse_declarations(self, env):\n        self.body.analyse_declarations(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ExceptClauseNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ExceptClauseNode(Node):\n    #  Part of try ... except statement.\n    #\n    #  pattern        [ExprNode]\n    #  target         ExprNode or None\n    #  body           StatNode\n    #  excinfo_target TupleNode(3*ResultRefNode) or None   optional target for exception info (not owned here!)\n    #  match_flag     string             result of exception match\n    #  exc_value      ExcValueNode       used internally\n    #  function_name  string             qualified name of enclosing function",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "TryFinallyStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class TryFinallyStatNode(StatNode):\n    #  try ... finally statement\n    #\n    #  body             StatNode\n    #  finally_clause   StatNode\n    #  finally_except_clause  deep-copy of finally_clause for exception case\n    #  in_generator     inside of generator => must store away current exception also in return case\n    #\n    #  Each of the continue, break, return and error gotos runs\n    #  into its own deep-copy of the finally block code.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "NogilTryFinallyStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class NogilTryFinallyStatNode(TryFinallyStatNode):\n    \"\"\"\n    A try/finally statement that may be used in nogil code sections.\n    \"\"\"\n    preserve_exception = False\n    nogil_check = None\nclass GILStatNode(NogilTryFinallyStatNode):\n    #  'with gil' or 'with nogil' statement\n    #\n    #   state   string   'gil' or 'nogil'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "GILStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class GILStatNode(NogilTryFinallyStatNode):\n    #  'with gil' or 'with nogil' statement\n    #\n    #   state   string   'gil' or 'nogil'\n    state_temp = None\n    def __init__(self, pos, state, body):\n        self.state = state\n        self.create_state_temp_if_needed(pos, state, body)\n        TryFinallyStatNode.__init__(\n            self, pos,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "GILExitNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class GILExitNode(StatNode):\n    \"\"\"\n    Used as the 'finally' block in a GILStatNode\n    state   string   'gil' or 'nogil'\n    \"\"\"\n    child_attrs = []\n    state_temp = None\n    def analyse_expressions(self, env):\n        return self\n    def generate_execution_code(self, code):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "EnsureGILNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class EnsureGILNode(GILExitNode):\n    \"\"\"\n    Ensure the GIL in nogil functions for cleanup before returning.\n    \"\"\"\n    def generate_execution_code(self, code):\n        code.put_ensure_gil(declare_gilstate=False)\ndef cython_view_utility_code():\n    from . import MemoryView\n    return MemoryView.view_utility_code\nutility_code_for_cimports = {",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CImportStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CImportStatNode(StatNode):\n    #  cimport statement\n    #\n    #  module_name   string           Qualified name of module being imported\n    #  as_name       string or None   Name specified in \"as\" clause, if any\n    #  is_absolute   bool             True for absolute imports, False otherwise\n    child_attrs = []\n    is_absolute = False\n    def analyse_declarations(self, env):\n        if not env.is_module_scope:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "FromCImportStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class FromCImportStatNode(StatNode):\n    #  from ... cimport statement\n    #\n    #  module_name     string                        Qualified name of module\n    #  relative_level  int or None                   Relative import: number of dots before module_name\n    #  imported_names  [(pos, name, as_name, kind)]  Names to be imported\n    child_attrs = []\n    module_name = None\n    relative_level = None\n    imported_names = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "FromImportStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class FromImportStatNode(StatNode):\n    #  from ... import statement\n    #\n    #  module           ImportNode\n    #  items            [(string, NameNode)]\n    #  interned_items   [(string, NameNode, ExprNode)]\n    #  item             PyTempNode            used internally\n    #  import_star      boolean               used internally\n    child_attrs = [\"module\"]\n    import_star = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ParallelNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ParallelNode(Node):\n    \"\"\"\n    Base class for cython.parallel constructs.\n    \"\"\"\n    nogil_check = None\nclass ParallelStatNode(StatNode, ParallelNode):\n    \"\"\"\n    Base class for 'with cython.parallel.parallel():' and 'for i in prange():'.\n    assignments     { Entry(var) : (var.pos, inplace_operator_or_None) }\n                    assignments to variables in this parallel section",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ParallelStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ParallelStatNode(StatNode, ParallelNode):\n    \"\"\"\n    Base class for 'with cython.parallel.parallel():' and 'for i in prange():'.\n    assignments     { Entry(var) : (var.pos, inplace_operator_or_None) }\n                    assignments to variables in this parallel section\n    parent          parent ParallelStatNode or None\n    is_parallel     indicates whether this node is OpenMP parallel\n                    (true for #pragma omp parallel for and\n                              #pragma omp parallel)\n    is_parallel is true for:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ParallelWithBlockNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ParallelWithBlockNode(ParallelStatNode):\n    \"\"\"\n    This node represents a 'with cython.parallel.parallel():' block\n    \"\"\"\n    valid_keyword_arguments = ['num_threads']\n    num_threads = None\n    def analyse_declarations(self, env):\n        super(ParallelWithBlockNode, self).analyse_declarations(env)\n        if self.args:\n            error(self.pos, \"cython.parallel.parallel() does not take \"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ParallelRangeNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class ParallelRangeNode(ParallelStatNode):\n    \"\"\"\n    This node represents a 'for i in cython.parallel.prange():' construct.\n    target       NameNode       the target iteration variable\n    else_clause  Node or None   the else clause of this loop\n    \"\"\"\n    child_attrs = ['body', 'target', 'else_clause', 'args', 'num_threads',\n                   'chunksize']\n    body = target = else_clause = args = None\n    start = stop = step = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "CnameDecoratorNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "class CnameDecoratorNode(StatNode):\n    \"\"\"\n    This node is for the cname decorator in CythonUtilityCode:\n        @cname('the_cname')\n        cdef func(...):\n            ...\n    In case of a cdef class the cname specifies the objstruct_cname.\n    node        the node to which the cname decorator is applied\n    cname       the cname the node should get\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "relative_position",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "def relative_position(pos):\n    return (pos[0].get_filenametable_entry(), pos[1])\ndef embed_position(pos, docstring):\n    if not Options.embed_pos_in_docstring:\n        return docstring\n    pos_line = u'File: %s (starting at line %s)' % relative_position(pos)\n    if docstring is None:\n        # unicode string\n        return EncodedString(pos_line)\n    # make sure we can encode the filename in the docstring encoding",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "embed_position",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "def embed_position(pos, docstring):\n    if not Options.embed_pos_in_docstring:\n        return docstring\n    pos_line = u'File: %s (starting at line %s)' % relative_position(pos)\n    if docstring is None:\n        # unicode string\n        return EncodedString(pos_line)\n    # make sure we can encode the filename in the docstring encoding\n    # otherwise make the docstring a unicode string\n    encoding = docstring.encoding",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "analyse_type_annotation",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "def analyse_type_annotation(annotation, env, assigned_value=None):\n    base_type = None\n    is_ambiguous = False\n    explicit_pytype = explicit_ctype = False\n    if annotation.is_dict_literal:\n        warning(annotation.pos,\n                \"Dicts should no longer be used as type annotations. Use 'cython.int' etc. directly.\")\n        for name, value in annotation.key_value_pairs:\n            if not name.is_string_literal:\n                continue",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "write_func_call",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "def write_func_call(func, codewriter_class):\n    def f(*args, **kwds):\n        if len(args) > 1 and isinstance(args[1], codewriter_class):\n            # here we annotate the code with this function call\n            # but only if new code is generated\n            node, code = args[:2]\n            marker = '                    /* %s -> %s.%s %s */' % (\n                ' ' * code.call_level,\n                node.__class__.__name__,\n                func.__name__,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "ForStatNode",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "def ForStatNode(pos, **kw):\n    if 'iterator' in kw:\n        if kw['iterator'].is_async:\n            return AsyncForStatNode(pos, **kw)\n        else:\n            return ForInStatNode(pos, **kw)\n    else:\n        return ForFromStatNode(pos, **kw)\nclass _ForInStatNode(LoopNode, StatNode):\n    #  Base class of 'for-in' statements.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "cython_view_utility_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "def cython_view_utility_code():\n    from . import MemoryView\n    return MemoryView.view_utility_code\nutility_code_for_cimports = {\n    # utility code (or inlining c) in a pxd (or pyx) file.\n    # TODO: Consider a generic user-level mechanism for importing\n    'cpython.array'         : lambda : UtilityCode.load_cached(\"ArrayAPI\", \"arrayarray.h\"),\n    'cpython.array.array'   : lambda : UtilityCode.load_cached(\"ArrayAPI\", \"arrayarray.h\"),\n    'cython.view'           : cython_view_utility_code,\n}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "utility_code_for_cimports",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "utility_code_for_cimports = {\n    # utility code (or inlining c) in a pxd (or pyx) file.\n    # TODO: Consider a generic user-level mechanism for importing\n    'cpython.array'         : lambda : UtilityCode.load_cached(\"ArrayAPI\", \"arrayarray.h\"),\n    'cpython.array.array'   : lambda : UtilityCode.load_cached(\"ArrayAPI\", \"arrayarray.h\"),\n    'cython.view'           : cython_view_utility_code,\n}\nutility_code_for_imports = {\n    # utility code used when special modules are imported.\n    # TODO: Consider a generic user-level mechanism for importing",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "utility_code_for_imports",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "utility_code_for_imports = {\n    # utility code used when special modules are imported.\n    # TODO: Consider a generic user-level mechanism for importing\n    'asyncio': (\"__Pyx_patch_asyncio\", \"PatchAsyncIO\", \"Coroutine.c\"),\n    'inspect': (\"__Pyx_patch_inspect\", \"PatchInspect\", \"Coroutine.c\"),\n}\nclass CImportStatNode(StatNode):\n    #  cimport statement\n    #\n    #  module_name   string           Qualified name of module being imported",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "printing_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "printing_utility_code = UtilityCode.load_cached(\"Print\", \"Printing.c\")\nprinting_one_utility_code = UtilityCode.load_cached(\"PrintOne\", \"Printing.c\")\n#------------------------------------------------------------------------------------\n# Exception raising code\n#\n# Exceptions are raised by __Pyx_Raise() and stored as plain\n# type/value/tb in PyThreadState->curexc_*.  When being caught by an\n# 'except' statement, curexc_* is moved over to exc_* by\n# __Pyx_GetException()\nrestore_exception_utility_code = UtilityCode.load_cached(\"PyErrFetchRestore\", \"Exceptions.c\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "printing_one_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "printing_one_utility_code = UtilityCode.load_cached(\"PrintOne\", \"Printing.c\")\n#------------------------------------------------------------------------------------\n# Exception raising code\n#\n# Exceptions are raised by __Pyx_Raise() and stored as plain\n# type/value/tb in PyThreadState->curexc_*.  When being caught by an\n# 'except' statement, curexc_* is moved over to exc_* by\n# __Pyx_GetException()\nrestore_exception_utility_code = UtilityCode.load_cached(\"PyErrFetchRestore\", \"Exceptions.c\")\nraise_utility_code = UtilityCode.load_cached(\"RaiseException\", \"Exceptions.c\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "restore_exception_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "restore_exception_utility_code = UtilityCode.load_cached(\"PyErrFetchRestore\", \"Exceptions.c\")\nraise_utility_code = UtilityCode.load_cached(\"RaiseException\", \"Exceptions.c\")\nget_exception_utility_code = UtilityCode.load_cached(\"GetException\", \"Exceptions.c\")\nswap_exception_utility_code = UtilityCode.load_cached(\"SwapException\", \"Exceptions.c\")\nreset_exception_utility_code = UtilityCode.load_cached(\"SaveResetException\", \"Exceptions.c\")\ntraceback_utility_code = UtilityCode.load_cached(\"AddTraceback\", \"Exceptions.c\")\n#------------------------------------------------------------------------------------\nget_exception_tuple_utility_code = UtilityCode(\n    proto=\"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(PyThreadState *__pyx_tstate); /*proto*/",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "raise_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "raise_utility_code = UtilityCode.load_cached(\"RaiseException\", \"Exceptions.c\")\nget_exception_utility_code = UtilityCode.load_cached(\"GetException\", \"Exceptions.c\")\nswap_exception_utility_code = UtilityCode.load_cached(\"SwapException\", \"Exceptions.c\")\nreset_exception_utility_code = UtilityCode.load_cached(\"SaveResetException\", \"Exceptions.c\")\ntraceback_utility_code = UtilityCode.load_cached(\"AddTraceback\", \"Exceptions.c\")\n#------------------------------------------------------------------------------------\nget_exception_tuple_utility_code = UtilityCode(\n    proto=\"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(PyThreadState *__pyx_tstate); /*proto*/\n\"\"\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "get_exception_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "get_exception_utility_code = UtilityCode.load_cached(\"GetException\", \"Exceptions.c\")\nswap_exception_utility_code = UtilityCode.load_cached(\"SwapException\", \"Exceptions.c\")\nreset_exception_utility_code = UtilityCode.load_cached(\"SaveResetException\", \"Exceptions.c\")\ntraceback_utility_code = UtilityCode.load_cached(\"AddTraceback\", \"Exceptions.c\")\n#------------------------------------------------------------------------------------\nget_exception_tuple_utility_code = UtilityCode(\n    proto=\"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(PyThreadState *__pyx_tstate); /*proto*/\n\"\"\",\n    # I doubt that calling __Pyx_GetException() here is correct as it moves",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "swap_exception_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "swap_exception_utility_code = UtilityCode.load_cached(\"SwapException\", \"Exceptions.c\")\nreset_exception_utility_code = UtilityCode.load_cached(\"SaveResetException\", \"Exceptions.c\")\ntraceback_utility_code = UtilityCode.load_cached(\"AddTraceback\", \"Exceptions.c\")\n#------------------------------------------------------------------------------------\nget_exception_tuple_utility_code = UtilityCode(\n    proto=\"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(PyThreadState *__pyx_tstate); /*proto*/\n\"\"\",\n    # I doubt that calling __Pyx_GetException() here is correct as it moves\n    # the exception from tstate->curexc_* to tstate->exc_*, which prevents",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "reset_exception_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "reset_exception_utility_code = UtilityCode.load_cached(\"SaveResetException\", \"Exceptions.c\")\ntraceback_utility_code = UtilityCode.load_cached(\"AddTraceback\", \"Exceptions.c\")\n#------------------------------------------------------------------------------------\nget_exception_tuple_utility_code = UtilityCode(\n    proto=\"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(PyThreadState *__pyx_tstate); /*proto*/\n\"\"\",\n    # I doubt that calling __Pyx_GetException() here is correct as it moves\n    # the exception from tstate->curexc_* to tstate->exc_*, which prevents\n    # exception handlers later on from receiving it.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "traceback_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "traceback_utility_code = UtilityCode.load_cached(\"AddTraceback\", \"Exceptions.c\")\n#------------------------------------------------------------------------------------\nget_exception_tuple_utility_code = UtilityCode(\n    proto=\"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(PyThreadState *__pyx_tstate); /*proto*/\n\"\"\",\n    # I doubt that calling __Pyx_GetException() here is correct as it moves\n    # the exception from tstate->curexc_* to tstate->exc_*, which prevents\n    # exception handlers later on from receiving it.\n    # NOTE: \"__pyx_tstate\" may be used by __Pyx_GetException() macro",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "get_exception_tuple_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "peekOfCode": "get_exception_tuple_utility_code = UtilityCode(\n    proto=\"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(PyThreadState *__pyx_tstate); /*proto*/\n\"\"\",\n    # I doubt that calling __Pyx_GetException() here is correct as it moves\n    # the exception from tstate->curexc_* to tstate->exc_*, which prevents\n    # exception handlers later on from receiving it.\n    # NOTE: \"__pyx_tstate\" may be used by __Pyx_GetException() macro\n    impl = \"\"\"\nstatic PyObject *__Pyx_GetExceptionTuple(CYTHON_UNUSED PyThreadState *__pyx_tstate) {",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Nodes",
        "documentation": {}
    },
    {
        "label": "_YieldNodeCollector",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class _YieldNodeCollector(Visitor.TreeVisitor):\n    \"\"\"\n    YieldExprNode finder for generator expressions.\n    \"\"\"\n    def __init__(self):\n        Visitor.TreeVisitor.__init__(self)\n        self.yield_stat_nodes = {}\n        self.yield_nodes = []\n    visit_Node = Visitor.TreeVisitor.visitchildren\n    def visit_YieldExprNode(self, node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "IterationTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class IterationTransform(Visitor.EnvTransform):\n    \"\"\"Transform some common for-in loop patterns into efficient C loops:\n    - for-in-dict loop becomes a while loop calling PyDict_Next()\n    - for-in-enumerate is replaced by an external counter variable\n    - for-in-range loop becomes a plain C for loop\n    \"\"\"\n    def visit_PrimaryCmpNode(self, node):\n        if node.is_ptr_contains():\n            # for t in operand2:\n            #     if operand1 == t:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "SwitchTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class SwitchTransform(Visitor.EnvTransform):\n    \"\"\"\n    This transformation tries to turn long if statements into C switch statements.\n    The requirement is that every clause be an (or of) var == value, where the var\n    is common among all clauses and both var and value are ints.\n    \"\"\"\n    NO_MATCH = (None, None, None)\n    def extract_conditions(self, cond, allow_not_in):\n        while True:\n            if isinstance(cond, (ExprNodes.CoerceToTempNode,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "FlattenInListTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class FlattenInListTransform(Visitor.VisitorTransform, SkipDeclarations):\n    \"\"\"\n    This transformation flattens \"x in [val1, ..., valn]\" into a sequential list\n    of comparisons.\n    \"\"\"\n    def visit_PrimaryCmpNode(self, node):\n        self.visitchildren(node)\n        if node.cascade is not None:\n            return node\n        elif node.operator == 'in':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "DropRefcountingTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class DropRefcountingTransform(Visitor.VisitorTransform):\n    \"\"\"Drop ref-counting in safe places.\n    \"\"\"\n    visit_Node = Visitor.VisitorTransform.recurse_to_children\n    def visit_ParallelAssignmentNode(self, node):\n        \"\"\"\n        Parallel swap assignments like 'a,b = b,a' are safe.\n        \"\"\"\n        left_names, right_names = [], []\n        left_indices, right_indices = [], []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "EarlyReplaceBuiltinCalls",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class EarlyReplaceBuiltinCalls(Visitor.EnvTransform):\n    \"\"\"Optimize some common calls to builtin types *before* the type\n    analysis phase and *after* the declarations analysis phase.\n    This transform cannot make use of any argument types, but it can\n    restructure the tree in a way that the type analysis phase can\n    respond to.\n    Introducing C function calls here may not be a good idea.  Move\n    them to the OptimizeBuiltinCalls transform instead, which runs\n    after type analysis.\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "InlineDefNodeCalls",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class InlineDefNodeCalls(Visitor.NodeRefCleanupMixin, Visitor.EnvTransform):\n    visit_Node = Visitor.VisitorTransform.recurse_to_children\n    def get_constant_value_node(self, name_node):\n        if name_node.cf_state is None:\n            return None\n        if name_node.cf_state.cf_is_null:\n            return None\n        entry = self.current_env().lookup(name_node.name)\n        if not entry or (not entry.cf_assignments\n                         or len(entry.cf_assignments) != 1):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "OptimizeBuiltinCalls",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class OptimizeBuiltinCalls(Visitor.NodeRefCleanupMixin,\n                           Visitor.MethodDispatcherTransform):\n    \"\"\"Optimize some common methods calls and instantiation patterns\n    for builtin types *after* the type analysis phase.\n    Running after type analysis, this transform can only perform\n    function replacements that do not alter the function return type\n    in a way that was not anticipated by the type analysis.\n    \"\"\"\n    ### cleanup to avoid redundant coercions to/from Python types\n    def visit_PyTypeTestNode(self, node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "ConstantFolding",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class ConstantFolding(Visitor.VisitorTransform, SkipDeclarations):\n    \"\"\"Calculate the result of constant expressions to store it in\n    ``expr_node.constant_result``, and replace trivial cases by their\n    constant result.\n    General rules:\n    - We calculate float constants to make them available to the\n      compiler, but we do not aggregate them into a single literal\n      node to prevent any loss of precision.\n    - We recursively calculate constants from non-literal nodes to\n      make them available to the compiler, but we only aggregate",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "FinalOptimizePhase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class FinalOptimizePhase(Visitor.EnvTransform, Visitor.NodeRefCleanupMixin):\n    \"\"\"\n    This visitor handles several commuting optimizations, and is run\n    just before the C code generation phase.\n    The optimizations currently implemented in this class are:\n        - eliminate None assignment and refcounting for first assignment.\n        - isinstance -> typecheck for cdef types\n        - eliminate checks for None and/or types that became redundant after tree changes\n        - eliminate useless string formatting steps\n        - replace Python function calls that look like method calls by a faster PyMethodCallNode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "ConsolidateOverflowCheck",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "class ConsolidateOverflowCheck(Visitor.CythonTransform):\n    \"\"\"\n    This class facilitates the sharing of overflow checking among all nodes\n    of a nested arithmetic expression.  For example, given the expression\n    a*b + c, where a, b, and x are all possibly overflowing ints, the entire\n    sequence will be evaluated and the overflow bit checked only at the end.\n    \"\"\"\n    overflow_bit_node = None\n    def visit_Node(self, node):\n        if self.overflow_bit_node is not None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "load_c_utility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "def load_c_utility(name):\n    return UtilityCode.load_cached(name, \"Optimize.c\")\ndef unwrap_coerced_node(node, coercion_nodes=(ExprNodes.CoerceToPyTypeNode, ExprNodes.CoerceFromPyTypeNode)):\n    if isinstance(node, coercion_nodes):\n        return node.arg\n    return node\ndef unwrap_node(node):\n    while isinstance(node, UtilNodes.ResultRefNode):\n        node = node.expression\n    return node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "unwrap_coerced_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "def unwrap_coerced_node(node, coercion_nodes=(ExprNodes.CoerceToPyTypeNode, ExprNodes.CoerceFromPyTypeNode)):\n    if isinstance(node, coercion_nodes):\n        return node.arg\n    return node\ndef unwrap_node(node):\n    while isinstance(node, UtilNodes.ResultRefNode):\n        node = node.expression\n    return node\ndef is_common_value(a, b):\n    a = unwrap_node(a)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "unwrap_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "def unwrap_node(node):\n    while isinstance(node, UtilNodes.ResultRefNode):\n        node = node.expression\n    return node\ndef is_common_value(a, b):\n    a = unwrap_node(a)\n    b = unwrap_node(b)\n    if isinstance(a, ExprNodes.NameNode) and isinstance(b, ExprNodes.NameNode):\n        return a.name == b.name\n    if isinstance(a, ExprNodes.AttributeNode) and isinstance(b, ExprNodes.AttributeNode):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "is_common_value",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "def is_common_value(a, b):\n    a = unwrap_node(a)\n    b = unwrap_node(b)\n    if isinstance(a, ExprNodes.NameNode) and isinstance(b, ExprNodes.NameNode):\n        return a.name == b.name\n    if isinstance(a, ExprNodes.AttributeNode) and isinstance(b, ExprNodes.AttributeNode):\n        return not a.is_py_attr and is_common_value(a.obj, b.obj) and a.attribute == b.attribute\n    return False\ndef filter_none_node(node):\n    if node is not None and node.constant_result is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "filter_none_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "def filter_none_node(node):\n    if node is not None and node.constant_result is None:\n        return None\n    return node\nclass _YieldNodeCollector(Visitor.TreeVisitor):\n    \"\"\"\n    YieldExprNode finder for generator expressions.\n    \"\"\"\n    def __init__(self):\n        Visitor.TreeVisitor.__init__(self)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "unicode_tailmatch_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "unicode_tailmatch_utility_code = UtilityCode.load_cached('unicode_tailmatch', 'StringTools.c')\nbytes_tailmatch_utility_code = UtilityCode.load_cached('bytes_tailmatch', 'StringTools.c')\nstr_tailmatch_utility_code = UtilityCode.load_cached('str_tailmatch', 'StringTools.c')\nclass ConstantFolding(Visitor.VisitorTransform, SkipDeclarations):\n    \"\"\"Calculate the result of constant expressions to store it in\n    ``expr_node.constant_result``, and replace trivial cases by their\n    constant result.\n    General rules:\n    - We calculate float constants to make them available to the\n      compiler, but we do not aggregate them into a single literal",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "bytes_tailmatch_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "bytes_tailmatch_utility_code = UtilityCode.load_cached('bytes_tailmatch', 'StringTools.c')\nstr_tailmatch_utility_code = UtilityCode.load_cached('str_tailmatch', 'StringTools.c')\nclass ConstantFolding(Visitor.VisitorTransform, SkipDeclarations):\n    \"\"\"Calculate the result of constant expressions to store it in\n    ``expr_node.constant_result``, and replace trivial cases by their\n    constant result.\n    General rules:\n    - We calculate float constants to make them available to the\n      compiler, but we do not aggregate them into a single literal\n      node to prevent any loss of precision.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "str_tailmatch_utility_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "peekOfCode": "str_tailmatch_utility_code = UtilityCode.load_cached('str_tailmatch', 'StringTools.c')\nclass ConstantFolding(Visitor.VisitorTransform, SkipDeclarations):\n    \"\"\"Calculate the result of constant expressions to store it in\n    ``expr_node.constant_result``, and replace trivial cases by their\n    constant result.\n    General rules:\n    - We calculate float constants to make them available to the\n      compiler, but we do not aggregate them into a single literal\n      node to prevent any loss of precision.\n    - We recursively calculate constants from non-literal nodes to",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Optimize",
        "documentation": {}
    },
    {
        "label": "ShouldBeFromDirective",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "class ShouldBeFromDirective(object):\n    known_directives = []\n    def __init__(self, options_name, directive_name=None, disallow=False):\n        self.options_name = options_name\n        self.directive_name = directive_name or options_name\n        self.disallow = disallow\n        self.known_directives.append(self)\n    def __nonzero__(self):\n        self._bad_access()\n    def __int__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "get_directive_defaults",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "def get_directive_defaults():\n    # To add an item to this list, all accesses should be changed to use the new\n    # directive, and the global option itself should be set to an instance of\n    # ShouldBeFromDirective.\n    for old_option in ShouldBeFromDirective.known_directives:\n        value = globals().get(old_option.options_name)\n        assert old_option.directive_name in _directive_defaults\n        if not isinstance(value, ShouldBeFromDirective):\n            if old_option.disallow:\n                raise RuntimeError(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "one_of",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "def one_of(*args):\n    def validate(name, value):\n        if value not in args:\n            raise ValueError(\"%s directive must be one of %s, got '%s'\" % (\n                name, args, value))\n        else:\n            return value\n    return validate\ndef normalise_encoding_name(option_name, encoding):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "normalise_encoding_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "def normalise_encoding_name(option_name, encoding):\n    \"\"\"\n    >>> normalise_encoding_name('c_string_encoding', 'ascii')\n    'ascii'\n    >>> normalise_encoding_name('c_string_encoding', 'AsCIi')\n    'ascii'\n    >>> normalise_encoding_name('c_string_encoding', 'us-ascii')\n    'ascii'\n    >>> normalise_encoding_name('c_string_encoding', 'utF8')\n    'utf8'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "parse_directive_value",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "def parse_directive_value(name, value, relaxed_bool=False):\n    \"\"\"\n    Parses value as an option value for the given name and returns\n    the interpreted value. None is returned if the option does not exist.\n    >>> print(parse_directive_value('nonexisting', 'asdf asdfd'))\n    None\n    >>> parse_directive_value('boundscheck', 'True')\n    True\n    >>> parse_directive_value('boundscheck', 'true')\n    Traceback (most recent call last):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "parse_directive_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "def parse_directive_list(s, relaxed_bool=False, ignore_unknown=False,\n                         current_settings=None):\n    \"\"\"\n    Parses a comma-separated list of pragma options. Whitespace\n    is not considered.\n    >>> parse_directive_list('      ')\n    {}\n    >>> (parse_directive_list('boundscheck=True') ==\n    ... {'boundscheck': True})\n    True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "parse_variable_value",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "def parse_variable_value(value):\n    \"\"\"\n    Parses value as an option value for the given name and returns\n    the interpreted value.\n    >>> parse_variable_value('True')\n    True\n    >>> parse_variable_value('true')\n    'true'\n    >>> parse_variable_value('us-ascii')\n    'us-ascii'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "parse_compile_time_env",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "def parse_compile_time_env(s, current_settings=None):\n    \"\"\"\n    Parses a comma-separated list of pragma options. Whitespace\n    is not considered.\n    >>> parse_compile_time_env('      ')\n    {}\n    >>> (parse_compile_time_env('HAVE_OPENMP=True') ==\n    ... {'HAVE_OPENMP': True})\n    True\n    >>> parse_compile_time_env('  asdf')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "docstrings",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "docstrings = True\n#: Embed the source code position in the docstrings of functions and classes.\nembed_pos_in_docstring = False\n#: Copy the original source code line by line into C code comments\n#: in the generated code file to help with understanding the output.\n#: This is also required for coverage analysis.\nemit_code_comments = True\n# undocumented\npre_import = None\n#: Decref global variables in each module on exit for garbage collection.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "embed_pos_in_docstring",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "embed_pos_in_docstring = False\n#: Copy the original source code line by line into C code comments\n#: in the generated code file to help with understanding the output.\n#: This is also required for coverage analysis.\nemit_code_comments = True\n# undocumented\npre_import = None\n#: Decref global variables in each module on exit for garbage collection.\n#: 0: None, 1+: interned objects, 2+: cdef globals, 3+: types objects\n#: Mostly for reducing noise in Valgrind as it typically executes at process exit",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "emit_code_comments",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "emit_code_comments = True\n# undocumented\npre_import = None\n#: Decref global variables in each module on exit for garbage collection.\n#: 0: None, 1+: interned objects, 2+: cdef globals, 3+: types objects\n#: Mostly for reducing noise in Valgrind as it typically executes at process exit\n#: (when all memory will be reclaimed anyways).\n#: Note that directly or indirectly executed cleanup code that makes use of global\n#: variables or types may no longer be safe when enabling the respective level since\n#: there is no guaranteed order in which the (reference counted) objects will",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "pre_import",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "pre_import = None\n#: Decref global variables in each module on exit for garbage collection.\n#: 0: None, 1+: interned objects, 2+: cdef globals, 3+: types objects\n#: Mostly for reducing noise in Valgrind as it typically executes at process exit\n#: (when all memory will be reclaimed anyways).\n#: Note that directly or indirectly executed cleanup code that makes use of global\n#: variables or types may no longer be safe when enabling the respective level since\n#: there is no guaranteed order in which the (reference counted) objects will\n#: be cleaned up.  The order can change due to live references and reference cycles.\ngenerate_cleanup_code = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "generate_cleanup_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "generate_cleanup_code = False\n#: Should tp_clear() set object fields to None instead of clearing them to NULL?\nclear_to_none = True\n#: Generate an annotated HTML version of the input source files for debugging and optimisation purposes.\n#: This has the same effect as the ``annotate`` argument in :func:`cythonize`.\nannotate = False\n# When annotating source files in HTML, include coverage information from\n# this file.\nannotate_coverage_xml = None\n#: This will abort the compilation on the first error occurred rather than trying",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "clear_to_none",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "clear_to_none = True\n#: Generate an annotated HTML version of the input source files for debugging and optimisation purposes.\n#: This has the same effect as the ``annotate`` argument in :func:`cythonize`.\nannotate = False\n# When annotating source files in HTML, include coverage information from\n# this file.\nannotate_coverage_xml = None\n#: This will abort the compilation on the first error occurred rather than trying\n#: to keep going and printing further error messages.\nfast_fail = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "annotate",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "annotate = False\n# When annotating source files in HTML, include coverage information from\n# this file.\nannotate_coverage_xml = None\n#: This will abort the compilation on the first error occurred rather than trying\n#: to keep going and printing further error messages.\nfast_fail = False\n#: Turn all warnings into errors.\nwarning_errors = False\n#: Make unknown names an error.  Python raises a NameError when",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "annotate_coverage_xml",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "annotate_coverage_xml = None\n#: This will abort the compilation on the first error occurred rather than trying\n#: to keep going and printing further error messages.\nfast_fail = False\n#: Turn all warnings into errors.\nwarning_errors = False\n#: Make unknown names an error.  Python raises a NameError when\n#: encountering unknown names at runtime, whereas this option makes\n#: them a compile time error.  If you want full Python compatibility,\n#: you should disable this option and also 'cache_builtins'.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "fast_fail",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "fast_fail = False\n#: Turn all warnings into errors.\nwarning_errors = False\n#: Make unknown names an error.  Python raises a NameError when\n#: encountering unknown names at runtime, whereas this option makes\n#: them a compile time error.  If you want full Python compatibility,\n#: you should disable this option and also 'cache_builtins'.\nerror_on_unknown_names = True\n#: Make uninitialized local variable reference a compile time error.\n#: Python raises UnboundLocalError at runtime, whereas this option makes",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "warning_errors",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "warning_errors = False\n#: Make unknown names an error.  Python raises a NameError when\n#: encountering unknown names at runtime, whereas this option makes\n#: them a compile time error.  If you want full Python compatibility,\n#: you should disable this option and also 'cache_builtins'.\nerror_on_unknown_names = True\n#: Make uninitialized local variable reference a compile time error.\n#: Python raises UnboundLocalError at runtime, whereas this option makes\n#: them a compile time error. Note that this option affects only variables\n#: of \"python object\" type.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "error_on_unknown_names",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "error_on_unknown_names = True\n#: Make uninitialized local variable reference a compile time error.\n#: Python raises UnboundLocalError at runtime, whereas this option makes\n#: them a compile time error. Note that this option affects only variables\n#: of \"python object\" type.\nerror_on_uninitialized = True\n#: This will convert statements of the form ``for i in range(...)``\n#: to ``for i from ...`` when ``i`` is a C integer type, and the direction\n#: (i.e. sign of step) can be determined.\n#: WARNING: This may change the semantics if the range causes assignment to",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "error_on_uninitialized",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "error_on_uninitialized = True\n#: This will convert statements of the form ``for i in range(...)``\n#: to ``for i from ...`` when ``i`` is a C integer type, and the direction\n#: (i.e. sign of step) can be determined.\n#: WARNING: This may change the semantics if the range causes assignment to\n#: i to overflow. Specifically, if this option is set, an error will be\n#: raised before the loop is entered, whereas without this option the loop\n#: will execute until an overflowing value is encountered.\nconvert_range = True\n#: Perform lookups on builtin names only once, at module initialisation",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "convert_range",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "convert_range = True\n#: Perform lookups on builtin names only once, at module initialisation\n#: time.  This will prevent the module from getting imported if a\n#: builtin name that it uses cannot be found during initialisation.\n#: Default is True.\n#: Note that some legacy builtins are automatically remapped\n#: from their Python 2 names to their Python 3 names by Cython\n#: when building in Python 3.x,\n#: so that they do not get in the way even if this option is enabled.\ncache_builtins = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "cache_builtins",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "cache_builtins = True\n#: Generate branch prediction hints to speed up error handling etc.\ngcc_branch_hints = True\n#: Enable this to allow one to write ``your_module.foo = ...`` to overwrite the\n#: definition if the cpdef function foo, at the cost of an extra dictionary\n#: lookup on every call.\n#: If this is false it generates only the Python wrapper and no override check.\nlookup_module_cpdef = False\n#: Whether or not to embed the Python interpreter, for use in making a\n#: standalone executable or calling from external libraries.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "gcc_branch_hints",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "gcc_branch_hints = True\n#: Enable this to allow one to write ``your_module.foo = ...`` to overwrite the\n#: definition if the cpdef function foo, at the cost of an extra dictionary\n#: lookup on every call.\n#: If this is false it generates only the Python wrapper and no override check.\nlookup_module_cpdef = False\n#: Whether or not to embed the Python interpreter, for use in making a\n#: standalone executable or calling from external libraries.\n#: This will provide a C function which initialises the interpreter and\n#: executes the body of this module.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "lookup_module_cpdef",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "lookup_module_cpdef = False\n#: Whether or not to embed the Python interpreter, for use in making a\n#: standalone executable or calling from external libraries.\n#: This will provide a C function which initialises the interpreter and\n#: executes the body of this module.\n#: See `this demo <https://github.com/cython/cython/tree/master/Demos/embed>`_\n#: for a concrete example.\n#: If true, the initialisation function is the C main() function, but\n#: this option can also be set to a non-empty string to provide a function name explicitly.\n#: Default is False.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "embed",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "embed = None\n# In previous iterations of Cython, globals() gave the first non-Cython module\n# globals in the call stack.  Sage relies on this behavior for variable injection.\nold_style_globals = ShouldBeFromDirective('old_style_globals')\n#: Allows cimporting from a pyx file without a pxd file.\ncimport_from_pyx = False\n#: Maximum number of dimensions for buffers -- set lower than number of\n#: dimensions in numpy, as\n#: slices are passed by value and involve a lot of copying.\nbuffer_max_dims = 8",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "old_style_globals",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "old_style_globals = ShouldBeFromDirective('old_style_globals')\n#: Allows cimporting from a pyx file without a pxd file.\ncimport_from_pyx = False\n#: Maximum number of dimensions for buffers -- set lower than number of\n#: dimensions in numpy, as\n#: slices are passed by value and involve a lot of copying.\nbuffer_max_dims = 8\n#: Number of function closure instances to keep in a freelist (0: no freelists)\nclosure_freelist_size = 8\ndef get_directive_defaults():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "cimport_from_pyx",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "cimport_from_pyx = False\n#: Maximum number of dimensions for buffers -- set lower than number of\n#: dimensions in numpy, as\n#: slices are passed by value and involve a lot of copying.\nbuffer_max_dims = 8\n#: Number of function closure instances to keep in a freelist (0: no freelists)\nclosure_freelist_size = 8\ndef get_directive_defaults():\n    # To add an item to this list, all accesses should be changed to use the new\n    # directive, and the global option itself should be set to an instance of",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "buffer_max_dims",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "buffer_max_dims = 8\n#: Number of function closure instances to keep in a freelist (0: no freelists)\nclosure_freelist_size = 8\ndef get_directive_defaults():\n    # To add an item to this list, all accesses should be changed to use the new\n    # directive, and the global option itself should be set to an instance of\n    # ShouldBeFromDirective.\n    for old_option in ShouldBeFromDirective.known_directives:\n        value = globals().get(old_option.options_name)\n        assert old_option.directive_name in _directive_defaults",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "closure_freelist_size",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "closure_freelist_size = 8\ndef get_directive_defaults():\n    # To add an item to this list, all accesses should be changed to use the new\n    # directive, and the global option itself should be set to an instance of\n    # ShouldBeFromDirective.\n    for old_option in ShouldBeFromDirective.known_directives:\n        value = globals().get(old_option.options_name)\n        assert old_option.directive_name in _directive_defaults\n        if not isinstance(value, ShouldBeFromDirective):\n            if old_option.disallow:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "_directive_defaults",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "_directive_defaults = {\n    'boundscheck' : True,\n    'nonecheck' : False,\n    'initializedcheck' : True,\n    'embedsignature' : False,\n    'auto_cpdef': False,\n    'auto_pickle': None,\n    'cdivision': False,  # was True before 0.12\n    'cdivision_warnings': False,\n    'c_api_binop_methods': True,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "extra_warnings",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "extra_warnings = {\n    'warn.maybe_uninitialized': True,\n    'warn.unreachable': True,\n    'warn.unused': True,\n}\ndef one_of(*args):\n    def validate(name, value):\n        if value not in args:\n            raise ValueError(\"%s directive must be one of %s, got '%s'\" % (\n                name, args, value))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "directive_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "directive_types = {\n    'language_level': str,  # values can be None/2/3/'3str', where None == 2+warning\n    'auto_pickle': bool,\n    'locals': dict,\n    'final' : bool,  # final cdef classes and methods\n    'nogil' : bool,\n    'internal' : bool,  # cdef class visibility in the module dict\n    'infer_types' : bool,  # values can be True/None/False\n    'binding' : bool,\n    'cfunc' : None,  # decorators do not take directive value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "directive_scopes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "peekOfCode": "directive_scopes = {  # defaults to available everywhere\n    # 'module', 'function', 'class', 'with statement'\n    'auto_pickle': ('module', 'cclass'),\n    'final' : ('cclass', 'function'),\n    'nogil' : ('function', 'with statement'),\n    'inline' : ('function',),\n    'cfunc' : ('function', 'with statement'),\n    'ccall' : ('function', 'with statement'),\n    'returns' : ('function',),\n    'exceptval' : ('function',),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Options",
        "documentation": {}
    },
    {
        "label": "SkipDeclarations",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class SkipDeclarations(object):\n    \"\"\"\n    Variable and function declarations can often have a deep tree structure,\n    and yet most transformations don't need to descend to this depth.\n    Declaration nodes are removed after AnalyseDeclarationsTransform, so there\n    is no need to use this for transformations after that point.\n    \"\"\"\n    def visit_CTypeDefNode(self, node):\n        return node\n    def visit_CVarDefNode(self, node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "NormalizeTree",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class NormalizeTree(CythonTransform):\n    \"\"\"\n    This transform fixes up a few things after parsing\n    in order to make the parse tree more suitable for\n    transforms.\n    a) After parsing, blocks with only one statement will\n    be represented by that statement, not by a StatListNode.\n    When doing transforms this is annoying and inconsistent,\n    as one cannot in general remove a statement in a consistent\n    way and so on. This transform wraps any single statements",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "PostParseError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class PostParseError(CompileError): pass\n# error strings checked by unit tests, so define them\nERR_CDEF_INCLASS = 'Cannot assign default value to fields in cdef classes, structs or unions'\nERR_BUF_DEFAULTS = 'Invalid buffer defaults specification (see docs)'\nERR_INVALID_SPECIALATTR_TYPE = 'Special attributes must not have a type declared'\nclass PostParse(ScopeTrackingTransform):\n    \"\"\"\n    Basic interpretation of the parse tree, as well as validity\n    checking that can be done on a very basic level on the parse\n    tree (while still not being a problem with the basic syntax,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "PostParse",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class PostParse(ScopeTrackingTransform):\n    \"\"\"\n    Basic interpretation of the parse tree, as well as validity\n    checking that can be done on a very basic level on the parse\n    tree (while still not being a problem with the basic syntax,\n    as such).\n    Specifically:\n    - Default values to cdef assignments are turned into single\n    assignments following the declaration (everywhere but in class\n    bodies, where they raise a compile error)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "PxdPostParse",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class PxdPostParse(CythonTransform, SkipDeclarations):\n    \"\"\"\n    Basic interpretation/validity checking that should only be\n    done on pxd trees.\n    A lot of this checking currently happens in the parser; but\n    what is listed below happens here.\n    - \"def\" functions are let through only if they fill the\n    getbuffer/releasebuffer slots\n    - cdef functions are let through only if they are on the\n    top level and are declared \"inline\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "TrackNumpyAttributes",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class TrackNumpyAttributes(VisitorTransform, SkipDeclarations):\n    # TODO: Make name handling as good as in InterpretCompilerDirectives() below - probably best to merge the two.\n    def __init__(self):\n        super(TrackNumpyAttributes, self).__init__()\n        self.numpy_module_names = set()\n    def visit_CImportStatNode(self, node):\n        if node.module_name == u\"numpy\":\n            self.numpy_module_names.add(node.as_name or u\"numpy\")\n        return node\n    def visit_AttributeNode(self, node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "InterpretCompilerDirectives",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class InterpretCompilerDirectives(CythonTransform):\n    \"\"\"\n    After parsing, directives can be stored in a number of places:\n    - #cython-comments at the top of the file (stored in ModuleNode)\n    - Command-line arguments overriding these\n    - @cython.directivename decorators\n    - with cython.directivename: statements\n    This transform is responsible for interpreting these various sources\n    and store the directive in two ways:\n    - Set the directives attribute of the ModuleNode for global directives.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "ParallelRangeTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class ParallelRangeTransform(CythonTransform, SkipDeclarations):\n    \"\"\"\n    Transform cython.parallel stuff. The parallel_directives come from the\n    module node, set there by InterpretCompilerDirectives.\n        x = cython.parallel.threadavailable()   -> ParallelThreadAvailableNode\n        with nogil, cython.parallel.parallel(): -> ParallelWithBlockNode\n            print cython.parallel.threadid()    -> ParallelThreadIdNode\n            for i in cython.parallel.prange(...):  -> ParallelRangeNode\n                ...\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "WithTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class WithTransform(CythonTransform, SkipDeclarations):\n    def visit_WithStatNode(self, node):\n        self.visitchildren(node, 'body')\n        pos = node.pos\n        is_async = node.is_async\n        body, target, manager = node.body, node.target, node.manager\n        node.enter_call = ExprNodes.SimpleCallNode(\n            pos, function=ExprNodes.AttributeNode(\n                pos, obj=ExprNodes.CloneNode(manager),\n                attribute=EncodedString('__aenter__' if is_async else '__enter__'),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "DecoratorTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class DecoratorTransform(ScopeTrackingTransform, SkipDeclarations):\n    \"\"\"\n    Transforms method decorators in cdef classes into nested calls or properties.\n    Python-style decorator properties are transformed into a PropertyNode\n    with up to the three getter, setter and deleter DefNodes.\n    The functional style isn't supported yet.\n    \"\"\"\n    _properties = None\n    _map_property_attribute = {\n        'getter': '__get__',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "CnameDirectivesTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class CnameDirectivesTransform(CythonTransform, SkipDeclarations):\n    \"\"\"\n    Only part of the CythonUtilityCode pipeline. Must be run before\n    DecoratorTransform in case this is a decorator for a cdef class.\n    It filters out @cname('my_cname') decorators and rewrites them to\n    CnameDecoratorNodes.\n    \"\"\"\n    def handle_function(self, node):\n        if not getattr(node, 'decorators', None):\n            return self.visit_Node(node)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "ForwardDeclareTypes",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class ForwardDeclareTypes(CythonTransform):\n    def visit_CompilerDirectivesNode(self, node):\n        env = self.module_scope\n        old = env.directives\n        env.directives = node.directives\n        self.visitchildren(node)\n        env.directives = old\n        return node\n    def visit_ModuleNode(self, node):\n        self.module_scope = node.scope",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "AnalyseDeclarationsTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class AnalyseDeclarationsTransform(EnvTransform):\n    basic_property = TreeFragment(u\"\"\"\nproperty NAME:\n    def __get__(self):\n        return ATTR\n    def __set__(self, value):\n        ATTR = value\n    \"\"\", level='c_class', pipeline=[NormalizeTree(None)])\n    basic_pyobject_property = TreeFragment(u\"\"\"\nproperty NAME:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "CalculateQualifiedNamesTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class CalculateQualifiedNamesTransform(EnvTransform):\n    \"\"\"\n    Calculate and store the '__qualname__' and the global\n    module name on some nodes.\n    \"\"\"\n    def visit_ModuleNode(self, node):\n        self.module_name = self.global_scope().qualified_name\n        self.qualified_name = []\n        _super = super(CalculateQualifiedNamesTransform, self)\n        self._super_visit_FuncDefNode = _super.visit_FuncDefNode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "AnalyseExpressionsTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class AnalyseExpressionsTransform(CythonTransform):\n    def visit_ModuleNode(self, node):\n        node.scope.infer_types()\n        node.body = node.body.analyse_expressions(node.scope)\n        self.visitchildren(node)\n        return node\n    def visit_FuncDefNode(self, node):\n        node.local_scope.infer_types()\n        node.body = node.body.analyse_expressions(node.local_scope)\n        self.visitchildren(node)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "FindInvalidUseOfFusedTypes",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class FindInvalidUseOfFusedTypes(CythonTransform):\n    def visit_FuncDefNode(self, node):\n        # Errors related to use in functions with fused args will already\n        # have been detected\n        if not node.has_fused_arguments:\n            if not node.is_generator_body and node.return_type.is_fused:\n                error(node.pos, \"Return type is not specified as argument type\")\n            else:\n                self.visitchildren(node)\n        return node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "ExpandInplaceOperators",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class ExpandInplaceOperators(EnvTransform):\n    def visit_InPlaceAssignmentNode(self, node):\n        lhs = node.lhs\n        rhs = node.rhs\n        if lhs.type.is_cpp_class:\n            # No getting around this exact operator here.\n            return node\n        if isinstance(lhs, ExprNodes.BufferIndexNode):\n            # There is code to handle this case in InPlaceAssignmentNode\n            return node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "AdjustDefByDirectives",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class AdjustDefByDirectives(CythonTransform, SkipDeclarations):\n    \"\"\"\n    Adjust function and class definitions by the decorator directives:\n    @cython.cfunc\n    @cython.cclass\n    @cython.ccall\n    @cython.inline\n    @cython.nogil\n    \"\"\"\n    def visit_ModuleNode(self, node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "AlignFunctionDefinitions",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class AlignFunctionDefinitions(CythonTransform):\n    \"\"\"\n    This class takes the signatures from a .pxd file and applies them to\n    the def methods in a .py file.\n    \"\"\"\n    def visit_ModuleNode(self, node):\n        self.scope = node.scope\n        self.directives = node.directives\n        self.imported_names = set()  # hack, see visit_FromImportStatNode()\n        self.visitchildren(node)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "RemoveUnreachableCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class RemoveUnreachableCode(CythonTransform):\n    def visit_StatListNode(self, node):\n        if not self.current_directives['remove_unreachable']:\n            return node\n        self.visitchildren(node)\n        for idx, stat in enumerate(node.stats):\n            idx += 1\n            if stat.is_terminator:\n                if idx < len(node.stats):\n                    if self.current_directives['warn.unreachable']:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "YieldNodeCollector",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class YieldNodeCollector(TreeVisitor):\n    def __init__(self):\n        super(YieldNodeCollector, self).__init__()\n        self.yields = []\n        self.returns = []\n        self.finallys = []\n        self.excepts = []\n        self.has_return_value = False\n        self.has_yield = False\n        self.has_await = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "MarkClosureVisitor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class MarkClosureVisitor(CythonTransform):\n    def visit_ModuleNode(self, node):\n        self.needs_closure = False\n        self.visitchildren(node)\n        return node\n    def visit_FuncDefNode(self, node):\n        self.needs_closure = False\n        self.visitchildren(node)\n        node.needs_closure = self.needs_closure\n        self.needs_closure = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "CreateClosureClasses",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class CreateClosureClasses(CythonTransform):\n    # Output closure classes in module scope for all functions\n    # that really need it.\n    def __init__(self, context):\n        super(CreateClosureClasses, self).__init__(context)\n        self.path = []\n        self.in_lambda = False\n    def visit_ModuleNode(self, node):\n        self.module_scope = node.scope\n        self.visitchildren(node)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "InjectGilHandling",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class InjectGilHandling(VisitorTransform, SkipDeclarations):\n    \"\"\"\n    Allow certain Python operations inside of nogil blocks by implicitly acquiring the GIL.\n    Must run before the AnalyseDeclarationsTransform to make sure the GILStatNodes get\n    set up, parallel sections know that the GIL is acquired inside of them, etc.\n    \"\"\"\n    def __call__(self, root):\n        self.nogil = False\n        return super(InjectGilHandling, self).__call__(root)\n    # special node handling",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "GilCheck",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class GilCheck(VisitorTransform):\n    \"\"\"\n    Call `node.gil_check(env)` on each node to make sure we hold the\n    GIL when we need it.  Raise an error when on Python operations\n    inside a `nogil` environment.\n    Additionally, raise exceptions for closely nested with gil or with nogil\n    statements. The latter would abort Python.\n    \"\"\"\n    def __call__(self, root):\n        self.env_stack = [root.scope]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "TransformBuiltinMethods",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class TransformBuiltinMethods(EnvTransform):\n    \"\"\"\n    Replace Cython's own cython.* builtins by the corresponding tree nodes.\n    \"\"\"\n    def visit_SingleAssignmentNode(self, node):\n        if node.declaration_only:\n            return None\n        else:\n            self.visitchildren(node)\n            return node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "ReplaceFusedTypeChecks",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class ReplaceFusedTypeChecks(VisitorTransform):\n    \"\"\"\n    This is not a transform in the pipeline. It is invoked on the specific\n    versions of a cdef function with fused argument types. It filters out any\n    type branches that don't match. e.g.\n        if fused_t is mytype:\n            ...\n        elif fused_t in other_fused_type:\n            ...\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "DebugTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "class DebugTransform(CythonTransform):\n    \"\"\"\n    Write debug information for this Cython module.\n    \"\"\"\n    def __init__(self, context, options, result):\n        super(DebugTransform, self).__init__(context)\n        self.visited = set()\n        # our treebuilder and debug output writer\n        # (see Cython.Debugger.debug_output.CythonDebugWriter)\n        self.tb = self.context.gdb_debug_outputwriter",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "eliminate_rhs_duplicates",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "def eliminate_rhs_duplicates(expr_list_list, ref_node_sequence):\n    \"\"\"Replace rhs items by LetRefNodes if they appear more than once.\n    Creates a sequence of LetRefNodes that set up the required temps\n    and appends them to ref_node_sequence.  The input list is modified\n    in-place.\n    \"\"\"\n    seen_nodes = set()\n    ref_nodes = {}\n    def find_duplicates(node):\n        if node.is_literal or node.is_name:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "sort_common_subsequences",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "def sort_common_subsequences(items):\n    \"\"\"Sort items/subsequences so that all items and subsequences that\n    an item contains appear before the item itself.  This is needed\n    because each rhs item must only be evaluated once, so its value\n    must be evaluated first and then reused when packing sequences\n    that contain it.\n    This implies a partial order, and the sort must be stable to\n    preserve the original order as much as possible, so we use a\n    simple insertion sort (which is very fast for short sequences, the\n    normal case in practice).",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "unpack_string_to_character_literals",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "def unpack_string_to_character_literals(literal):\n    chars = []\n    pos = literal.pos\n    stype = literal.__class__\n    sval = literal.value\n    sval_type = sval.__class__\n    for char in sval:\n        cval = sval_type(char)\n        chars.append(stype(pos, value=cval, constant_result=cval))\n    return chars",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "flatten_parallel_assignments",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "def flatten_parallel_assignments(input, output):\n    #  The input is a list of expression nodes, representing the LHSs\n    #  and RHS of one (possibly cascaded) assignment statement.  For\n    #  sequence constructors, rearranges the matching parts of both\n    #  sides into a list of equivalent assignments between the\n    #  individual elements.  This transformation is applied\n    #  recursively, so that nested structures get matched as well.\n    rhs = input[-1]\n    if (not (rhs.is_sequence_constructor or isinstance(rhs, ExprNodes.UnicodeNode))\n        or not sum([lhs.is_sequence_constructor for lhs in input[:-1]])):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "map_starred_assignment",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "def map_starred_assignment(lhs_targets, starred_assignments, lhs_args, rhs_args):\n    # Appends the fixed-position LHS targets to the target list that\n    # appear left and right of the starred argument.\n    #\n    # The starred_assignments list receives a new tuple\n    # (lhs_target, rhs_values_list) that maps the remaining arguments\n    # (those that match the starred target) to a list.\n    # left side of the starred target\n    for i, (targets, expr) in enumerate(zip(lhs_targets, lhs_args)):\n        if expr.is_starred:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "ERR_CDEF_INCLASS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "ERR_CDEF_INCLASS = 'Cannot assign default value to fields in cdef classes, structs or unions'\nERR_BUF_DEFAULTS = 'Invalid buffer defaults specification (see docs)'\nERR_INVALID_SPECIALATTR_TYPE = 'Special attributes must not have a type declared'\nclass PostParse(ScopeTrackingTransform):\n    \"\"\"\n    Basic interpretation of the parse tree, as well as validity\n    checking that can be done on a very basic level on the parse\n    tree (while still not being a problem with the basic syntax,\n    as such).\n    Specifically:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "ERR_BUF_DEFAULTS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "ERR_BUF_DEFAULTS = 'Invalid buffer defaults specification (see docs)'\nERR_INVALID_SPECIALATTR_TYPE = 'Special attributes must not have a type declared'\nclass PostParse(ScopeTrackingTransform):\n    \"\"\"\n    Basic interpretation of the parse tree, as well as validity\n    checking that can be done on a very basic level on the parse\n    tree (while still not being a problem with the basic syntax,\n    as such).\n    Specifically:\n    - Default values to cdef assignments are turned into single",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "ERR_INVALID_SPECIALATTR_TYPE",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "peekOfCode": "ERR_INVALID_SPECIALATTR_TYPE = 'Special attributes must not have a type declared'\nclass PostParse(ScopeTrackingTransform):\n    \"\"\"\n    Basic interpretation of the parse tree, as well as validity\n    checking that can be done on a very basic level on the parse\n    tree (while still not being a problem with the basic syntax,\n    as such).\n    Specifically:\n    - Default values to cdef assignments are turned into single\n    assignments following the declaration (everywhere but in class",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.ParseTreeTransforms",
        "documentation": {}
    },
    {
        "label": "Ctx",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "class Ctx(object):\n    #  Parsing context\n    level = 'other'\n    visibility = 'private'\n    cdef_flag = 0\n    typedef_flag = 0\n    api = 0\n    overridable = 0\n    nogil = 0\n    namespace = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_ident",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_ident(s, message=\"Expected an identifier\"):\n    if s.sy == 'IDENT':\n        name = s.systring\n        s.next()\n        return name\n    else:\n        s.error(message)\ndef p_ident_list(s):\n    names = []\n    while s.sy == 'IDENT':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_ident_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_ident_list(s):\n    names = []\n    while s.sy == 'IDENT':\n        names.append(s.systring)\n        s.next()\n        if s.sy != ',':\n            break\n        s.next()\n    return names\n#------------------------------------------",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_binop_operator",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_binop_operator(s):\n    pos = s.position()\n    op = s.sy\n    s.next()\n    return op, pos\ndef p_binop_expr(s, ops, p_sub_expr):\n    n1 = p_sub_expr(s)\n    while s.sy in ops:\n        op, pos = p_binop_operator(s)\n        n2 = p_sub_expr(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_binop_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_binop_expr(s, ops, p_sub_expr):\n    n1 = p_sub_expr(s)\n    while s.sy in ops:\n        op, pos = p_binop_operator(s)\n        n2 = p_sub_expr(s)\n        n1 = ExprNodes.binop_node(pos, op, n1, n2)\n        if op == '/':\n            if Future.division in s.context.future_directives:\n                n1.truedivision = True\n            else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_lambdef",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_lambdef(s, allow_conditional=True):\n    # s.sy == 'lambda'\n    pos = s.position()\n    s.next()\n    if s.sy == ':':\n        args = []\n        star_arg = starstar_arg = None\n    else:\n        args, star_arg, starstar_arg = p_varargslist(\n            s, terminator=':', annotated=False)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_lambdef_nocond",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_lambdef_nocond(s):\n    return p_lambdef(s, allow_conditional=False)\n#test: or_test ['if' or_test 'else' test] | lambdef\ndef p_test(s):\n    if s.sy == 'lambda':\n        return p_lambdef(s)\n    pos = s.position()\n    expr = p_or_test(s)\n    if s.sy == 'if':\n        s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_test",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_test(s):\n    if s.sy == 'lambda':\n        return p_lambdef(s)\n    pos = s.position()\n    expr = p_or_test(s)\n    if s.sy == 'if':\n        s.next()\n        test = p_or_test(s)\n        s.expect('else')\n        other = p_test(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_test_nocond",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_test_nocond(s):\n    if s.sy == 'lambda':\n        return p_lambdef_nocond(s)\n    else:\n        return p_or_test(s)\n#or_test: and_test ('or' and_test)*\ndef p_or_test(s):\n    return p_rassoc_binop_expr(s, ('or',), p_and_test)\ndef p_rassoc_binop_expr(s, ops, p_subexpr):\n    n1 = p_subexpr(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_or_test",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_or_test(s):\n    return p_rassoc_binop_expr(s, ('or',), p_and_test)\ndef p_rassoc_binop_expr(s, ops, p_subexpr):\n    n1 = p_subexpr(s)\n    if s.sy in ops:\n        pos = s.position()\n        op = s.sy\n        s.next()\n        n2 = p_rassoc_binop_expr(s, ops, p_subexpr)\n        n1 = ExprNodes.binop_node(pos, op, n1, n2)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_rassoc_binop_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_rassoc_binop_expr(s, ops, p_subexpr):\n    n1 = p_subexpr(s)\n    if s.sy in ops:\n        pos = s.position()\n        op = s.sy\n        s.next()\n        n2 = p_rassoc_binop_expr(s, ops, p_subexpr)\n        n1 = ExprNodes.binop_node(pos, op, n1, n2)\n    return n1\n#and_test: not_test ('and' not_test)*",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_and_test",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_and_test(s):\n    #return p_binop_expr(s, ('and',), p_not_test)\n    return p_rassoc_binop_expr(s, ('and',), p_not_test)\n#not_test: 'not' not_test | comparison\ndef p_not_test(s):\n    if s.sy == 'not':\n        pos = s.position()\n        s.next()\n        return ExprNodes.NotNode(pos, operand = p_not_test(s))\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_not_test",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_not_test(s):\n    if s.sy == 'not':\n        pos = s.position()\n        s.next()\n        return ExprNodes.NotNode(pos, operand = p_not_test(s))\n    else:\n        return p_comparison(s)\n#comparison: expr (comp_op expr)*\n#comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'\ndef p_comparison(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_comparison",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_comparison(s):\n    n1 = p_starred_expr(s)\n    if s.sy in comparison_ops:\n        pos = s.position()\n        op = p_cmp_op(s)\n        n2 = p_starred_expr(s)\n        n1 = ExprNodes.PrimaryCmpNode(pos,\n            operator = op, operand1 = n1, operand2 = n2)\n        if s.sy in comparison_ops:\n            n1.cascade = p_cascaded_cmp(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_test_or_starred_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_test_or_starred_expr(s):\n    if s.sy == '*':\n        return p_starred_expr(s)\n    else:\n        return p_test(s)\ndef p_starred_expr(s):\n    pos = s.position()\n    if s.sy == '*':\n        starred = True\n        s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_starred_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_starred_expr(s):\n    pos = s.position()\n    if s.sy == '*':\n        starred = True\n        s.next()\n    else:\n        starred = False\n    expr = p_bit_expr(s)\n    if starred:\n        expr = ExprNodes.StarredUnpackingNode(pos, expr)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cascaded_cmp",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cascaded_cmp(s):\n    pos = s.position()\n    op = p_cmp_op(s)\n    n2 = p_starred_expr(s)\n    result = ExprNodes.CascadedCmpNode(pos,\n        operator = op, operand2 = n2)\n    if s.sy in comparison_ops:\n        result.cascade = p_cascaded_cmp(s)\n    return result\ndef p_cmp_op(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cmp_op",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cmp_op(s):\n    if s.sy == 'not':\n        s.next()\n        s.expect('in')\n        op = 'not_in'\n    elif s.sy == 'is':\n        s.next()\n        if s.sy == 'not':\n            s.next()\n            op = 'is_not'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_bit_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_bit_expr(s):\n    return p_binop_expr(s, ('|',), p_xor_expr)\n#xor_expr: and_expr ('^' and_expr)*\ndef p_xor_expr(s):\n    return p_binop_expr(s, ('^',), p_and_expr)\n#and_expr: shift_expr ('&' shift_expr)*\ndef p_and_expr(s):\n    return p_binop_expr(s, ('&',), p_shift_expr)\n#shift_expr: arith_expr (('<<'|'>>') arith_expr)*\ndef p_shift_expr(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_xor_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_xor_expr(s):\n    return p_binop_expr(s, ('^',), p_and_expr)\n#and_expr: shift_expr ('&' shift_expr)*\ndef p_and_expr(s):\n    return p_binop_expr(s, ('&',), p_shift_expr)\n#shift_expr: arith_expr (('<<'|'>>') arith_expr)*\ndef p_shift_expr(s):\n    return p_binop_expr(s, ('<<', '>>'), p_arith_expr)\n#arith_expr: term (('+'|'-') term)*\ndef p_arith_expr(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_and_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_and_expr(s):\n    return p_binop_expr(s, ('&',), p_shift_expr)\n#shift_expr: arith_expr (('<<'|'>>') arith_expr)*\ndef p_shift_expr(s):\n    return p_binop_expr(s, ('<<', '>>'), p_arith_expr)\n#arith_expr: term (('+'|'-') term)*\ndef p_arith_expr(s):\n    return p_binop_expr(s, ('+', '-'), p_term)\n#term: factor (('*'|'@'|'/'|'%'|'//') factor)*\ndef p_term(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_shift_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_shift_expr(s):\n    return p_binop_expr(s, ('<<', '>>'), p_arith_expr)\n#arith_expr: term (('+'|'-') term)*\ndef p_arith_expr(s):\n    return p_binop_expr(s, ('+', '-'), p_term)\n#term: factor (('*'|'@'|'/'|'%'|'//') factor)*\ndef p_term(s):\n    return p_binop_expr(s, ('*', '@', '/', '%', '//'), p_factor)\n#factor: ('+'|'-'|'~'|'&'|typecast|sizeof) factor | power\ndef p_factor(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_arith_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_arith_expr(s):\n    return p_binop_expr(s, ('+', '-'), p_term)\n#term: factor (('*'|'@'|'/'|'%'|'//') factor)*\ndef p_term(s):\n    return p_binop_expr(s, ('*', '@', '/', '%', '//'), p_factor)\n#factor: ('+'|'-'|'~'|'&'|typecast|sizeof) factor | power\ndef p_factor(s):\n    # little indirection for C-ification purposes\n    return _p_factor(s)\ndef _p_factor(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_term",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_term(s):\n    return p_binop_expr(s, ('*', '@', '/', '%', '//'), p_factor)\n#factor: ('+'|'-'|'~'|'&'|typecast|sizeof) factor | power\ndef p_factor(s):\n    # little indirection for C-ification purposes\n    return _p_factor(s)\ndef _p_factor(s):\n    sy = s.sy\n    if sy in ('+', '-', '~'):\n        op = s.sy",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_factor",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_factor(s):\n    # little indirection for C-ification purposes\n    return _p_factor(s)\ndef _p_factor(s):\n    sy = s.sy\n    if sy in ('+', '-', '~'):\n        op = s.sy\n        pos = s.position()\n        s.next()\n        return ExprNodes.unop_node(pos, op, p_factor(s))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_typecast",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_typecast(s):\n    # s.sy == \"<\"\n    pos = s.position()\n    s.next()\n    base_type = p_c_base_type(s)\n    is_memslice = isinstance(base_type, Nodes.MemoryViewSliceTypeNode)\n    is_template = isinstance(base_type, Nodes.TemplatedTypeNode)\n    is_const = isinstance(base_type, Nodes.CConstTypeNode)\n    if (not is_memslice and not is_template and not is_const\n        and base_type.name is None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_sizeof",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_sizeof(s):\n    # s.sy == ident \"sizeof\"\n    pos = s.position()\n    s.next()\n    s.expect('(')\n    # Here we decide if we are looking at an expression or type\n    # If it is actually a type, but parsable as an expression,\n    # we treat it as an expression here.\n    if looking_at_expr(s):\n        operand = p_test(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_yield_expression",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_yield_expression(s):\n    # s.sy == \"yield\"\n    pos = s.position()\n    s.next()\n    is_yield_from = False\n    if s.sy == 'from':\n        is_yield_from = True\n        s.next()\n    if s.sy != ')' and s.sy not in statement_terminators:\n        # \"yield from\" does not support implicit tuples, but \"yield\" does (\"yield 1,2\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_yield_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_yield_statement(s):\n    # s.sy == \"yield\"\n    yield_expr = p_yield_expression(s)\n    return Nodes.ExprStatNode(yield_expr.pos, expr=yield_expr)\ndef p_async_statement(s, ctx, decorators):\n    # s.sy >> 'async' ...\n    if s.sy == 'def':\n        # 'async def' statements aren't allowed in pxd files\n        if 'pxd' in ctx.level:\n            s.error('def statement not allowed here')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_async_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_async_statement(s, ctx, decorators):\n    # s.sy >> 'async' ...\n    if s.sy == 'def':\n        # 'async def' statements aren't allowed in pxd files\n        if 'pxd' in ctx.level:\n            s.error('def statement not allowed here')\n        s.level = ctx.level\n        return p_def_statement(s, decorators, is_async_def=True)\n    elif decorators:\n        s.error(\"Decorators can only be followed by functions or classes\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_power",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_power(s):\n    if s.systring == 'new' and s.peek()[0] == 'IDENT':\n        return p_new_expr(s)\n    await_pos = None\n    if s.sy == 'await':\n        await_pos = s.position()\n        s.next()\n    n1 = p_atom(s)\n    while s.sy in ('(', '[', '.'):\n        n1 = p_trailer(s, n1)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_new_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_new_expr(s):\n    # s.systring == 'new'.\n    pos = s.position()\n    s.next()\n    cppclass = p_c_base_type(s)\n    return p_call(s, ExprNodes.NewExprNode(pos, cppclass = cppclass))\n#trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME\ndef p_trailer(s, node1):\n    pos = s.position()\n    if s.sy == '(':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_trailer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_trailer(s, node1):\n    pos = s.position()\n    if s.sy == '(':\n        return p_call(s, node1)\n    elif s.sy == '[':\n        return p_index(s, node1)\n    else: # s.sy == '.'\n        s.next()\n        name = p_ident(s)\n        return ExprNodes.AttributeNode(pos,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_call_parse_args",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_call_parse_args(s, allow_genexp=True):\n    # s.sy == '('\n    pos = s.position()\n    s.next()\n    positional_args = []\n    keyword_args = []\n    starstar_seen = False\n    last_was_tuple_unpack = False\n    while s.sy != ')':\n        if s.sy == '*':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_call_build_packed_args",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_call_build_packed_args(pos, positional_args, keyword_args):\n    keyword_dict = None\n    subtuples = [\n        ExprNodes.TupleNode(pos, args=arg) if isinstance(arg, list) else ExprNodes.AsTupleNode(pos, arg=arg)\n        for arg in positional_args\n    ]\n    # TODO: implement a faster way to join tuples than creating each one and adding them\n    arg_tuple = reduce(partial(ExprNodes.binop_node, pos, '+'), subtuples)\n    if keyword_args:\n        kwargs = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_call",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_call(s, function):\n    # s.sy == '('\n    pos = s.position()\n    positional_args, keyword_args = p_call_parse_args(s)\n    if not keyword_args and len(positional_args) == 1 and isinstance(positional_args[0], list):\n        return ExprNodes.SimpleCallNode(pos, function=function, args=positional_args[0])\n    else:\n        arg_tuple, keyword_dict = p_call_build_packed_args(pos, positional_args, keyword_args)\n        return ExprNodes.GeneralCallNode(\n            pos, function=function, positional_args=arg_tuple, keyword_args=keyword_dict)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_index",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_index(s, base):\n    # s.sy == '['\n    pos = s.position()\n    s.next()\n    subscripts, is_single_value = p_subscript_list(s)\n    if is_single_value and len(subscripts[0]) == 2:\n        start, stop = subscripts[0]\n        result = ExprNodes.SliceIndexNode(pos,\n            base = base, start = start, stop = stop)\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_subscript_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_subscript_list(s):\n    is_single_value = True\n    items = [p_subscript(s)]\n    while s.sy == ',':\n        is_single_value = False\n        s.next()\n        if s.sy == ']':\n            break\n        items.append(p_subscript(s))\n    return items, is_single_value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_subscript",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_subscript(s):\n    # Parse a subscript and return a list of\n    # 1, 2 or 3 ExprNodes, depending on how\n    # many slice elements were encountered.\n    pos = s.position()\n    start = p_slice_element(s, (':',))\n    if s.sy != ':':\n        return [start]\n    s.next()\n    stop = p_slice_element(s, (':', ',', ']'))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_slice_element",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_slice_element(s, follow_set):\n    # Simple expression which may be missing iff\n    # it is followed by something in follow_set.\n    if s.sy not in follow_set:\n        return p_test(s)\n    else:\n        return None\ndef expect_ellipsis(s):\n    s.expect('.')\n    s.expect('.')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "expect_ellipsis",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def expect_ellipsis(s):\n    s.expect('.')\n    s.expect('.')\n    s.expect('.')\ndef make_slice_nodes(pos, subscripts):\n    # Convert a list of subscripts as returned\n    # by p_subscript_list into a list of ExprNodes,\n    # creating SliceNodes for elements with 2 or\n    # more components.\n    result = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "make_slice_nodes",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def make_slice_nodes(pos, subscripts):\n    # Convert a list of subscripts as returned\n    # by p_subscript_list into a list of ExprNodes,\n    # creating SliceNodes for elements with 2 or\n    # more components.\n    result = []\n    for subscript in subscripts:\n        if len(subscript) == 1:\n            result.append(subscript[0])\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "make_slice_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def make_slice_node(pos, start, stop = None, step = None):\n    if not start:\n        start = ExprNodes.NoneNode(pos)\n    if not stop:\n        stop = ExprNodes.NoneNode(pos)\n    if not step:\n        step = ExprNodes.NoneNode(pos)\n    return ExprNodes.SliceNode(pos,\n        start = start, stop = stop, step = step)\n#atom: '(' [yield_expr|testlist_comp] ')' | '[' [listmaker] ']' | '{' [dict_or_set_maker] '}' | '`' testlist '`' | NAME | NUMBER | STRING+",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_atom",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_atom(s):\n    pos = s.position()\n    sy = s.sy\n    if sy == '(':\n        s.next()\n        if s.sy == ')':\n            result = ExprNodes.TupleNode(pos, args = [])\n        elif s.sy == 'yield':\n            result = p_yield_expression(s)\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_int_literal",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_int_literal(s):\n    pos = s.position()\n    value = s.systring\n    s.next()\n    unsigned = \"\"\n    longness = \"\"\n    while value[-1] in u\"UuLl\":\n        if value[-1] in u\"Ll\":\n            longness += \"L\"\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_name(s, name):\n    pos = s.position()\n    if not s.compile_time_expr and name in s.compile_time_env:\n        value = s.compile_time_env.lookup_here(name)\n        node = wrap_compile_time_constant(pos, value)\n        if node is not None:\n            return node\n    return ExprNodes.NameNode(pos, name=name)\ndef wrap_compile_time_constant(pos, value):\n    rep = repr(value)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "wrap_compile_time_constant",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def wrap_compile_time_constant(pos, value):\n    rep = repr(value)\n    if value is None:\n        return ExprNodes.NoneNode(pos)\n    elif value is Ellipsis:\n        return ExprNodes.EllipsisNode(pos)\n    elif isinstance(value, bool):\n        return ExprNodes.BoolNode(pos, value=value)\n    elif isinstance(value, int):\n        return ExprNodes.IntNode(pos, value=rep, constant_result=value)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cat_string_literal",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cat_string_literal(s):\n    # A sequence of one or more adjacent string literals.\n    # Returns (kind, bytes_value, unicode_value)\n    # where kind in ('b', 'c', 'u', 'f', '')\n    pos = s.position()\n    kind, bytes_value, unicode_value = p_string_literal(s)\n    if kind == 'c' or s.sy != 'BEGIN_STRING':\n        return kind, bytes_value, unicode_value\n    bstrings, ustrings, positions = [bytes_value], [unicode_value], [pos]\n    bytes_value = unicode_value = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_opt_string_literal",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_opt_string_literal(s, required_type='u'):\n    if s.sy != 'BEGIN_STRING':\n        return None\n    pos = s.position()\n    kind, bytes_value, unicode_value = p_string_literal(s, required_type)\n    if required_type == 'u':\n        if kind == 'f':\n            s.error(\"f-string not allowed here\", pos)\n        return unicode_value\n    elif required_type == 'b':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "check_for_non_ascii_characters",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def check_for_non_ascii_characters(string):\n    for c in string:\n        if c >= u'\\x80':\n            return True\n    return False\ndef p_string_literal(s, kind_override=None):\n    # A single string or char literal.  Returns (kind, bvalue, uvalue)\n    # where kind in ('b', 'c', 'u', 'f', '').  The 'bvalue' is the source\n    # code byte sequence of the string literal, 'uvalue' is the\n    # decoded Unicode string.  Either of the two may be None depending",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_string_literal",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_string_literal(s, kind_override=None):\n    # A single string or char literal.  Returns (kind, bvalue, uvalue)\n    # where kind in ('b', 'c', 'u', 'f', '').  The 'bvalue' is the source\n    # code byte sequence of the string literal, 'uvalue' is the\n    # decoded Unicode string.  Either of the two may be None depending\n    # on the 'kind' of string, only unprefixed strings have both\n    # representations. In f-strings, the uvalue is a list of the Unicode\n    # strings and f-string expressions that make up the f-string.\n    # s.sy == 'BEGIN_STRING'\n    pos = s.position()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_f_string",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_f_string(s, unicode_value, pos, is_raw):\n    # Parses a PEP 498 f-string literal into a list of nodes. Nodes are either UnicodeNodes\n    # or FormattedValueNodes.\n    values = []\n    next_start = 0\n    size = len(unicode_value)\n    builder = StringEncoding.UnicodeLiteralBuilder()\n    _parse_seq = _parse_escape_sequences_raw if is_raw else _parse_escape_sequences\n    while next_start < size:\n        end = next_start",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_f_string_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_f_string_expr(s, unicode_value, pos, starting_index, is_raw):\n    # Parses a {}-delimited expression inside an f-string. Returns a FormattedValueNode\n    # and the index in the string that follows the expression.\n    i = starting_index\n    size = len(unicode_value)\n    conversion_char = terminal_char = format_spec = None\n    format_spec_str = None\n    NO_CHAR = 2**30\n    nested_depth = 0\n    quote_char = NO_CHAR",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_list_maker",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_list_maker(s):\n    # s.sy == '['\n    pos = s.position()\n    s.next()\n    if s.sy == ']':\n        s.expect(']')\n        return ExprNodes.ListNode(pos, args=[])\n    expr = p_test_or_starred_expr(s)\n    if s.sy in ('for', 'async'):\n        if expr.is_starred:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_comp_iter",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_comp_iter(s, body):\n    if s.sy in ('for', 'async'):\n        return p_comp_for(s, body)\n    elif s.sy == 'if':\n        return p_comp_if(s, body)\n    else:\n        # insert the 'append' operation into the loop\n        return body\ndef p_comp_for(s, body):\n    pos = s.position()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_comp_for",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_comp_for(s, body):\n    pos = s.position()\n    # [async] for ...\n    is_async = False\n    if s.sy == 'async':\n        is_async = True\n        s.next()\n    # s.sy == 'for'\n    s.expect('for')\n    kw = p_for_bounds(s, allow_testlist=False, is_async=is_async)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_comp_if",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_comp_if(s, body):\n    # s.sy == 'if'\n    pos = s.position()\n    s.next()\n    test = p_test_nocond(s)\n    return Nodes.IfStatNode(pos,\n        if_clauses = [Nodes.IfClauseNode(pos, condition = test,\n                                         body = p_comp_iter(s, body))],\n        else_clause = None )\n# since PEP 448:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_dict_or_set_maker",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_dict_or_set_maker(s):\n    # s.sy == '{'\n    pos = s.position()\n    s.next()\n    if s.sy == '}':\n        s.next()\n        return ExprNodes.DictNode(pos, key_value_pairs=[])\n    parts = []\n    target_type = 0\n    last_was_simple_item = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_backquote_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_backquote_expr(s):\n    # s.sy == '`'\n    pos = s.position()\n    s.next()\n    args = [p_test(s)]\n    while s.sy == ',':\n        s.next()\n        args.append(p_test(s))\n    s.expect('`')\n    if len(args) == 1:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_simple_expr_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_simple_expr_list(s, expr=None):\n    exprs = expr is not None and [expr] or []\n    while s.sy not in expr_terminators:\n        exprs.append( p_test(s) )\n        if s.sy != ',':\n            break\n        s.next()\n    return exprs\ndef p_test_or_starred_expr_list(s, expr=None):\n    exprs = expr is not None and [expr] or []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_test_or_starred_expr_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_test_or_starred_expr_list(s, expr=None):\n    exprs = expr is not None and [expr] or []\n    while s.sy not in expr_terminators:\n        exprs.append(p_test_or_starred_expr(s))\n        if s.sy != ',':\n            break\n        s.next()\n    return exprs\n#testlist: test (',' test)* [',']\ndef p_testlist(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_testlist",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_testlist(s):\n    pos = s.position()\n    expr = p_test(s)\n    if s.sy == ',':\n        s.next()\n        exprs = p_simple_expr_list(s, expr)\n        return ExprNodes.TupleNode(pos, args = exprs)\n    else:\n        return expr\n# testlist_star_expr: (test|star_expr) ( comp_for | (',' (test|star_expr))* [','] )",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_testlist_star_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_testlist_star_expr(s):\n    pos = s.position()\n    expr = p_test_or_starred_expr(s)\n    if s.sy == ',':\n        s.next()\n        exprs = p_test_or_starred_expr_list(s, expr)\n        return ExprNodes.TupleNode(pos, args = exprs)\n    else:\n        return expr\n# testlist_comp: (test|star_expr) ( comp_for | (',' (test|star_expr))* [','] )",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_testlist_comp",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_testlist_comp(s):\n    pos = s.position()\n    expr = p_test_or_starred_expr(s)\n    if s.sy == ',':\n        s.next()\n        exprs = p_test_or_starred_expr_list(s, expr)\n        return ExprNodes.TupleNode(pos, args = exprs)\n    elif s.sy in ('for', 'async'):\n        return p_genexp(s, expr)\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_genexp",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_genexp(s, expr):\n    # s.sy == 'async' | 'for'\n    loop = p_comp_for(s, Nodes.ExprStatNode(\n        expr.pos, expr = ExprNodes.YieldExprNode(expr.pos, arg=expr)))\n    return ExprNodes.GeneratorExpressionNode(expr.pos, loop=loop)\nexpr_terminators = cython.declare(set, set([\n    ')', ']', '}', ':', '=', 'NEWLINE']))\n#-------------------------------------------------------\n#\n#   Statements",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_global_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_global_statement(s):\n    # assume s.sy == 'global'\n    pos = s.position()\n    s.next()\n    names = p_ident_list(s)\n    return Nodes.GlobalNode(pos, names = names)\ndef p_nonlocal_statement(s):\n    pos = s.position()\n    s.next()\n    names = p_ident_list(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_nonlocal_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_nonlocal_statement(s):\n    pos = s.position()\n    s.next()\n    names = p_ident_list(s)\n    return Nodes.NonlocalNode(pos, names = names)\ndef p_expression_or_assignment(s):\n    expr = p_testlist_star_expr(s)\n    if s.sy == ':' and (expr.is_name or expr.is_subscript or expr.is_attribute):\n        s.next()\n        expr.annotation = p_test(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_expression_or_assignment",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_expression_or_assignment(s):\n    expr = p_testlist_star_expr(s)\n    if s.sy == ':' and (expr.is_name or expr.is_subscript or expr.is_attribute):\n        s.next()\n        expr.annotation = p_test(s)\n    if s.sy == '=' and expr.is_starred:\n        # This is a common enough error to make when learning Cython to let\n        # it fail as early as possible and give a very clear error message.\n        s.error(\"a starred assignment target must be in a list or tuple\"\n                \" - maybe you meant to use an index assignment: var[0] = ...\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_print_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_print_statement(s):\n    # s.sy == 'print'\n    pos = s.position()\n    ends_with_comma = 0\n    s.next()\n    if s.sy == '>>':\n        s.next()\n        stream = p_test(s)\n        if s.sy == ',':\n            s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_exec_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_exec_statement(s):\n    # s.sy == 'exec'\n    pos = s.position()\n    s.next()\n    code = p_bit_expr(s)\n    if isinstance(code, ExprNodes.TupleNode):\n        # Py3 compatibility syntax\n        tuple_variant = True\n        args = code.args\n        if len(args) not in (2, 3):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_del_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_del_statement(s):\n    # s.sy == 'del'\n    pos = s.position()\n    s.next()\n    # FIXME: 'exprlist' in Python\n    args = p_simple_expr_list(s)\n    return Nodes.DelStatNode(pos, args = args)\ndef p_pass_statement(s, with_newline = 0):\n    pos = s.position()\n    s.expect('pass')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_pass_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_pass_statement(s, with_newline = 0):\n    pos = s.position()\n    s.expect('pass')\n    if with_newline:\n        s.expect_newline(\"Expected a newline\", ignore_semicolon=True)\n    return Nodes.PassStatNode(pos)\ndef p_break_statement(s):\n    # s.sy == 'break'\n    pos = s.position()\n    s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_break_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_break_statement(s):\n    # s.sy == 'break'\n    pos = s.position()\n    s.next()\n    return Nodes.BreakStatNode(pos)\ndef p_continue_statement(s):\n    # s.sy == 'continue'\n    pos = s.position()\n    s.next()\n    return Nodes.ContinueStatNode(pos)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_continue_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_continue_statement(s):\n    # s.sy == 'continue'\n    pos = s.position()\n    s.next()\n    return Nodes.ContinueStatNode(pos)\ndef p_return_statement(s):\n    # s.sy == 'return'\n    pos = s.position()\n    s.next()\n    if s.sy not in statement_terminators:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_return_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_return_statement(s):\n    # s.sy == 'return'\n    pos = s.position()\n    s.next()\n    if s.sy not in statement_terminators:\n        value = p_testlist(s)\n    else:\n        value = None\n    return Nodes.ReturnStatNode(pos, value = value)\ndef p_raise_statement(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_raise_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_raise_statement(s):\n    # s.sy == 'raise'\n    pos = s.position()\n    s.next()\n    exc_type = None\n    exc_value = None\n    exc_tb = None\n    cause = None\n    if s.sy not in statement_terminators:\n        exc_type = p_test(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_import_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_import_statement(s):\n    # s.sy in ('import', 'cimport')\n    pos = s.position()\n    kind = s.sy\n    s.next()\n    items = [p_dotted_name(s, as_allowed=1)]\n    while s.sy == ',':\n        s.next()\n        items.append(p_dotted_name(s, as_allowed=1))\n    stats = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_from_import_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_from_import_statement(s, first_statement = 0):\n    # s.sy == 'from'\n    pos = s.position()\n    s.next()\n    if s.sy == '.':\n        # count relative import level\n        level = 0\n        while s.sy == '.':\n            level += 1\n            s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_imported_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_imported_name(s, is_cimport):\n    pos = s.position()\n    kind = None\n    if is_cimport and s.systring in imported_name_kinds:\n        kind = s.systring\n        s.next()\n    name = p_ident(s)\n    as_name = p_as_name(s)\n    return (pos, name, as_name, kind)\ndef p_dotted_name(s, as_allowed):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_dotted_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_dotted_name(s, as_allowed):\n    pos = s.position()\n    target_name = p_ident(s)\n    as_name = None\n    names = [target_name]\n    while s.sy == '.':\n        s.next()\n        names.append(p_ident(s))\n    if as_allowed:\n        as_name = p_as_name(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_as_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_as_name(s):\n    if s.sy == 'IDENT' and s.systring == 'as':\n        s.next()\n        return p_ident(s)\n    else:\n        return None\ndef p_assert_statement(s):\n    # s.sy == 'assert'\n    pos = s.position()\n    s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_assert_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_assert_statement(s):\n    # s.sy == 'assert'\n    pos = s.position()\n    s.next()\n    cond = p_test(s)\n    if s.sy == ',':\n        s.next()\n        value = p_test(s)\n    else:\n        value = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_if_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_if_statement(s):\n    # s.sy == 'if'\n    pos = s.position()\n    s.next()\n    if_clauses = [p_if_clause(s)]\n    while s.sy == 'elif':\n        s.next()\n        if_clauses.append(p_if_clause(s))\n    else_clause = p_else_clause(s)\n    return Nodes.IfStatNode(pos,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_if_clause",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_if_clause(s):\n    pos = s.position()\n    test = p_test(s)\n    body = p_suite(s)\n    return Nodes.IfClauseNode(pos,\n        condition = test, body = body)\ndef p_else_clause(s):\n    if s.sy == 'else':\n        s.next()\n        return p_suite(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_else_clause",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_else_clause(s):\n    if s.sy == 'else':\n        s.next()\n        return p_suite(s)\n    else:\n        return None\ndef p_while_statement(s):\n    # s.sy == 'while'\n    pos = s.position()\n    s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_while_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_while_statement(s):\n    # s.sy == 'while'\n    pos = s.position()\n    s.next()\n    test = p_test(s)\n    body = p_suite(s)\n    else_clause = p_else_clause(s)\n    return Nodes.WhileStatNode(pos,\n        condition = test, body = body,\n        else_clause = else_clause)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_for_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_for_statement(s, is_async=False):\n    # s.sy == 'for'\n    pos = s.position()\n    s.next()\n    kw = p_for_bounds(s, allow_testlist=True, is_async=is_async)\n    body = p_suite(s)\n    else_clause = p_else_clause(s)\n    kw.update(body=body, else_clause=else_clause, is_async=is_async)\n    return Nodes.ForStatNode(pos, **kw)\ndef p_for_bounds(s, allow_testlist=True, is_async=False):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_for_bounds",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_for_bounds(s, allow_testlist=True, is_async=False):\n    target = p_for_target(s)\n    if s.sy == 'in':\n        s.next()\n        iterator = p_for_iterator(s, allow_testlist, is_async=is_async)\n        return dict(target=target, iterator=iterator)\n    elif not s.in_python_file and not is_async:\n        if s.sy == 'from':\n            s.next()\n            bound1 = p_bit_expr(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_for_from_relation",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_for_from_relation(s):\n    if s.sy in inequality_relations:\n        op = s.sy\n        s.next()\n        return op\n    else:\n        s.error(\"Expected one of '<', '<=', '>' '>='\")\ndef p_for_from_step(s):\n    if s.sy == 'IDENT' and s.systring == 'by':\n        s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_for_from_step",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_for_from_step(s):\n    if s.sy == 'IDENT' and s.systring == 'by':\n        s.next()\n        step = p_bit_expr(s)\n        return step\n    else:\n        return None\ninequality_relations = cython.declare(set, set(['<', '<=', '>', '>=']))\ndef p_target(s, terminator):\n    pos = s.position()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_target",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_target(s, terminator):\n    pos = s.position()\n    expr = p_starred_expr(s)\n    if s.sy == ',':\n        s.next()\n        exprs = [expr]\n        while s.sy != terminator:\n            exprs.append(p_starred_expr(s))\n            if s.sy != ',':\n                break",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_for_target",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_for_target(s):\n    return p_target(s, 'in')\ndef p_for_iterator(s, allow_testlist=True, is_async=False):\n    pos = s.position()\n    if allow_testlist:\n        expr = p_testlist(s)\n    else:\n        expr = p_or_test(s)\n    return (ExprNodes.AsyncIteratorNode if is_async else ExprNodes.IteratorNode)(pos, sequence=expr)\ndef p_try_statement(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_for_iterator",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_for_iterator(s, allow_testlist=True, is_async=False):\n    pos = s.position()\n    if allow_testlist:\n        expr = p_testlist(s)\n    else:\n        expr = p_or_test(s)\n    return (ExprNodes.AsyncIteratorNode if is_async else ExprNodes.IteratorNode)(pos, sequence=expr)\ndef p_try_statement(s):\n    # s.sy == 'try'\n    pos = s.position()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_try_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_try_statement(s):\n    # s.sy == 'try'\n    pos = s.position()\n    s.next()\n    body = p_suite(s)\n    except_clauses = []\n    else_clause = None\n    if s.sy in ('except', 'else'):\n        while s.sy == 'except':\n            except_clauses.append(p_except_clause(s))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_except_clause",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_except_clause(s):\n    # s.sy == 'except'\n    pos = s.position()\n    s.next()\n    exc_type = None\n    exc_value = None\n    is_except_as = False\n    if s.sy != ':':\n        exc_type = p_test(s)\n        # normalise into list of single exception tests",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_include_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_include_statement(s, ctx):\n    pos = s.position()\n    s.next() # 'include'\n    unicode_include_file_name = p_string_literal(s, 'u')[2]\n    s.expect_newline(\"Syntax error in include statement\")\n    if s.compile_time_eval:\n        include_file_name = unicode_include_file_name\n        include_file_path = s.context.find_include_file(include_file_name, pos)\n        if include_file_path:\n            s.included_files.append(include_file_name)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_with_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_with_statement(s):\n    s.next()  # 'with'\n    if s.systring == 'template' and not s.in_python_file:\n        node = p_with_template(s)\n    else:\n        node = p_with_items(s)\n    return node\ndef p_with_items(s, is_async=False):\n    pos = s.position()\n    if not s.in_python_file and s.sy == 'IDENT' and s.systring in ('nogil', 'gil'):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_with_items",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_with_items(s, is_async=False):\n    pos = s.position()\n    if not s.in_python_file and s.sy == 'IDENT' and s.systring in ('nogil', 'gil'):\n        if is_async:\n            s.error(\"with gil/nogil cannot be async\")\n        state = s.systring\n        s.next()\n        if s.sy == ',':\n            s.next()\n            body = p_with_items(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_with_template",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_with_template(s):\n    pos = s.position()\n    templates = []\n    s.next()\n    s.expect('[')\n    templates.append(s.systring)\n    s.next()\n    while s.systring == ',':\n        s.next()\n        templates.append(s.systring)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_simple_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_simple_statement(s, first_statement = 0):\n    #print \"p_simple_statement:\", s.sy, s.systring ###\n    if s.sy == 'global':\n        node = p_global_statement(s)\n    elif s.sy == 'nonlocal':\n        node = p_nonlocal_statement(s)\n    elif s.sy == 'print':\n        node = p_print_statement(s)\n    elif s.sy == 'exec':\n        node = p_exec_statement(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_simple_statement_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_simple_statement_list(s, ctx, first_statement = 0):\n    # Parse a series of simple statements on one line\n    # separated by semicolons.\n    stat = p_simple_statement(s, first_statement = first_statement)\n    pos = stat.pos\n    stats = []\n    if not isinstance(stat, Nodes.PassStatNode):\n        stats.append(stat)\n    while s.sy == ';':\n        #print \"p_simple_statement_list: maybe more to follow\" ###",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_compile_time_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_compile_time_expr(s):\n    old = s.compile_time_expr\n    s.compile_time_expr = 1\n    expr = p_testlist(s)\n    s.compile_time_expr = old\n    return expr\ndef p_DEF_statement(s):\n    pos = s.position()\n    denv = s.compile_time_env\n    s.next() # 'DEF'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_DEF_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_DEF_statement(s):\n    pos = s.position()\n    denv = s.compile_time_env\n    s.next() # 'DEF'\n    name = p_ident(s)\n    s.expect('=')\n    expr = p_compile_time_expr(s)\n    if s.compile_time_eval:\n        value = expr.compile_time_value(denv)\n        #print \"p_DEF_statement: %s = %r\" % (name, value) ###",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_IF_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_IF_statement(s, ctx):\n    pos = s.position()\n    saved_eval = s.compile_time_eval\n    current_eval = saved_eval\n    denv = s.compile_time_env\n    result = None\n    while 1:\n        s.next() # 'IF' or 'ELIF'\n        expr = p_compile_time_expr(s)\n        s.compile_time_eval = current_eval and bool(expr.compile_time_value(denv))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_statement(s, ctx, first_statement = 0):\n    cdef_flag = ctx.cdef_flag\n    decorators = None\n    if s.sy == 'ctypedef':\n        if ctx.level not in ('module', 'module_pxd'):\n            s.error(\"ctypedef statement not allowed here\")\n        #if ctx.api:\n        #    error(s.position(), \"'api' not allowed with 'ctypedef'\")\n        return p_ctypedef_statement(s, ctx)\n    elif s.sy == 'DEF':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_statement_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_statement_list(s, ctx, first_statement = 0):\n    # Parse a series of statements separated by newlines.\n    pos = s.position()\n    stats = []\n    while s.sy not in ('DEDENT', 'EOF'):\n        stat = p_statement(s, ctx, first_statement = first_statement)\n        if isinstance(stat, Nodes.PassStatNode):\n            continue\n        stats.append(stat)\n        first_statement = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_suite",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_suite(s, ctx=Ctx()):\n    return p_suite_with_docstring(s, ctx, with_doc_only=False)[1]\ndef p_suite_with_docstring(s, ctx, with_doc_only=False):\n    s.expect(':')\n    doc = None\n    if s.sy == 'NEWLINE':\n        s.next()\n        s.expect_indent()\n        if with_doc_only:\n            doc = p_doc_string(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_suite_with_docstring",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_suite_with_docstring(s, ctx, with_doc_only=False):\n    s.expect(':')\n    doc = None\n    if s.sy == 'NEWLINE':\n        s.next()\n        s.expect_indent()\n        if with_doc_only:\n            doc = p_doc_string(s)\n        body = p_statement_list(s, ctx)\n        s.expect_dedent()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_positional_and_keyword_args",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_positional_and_keyword_args(s, end_sy_set, templates = None):\n    \"\"\"\n    Parses positional and keyword arguments. end_sy_set\n    should contain any s.sy that terminate the argument list.\n    Argument expansion (* and **) are not allowed.\n    Returns: (positional_args, keyword_args)\n    \"\"\"\n    positional_args = []\n    keyword_args = []\n    pos_idx = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_base_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_base_type(s, self_flag = 0, nonempty = 0, templates = None):\n    # If self_flag is true, this is the base type for the\n    # self argument of a C method of an extension type.\n    if s.sy == '(':\n        return p_c_complex_base_type(s, templates = templates)\n    else:\n        return p_c_simple_base_type(s, self_flag, nonempty = nonempty, templates = templates)\ndef p_calling_convention(s):\n    if s.sy == 'IDENT' and s.systring in calling_convention_words:\n        result = s.systring",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_calling_convention",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_calling_convention(s):\n    if s.sy == 'IDENT' and s.systring in calling_convention_words:\n        result = s.systring\n        s.next()\n        return result\n    else:\n        return \"\"\ncalling_convention_words = cython.declare(\n    set, set([\"__stdcall\", \"__cdecl\", \"__fastcall\"]))\ndef p_c_complex_base_type(s, templates = None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_complex_base_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_complex_base_type(s, templates = None):\n    # s.sy == '('\n    pos = s.position()\n    s.next()\n    base_type = p_c_base_type(s, templates=templates)\n    declarator = p_c_declarator(s, empty=True)\n    type_node = Nodes.CComplexBaseTypeNode(\n        pos, base_type=base_type, declarator=declarator)\n    if s.sy == ',':\n        components = [type_node]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_simple_base_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_simple_base_type(s, self_flag, nonempty, templates = None):\n    #print \"p_c_simple_base_type: self_flag =\", self_flag, nonempty\n    is_basic = 0\n    signed = 1\n    longness = 0\n    complex = 0\n    module_path = []\n    pos = s.position()\n    if not s.sy == 'IDENT':\n        error(pos, \"Expected an identifier, found '%s'\" % s.sy)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_buffer_or_template",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_buffer_or_template(s, base_type_node, templates):\n    # s.sy == '['\n    pos = s.position()\n    s.next()\n    # Note that buffer_positional_options_count=1, so the only positional argument is dtype.\n    # For templated types, all parameters are types.\n    positional_args, keyword_args = (\n        p_positional_and_keyword_args(s, (']',), templates)\n    )\n    s.expect(']')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_bracketed_base_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_bracketed_base_type(s, base_type_node, nonempty, empty):\n    # s.sy == '['\n    if empty and not nonempty:\n        # sizeof-like thing.  Only anonymous C arrays allowed (int[SIZE]).\n        return base_type_node\n    elif not empty and nonempty:\n        # declaration of either memoryview slice or buffer.\n        if is_memoryviewslice_access(s):\n            return p_memoryviewslice_access(s, base_type_node)\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "is_memoryviewslice_access",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def is_memoryviewslice_access(s):\n    # s.sy == '['\n    # a memoryview slice declaration is distinguishable from a buffer access\n    # declaration by the first entry in the bracketed list.  The buffer will\n    # not have an unnested colon in the first entry; the memoryview slice will.\n    saved = [(s.sy, s.systring)]\n    s.next()\n    retval = False\n    if s.systring == ':':\n        retval = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_memoryviewslice_access",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_memoryviewslice_access(s, base_type_node):\n    # s.sy == '['\n    pos = s.position()\n    s.next()\n    subscripts, _ = p_subscript_list(s)\n    # make sure each entry in subscripts is a slice\n    for subscript in subscripts:\n        if len(subscript) < 2:\n            s.error(\"An axis specification in memoryview declaration does not have a ':'.\")\n    s.expect(']')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "looking_at_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def looking_at_name(s):\n    return s.sy == 'IDENT' and not s.systring in calling_convention_words\ndef looking_at_expr(s):\n    if s.systring in base_type_start_words:\n        return False\n    elif s.sy == 'IDENT':\n        is_type = False\n        name = s.systring\n        dotted_path = []\n        s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "looking_at_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def looking_at_expr(s):\n    if s.systring in base_type_start_words:\n        return False\n    elif s.sy == 'IDENT':\n        is_type = False\n        name = s.systring\n        dotted_path = []\n        s.next()\n        while s.sy == '.':\n            s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "looking_at_base_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def looking_at_base_type(s):\n    #print \"looking_at_base_type?\", s.sy, s.systring, s.position()\n    return s.sy == 'IDENT' and s.systring in base_type_start_words\ndef looking_at_dotted_name(s):\n    if s.sy == 'IDENT':\n        name = s.systring\n        s.next()\n        result = s.sy == '.'\n        s.put_back('IDENT', name)\n        return result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "looking_at_dotted_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def looking_at_dotted_name(s):\n    if s.sy == 'IDENT':\n        name = s.systring\n        s.next()\n        result = s.sy == '.'\n        s.put_back('IDENT', name)\n        return result\n    else:\n        return 0\ndef looking_at_call(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "looking_at_call",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def looking_at_call(s):\n    \"See if we're looking at a.b.c(\"\n    # Don't mess up the original position, so save and restore it.\n    # Unfortunately there's no good way to handle this, as a subsequent call\n    # to next() will not advance the position until it reads a new token.\n    position = s.start_line, s.start_col\n    result = looking_at_expr(s) == u'('\n    if not result:\n        s.start_line, s.start_col = position\n    return result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_sign_and_longness",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_sign_and_longness(s):\n    signed = 1\n    longness = 0\n    while s.sy == 'IDENT' and s.systring in sign_and_longness_words:\n        if s.systring == 'unsigned':\n            signed = 0\n        elif s.systring == 'signed':\n            signed = 2\n        elif s.systring == 'short':\n            longness = -1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_opt_cname",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_opt_cname(s):\n    literal = p_opt_string_literal(s, 'u')\n    if literal is not None:\n        cname = EncodedString(literal)\n        cname.encoding = s.source_encoding\n    else:\n        cname = None\n    return cname\ndef p_c_declarator(s, ctx = Ctx(), empty = 0, is_type = 0, cmethod_flag = 0,\n                   assignable = 0, nonempty = 0,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_declarator",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_declarator(s, ctx = Ctx(), empty = 0, is_type = 0, cmethod_flag = 0,\n                   assignable = 0, nonempty = 0,\n                   calling_convention_allowed = 0):\n    # If empty is true, the declarator must be empty. If nonempty is true,\n    # the declarator must be nonempty. Otherwise we don't care.\n    # If cmethod_flag is true, then if this declarator declares\n    # a function, it's a C method of an extension type.\n    pos = s.position()\n    if s.sy == '(':\n        s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_array_declarator",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_array_declarator(s, base):\n    pos = s.position()\n    s.next() # '['\n    if s.sy != ']':\n        dim = p_testlist(s)\n    else:\n        dim = None\n    s.expect(']')\n    return Nodes.CArrayDeclaratorNode(pos, base = base, dimension = dim)\ndef p_c_func_declarator(s, pos, ctx, base, cmethod_flag):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_func_declarator",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_func_declarator(s, pos, ctx, base, cmethod_flag):\n    #  Opening paren has already been skipped\n    args = p_c_arg_list(s, ctx, cmethod_flag = cmethod_flag,\n                        nonempty_declarators = 0)\n    ellipsis = p_optional_ellipsis(s)\n    s.expect(')')\n    nogil = p_nogil(s)\n    exc_val, exc_check = p_exception_value_clause(s)\n    # TODO - warning to enforce preferred exception specification order\n    nogil = nogil or p_nogil(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_simple_declarator",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_simple_declarator(s, ctx, empty, is_type, cmethod_flag,\n                          assignable, nonempty):\n    pos = s.position()\n    calling_convention = p_calling_convention(s)\n    if s.sy == '*':\n        s.next()\n        if s.systring == 'const':\n            const_pos = s.position()\n            s.next()\n            const_base = p_c_declarator(s, ctx, empty = empty,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_nogil",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_nogil(s):\n    if s.sy == 'IDENT' and s.systring == 'nogil':\n        s.next()\n        return 1\n    else:\n        return 0\ndef p_with_gil(s):\n    if s.sy == 'with':\n        s.next()\n        s.expect_keyword('gil')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_with_gil",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_with_gil(s):\n    if s.sy == 'with':\n        s.next()\n        s.expect_keyword('gil')\n        return 1\n    else:\n        return 0\ndef p_exception_value_clause(s):\n    exc_val = None\n    exc_check = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_exception_value_clause",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_exception_value_clause(s):\n    exc_val = None\n    exc_check = 0\n    if s.sy == 'IDENT' and s.systring == 'noexcept':\n        s.next()\n        exc_check = False  # No-op in Cython 0.29.x\n    elif s.sy == 'except':\n        s.next()\n        if s.sy == '*':\n            exc_check = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_arg_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_arg_list(s, ctx = Ctx(), in_pyfunc = 0, cmethod_flag = 0,\n                 nonempty_declarators = 0, kw_only = 0, annotated = 1):\n    #  Comma-separated list of C argument declarations, possibly empty.\n    #  May have a trailing comma.\n    args = []\n    is_self_arg = cmethod_flag\n    while s.sy not in c_arg_list_terminators:\n        args.append(p_c_arg_decl(s, ctx, in_pyfunc, is_self_arg,\n            nonempty = nonempty_declarators, kw_only = kw_only,\n            annotated = annotated))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_optional_ellipsis",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_optional_ellipsis(s):\n    if s.sy == '.':\n        expect_ellipsis(s)\n        return 1\n    else:\n        return 0\ndef p_c_arg_decl(s, ctx, in_pyfunc, cmethod_flag = 0, nonempty = 0,\n                 kw_only = 0, annotated = 1):\n    pos = s.position()\n    not_none = or_none = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_arg_decl",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_arg_decl(s, ctx, in_pyfunc, cmethod_flag = 0, nonempty = 0,\n                 kw_only = 0, annotated = 1):\n    pos = s.position()\n    not_none = or_none = 0\n    default = None\n    annotation = None\n    if s.in_python_file:\n        # empty type declaration\n        base_type = Nodes.CSimpleBaseTypeNode(pos,\n            name = None, module_path = [],",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_api",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_api(s):\n    if s.sy == 'IDENT' and s.systring == 'api':\n        s.next()\n        return 1\n    else:\n        return 0\ndef p_cdef_statement(s, ctx):\n    pos = s.position()\n    ctx.visibility = p_visibility(s, ctx.visibility)\n    ctx.api = ctx.api or p_api(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cdef_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cdef_statement(s, ctx):\n    pos = s.position()\n    ctx.visibility = p_visibility(s, ctx.visibility)\n    ctx.api = ctx.api or p_api(s)\n    if ctx.api:\n        if ctx.visibility not in ('private', 'public'):\n            error(pos, \"Cannot combine 'api' with '%s'\" % ctx.visibility)\n    if (ctx.visibility == 'extern') and s.sy == 'from':\n        return p_cdef_extern_block(s, pos, ctx)\n    elif s.sy == 'import':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cdef_block",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cdef_block(s, ctx):\n    return p_suite(s, ctx(cdef_flag = 1))\ndef p_cdef_extern_block(s, pos, ctx):\n    if ctx.overridable:\n        error(pos, \"cdef extern blocks cannot be declared cpdef\")\n    include_file = None\n    s.expect('from')\n    if s.sy == '*':\n        s.next()\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cdef_extern_block",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cdef_extern_block(s, pos, ctx):\n    if ctx.overridable:\n        error(pos, \"cdef extern blocks cannot be declared cpdef\")\n    include_file = None\n    s.expect('from')\n    if s.sy == '*':\n        s.next()\n    else:\n        include_file = p_string_literal(s, 'u')[2]\n    ctx = ctx(cdef_flag = 1, visibility = 'extern')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_enum_definition",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_enum_definition(s, pos, ctx):\n    # s.sy == ident 'enum'\n    s.next()\n    if s.sy == 'IDENT':\n        name = s.systring\n        s.next()\n        cname = p_opt_cname(s)\n        if cname is None and ctx.namespace is not None:\n            cname = ctx.namespace + \"::\" + name\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_enum_line",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_enum_line(s, ctx, items):\n    if s.sy != 'pass':\n        p_c_enum_item(s, ctx, items)\n        while s.sy == ',':\n            s.next()\n            if s.sy in ('NEWLINE', 'EOF'):\n                break\n            p_c_enum_item(s, ctx, items)\n    else:\n        s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_enum_item",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_enum_item(s, ctx, items):\n    pos = s.position()\n    name = p_ident(s)\n    cname = p_opt_cname(s)\n    if cname is None and ctx.namespace is not None:\n        cname = ctx.namespace + \"::\" + name\n    value = None\n    if s.sy == '=':\n        s.next()\n        value = p_test(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_struct_or_union_definition",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_struct_or_union_definition(s, pos, ctx):\n    packed = False\n    if s.systring == 'packed':\n        packed = True\n        s.next()\n        if s.sy != 'IDENT' or s.systring != 'struct':\n            s.expected('struct')\n    # s.sy == ident 'struct' or 'union'\n    kind = s.systring\n    s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_fused_definition",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_fused_definition(s, pos, ctx):\n    \"\"\"\n    c(type)def fused my_fused_type:\n        ...\n    \"\"\"\n    # s.systring == 'fused'\n    if ctx.level not in ('module', 'module_pxd'):\n        error(pos, \"Fused type definition not allowed here\")\n    s.next()\n    name = p_ident(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_struct_enum",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_struct_enum(s, pos, ctx):\n    if s.systring == 'enum':\n        return p_c_enum_definition(s, pos, ctx)\n    else:\n        return p_c_struct_or_union_definition(s, pos, ctx)\ndef p_visibility(s, prev_visibility):\n    pos = s.position()\n    visibility = prev_visibility\n    if s.sy == 'IDENT' and s.systring in ('extern', 'public', 'readonly'):\n        visibility = s.systring",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_visibility",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_visibility(s, prev_visibility):\n    pos = s.position()\n    visibility = prev_visibility\n    if s.sy == 'IDENT' and s.systring in ('extern', 'public', 'readonly'):\n        visibility = s.systring\n        if prev_visibility != 'private' and visibility != prev_visibility:\n            s.error(\"Conflicting visibility options '%s' and '%s'\"\n                % (prev_visibility, visibility), fatal=False)\n        s.next()\n    return visibility",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_modifiers",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_modifiers(s):\n    if s.sy == 'IDENT' and s.systring in ('inline',):\n        modifier = s.systring\n        s.next()\n        return [modifier] + p_c_modifiers(s)\n    return []\ndef p_c_func_or_var_declaration(s, pos, ctx):\n    cmethod_flag = ctx.level in ('c_class', 'c_class_pxd')\n    modifiers = p_c_modifiers(s)\n    base_type = p_c_base_type(s, nonempty = 1, templates = ctx.templates)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_func_or_var_declaration",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_func_or_var_declaration(s, pos, ctx):\n    cmethod_flag = ctx.level in ('c_class', 'c_class_pxd')\n    modifiers = p_c_modifiers(s)\n    base_type = p_c_base_type(s, nonempty = 1, templates = ctx.templates)\n    declarator = p_c_declarator(s, ctx(modifiers=modifiers), cmethod_flag = cmethod_flag,\n                                assignable = 1, nonempty = 1)\n    declarator.overridable = ctx.overridable\n    if s.sy == 'IDENT' and s.systring == 'const' and ctx.level == 'cpp_class':\n        s.next()\n        is_const_method = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_ctypedef_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_ctypedef_statement(s, ctx):\n    # s.sy == 'ctypedef'\n    pos = s.position()\n    s.next()\n    visibility = p_visibility(s, ctx.visibility)\n    api = p_api(s)\n    ctx = ctx(typedef_flag = 1, visibility = visibility)\n    if api:\n        ctx.api = 1\n    if s.sy == 'class':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_decorators",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_decorators(s):\n    decorators = []\n    while s.sy == '@':\n        pos = s.position()\n        s.next()\n        decstring = p_dotted_name(s, as_allowed=0)[2]\n        names = decstring.split('.')\n        decorator = ExprNodes.NameNode(pos, name=s.context.intern_ustring(names[0]))\n        for name in names[1:]:\n            decorator = ExprNodes.AttributeNode(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_def_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_def_statement(s, decorators=None, is_async_def=False):\n    # s.sy == 'def'\n    pos = s.position()\n    # PEP 492 switches the async/await keywords on in \"async def\" functions\n    if is_async_def:\n        s.enter_async()\n    s.next()\n    name = _reject_cdef_modifier_in_py(s, p_ident(s))\n    s.expect(\n        '(',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_varargslist",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_varargslist(s, terminator=')', annotated=1):\n    args = p_c_arg_list(s, in_pyfunc = 1, nonempty_declarators = 1,\n                        annotated = annotated)\n    star_arg = None\n    starstar_arg = None\n    if s.sy == '*':\n        s.next()\n        if s.sy == 'IDENT':\n            star_arg = p_py_arg_decl(s, annotated=annotated)\n        if s.sy == ',':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_py_arg_decl",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_py_arg_decl(s, annotated = 1):\n    pos = s.position()\n    name = p_ident(s)\n    annotation = None\n    if annotated and s.sy == ':':\n        s.next()\n        annotation = p_test(s)\n    return Nodes.PyArgDeclNode(pos, name = name, annotation = annotation)\ndef p_class_statement(s, decorators):\n    # s.sy == 'class'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_class_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_class_statement(s, decorators):\n    # s.sy == 'class'\n    pos = s.position()\n    s.next()\n    class_name = EncodedString(p_ident(s))\n    class_name.encoding = s.source_encoding  # FIXME: why is this needed?\n    arg_tuple = None\n    keyword_dict = None\n    if s.sy == '(':\n        positional_args, keyword_args = p_call_parse_args(s, allow_genexp=False)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_class_definition",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_class_definition(s, pos,  ctx):\n    # s.sy == 'class'\n    s.next()\n    module_path = []\n    class_name = p_ident(s)\n    while s.sy == '.':\n        s.next()\n        module_path.append(class_name)\n        class_name = p_ident(s)\n    if module_path and ctx.visibility != 'extern':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_c_class_options",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_c_class_options(s):\n    objstruct_name = None\n    typeobj_name = None\n    check_size = None\n    s.expect('[')\n    while 1:\n        if s.sy != 'IDENT':\n            break\n        if s.systring == 'object':\n            s.next()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_property_decl",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_property_decl(s):\n    pos = s.position()\n    s.next()  # 'property'\n    name = p_ident(s)\n    doc, body = p_suite_with_docstring(\n        s, Ctx(level='property'), with_doc_only=True)\n    return Nodes.PropertyNode(pos, name=name, doc=doc, body=body)\ndef p_ignorable_statement(s):\n    \"\"\"\n    Parses any kind of ignorable statement that is allowed in .pxd files.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_ignorable_statement",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_ignorable_statement(s):\n    \"\"\"\n    Parses any kind of ignorable statement that is allowed in .pxd files.\n    \"\"\"\n    if s.sy == 'BEGIN_STRING':\n        pos = s.position()\n        string_node = p_atom(s)\n        s.expect_newline(\"Syntax error in string\", ignore_semicolon=True)\n        return Nodes.ExprStatNode(pos, expr=string_node)\n    return None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_doc_string",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_doc_string(s):\n    if s.sy == 'BEGIN_STRING':\n        pos = s.position()\n        kind, bytes_result, unicode_result = p_cat_string_literal(s)\n        s.expect_newline(\"Syntax error in doc string\", ignore_semicolon=True)\n        if kind in ('u', ''):\n            return unicode_result\n        warning(pos, \"Python 3 requires docstrings to be unicode strings\")\n        return bytes_result\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_code(s, level=None, ctx=Ctx):\n    body = p_statement_list(s, ctx(level = level), first_statement = 1)\n    if s.sy != 'EOF':\n        s.error(\"Syntax error in statement [%s,%s]\" % (\n            repr(s.sy), repr(s.systring)))\n    return body\n_match_compiler_directive_comment = cython.declare(object, re.compile(\n    r\"^#\\s*cython\\s*:\\s*((\\w|[.])+\\s*=.*)$\").match)\ndef p_compiler_directive_comments(s):\n    result = {}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_compiler_directive_comments",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_compiler_directive_comments(s):\n    result = {}\n    while s.sy == 'commentline':\n        pos = s.position()\n        m = _match_compiler_directive_comment(s.systring)\n        if m:\n            directives_string = m.group(1).strip()\n            try:\n                new_directives = Options.parse_directive_list(directives_string, ignore_unknown=True)\n            except ValueError as e:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_module",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_module(s, pxd, full_module_name, ctx=Ctx):\n    pos = s.position()\n    directive_comments = p_compiler_directive_comments(s)\n    s.parse_comments = False\n    if s.context.language_level is None:\n        s.context.set_language_level(2)\n        if pos[0].filename:\n            import warnings\n            warnings.warn(\n                \"Cython directive 'language_level' not set, using 2 for now (Py2). \"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_template_definition",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_template_definition(s):\n    name = p_ident(s)\n    if s.sy == '=':\n        s.expect('=')\n        s.expect('*')\n        required = False\n    else:\n        required = True\n    return name, required\ndef p_cpp_class_definition(s, pos,  ctx):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cpp_class_definition",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cpp_class_definition(s, pos,  ctx):\n    # s.sy == 'cppclass'\n    s.next()\n    module_path = []\n    class_name = p_ident(s)\n    cname = p_opt_cname(s)\n    if cname is None and ctx.namespace is not None:\n        cname = ctx.namespace + \"::\" + class_name\n    if s.sy == '.':\n        error(pos, \"Qualified class name not allowed C++ class\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "p_cpp_class_attribute",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def p_cpp_class_attribute(s, ctx):\n    decorators = None\n    if s.sy == '@':\n        decorators = p_decorators(s)\n    if s.systring == 'cppclass':\n        return p_cpp_class_definition(s, s.position(), ctx)\n    elif s.systring == 'ctypedef':\n        return p_ctypedef_statement(s, ctx)\n    elif s.sy == 'IDENT' and s.systring in struct_enum_union:\n        if s.systring != 'enum':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "print_parse_tree",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "def print_parse_tree(f, node, level, key = None):\n    ind = \"  \" * level\n    if node:\n        f.write(ind)\n        if key:\n            f.write(\"%s: \" % key)\n        t = type(node)\n        if t is tuple:\n            f.write(\"(%s @ %s\\n\" % (node[0], node[1]))\n            for i in range(2, len(node)):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "_IS_PY3",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "_IS_PY3 = sys.version_info[0] >= 3\n_IS_2BYTE_UNICODE = sys.maxunicode == 0xffff\n_CDEF_MODIFIERS = ('inline', 'nogil', 'api')\nclass Ctx(object):\n    #  Parsing context\n    level = 'other'\n    visibility = 'private'\n    cdef_flag = 0\n    typedef_flag = 0\n    api = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "_IS_2BYTE_UNICODE",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "_IS_2BYTE_UNICODE = sys.maxunicode == 0xffff\n_CDEF_MODIFIERS = ('inline', 'nogil', 'api')\nclass Ctx(object):\n    #  Parsing context\n    level = 'other'\n    visibility = 'private'\n    cdef_flag = 0\n    typedef_flag = 0\n    api = 0\n    overridable = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "_CDEF_MODIFIERS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "_CDEF_MODIFIERS = ('inline', 'nogil', 'api')\nclass Ctx(object):\n    #  Parsing context\n    level = 'other'\n    visibility = 'private'\n    cdef_flag = 0\n    typedef_flag = 0\n    api = 0\n    overridable = 0\n    nogil = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "comparison_ops",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "comparison_ops = cython.declare(set, set([\n    '<', '>', '==', '>=', '<=', '<>', '!=',\n    'in', 'is', 'not'\n]))\n#expr: xor_expr ('|' xor_expr)*\ndef p_bit_expr(s):\n    return p_binop_expr(s, ('|',), p_xor_expr)\n#xor_expr: and_expr ('^' and_expr)*\ndef p_xor_expr(s):\n    return p_binop_expr(s, ('^',), p_and_expr)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "expr_terminators",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "expr_terminators = cython.declare(set, set([\n    ')', ']', '}', ':', '=', 'NEWLINE']))\n#-------------------------------------------------------\n#\n#   Statements\n#\n#-------------------------------------------------------\ndef p_global_statement(s):\n    # assume s.sy == 'global'\n    pos = s.position()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "imported_name_kinds",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "imported_name_kinds = cython.declare(set, set(['class', 'struct', 'union']))\ndef p_imported_name(s, is_cimport):\n    pos = s.position()\n    kind = None\n    if is_cimport and s.systring in imported_name_kinds:\n        kind = s.systring\n        s.next()\n    name = p_ident(s)\n    as_name = p_as_name(s)\n    return (pos, name, as_name, kind)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "statement_terminators",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "statement_terminators = cython.declare(set, set([';', 'NEWLINE', 'EOF']))\ndef p_if_statement(s):\n    # s.sy == 'if'\n    pos = s.position()\n    s.next()\n    if_clauses = [p_if_clause(s)]\n    while s.sy == 'elif':\n        s.next()\n        if_clauses.append(p_if_clause(s))\n    else_clause = p_else_clause(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "inequality_relations",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "inequality_relations = cython.declare(set, set(['<', '<=', '>', '>=']))\ndef p_target(s, terminator):\n    pos = s.position()\n    expr = p_starred_expr(s)\n    if s.sy == ',':\n        s.next()\n        exprs = [expr]\n        while s.sy != terminator:\n            exprs.append(p_starred_expr(s))\n            if s.sy != ',':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "calling_convention_words",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "calling_convention_words = cython.declare(\n    set, set([\"__stdcall\", \"__cdecl\", \"__fastcall\"]))\ndef p_c_complex_base_type(s, templates = None):\n    # s.sy == '('\n    pos = s.position()\n    s.next()\n    base_type = p_c_base_type(s, templates=templates)\n    declarator = p_c_declarator(s, empty=True)\n    type_node = Nodes.CComplexBaseTypeNode(\n        pos, base_type=base_type, declarator=declarator)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "basic_c_type_names",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "basic_c_type_names = cython.declare(\n    set, set([\"void\", \"char\", \"int\", \"float\", \"double\", \"bint\"]))\nspecial_basic_c_types = cython.declare(dict, {\n    # name : (signed, longness)\n    \"Py_UNICODE\" : (0, 0),\n    \"Py_UCS4\"    : (0, 0),\n    \"Py_hash_t\"  : (2, 0),\n    \"Py_ssize_t\" : (2, 0),\n    \"ssize_t\"    : (2, 0),\n    \"size_t\"     : (0, 0),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "special_basic_c_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "special_basic_c_types = cython.declare(dict, {\n    # name : (signed, longness)\n    \"Py_UNICODE\" : (0, 0),\n    \"Py_UCS4\"    : (0, 0),\n    \"Py_hash_t\"  : (2, 0),\n    \"Py_ssize_t\" : (2, 0),\n    \"ssize_t\"    : (2, 0),\n    \"size_t\"     : (0, 0),\n    \"ptrdiff_t\"  : (2, 0),\n    \"Py_tss_t\"   : (1, 0),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "sign_and_longness_words",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "sign_and_longness_words = cython.declare(\n    set, set([\"short\", \"long\", \"signed\", \"unsigned\"]))\nbase_type_start_words = cython.declare(\n    set,\n    basic_c_type_names\n    | sign_and_longness_words\n    | set(special_basic_c_types))\nstruct_enum_union = cython.declare(\n    set, set([\"struct\", \"union\", \"enum\", \"packed\"]))\ndef p_sign_and_longness(s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "base_type_start_words",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "base_type_start_words = cython.declare(\n    set,\n    basic_c_type_names\n    | sign_and_longness_words\n    | set(special_basic_c_types))\nstruct_enum_union = cython.declare(\n    set, set([\"struct\", \"union\", \"enum\", \"packed\"]))\ndef p_sign_and_longness(s):\n    signed = 1\n    longness = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "struct_enum_union",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "struct_enum_union = cython.declare(\n    set, set([\"struct\", \"union\", \"enum\", \"packed\"]))\ndef p_sign_and_longness(s):\n    signed = 1\n    longness = 0\n    while s.sy == 'IDENT' and s.systring in sign_and_longness_words:\n        if s.systring == 'unsigned':\n            signed = 0\n        elif s.systring == 'signed':\n            signed = 2",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "supported_overloaded_operators",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "supported_overloaded_operators = cython.declare(set, set([\n    '+', '-', '*', '/', '%',\n    '++', '--', '~', '|', '&', '^', '<<', '>>', ',',\n    '==', '!=', '>=', '>', '<=', '<',\n    '[]', '()', '!', '=',\n    'bool',\n]))\ndef p_c_simple_declarator(s, ctx, empty, is_type, cmethod_flag,\n                          assignable, nonempty):\n    pos = s.position()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "c_arg_list_terminators",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "c_arg_list_terminators = cython.declare(set, set(['*', '**', '.', ')', ':']))\ndef p_c_arg_list(s, ctx = Ctx(), in_pyfunc = 0, cmethod_flag = 0,\n                 nonempty_declarators = 0, kw_only = 0, annotated = 1):\n    #  Comma-separated list of C argument declarations, possibly empty.\n    #  May have a trailing comma.\n    args = []\n    is_self_arg = cmethod_flag\n    while s.sy not in c_arg_list_terminators:\n        args.append(p_c_arg_decl(s, ctx, in_pyfunc, is_self_arg,\n            nonempty = nonempty_declarators, kw_only = kw_only,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "_match_compiler_directive_comment",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "peekOfCode": "_match_compiler_directive_comment = cython.declare(object, re.compile(\n    r\"^#\\s*cython\\s*:\\s*((\\w|[.])+\\s*=.*)$\").match)\ndef p_compiler_directive_comments(s):\n    result = {}\n    while s.sy == 'commentline':\n        pos = s.position()\n        m = _match_compiler_directive_comment(s.systring)\n        if m:\n            directives_string = m.group(1).strip()\n            try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Parsing",
        "documentation": {}
    },
    {
        "label": "dumptree",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def dumptree(t):\n    # For quick debugging in pipelines\n    print(t.dump())\n    return t\ndef abort_on_errors(node):\n    # Stop the pipeline if there are any errors.\n    if Errors.num_errors != 0:\n        raise AbortError(\"pipeline break\")\n    return node\ndef parse_stage_factory(context):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "abort_on_errors",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def abort_on_errors(node):\n    # Stop the pipeline if there are any errors.\n    if Errors.num_errors != 0:\n        raise AbortError(\"pipeline break\")\n    return node\ndef parse_stage_factory(context):\n    def parse(compsrc):\n        source_desc = compsrc.source_desc\n        full_module_name = compsrc.full_module_name\n        initial_pos = (source_desc, 1, 0)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "parse_stage_factory",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def parse_stage_factory(context):\n    def parse(compsrc):\n        source_desc = compsrc.source_desc\n        full_module_name = compsrc.full_module_name\n        initial_pos = (source_desc, 1, 0)\n        saved_cimport_from_pyx, Options.cimport_from_pyx = Options.cimport_from_pyx, False\n        scope = context.find_module(full_module_name, pos = initial_pos, need_pxd = 0)\n        Options.cimport_from_pyx = saved_cimport_from_pyx\n        tree = context.parse(source_desc, scope, pxd = 0, full_module_name = full_module_name)\n        tree.compilation_source = compsrc",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "parse_pxd_stage_factory",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def parse_pxd_stage_factory(context, scope, module_name):\n    def parse(source_desc):\n        tree = context.parse(source_desc, scope, pxd=True,\n                             full_module_name=module_name)\n        tree.scope = scope\n        tree.is_pxd = True\n        return tree\n    return parse\ndef generate_pyx_code_stage_factory(options, result):\n    def generate_pyx_code_stage(module_node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "generate_pyx_code_stage_factory",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def generate_pyx_code_stage_factory(options, result):\n    def generate_pyx_code_stage(module_node):\n        module_node.process_implementation(options, result)\n        result.compilation_source = module_node.compilation_source\n        return result\n    return generate_pyx_code_stage\ndef inject_pxd_code_stage_factory(context):\n    def inject_pxd_code_stage(module_node):\n        for name, (statlistnode, scope) in context.pxds.items():\n            module_node.merge_in(statlistnode, scope)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "inject_pxd_code_stage_factory",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def inject_pxd_code_stage_factory(context):\n    def inject_pxd_code_stage(module_node):\n        for name, (statlistnode, scope) in context.pxds.items():\n            module_node.merge_in(statlistnode, scope)\n        return module_node\n    return inject_pxd_code_stage\ndef use_utility_code_definitions(scope, target, seen=None):\n    if seen is None:\n        seen = set()\n    for entry in scope.entries.values():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "use_utility_code_definitions",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def use_utility_code_definitions(scope, target, seen=None):\n    if seen is None:\n        seen = set()\n    for entry in scope.entries.values():\n        if entry in seen:\n            continue\n        seen.add(entry)\n        if entry.used and entry.utility_code_definition:\n            target.use_utility_code(entry.utility_code_definition)\n            for required_utility in entry.utility_code_definition.requires:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "sort_utility_codes",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def sort_utility_codes(utilcodes):\n    ranks = {}\n    def get_rank(utilcode):\n        if utilcode not in ranks:\n            ranks[utilcode] = 0  # prevent infinite recursion on circular dependencies\n            original_order = len(ranks)\n            ranks[utilcode] = 1 + min([get_rank(dep) for dep in utilcode.requires or ()] or [-1]) + original_order * 1e-8\n        return ranks[utilcode]\n    for utilcode in utilcodes:\n        get_rank(utilcode)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "normalize_deps",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def normalize_deps(utilcodes):\n    deps = {}\n    for utilcode in utilcodes:\n        deps[utilcode] = utilcode\n    def unify_dep(dep):\n        if dep in deps:\n            return deps[dep]\n        else:\n            deps[dep] = dep\n            return dep",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "inject_utility_code_stage_factory",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def inject_utility_code_stage_factory(context):\n    def inject_utility_code_stage(module_node):\n        module_node.prepare_utility_code()\n        use_utility_code_definitions(context.cython_scope, module_node.scope)\n        module_node.scope.utility_code_list = sort_utility_codes(module_node.scope.utility_code_list)\n        normalize_deps(module_node.scope.utility_code_list)\n        added = []\n        # Note: the list might be extended inside the loop (if some utility code\n        # pulls in other utility code, explicitly or implicitly)\n        for utilcode in module_node.scope.utility_code_list:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "create_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def create_pipeline(context, mode, exclude_classes=()):\n    assert mode in ('pyx', 'py', 'pxd')\n    from .Visitor import PrintTree\n    from .ParseTreeTransforms import WithTransform, NormalizeTree, PostParse, PxdPostParse\n    from .ParseTreeTransforms import ForwardDeclareTypes, InjectGilHandling, AnalyseDeclarationsTransform\n    from .ParseTreeTransforms import AnalyseExpressionsTransform, FindInvalidUseOfFusedTypes\n    from .ParseTreeTransforms import CreateClosureClasses, MarkClosureVisitor, DecoratorTransform\n    from .ParseTreeTransforms import TrackNumpyAttributes, InterpretCompilerDirectives, TransformBuiltinMethods\n    from .ParseTreeTransforms import ExpandInplaceOperators, ParallelRangeTransform\n    from .ParseTreeTransforms import CalculateQualifiedNamesTransform",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "create_pyx_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def create_pyx_pipeline(context, options, result, py=False, exclude_classes=()):\n    if py:\n        mode = 'py'\n    else:\n        mode = 'pyx'\n    test_support = []\n    if options.evaluate_tree_assertions:\n        from ..TestUtils import TreeAssertVisitor\n        test_support.append(TreeAssertVisitor())\n    if options.gdb_debug:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "create_pxd_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def create_pxd_pipeline(context, scope, module_name):\n    from .CodeGeneration import ExtractPxdCode\n    # The pxd pipeline ends up with a CCodeWriter containing the\n    # code of the pxd, as well as a pxd scope.\n    return [\n        parse_pxd_stage_factory(context, scope, module_name)\n        ] + create_pipeline(context, 'pxd') + [\n        ExtractPxdCode()\n        ]\ndef create_py_pipeline(context, options, result):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "create_py_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def create_py_pipeline(context, options, result):\n    return create_pyx_pipeline(context, options, result, py=True)\ndef create_pyx_as_pxd_pipeline(context, result):\n    from .ParseTreeTransforms import AlignFunctionDefinitions, \\\n        MarkClosureVisitor, WithTransform, AnalyseDeclarationsTransform\n    from .Optimize import ConstantFolding, FlattenInListTransform\n    from .Nodes import StatListNode\n    pipeline = []\n    pyx_pipeline = create_pyx_pipeline(context, context.options, result,\n                                       exclude_classes=[",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "create_pyx_as_pxd_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def create_pyx_as_pxd_pipeline(context, result):\n    from .ParseTreeTransforms import AlignFunctionDefinitions, \\\n        MarkClosureVisitor, WithTransform, AnalyseDeclarationsTransform\n    from .Optimize import ConstantFolding, FlattenInListTransform\n    from .Nodes import StatListNode\n    pipeline = []\n    pyx_pipeline = create_pyx_pipeline(context, context.options, result,\n                                       exclude_classes=[\n                                           AlignFunctionDefinitions,\n                                           MarkClosureVisitor,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "insert_into_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def insert_into_pipeline(pipeline, transform, before=None, after=None):\n    \"\"\"\n    Insert a new transform into the pipeline after or before an instance of\n    the given class. e.g.\n        pipeline = insert_into_pipeline(pipeline, transform,\n                                        after=AnalyseDeclarationsTransform)\n    \"\"\"\n    assert before or after\n    cls = before or after\n    for i, t in enumerate(pipeline):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "run_pipeline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "def run_pipeline(pipeline, source, printtree=True):\n    from .Visitor import PrintTree\n    exec_ns = globals().copy() if DebugFlags.debug_verbose_pipeline else None\n    def run(phase, data):\n        return phase(data)\n    error = None\n    data = source\n    try:\n        try:\n            for phase in pipeline:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "_pipeline_entry_points",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "peekOfCode": "_pipeline_entry_points = {}\ndef run_pipeline(pipeline, source, printtree=True):\n    from .Visitor import PrintTree\n    exec_ns = globals().copy() if DebugFlags.debug_verbose_pipeline else None\n    def run(phase, data):\n        return phase(data)\n    error = None\n    data = source\n    try:\n        try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pipeline",
        "documentation": {}
    },
    {
        "label": "BaseType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class BaseType(object):\n    #\n    #  Base class for all Cython types including pseudo-types.\n    # List of attribute names of any subtypes\n    subtypes = []\n    _empty_declaration = None\n    _specialization_name = None\n    default_format_spec = None\n    def can_coerce_to_pyobject(self, env):\n        return False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "PyrexType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class PyrexType(BaseType):\n    #\n    #  Base class for all Cython types\n    #\n    #  is_pyobject           boolean     Is a Python object type\n    #  is_extension_type     boolean     Is a Python extension type\n    #  is_final_type         boolean     Is a final extension type\n    #  is_numeric            boolean     Is a C numeric type\n    #  is_int                boolean     Is a C integer type\n    #  is_float              boolean     Is a C floating point type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CTypedefType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CTypedefType(BaseType):\n    #\n    #  Pseudo-type defined with a ctypedef statement in a\n    #  'cdef extern from' block.\n    #  Delegates most attribute lookups to the base type.\n    #  (Anything not defined here or in the BaseType is delegated.)\n    #\n    #  qualified_name      string\n    #  typedef_name        string\n    #  typedef_cname       string",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "MemoryViewSliceType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class MemoryViewSliceType(PyrexType):\n    is_memoryviewslice = 1\n    has_attributes = 1\n    scope = None\n    # These are special cased in Defnode\n    from_py_function = None\n    to_py_function = None\n    exception_value = None\n    exception_check = True\n    subtypes = ['dtype']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "BufferType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class BufferType(BaseType):\n    #\n    #  Delegates most attribute lookups to the base type.\n    #  (Anything not defined here or in the BaseType is delegated.)\n    #\n    # dtype            PyrexType\n    # ndim             int\n    # mode             str\n    # negative_indices bool\n    # cast             bool",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "PyObjectType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class PyObjectType(PyrexType):\n    #\n    #  Base class for all Python object types (reference-counted).\n    #\n    #  buffer_defaults  dict or None     Default options for bu\n    name = \"object\"\n    is_pyobject = 1\n    default_value = \"0\"\n    declaration_value = \"0\"\n    buffer_defaults = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "BuiltinObjectType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class BuiltinObjectType(PyObjectType):\n    #  objstruct_cname  string           Name of PyObject struct\n    is_builtin_type = 1\n    has_attributes = 1\n    base_type = None\n    module_name = '__builtin__'\n    require_exact = 1\n    # fields that let it look like an extension type\n    vtabslot_cname = None\n    vtabstruct_cname = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "PyExtensionType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class PyExtensionType(PyObjectType):\n    #\n    #  A Python extension type.\n    #\n    #  name             string\n    #  scope            CClassScope      Attribute namespace\n    #  visibility       string\n    #  typedef_flag     boolean\n    #  base_type        PyExtensionType or None\n    #  module_name      string or None   Qualified name of defining module",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CType(PyrexType):\n    #\n    #  Base class for all C types (non-reference-counted).\n    #\n    #  to_py_function     string     C function for converting to Python object\n    #  from_py_function   string     C function for constructing from Python object\n    #\n    to_py_function = None\n    from_py_function = None\n    exception_value = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "PythranExpr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class PythranExpr(CType):\n    # Pythran object of a given type\n    to_py_function = \"__Pyx_pythran_to_python\"\n    is_pythran_expr = True\n    writable = True\n    has_attributes = 1\n    def __init__(self, pythran_type, org_buffer=None):\n        self.org_buffer = org_buffer\n        self.pythran_type = pythran_type\n        self.name = self.pythran_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CConstType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CConstType(BaseType):\n    is_const = 1\n    def __init__(self, const_base_type):\n        self.const_base_type = const_base_type\n        if const_base_type.has_attributes and const_base_type.scope is not None:\n            from . import Symtab\n            self.scope = Symtab.CConstScope(const_base_type.scope)\n    def __repr__(self):\n        return \"<CConstType %s>\" % repr(self.const_base_type)\n    def __str__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "FusedType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class FusedType(CType):\n    \"\"\"\n    Represents a Fused Type. All it needs to do is keep track of the types\n    it aggregates, as it will be replaced with its specific version wherever\n    needed.\n    See http://wiki.cython.org/enhancements/fusedtypes\n    types           [PyrexType]             is the list of types to be fused\n    name            str                     the name of the ctypedef\n    \"\"\"\n    is_fused = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CVoidType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CVoidType(CType):\n    #\n    #   C \"void\" type\n    #\n    is_void = 1\n    to_py_function = \"__Pyx_void_to_None\"\n    def __repr__(self):\n        return \"<CVoidType>\"\n    def declaration_code(self, entity_code,\n            for_display = 0, dll_linkage = None, pyrex = 0):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "InvisibleVoidType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class InvisibleVoidType(CVoidType):\n    #\n    #   For use with C++ constructors and destructors return types.\n    #   Acts like void, but does not print out a declaration.\n    #\n    def declaration_code(self, entity_code,\n            for_display = 0, dll_linkage = None, pyrex = 0):\n        if pyrex or for_display:\n            base_code = \"[void]\"\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CNumericType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CNumericType(CType):\n    #\n    #   Base class for all C numeric types.\n    #\n    #   rank      integer     Relative size\n    #   signed    integer     0 = unsigned, 1 = unspecified, 2 = explicitly signed\n    #\n    is_numeric = 1\n    default_value = \"0\"\n    has_attributes = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "ForbidUseClass",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class ForbidUseClass:\n    def __repr__(self):\n        raise RuntimeError()\n    def __str__(self):\n        raise RuntimeError()\nForbidUse = ForbidUseClass()\nclass CIntLike(object):\n    \"\"\"Mixin for shared behaviour of C integers and enums.\n    \"\"\"\n    to_py_function = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CIntLike",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CIntLike(object):\n    \"\"\"Mixin for shared behaviour of C integers and enums.\n    \"\"\"\n    to_py_function = None\n    from_py_function = None\n    to_pyunicode_utility = None\n    default_format_spec = 'd'\n    def can_coerce_to_pyobject(self, env):\n        return True\n    def can_coerce_from_pyobject(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CIntType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CIntType(CIntLike, CNumericType):\n    is_int = 1\n    typedef_flag = 0\n    exception_value = -1\n    def get_to_py_type_conversion(self):\n        if self.rank < list(rank_to_type_name).index('int'):\n            # This assumes sizeof(short) < sizeof(int)\n            return \"PyInt_FromLong\"\n        else:\n            # Py{Int|Long}_From[Unsigned]Long[Long]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CAnonEnumType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CAnonEnumType(CIntType):\n    is_enum = 1\n    def sign_and_name(self):\n        return 'int'\nclass CReturnCodeType(CIntType):\n    to_py_function = \"__Pyx_Owned_Py_None\"\n    is_returncode = True\n    exception_check = False\n    default_format_spec = ''\n    def can_coerce_to_pystring(self, env, format_spec=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CReturnCodeType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CReturnCodeType(CIntType):\n    to_py_function = \"__Pyx_Owned_Py_None\"\n    is_returncode = True\n    exception_check = False\n    default_format_spec = ''\n    def can_coerce_to_pystring(self, env, format_spec=None):\n        return not format_spec\n    def convert_to_pystring(self, cvalue, code, format_spec=None):\n        return \"__Pyx_NewRef(%s)\" % code.globalstate.get_py_string_const(StringEncoding.EncodedString(\"None\")).cname\nclass CBIntType(CIntType):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CBIntType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CBIntType(CIntType):\n    to_py_function = \"__Pyx_PyBool_FromLong\"\n    from_py_function = \"__Pyx_PyObject_IsTrue\"\n    exception_check = 1  # for C++ bool\n    default_format_spec = ''\n    def can_coerce_to_pystring(self, env, format_spec=None):\n        return not format_spec or super(CBIntType, self).can_coerce_to_pystring(env, format_spec)\n    def convert_to_pystring(self, cvalue, code, format_spec=None):\n        if format_spec:\n            return super(CBIntType, self).convert_to_pystring(cvalue, code, format_spec)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPyUCS4IntType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPyUCS4IntType(CIntType):\n    # Py_UCS4\n    is_unicode_char = True\n    # Py_UCS4 coerces from and to single character unicode strings (or\n    # at most two characters on 16bit Unicode builds), but we also\n    # allow Python integers as input.  The value range for Py_UCS4\n    # is 0..1114111, which is checked when converting from an integer\n    # value.\n    to_py_function = \"PyUnicode_FromOrdinal\"\n    from_py_function = \"__Pyx_PyObject_AsPy_UCS4\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPyUnicodeIntType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPyUnicodeIntType(CIntType):\n    # Py_UNICODE\n    is_unicode_char = True\n    # Py_UNICODE coerces from and to single character unicode strings,\n    # but we also allow Python integers as input.  The value range for\n    # Py_UNICODE is 0..1114111, which is checked when converting from\n    # an integer value.\n    to_py_function = \"PyUnicode_FromOrdinal\"\n    from_py_function = \"__Pyx_PyObject_AsPy_UNICODE\"\n    def can_coerce_to_pystring(self, env, format_spec=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPyHashTType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPyHashTType(CIntType):\n    to_py_function = \"__Pyx_PyInt_FromHash_t\"\n    from_py_function = \"__Pyx_PyInt_AsHash_t\"\n    def sign_and_name(self):\n        return \"Py_hash_t\"\nclass CPySSizeTType(CIntType):\n    to_py_function = \"PyInt_FromSsize_t\"\n    from_py_function = \"__Pyx_PyIndex_AsSsize_t\"\n    def sign_and_name(self):\n        return \"Py_ssize_t\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPySSizeTType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPySSizeTType(CIntType):\n    to_py_function = \"PyInt_FromSsize_t\"\n    from_py_function = \"__Pyx_PyIndex_AsSsize_t\"\n    def sign_and_name(self):\n        return \"Py_ssize_t\"\nclass CSSizeTType(CIntType):\n    to_py_function = \"PyInt_FromSsize_t\"\n    from_py_function = \"PyInt_AsSsize_t\"\n    def sign_and_name(self):\n        return \"Py_ssize_t\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CSSizeTType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CSSizeTType(CIntType):\n    to_py_function = \"PyInt_FromSsize_t\"\n    from_py_function = \"PyInt_AsSsize_t\"\n    def sign_and_name(self):\n        return \"Py_ssize_t\"\nclass CSizeTType(CIntType):\n    to_py_function = \"__Pyx_PyInt_FromSize_t\"\n    def sign_and_name(self):\n        return \"size_t\"\nclass CPtrdiffTType(CIntType):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CSizeTType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CSizeTType(CIntType):\n    to_py_function = \"__Pyx_PyInt_FromSize_t\"\n    def sign_and_name(self):\n        return \"size_t\"\nclass CPtrdiffTType(CIntType):\n    def sign_and_name(self):\n        return \"ptrdiff_t\"\nclass CFloatType(CNumericType):\n    is_float = 1\n    to_py_function = \"PyFloat_FromDouble\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPtrdiffTType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPtrdiffTType(CIntType):\n    def sign_and_name(self):\n        return \"ptrdiff_t\"\nclass CFloatType(CNumericType):\n    is_float = 1\n    to_py_function = \"PyFloat_FromDouble\"\n    from_py_function = \"__pyx_PyFloat_AsDouble\"\n    exception_value = -1\n    def __init__(self, rank, math_h_modifier = ''):\n        CNumericType.__init__(self, rank, 1)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CFloatType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CFloatType(CNumericType):\n    is_float = 1\n    to_py_function = \"PyFloat_FromDouble\"\n    from_py_function = \"__pyx_PyFloat_AsDouble\"\n    exception_value = -1\n    def __init__(self, rank, math_h_modifier = ''):\n        CNumericType.__init__(self, rank, 1)\n        self.math_h_modifier = math_h_modifier\n        if rank == RANK_FLOAT:\n            self.from_py_function = \"__pyx_PyFloat_AsFloat\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CComplexType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CComplexType(CNumericType):\n    is_complex = 1\n    to_py_function = \"__pyx_PyComplex_FromComplex\"\n    has_attributes = 1\n    scope = None\n    def __init__(self, real_type):\n        while real_type.is_typedef and not real_type.typedef_is_external:\n            real_type = real_type.typedef_base_type\n        self.funcsuffix = \"_%s\" % real_type.specialization_name()\n        if real_type.is_float:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPyTSSTType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPyTSSTType(CType):\n    #\n    #   PEP-539 \"Py_tss_t\" type\n    #\n    declaration_value = \"Py_tss_NEEDS_INIT\"\n    def __repr__(self):\n        return \"<Py_tss_t>\"\n    def declaration_code(self, entity_code,\n                         for_display=0, dll_linkage=None, pyrex=0):\n        if pyrex or for_display:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPointerBaseType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPointerBaseType(CType):\n    # common base type for pointer/array types\n    #\n    #  base_type     CType              Reference type\n    subtypes = ['base_type']\n    def __init__(self, base_type):\n        self.base_type = base_type\n        if base_type.is_const:\n            base_type = base_type.const_base_type\n        for char_type in (c_char_type, c_uchar_type, c_schar_type):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CArrayType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CArrayType(CPointerBaseType):\n    #  base_type     CType              Element type\n    #  size          integer or None    Number of elements\n    is_array = 1\n    to_tuple_function = None\n    def __init__(self, base_type, size):\n        super(CArrayType, self).__init__(base_type)\n        self.size = size\n    def __eq__(self, other):\n        if isinstance(other, CType) and other.is_array and self.size == other.size:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CPtrType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CPtrType(CPointerBaseType):\n    #  base_type     CType              Reference type\n    is_ptr = 1\n    default_value = \"0\"\n    def __hash__(self):\n        return hash(self.base_type) + 27 # arbitrarily chosen offset\n    def __eq__(self, other):\n        if isinstance(other, CType) and other.is_ptr:\n            return self.base_type.same_as(other.base_type)\n        return False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CNullPtrType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CNullPtrType(CPtrType):\n    is_null_ptr = 1\nclass CReferenceType(BaseType):\n    is_reference = 1\n    is_fake_reference = 0\n    def __init__(self, base_type):\n        self.ref_base_type = base_type\n    def __repr__(self):\n        return \"<CReferenceType %s>\" % repr(self.ref_base_type)\n    def __str__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CReferenceType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CReferenceType(BaseType):\n    is_reference = 1\n    is_fake_reference = 0\n    def __init__(self, base_type):\n        self.ref_base_type = base_type\n    def __repr__(self):\n        return \"<CReferenceType %s>\" % repr(self.ref_base_type)\n    def __str__(self):\n        return \"%s &\" % self.ref_base_type\n    def declaration_code(self, entity_code,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CFakeReferenceType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CFakeReferenceType(CReferenceType):\n    is_fake_reference = 1\n    def __repr__(self):\n        return \"<CFakeReferenceType %s>\" % repr(self.ref_base_type)\n    def __str__(self):\n        return \"%s [&]\" % self.ref_base_type\n    def declaration_code(self, entity_code,\n            for_display = 0, dll_linkage = None, pyrex = 0):\n        #print \"CReferenceType.declaration_code: pointer to\", self.base_type ###\n        return \"__Pyx_FakeReference<%s> %s\" % (self.ref_base_type.empty_declaration_code(), entity_code)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CFuncType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CFuncType(CType):\n    #  return_type      CType\n    #  args             [CFuncTypeArg]\n    #  has_varargs      boolean\n    #  exception_value  string\n    #  exception_check  boolean    True if PyErr_Occurred check needed\n    #  calling_convention  string  Function calling convention\n    #  nogil            boolean    Can be called without gil\n    #  with_gil         boolean    Acquire gil around function body\n    #  templates        [string] or None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CFuncTypeArg",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CFuncTypeArg(BaseType):\n    #  name       string\n    #  cname      string\n    #  type       PyrexType\n    #  pos        source file position\n    # FIXME: is this the right setup? should None be allowed here?\n    not_none = False\n    or_none = False\n    accept_none = True\n    accept_builtin_subtypes = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "ToPyStructUtilityCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class ToPyStructUtilityCode(object):\n    requires = None\n    def __init__(self, type, forward_decl, env):\n        self.type = type\n        self.header = \"static PyObject* %s(%s)\" % (type.to_py_function,\n                                                   type.declaration_code('s'))\n        self.forward_decl = forward_decl\n        self.env = env\n    def __eq__(self, other):\n        return isinstance(other, ToPyStructUtilityCode) and self.header == other.header",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CStructOrUnionType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CStructOrUnionType(CType):\n    #  name          string\n    #  cname         string\n    #  kind          string              \"struct\" or \"union\"\n    #  scope         StructOrUnionScope, or None if incomplete\n    #  typedef_flag  boolean\n    #  packed        boolean\n    # entry          Entry\n    is_struct_or_union = 1\n    has_attributes = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CppClassType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CppClassType(CType):\n    #  name          string\n    #  cname         string\n    #  scope         CppClassScope\n    #  templates     [string] or None\n    is_cpp_class = 1\n    has_attributes = 1\n    exception_check = True\n    namespace = None\n    # For struct-like declaration.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "TemplatePlaceholderType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class TemplatePlaceholderType(CType):\n    def __init__(self, name, optional=False):\n        self.name = name\n        self.optional = optional\n    def declaration_code(self, entity_code,\n            for_display = 0, dll_linkage = None, pyrex = 0):\n        if entity_code:\n            return self.name + \" \" + entity_code\n        else:\n            return self.name",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CEnumType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CEnumType(CIntLike, CType):\n    #  name           string\n    #  cname          string or None\n    #  typedef_flag   boolean\n    #  values         [string], populated during declaration analysis\n    is_enum = 1\n    signed = 1\n    rank = -1 # Ranks below any integer type\n    def __init__(self, name, cname, typedef_flag, namespace=None):\n        self.name = name",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "CTupleType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class CTupleType(CType):\n    # components [PyrexType]\n    is_ctuple = True\n    def __init__(self, cname, components):\n        self.cname = cname\n        self.components = components\n        self.size = len(components)\n        self.to_py_function = \"%s_to_py_%s\" % (Naming.convert_func_prefix, self.cname)\n        self.from_py_function = \"%s_from_py_%s\" % (Naming.convert_func_prefix, self.cname)\n        self.exception_check = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "UnspecifiedType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class UnspecifiedType(PyrexType):\n    # Used as a placeholder until the type can be determined.\n    is_unspecified = 1\n    def declaration_code(self, entity_code,\n            for_display = 0, dll_linkage = None, pyrex = 0):\n        return \"<unspecified>\"\n    def same_as_resolved_type(self, other_type):\n        return False\nclass ErrorType(PyrexType):\n    # Used to prevent propagation of error messages.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "ErrorType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "class ErrorType(PyrexType):\n    # Used to prevent propagation of error messages.\n    is_error = 1\n    exception_value = \"0\"\n    exception_check    = 0\n    to_py_function = \"dummy\"\n    from_py_function = \"dummy\"\n    def create_to_py_utility_code(self, env):\n        return True\n    def create_from_py_utility_code(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "public_decl",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def public_decl(base_code, dll_linkage):\n    if dll_linkage:\n        return \"%s(%s)\" % (dll_linkage, base_code.replace(',', ' __PYX_COMMA '))\n    else:\n        return base_code\ndef create_typedef_type(name, base_type, cname, is_external=0, namespace=None):\n    is_fused = base_type.is_fused\n    if base_type.is_complex or is_fused:\n        if is_external:\n            if is_fused:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "create_typedef_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def create_typedef_type(name, base_type, cname, is_external=0, namespace=None):\n    is_fused = base_type.is_fused\n    if base_type.is_complex or is_fused:\n        if is_external:\n            if is_fused:\n                msg = \"Fused\"\n            else:\n                msg = \"Complex\"\n            raise ValueError(\"%s external typedefs not supported\" % msg)\n        return base_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "specialize_entry",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def specialize_entry(entry, cname):\n    \"\"\"\n    Specialize an entry of a copied fused function or method\n    \"\"\"\n    entry.is_fused_specialized = True\n    entry.name = get_fused_cname(cname, entry.name)\n    if entry.is_cmethod:\n        entry.cname = entry.name\n        if entry.is_inherited:\n            entry.cname = StringEncoding.EncodedString(",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "get_fused_cname",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def get_fused_cname(fused_cname, orig_cname):\n    \"\"\"\n    Given the fused cname id and an original cname, return a specialized cname\n    \"\"\"\n    assert fused_cname and orig_cname\n    return StringEncoding.EncodedString('%s%s%s' % (Naming.fused_func_prefix,\n                                                    fused_cname, orig_cname))\ndef unique(somelist):\n    seen = set()\n    result = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "unique",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def unique(somelist):\n    seen = set()\n    result = []\n    for obj in somelist:\n        if obj not in seen:\n            result.append(obj)\n            seen.add(obj)\n    return result\ndef get_all_specialized_permutations(fused_types):\n    return _get_all_specialized_permutations(unique(fused_types))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "get_all_specialized_permutations",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def get_all_specialized_permutations(fused_types):\n    return _get_all_specialized_permutations(unique(fused_types))\ndef _get_all_specialized_permutations(fused_types, id=\"\", f2s=()):\n    fused_type, = fused_types[0].get_fused_types()\n    result = []\n    for newid, specific_type in enumerate(fused_type.types):\n        # f2s = dict(f2s, **{ fused_type: specific_type })\n        f2s = dict(f2s)\n        f2s.update({ fused_type: specific_type })\n        if id:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "specialization_signature_string",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def specialization_signature_string(fused_compound_type, fused_to_specific):\n    \"\"\"\n    Return the signature for a specialization of a fused type. e.g.\n        floating[:] ->\n            'float' or 'double'\n        cdef fused ft:\n            float[:]\n            double[:]\n        ft ->\n            'float[:]' or 'double[:]'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "get_specialized_types",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def get_specialized_types(type):\n    \"\"\"\n    Return a list of specialized types in their declared order.\n    \"\"\"\n    assert type.is_fused\n    if isinstance(type, FusedType):\n        result = list(type.types)\n        for specialized_type in result:\n            specialized_type.specialization_string = specialized_type.typeof_name()\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "is_optional_template_param",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def is_optional_template_param(type):\n    return isinstance(type, TemplatePlaceholderType) and type.optional\nclass CEnumType(CIntLike, CType):\n    #  name           string\n    #  cname          string or None\n    #  typedef_flag   boolean\n    #  values         [string], populated during declaration analysis\n    is_enum = 1\n    signed = 1\n    rank = -1 # Ranks below any integer type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_tuple_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def c_tuple_type(components):\n    components = tuple(components)\n    cname = Naming.ctuple_type_prefix + type_list_identifier(components)\n    tuple_type = CTupleType(cname, components)\n    return tuple_type\nclass UnspecifiedType(PyrexType):\n    # Used as a placeholder until the type can be determined.\n    is_unspecified = 1\n    def declaration_code(self, entity_code,\n            for_display = 0, dll_linkage = None, pyrex = 0):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "is_promotion",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def is_promotion(src_type, dst_type):\n    # It's hard to find a hard definition of promotion, but empirical\n    # evidence suggests that the below is all that's allowed.\n    if src_type.is_numeric:\n        if dst_type.same_as(c_int_type):\n            unsigned = (not src_type.signed)\n            return (src_type.is_enum or\n                    (src_type.is_int and\n                     unsigned + src_type.rank < dst_type.rank))\n        elif dst_type.same_as(c_double_type):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "best_match",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def best_match(arg_types, functions, pos=None, env=None, args=None):\n    \"\"\"\n    Given a list args of arguments and a list of functions, choose one\n    to call which seems to be the \"best\" fit for this list of arguments.\n    This function is used, e.g., when deciding which overloaded method\n    to dispatch for C++ classes.\n    We first eliminate functions based on arity, and if only one\n    function has the correct arity, we return it. Otherwise, we weight\n    functions based on how much work must be done to convert the\n    arguments, with the following priorities:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "merge_template_deductions",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def merge_template_deductions(a, b):\n    if a is None or b is None:\n        return None\n    all = a\n    for param, value in b.items():\n        if param in all:\n            if a[param] != b[param]:\n                return None\n        else:\n            all[param] = value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "widest_numeric_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def widest_numeric_type(type1, type2):\n    \"\"\"Given two numeric types, return the narrowest type encompassing both of them.\n    \"\"\"\n    if type1.is_reference:\n        type1 = type1.ref_base_type\n    if type2.is_reference:\n        type2 = type2.ref_base_type\n    if type1.is_const:\n        type1 = type1.const_base_type\n    if type2.is_const:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "numeric_type_fits",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def numeric_type_fits(small_type, large_type):\n    return widest_numeric_type(small_type, large_type) == large_type\ndef independent_spanning_type(type1, type2):\n    # Return a type assignable independently from both type1 and\n    # type2, but do not require any interoperability between the two.\n    # For example, in \"True * 2\", it is safe to assume an integer\n    # result type (so spanning_type() will do the right thing),\n    # whereas \"x = True or 2\" must evaluate to a type that can hold\n    # both a boolean value and an integer, so this function works\n    # better.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "independent_spanning_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def independent_spanning_type(type1, type2):\n    # Return a type assignable independently from both type1 and\n    # type2, but do not require any interoperability between the two.\n    # For example, in \"True * 2\", it is safe to assume an integer\n    # result type (so spanning_type() will do the right thing),\n    # whereas \"x = True or 2\" must evaluate to a type that can hold\n    # both a boolean value and an integer, so this function works\n    # better.\n    if type1.is_reference ^ type2.is_reference:\n        if type1.is_reference:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "spanning_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def spanning_type(type1, type2):\n    # Return a type assignable from both type1 and type2, or\n    # py_object_type if no better type is found.  Assumes that the\n    # code that calls this will try a coercion afterwards, which will\n    # fail if the types cannot actually coerce to a py_object_type.\n    if type1 == type2:\n        return type1\n    elif type1 is py_object_type or type2 is py_object_type:\n        return py_object_type\n    elif type1 is c_py_unicode_type or type2 is c_py_unicode_type:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "widest_extension_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def widest_extension_type(type1, type2):\n    if type1.typeobj_is_imported() or type2.typeobj_is_imported():\n        return py_object_type\n    while True:\n        if type1.subtype_of(type2):\n            return type2\n        elif type2.subtype_of(type1):\n            return type1\n        type1, type2 = type1.base_type, type2.base_type\n        if type1 is None or type2 is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "widest_cpp_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def widest_cpp_type(type1, type2):\n    @cached_function\n    def bases(type):\n        all = set()\n        for base in type.base_classes:\n            all.add(base)\n            all.update(bases(base))\n        return all\n    common_bases = bases(type1).intersection(bases(type2))\n    common_bases_bases = reduce(set.union, [bases(b) for b in common_bases], set())",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "simple_c_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def simple_c_type(signed, longness, name):\n    # Find type descriptor for simple type given name and modifiers.\n    # Returns None if arguments don't make sense.\n    return modifiers_and_name_to_type.get((signed, longness, name))\ndef parse_basic_type(name):\n    base = None\n    if name.startswith('p_'):\n        base = parse_basic_type(name[2:])\n    elif name.startswith('p'):\n        base = parse_basic_type(name[1:])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "parse_basic_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def parse_basic_type(name):\n    base = None\n    if name.startswith('p_'):\n        base = parse_basic_type(name[2:])\n    elif name.startswith('p'):\n        base = parse_basic_type(name[1:])\n    elif name.endswith('*'):\n        base = parse_basic_type(name[:-1])\n    if base:\n        return CPtrType(base)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_array_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def c_array_type(base_type, size):\n    # Construct a C array type.\n    if base_type is error_type:\n        return error_type\n    else:\n        return CArrayType(base_type, size)\ndef c_ptr_type(base_type):\n    # Construct a C pointer type.\n    if base_type is error_type:\n        return error_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ptr_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def c_ptr_type(base_type):\n    # Construct a C pointer type.\n    if base_type is error_type:\n        return error_type\n    elif base_type.is_reference:\n        return CPtrType(base_type.ref_base_type)\n    else:\n        return CPtrType(base_type)\ndef c_ref_type(base_type):\n    # Construct a C reference type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ref_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def c_ref_type(base_type):\n    # Construct a C reference type\n    if base_type is error_type:\n        return error_type\n    else:\n        return CReferenceType(base_type)\ndef c_const_type(base_type):\n    # Construct a C const type.\n    if base_type is error_type:\n        return error_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_const_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def c_const_type(base_type):\n    # Construct a C const type.\n    if base_type is error_type:\n        return error_type\n    else:\n        return CConstType(base_type)\ndef same_type(type1, type2):\n    return type1.same_as(type2)\ndef assignable_from(type1, type2):\n    return type1.assignable_from(type2)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "same_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def same_type(type1, type2):\n    return type1.same_as(type2)\ndef assignable_from(type1, type2):\n    return type1.assignable_from(type2)\ndef typecast(to_type, from_type, expr_code):\n    #  Return expr_code cast to a C type which can be\n    #  assigned to to_type, assuming its existing C type\n    #  is from_type.\n    if (to_type is from_type or\n            (not to_type.is_pyobject and assignable_from(to_type, from_type))):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "assignable_from",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def assignable_from(type1, type2):\n    return type1.assignable_from(type2)\ndef typecast(to_type, from_type, expr_code):\n    #  Return expr_code cast to a C type which can be\n    #  assigned to to_type, assuming its existing C type\n    #  is from_type.\n    if (to_type is from_type or\n            (not to_type.is_pyobject and assignable_from(to_type, from_type))):\n        return expr_code\n    elif (to_type is py_object_type and from_type and",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "typecast",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def typecast(to_type, from_type, expr_code):\n    #  Return expr_code cast to a C type which can be\n    #  assigned to to_type, assuming its existing C type\n    #  is from_type.\n    if (to_type is from_type or\n            (not to_type.is_pyobject and assignable_from(to_type, from_type))):\n        return expr_code\n    elif (to_type is py_object_type and from_type and\n            from_type.is_builtin_type and from_type.name != 'type'):\n        # no cast needed, builtins are PyObject* already",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "type_list_identifier",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def type_list_identifier(types):\n    return cap_length('__and_'.join(type_identifier(type) for type in types))\n_type_identifier_cache = {}\ndef type_identifier(type):\n    decl = type.empty_declaration_code()\n    safe = _type_identifier_cache.get(decl)\n    if safe is None:\n        safe = decl\n        safe = re.sub(' +', ' ', safe)\n        safe = re.sub(' ([^a-zA-Z0-9_])', r'\\1', safe)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "type_identifier",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def type_identifier(type):\n    decl = type.empty_declaration_code()\n    safe = _type_identifier_cache.get(decl)\n    if safe is None:\n        safe = decl\n        safe = re.sub(' +', ' ', safe)\n        safe = re.sub(' ([^a-zA-Z0-9_])', r'\\1', safe)\n        safe = re.sub('([^a-zA-Z0-9_]) ', r'\\1', safe)\n        safe = (safe.replace('__', '__dunder')\n                    .replace('const ', '__const_')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "cap_length",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "def cap_length(s, max_prefix=63, max_len=1024):\n    if len(s) <= max_prefix:\n        return s\n    hash_prefix = hashlib.sha256(s.encode('ascii')).hexdigest()[:6]\n    return '%s__%s__etc' % (hash_prefix, s[:max_len-17])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "builtin_types_that_cannot_create_refcycles",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "builtin_types_that_cannot_create_refcycles = set([\n    'bool', 'int', 'long', 'float', 'complex',\n    'bytearray', 'bytes', 'unicode', 'str', 'basestring'\n])\nclass BuiltinObjectType(PyObjectType):\n    #  objstruct_cname  string           Name of PyObject struct\n    is_builtin_type = 1\n    has_attributes = 1\n    base_type = None\n    module_name = '__builtin__'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "ForbidUse",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "ForbidUse = ForbidUseClass()\nclass CIntLike(object):\n    \"\"\"Mixin for shared behaviour of C integers and enums.\n    \"\"\"\n    to_py_function = None\n    from_py_function = None\n    to_pyunicode_utility = None\n    default_format_spec = 'd'\n    def can_coerce_to_pyobject(self, env):\n        return True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "complex_ops",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "complex_ops = {\n    (1, '-'): 'neg',\n    (1, 'zero'): 'is_zero',\n    (2, '+'): 'sum',\n    (2, '-'): 'diff',\n    (2, '*'): 'prod',\n    (2, '/'): 'quot',\n    (2, '**'): 'pow',\n    (2, '=='): 'eq',\n}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "cpp_string_conversions",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "cpp_string_conversions = (\"std::string\",)\nbuiltin_cpp_conversions = {\n    # type                element template params\n    \"std::pair\":          2,\n    \"std::vector\":        1,\n    \"std::list\":          1,\n    \"std::set\":           1,\n    \"std::unordered_set\": 1,\n    \"std::map\":           2,\n    \"std::unordered_map\": 2,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "builtin_cpp_conversions",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "builtin_cpp_conversions = {\n    # type                element template params\n    \"std::pair\":          2,\n    \"std::vector\":        1,\n    \"std::list\":          1,\n    \"std::set\":           1,\n    \"std::unordered_set\": 1,\n    \"std::map\":           2,\n    \"std::unordered_map\": 2,\n    \"std::complex\":       1,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "rank_to_type_name",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "rank_to_type_name = (\n    \"char\",         # 0\n    \"short\",        # 1\n    \"int\",          # 2\n    \"long\",         # 3\n    \"PY_LONG_LONG\", # 4\n    \"float\",        # 5\n    \"double\",       # 6\n    \"long double\",  # 7\n)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "_rank_to_type_name",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "_rank_to_type_name = list(rank_to_type_name)\nRANK_INT  = _rank_to_type_name.index('int')\nRANK_LONG = _rank_to_type_name.index('long')\nRANK_FLOAT = _rank_to_type_name.index('float')\nUNSIGNED = 0\nSIGNED = 2\nerror_type =    ErrorType()\nunspecified_type = UnspecifiedType()\npy_object_type = PyObjectType()\nc_void_type =        CVoidType()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "RANK_LONG",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "RANK_LONG = _rank_to_type_name.index('long')\nRANK_FLOAT = _rank_to_type_name.index('float')\nUNSIGNED = 0\nSIGNED = 2\nerror_type =    ErrorType()\nunspecified_type = UnspecifiedType()\npy_object_type = PyObjectType()\nc_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "RANK_FLOAT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "RANK_FLOAT = _rank_to_type_name.index('float')\nUNSIGNED = 0\nSIGNED = 2\nerror_type =    ErrorType()\nunspecified_type = UnspecifiedType()\npy_object_type = PyObjectType()\nc_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "UNSIGNED",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "UNSIGNED = 0\nSIGNED = 2\nerror_type =    ErrorType()\nunspecified_type = UnspecifiedType()\npy_object_type = PyObjectType()\nc_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "SIGNED",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "SIGNED = 2\nerror_type =    ErrorType()\nunspecified_type = UnspecifiedType()\npy_object_type = PyObjectType()\nc_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "error_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "error_type =    ErrorType()\nunspecified_type = UnspecifiedType()\npy_object_type = PyObjectType()\nc_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "unspecified_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "unspecified_type = UnspecifiedType()\npy_object_type = PyObjectType()\nc_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "py_object_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "py_object_type = PyObjectType()\nc_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_void_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_void_type =        CVoidType()\nc_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_uchar_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_uchar_type =       CIntType(0, UNSIGNED)\nc_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ushort_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_ushort_type =      CIntType(1, UNSIGNED)\nc_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_uint_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_uint_type =        CIntType(2, UNSIGNED)\nc_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ulong_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_ulong_type =       CIntType(3, UNSIGNED)\nc_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ulonglong_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_ulonglong_type =   CIntType(4, UNSIGNED)\nc_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_char_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_char_type =        CIntType(0)\nc_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_short_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_short_type =       CIntType(1)\nc_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_int_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_int_type =         CIntType(2)\nc_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_long_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_long_type =        CIntType(3)\nc_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_longlong_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_longlong_type =    CIntType(4)\nc_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_schar_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_schar_type =       CIntType(0, SIGNED)\nc_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_sshort_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_sshort_type =      CIntType(1, SIGNED)\nc_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_sint_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_sint_type =        CIntType(2, SIGNED)\nc_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_slong_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_slong_type =       CIntType(3, SIGNED)\nc_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_slonglong_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_slonglong_type =   CIntType(4, SIGNED)\nc_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_float_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_float_type =       CFloatType(5, math_h_modifier='f')\nc_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_double_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_double_type =      CFloatType(6)\nc_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_longdouble_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_longdouble_type =  CFloatType(7, math_h_modifier='l')\nc_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_float_complex_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_float_complex_type =      CComplexType(c_float_type)\nc_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_double_complex_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_double_complex_type =     CComplexType(c_double_type)\nc_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_longdouble_complex_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_longdouble_complex_type = CComplexType(c_longdouble_type)\nc_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_anon_enum_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_anon_enum_type =   CAnonEnumType(-1)\nc_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_returncode_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_returncode_type =  CReturnCodeType(RANK_INT)\nc_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_bint_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_bint_type =        CBIntType(RANK_INT)\nc_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_unicode_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_unicode_type =  CPyUnicodeIntType(RANK_INT-0.5, UNSIGNED)\nc_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_ucs4_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_ucs4_type =     CPyUCS4IntType(RANK_LONG-0.5, UNSIGNED)\nc_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_hash_t_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_hash_t_type =   CPyHashTType(RANK_LONG+0.5, SIGNED)\nc_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_ssize_t_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_ssize_t_type =  CPySSizeTType(RANK_LONG+0.5, SIGNED)\nc_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ssize_t_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_ssize_t_type =     CSSizeTType(RANK_LONG+0.5, SIGNED)\nc_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_size_t_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_size_t_type =      CSizeTType(RANK_LONG+0.5, UNSIGNED)\nc_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ptrdiff_t_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_ptrdiff_t_type =   CPtrdiffTType(RANK_LONG+0.75, SIGNED)\nc_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_null_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_null_ptr_type =     CNullPtrType(c_void_type)\nc_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_void_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_void_ptr_type =     CPtrType(c_void_type)\nc_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_void_ptr_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_void_ptr_ptr_type = CPtrType(c_void_ptr_type)\nc_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_char_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_char_ptr_type =     CPtrType(c_char_type)\nc_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_const_char_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_const_char_ptr_type = CPtrType(CConstType(c_char_type))\nc_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_uchar_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_uchar_ptr_type =    CPtrType(c_uchar_type)\nc_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_const_uchar_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_const_uchar_ptr_type = CPtrType(CConstType(c_uchar_type))\nc_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_char_ptr_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_char_ptr_ptr_type = CPtrType(c_char_ptr_type)\nc_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_int_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_int_ptr_type =      CPtrType(c_int_type)\nc_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_unicode_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_unicode_ptr_type = CPtrType(c_py_unicode_type)\nc_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_const_py_unicode_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_const_py_unicode_ptr_type = CPtrType(CConstType(c_py_unicode_type))\nc_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type\nc_pytss_t_type = CPyTSSTType()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_ssize_t_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_ssize_t_ptr_type =  CPtrType(c_py_ssize_t_type)\nc_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type\nc_pytss_t_type = CPyTSSTType()\n# the Py_buffer type is defined in Builtin.py",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_ssize_t_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_ssize_t_ptr_type =  CPtrType(c_ssize_t_type)\nc_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type\nc_pytss_t_type = CPyTSSTType()\n# the Py_buffer type is defined in Builtin.py\nc_py_buffer_type = CStructOrUnionType(\"Py_buffer\", \"struct\", None, 1, \"Py_buffer\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_size_t_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_size_t_ptr_type =  CPtrType(c_size_t_type)\n# GIL state\nc_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type\nc_pytss_t_type = CPyTSSTType()\n# the Py_buffer type is defined in Builtin.py\nc_py_buffer_type = CStructOrUnionType(\"Py_buffer\", \"struct\", None, 1, \"Py_buffer\")\nc_py_buffer_ptr_type = CPtrType(c_py_buffer_type)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_gilstate_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_gilstate_type = CEnumType(\"PyGILState_STATE\", \"PyGILState_STATE\", True)\nc_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type\nc_pytss_t_type = CPyTSSTType()\n# the Py_buffer type is defined in Builtin.py\nc_py_buffer_type = CStructOrUnionType(\"Py_buffer\", \"struct\", None, 1, \"Py_buffer\")\nc_py_buffer_ptr_type = CPtrType(c_py_buffer_type)\n# Not sure whether the unsigned versions and 'long long' should be in there\n# long long requires C99 and might be slow, and would always get preferred",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_threadstate_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_threadstate_type = CStructOrUnionType(\"PyThreadState\", \"struct\", None, 1, \"PyThreadState\")\nc_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type\nc_pytss_t_type = CPyTSSTType()\n# the Py_buffer type is defined in Builtin.py\nc_py_buffer_type = CStructOrUnionType(\"Py_buffer\", \"struct\", None, 1, \"Py_buffer\")\nc_py_buffer_ptr_type = CPtrType(c_py_buffer_type)\n# Not sure whether the unsigned versions and 'long long' should be in there\n# long long requires C99 and might be slow, and would always get preferred\n# when specialization happens through calling and not indexing",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_threadstate_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_threadstate_ptr_type = CPtrType(c_threadstate_type)\n# PEP-539 \"Py_tss_t\" type\nc_pytss_t_type = CPyTSSTType()\n# the Py_buffer type is defined in Builtin.py\nc_py_buffer_type = CStructOrUnionType(\"Py_buffer\", \"struct\", None, 1, \"Py_buffer\")\nc_py_buffer_ptr_type = CPtrType(c_py_buffer_type)\n# Not sure whether the unsigned versions and 'long long' should be in there\n# long long requires C99 and might be slow, and would always get preferred\n# when specialization happens through calling and not indexing\ncy_integral_type = FusedType([c_short_type, c_int_type, c_long_type],",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_pytss_t_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_pytss_t_type = CPyTSSTType()\n# the Py_buffer type is defined in Builtin.py\nc_py_buffer_type = CStructOrUnionType(\"Py_buffer\", \"struct\", None, 1, \"Py_buffer\")\nc_py_buffer_ptr_type = CPtrType(c_py_buffer_type)\n# Not sure whether the unsigned versions and 'long long' should be in there\n# long long requires C99 and might be slow, and would always get preferred\n# when specialization happens through calling and not indexing\ncy_integral_type = FusedType([c_short_type, c_int_type, c_long_type],\n                             name=\"integral\")\n# Omitting long double as it might be slow",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_buffer_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_buffer_type = CStructOrUnionType(\"Py_buffer\", \"struct\", None, 1, \"Py_buffer\")\nc_py_buffer_ptr_type = CPtrType(c_py_buffer_type)\n# Not sure whether the unsigned versions and 'long long' should be in there\n# long long requires C99 and might be slow, and would always get preferred\n# when specialization happens through calling and not indexing\ncy_integral_type = FusedType([c_short_type, c_int_type, c_long_type],\n                             name=\"integral\")\n# Omitting long double as it might be slow\ncy_floating_type = FusedType([c_float_type, c_double_type], name=\"floating\")\ncy_numeric_type = FusedType([c_short_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_py_buffer_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_py_buffer_ptr_type = CPtrType(c_py_buffer_type)\n# Not sure whether the unsigned versions and 'long long' should be in there\n# long long requires C99 and might be slow, and would always get preferred\n# when specialization happens through calling and not indexing\ncy_integral_type = FusedType([c_short_type, c_int_type, c_long_type],\n                             name=\"integral\")\n# Omitting long double as it might be slow\ncy_floating_type = FusedType([c_float_type, c_double_type], name=\"floating\")\ncy_numeric_type = FusedType([c_short_type,\n                             c_int_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "cy_integral_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "cy_integral_type = FusedType([c_short_type, c_int_type, c_long_type],\n                             name=\"integral\")\n# Omitting long double as it might be slow\ncy_floating_type = FusedType([c_float_type, c_double_type], name=\"floating\")\ncy_numeric_type = FusedType([c_short_type,\n                             c_int_type,\n                             c_long_type,\n                             c_float_type,\n                             c_double_type,\n                             c_float_complex_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "cy_floating_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "cy_floating_type = FusedType([c_float_type, c_double_type], name=\"floating\")\ncy_numeric_type = FusedType([c_short_type,\n                             c_int_type,\n                             c_long_type,\n                             c_float_type,\n                             c_double_type,\n                             c_float_complex_type,\n                             c_double_complex_type], name=\"numeric\")\n# buffer-related structs\nc_buf_diminfo_type =  CStructOrUnionType(\"__Pyx_Buf_DimInfo\", \"struct\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "cy_numeric_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "cy_numeric_type = FusedType([c_short_type,\n                             c_int_type,\n                             c_long_type,\n                             c_float_type,\n                             c_double_type,\n                             c_float_complex_type,\n                             c_double_complex_type], name=\"numeric\")\n# buffer-related structs\nc_buf_diminfo_type =  CStructOrUnionType(\"__Pyx_Buf_DimInfo\", \"struct\",\n                                      None, 1, \"__Pyx_Buf_DimInfo\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_buf_diminfo_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_buf_diminfo_type =  CStructOrUnionType(\"__Pyx_Buf_DimInfo\", \"struct\",\n                                      None, 1, \"__Pyx_Buf_DimInfo\")\nc_pyx_buffer_type = CStructOrUnionType(\"__Pyx_Buffer\", \"struct\", None, 1, \"__Pyx_Buffer\")\nc_pyx_buffer_ptr_type = CPtrType(c_pyx_buffer_type)\nc_pyx_buffer_nd_type = CStructOrUnionType(\"__Pyx_LocalBuf_ND\", \"struct\",\n                                      None, 1, \"__Pyx_LocalBuf_ND\")\ncython_memoryview_type = CStructOrUnionType(\"__pyx_memoryview_obj\", \"struct\",\n                                      None, 0, \"__pyx_memoryview_obj\")\nmemoryviewslice_type = CStructOrUnionType(\"memoryviewslice\", \"struct\",\n                                          None, 1, \"__Pyx_memviewslice\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_pyx_buffer_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_pyx_buffer_type = CStructOrUnionType(\"__Pyx_Buffer\", \"struct\", None, 1, \"__Pyx_Buffer\")\nc_pyx_buffer_ptr_type = CPtrType(c_pyx_buffer_type)\nc_pyx_buffer_nd_type = CStructOrUnionType(\"__Pyx_LocalBuf_ND\", \"struct\",\n                                      None, 1, \"__Pyx_LocalBuf_ND\")\ncython_memoryview_type = CStructOrUnionType(\"__pyx_memoryview_obj\", \"struct\",\n                                      None, 0, \"__pyx_memoryview_obj\")\nmemoryviewslice_type = CStructOrUnionType(\"memoryviewslice\", \"struct\",\n                                          None, 1, \"__Pyx_memviewslice\")\nmodifiers_and_name_to_type = {\n    #(signed, longness, name) : type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_pyx_buffer_ptr_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_pyx_buffer_ptr_type = CPtrType(c_pyx_buffer_type)\nc_pyx_buffer_nd_type = CStructOrUnionType(\"__Pyx_LocalBuf_ND\", \"struct\",\n                                      None, 1, \"__Pyx_LocalBuf_ND\")\ncython_memoryview_type = CStructOrUnionType(\"__pyx_memoryview_obj\", \"struct\",\n                                      None, 0, \"__pyx_memoryview_obj\")\nmemoryviewslice_type = CStructOrUnionType(\"memoryviewslice\", \"struct\",\n                                          None, 1, \"__Pyx_memviewslice\")\nmodifiers_and_name_to_type = {\n    #(signed, longness, name) : type\n    (0,  0, \"char\"): c_uchar_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "c_pyx_buffer_nd_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "c_pyx_buffer_nd_type = CStructOrUnionType(\"__Pyx_LocalBuf_ND\", \"struct\",\n                                      None, 1, \"__Pyx_LocalBuf_ND\")\ncython_memoryview_type = CStructOrUnionType(\"__pyx_memoryview_obj\", \"struct\",\n                                      None, 0, \"__pyx_memoryview_obj\")\nmemoryviewslice_type = CStructOrUnionType(\"memoryviewslice\", \"struct\",\n                                          None, 1, \"__Pyx_memviewslice\")\nmodifiers_and_name_to_type = {\n    #(signed, longness, name) : type\n    (0,  0, \"char\"): c_uchar_type,\n    (1,  0, \"char\"): c_char_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "cython_memoryview_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "cython_memoryview_type = CStructOrUnionType(\"__pyx_memoryview_obj\", \"struct\",\n                                      None, 0, \"__pyx_memoryview_obj\")\nmemoryviewslice_type = CStructOrUnionType(\"memoryviewslice\", \"struct\",\n                                          None, 1, \"__Pyx_memviewslice\")\nmodifiers_and_name_to_type = {\n    #(signed, longness, name) : type\n    (0,  0, \"char\"): c_uchar_type,\n    (1,  0, \"char\"): c_char_type,\n    (2,  0, \"char\"): c_schar_type,\n    (0, -1, \"int\"): c_ushort_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "memoryviewslice_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "memoryviewslice_type = CStructOrUnionType(\"memoryviewslice\", \"struct\",\n                                          None, 1, \"__Pyx_memviewslice\")\nmodifiers_and_name_to_type = {\n    #(signed, longness, name) : type\n    (0,  0, \"char\"): c_uchar_type,\n    (1,  0, \"char\"): c_char_type,\n    (2,  0, \"char\"): c_schar_type,\n    (0, -1, \"int\"): c_ushort_type,\n    (0,  0, \"int\"): c_uint_type,\n    (0,  1, \"int\"): c_ulong_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "modifiers_and_name_to_type",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "modifiers_and_name_to_type = {\n    #(signed, longness, name) : type\n    (0,  0, \"char\"): c_uchar_type,\n    (1,  0, \"char\"): c_char_type,\n    (2,  0, \"char\"): c_schar_type,\n    (0, -1, \"int\"): c_ushort_type,\n    (0,  0, \"int\"): c_uint_type,\n    (0,  1, \"int\"): c_ulong_type,\n    (0,  2, \"int\"): c_ulonglong_type,\n    (1, -1, \"int\"): c_short_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "_type_identifier_cache",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "peekOfCode": "_type_identifier_cache = {}\ndef type_identifier(type):\n    decl = type.empty_declaration_code()\n    safe = _type_identifier_cache.get(decl)\n    if safe is None:\n        safe = decl\n        safe = re.sub(' +', ' ', safe)\n        safe = re.sub(' ([^a-zA-Z0-9_])', r'\\1', safe)\n        safe = re.sub('([^a-zA-Z0-9_]) ', r'\\1', safe)\n        safe = (safe.replace('__', '__dunder')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.PyrexTypes",
        "documentation": {}
    },
    {
        "label": "has_np_pythran",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def has_np_pythran(env):\n    if env is None:\n        return False\n    directives = getattr(env, 'directives', None)\n    return (directives and directives.get('np_pythran', False))\n@cython.ccall\ndef is_pythran_supported_dtype(type_):\n    if isinstance(type_, CTypedefType):\n        return is_pythran_supported_type(type_.typedef_base_type)\n    return type_.is_numeric",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "is_pythran_supported_dtype",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def is_pythran_supported_dtype(type_):\n    if isinstance(type_, CTypedefType):\n        return is_pythran_supported_type(type_.typedef_base_type)\n    return type_.is_numeric\ndef pythran_type(Ty, ptype=\"ndarray\"):\n    if Ty.is_buffer:\n        ndim,dtype = Ty.ndim, Ty.dtype\n        if isinstance(dtype, CStructOrUnionType):\n            ctype = dtype.cname\n        elif isinstance(dtype, CType):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_type(Ty, ptype=\"ndarray\"):\n    if Ty.is_buffer:\n        ndim,dtype = Ty.ndim, Ty.dtype\n        if isinstance(dtype, CStructOrUnionType):\n            ctype = dtype.cname\n        elif isinstance(dtype, CType):\n            ctype = dtype.sign_and_name()\n        elif isinstance(dtype, CTypedefType):\n            ctype = dtype.typedef_cname\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "type_remove_ref",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def type_remove_ref(ty):\n    return \"typename std::remove_reference<%s>::type\" % ty\ndef pythran_binop_type(op, tA, tB):\n    if op == '**':\n        return 'decltype(pythonic::numpy::functor::power{}(std::declval<%s>(), std::declval<%s>()))' % (\n            pythran_type(tA), pythran_type(tB))\n    else:\n        return \"decltype(std::declval<%s>() %s std::declval<%s>())\" % (\n            pythran_type(tA), op, pythran_type(tB))\ndef pythran_unaryop_type(op, type_):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_binop_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_binop_type(op, tA, tB):\n    if op == '**':\n        return 'decltype(pythonic::numpy::functor::power{}(std::declval<%s>(), std::declval<%s>()))' % (\n            pythran_type(tA), pythran_type(tB))\n    else:\n        return \"decltype(std::declval<%s>() %s std::declval<%s>())\" % (\n            pythran_type(tA), op, pythran_type(tB))\ndef pythran_unaryop_type(op, type_):\n    return \"decltype(%sstd::declval<%s>())\" % (\n        op, pythran_type(type_))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_unaryop_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_unaryop_type(op, type_):\n    return \"decltype(%sstd::declval<%s>())\" % (\n        op, pythran_type(type_))\n@cython.cfunc\ndef _index_access(index_code, indices):\n    indexing = \",\".join([index_code(idx) for idx in indices])\n    return ('[%s]' if len(indices) == 1 else '(%s)') % indexing\ndef _index_type_code(index_with_type):\n    idx, index_type = index_with_type\n    if idx.is_slice:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_indexing_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_indexing_type(type_, indices):\n    return type_remove_ref(\"decltype(std::declval<%s>()%s)\" % (\n        pythran_type(type_),\n        _index_access(_index_type_code, indices),\n    ))\ndef pythran_indexing_code(indices):\n    return _index_access(_index_code, indices)\ndef np_func_to_list(func):\n    if not func.is_numpy_attribute:\n        return []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_indexing_code",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_indexing_code(indices):\n    return _index_access(_index_code, indices)\ndef np_func_to_list(func):\n    if not func.is_numpy_attribute:\n        return []\n    return np_func_to_list(func.obj) + [func.attribute]\nif pythran is None:\n    def pythran_is_numpy_func_supported(name):\n        return False\nelse:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "np_func_to_list",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def np_func_to_list(func):\n    if not func.is_numpy_attribute:\n        return []\n    return np_func_to_list(func.obj) + [func.attribute]\nif pythran is None:\n    def pythran_is_numpy_func_supported(name):\n        return False\nelse:\n    def pythran_is_numpy_func_supported(func):\n        CurF = pythran.tables.MODULES['numpy']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_functor",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_functor(func):\n    func = np_func_to_list(func)\n    submodules = \"::\".join(func[:-1] + [\"functor\"])\n    return \"pythonic::numpy::%s::%s\" % (submodules, func[-1])\ndef pythran_func_type(func, args):\n    args = \",\".join((\"std::declval<%s>()\" % pythran_type(a.type) for a in args))\n    return \"decltype(%s{}(%s))\" % (pythran_functor(func), args)\n@cython.ccall\ndef to_pythran(op, ptype=None):\n    op_type = op.type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_func_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_func_type(func, args):\n    args = \",\".join((\"std::declval<%s>()\" % pythran_type(a.type) for a in args))\n    return \"decltype(%s{}(%s))\" % (pythran_functor(func), args)\n@cython.ccall\ndef to_pythran(op, ptype=None):\n    op_type = op.type\n    if op_type.is_int:\n        # Make sure that integer literals always have exactly the type that the templates expect.\n        return op_type.cast_code(op.result())\n    if is_type(op_type, [\"is_pythran_expr\", \"is_numeric\", \"is_float\", \"is_complex\"]):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "to_pythran",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def to_pythran(op, ptype=None):\n    op_type = op.type\n    if op_type.is_int:\n        # Make sure that integer literals always have exactly the type that the templates expect.\n        return op_type.cast_code(op.result())\n    if is_type(op_type, [\"is_pythran_expr\", \"is_numeric\", \"is_float\", \"is_complex\"]):\n        return op.result()\n    if op.is_none:\n        return \"pythonic::%s::None\" % pythran_builtins\n    if ptype is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "is_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def is_type(type_, types):\n    for attr in types:\n        if getattr(type_, attr, False):\n            return True\n    return False\ndef is_pythran_supported_node_or_none(node):\n    return node.is_none or is_pythran_supported_type(node.type)\n@cython.ccall\ndef is_pythran_supported_type(type_):\n    pythran_supported = (",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "is_pythran_supported_node_or_none",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def is_pythran_supported_node_or_none(node):\n    return node.is_none or is_pythran_supported_type(node.type)\n@cython.ccall\ndef is_pythran_supported_type(type_):\n    pythran_supported = (\n        \"is_pythran_expr\", \"is_int\", \"is_numeric\", \"is_float\", \"is_none\", \"is_complex\")\n    return is_type(type_, pythran_supported) or is_pythran_expr(type_)\ndef is_pythran_supported_operation_type(type_):\n    pythran_supported = (\n        \"is_pythran_expr\", \"is_int\", \"is_numeric\", \"is_float\", \"is_complex\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "is_pythran_supported_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def is_pythran_supported_type(type_):\n    pythran_supported = (\n        \"is_pythran_expr\", \"is_int\", \"is_numeric\", \"is_float\", \"is_none\", \"is_complex\")\n    return is_type(type_, pythran_supported) or is_pythran_expr(type_)\ndef is_pythran_supported_operation_type(type_):\n    pythran_supported = (\n        \"is_pythran_expr\", \"is_int\", \"is_numeric\", \"is_float\", \"is_complex\")\n    return is_type(type_,pythran_supported) or is_pythran_expr(type_)\n@cython.ccall\ndef is_pythran_expr(type_):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "is_pythran_supported_operation_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def is_pythran_supported_operation_type(type_):\n    pythran_supported = (\n        \"is_pythran_expr\", \"is_int\", \"is_numeric\", \"is_float\", \"is_complex\")\n    return is_type(type_,pythran_supported) or is_pythran_expr(type_)\n@cython.ccall\ndef is_pythran_expr(type_):\n    return type_.is_pythran_expr\ndef is_pythran_buffer(type_):\n    return (type_.is_numpy_buffer and is_pythran_supported_dtype(type_.dtype) and\n            type_.mode in (\"c\", \"strided\") and not type_.cast)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "is_pythran_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def is_pythran_expr(type_):\n    return type_.is_pythran_expr\ndef is_pythran_buffer(type_):\n    return (type_.is_numpy_buffer and is_pythran_supported_dtype(type_.dtype) and\n            type_.mode in (\"c\", \"strided\") and not type_.cast)\ndef pythran_get_func_include_file(func):\n    func = np_func_to_list(func)\n    return \"pythonic/numpy/%s.hpp\" % \"/\".join(func)\ndef include_pythran_generic(env):\n    # Generic files",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "is_pythran_buffer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def is_pythran_buffer(type_):\n    return (type_.is_numpy_buffer and is_pythran_supported_dtype(type_.dtype) and\n            type_.mode in (\"c\", \"strided\") and not type_.cast)\ndef pythran_get_func_include_file(func):\n    func = np_func_to_list(func)\n    return \"pythonic/numpy/%s.hpp\" % \"/\".join(func)\ndef include_pythran_generic(env):\n    # Generic files\n    env.add_include_file(\"pythonic/core.hpp\")\n    env.add_include_file(\"pythonic/python/core.hpp\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "pythran_get_func_include_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def pythran_get_func_include_file(func):\n    func = np_func_to_list(func)\n    return \"pythonic/numpy/%s.hpp\" % \"/\".join(func)\ndef include_pythran_generic(env):\n    # Generic files\n    env.add_include_file(\"pythonic/core.hpp\")\n    env.add_include_file(\"pythonic/python/core.hpp\")\n    env.add_include_file(\"pythonic/types/bool.hpp\")\n    env.add_include_file(\"pythonic/types/ndarray.hpp\")\n    env.add_include_file(\"pythonic/numpy/power.hpp\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "include_pythran_generic",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "peekOfCode": "def include_pythran_generic(env):\n    # Generic files\n    env.add_include_file(\"pythonic/core.hpp\")\n    env.add_include_file(\"pythonic/python/core.hpp\")\n    env.add_include_file(\"pythonic/types/bool.hpp\")\n    env.add_include_file(\"pythonic/types/ndarray.hpp\")\n    env.add_include_file(\"pythonic/numpy/power.hpp\")\n    env.add_include_file(\"pythonic/%s/slice.hpp\" % pythran_builtins)\n    env.add_include_file(\"<new>\")  # for placement new\n    for i in (8, 16, 32, 64):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Pythran",
        "documentation": {}
    },
    {
        "label": "Method",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "peekOfCode": "class Method(object):\n    def __init__(self, name, **kwargs):\n        self.name = name\n        self.kwargs = kwargs or None\n        self.__name__ = name  # for Plex tracing\n    def __call__(self, stream, text):\n        method = getattr(stream, self.name)\n        # self.kwargs is almost always unused => avoid call overhead\n        return method(text, **self.kwargs) if self.kwargs is not None else method(text)\n    def __copy__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "CompileTimeScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "peekOfCode": "class CompileTimeScope(object):\n    def __init__(self, outer=None):\n        self.entries = {}\n        self.outer = outer\n    def declare(self, name, value):\n        self.entries[name] = value\n    def update(self, other):\n        self.entries.update(other)\n    def lookup_here(self, name):\n        return self.entries[name]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "SourceDescriptor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "peekOfCode": "class SourceDescriptor(object):\n    \"\"\"\n    A SourceDescriptor should be considered immutable.\n    \"\"\"\n    filename = None\n    _file_type = 'pyx'\n    _escaped_description = None\n    _cmp_name = ''\n    def __str__(self):\n        assert False # To catch all places where a descriptor is used directly as a filename",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "FileSourceDescriptor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "peekOfCode": "class FileSourceDescriptor(SourceDescriptor):\n    \"\"\"\n    Represents a code source. A code source is a more generic abstraction\n    for a \"filename\" (as sometimes the code doesn't come from a file).\n    Instances of code sources are passed to Scanner.__init__ as the\n    optional name argument and will be passed back when asking for\n    the position()-tuple.\n    \"\"\"\n    def __init__(self, filename, path_description=None):\n        filename = Utils.decode_filename(filename)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "StringSourceDescriptor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "peekOfCode": "class StringSourceDescriptor(SourceDescriptor):\n    \"\"\"\n    Instances of this class can be used instead of a filenames if the\n    code originates from a string object.\n    \"\"\"\n    def __init__(self, name, code):\n        self.name = name\n        #self.set_file_type_from_name(name)\n        self.codelines = [x + \"\\n\" for x in code.split(\"\\n\")]\n        self._cmp_name = name",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "PyrexScanner",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "peekOfCode": "class PyrexScanner(Scanner):\n    #  context            Context  Compilation context\n    #  included_files     [string] Files included with 'include' statement\n    #  compile_time_env   dict     Environment for conditional compilation\n    #  compile_time_eval  boolean  In a true conditional compilation context\n    #  compile_time_expr  boolean  In a compile-time expression context\n    def __init__(self, file, filename, parent_scanner=None,\n                 scope=None, context=None, source_encoding=None, parse_comments=True, initial_pos=None):\n        Scanner.__init__(self, get_lexicon(), file, filename, initial_pos)\n        if filename.is_python_file():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "get_lexicon",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "peekOfCode": "def get_lexicon():\n    global lexicon\n    if not lexicon:\n        lexicon = make_lexicon()\n    return lexicon\n#------------------------------------------------------------------\npy_reserved_words = [\n    \"global\", \"nonlocal\", \"def\", \"class\", \"print\", \"del\", \"pass\", \"break\",\n    \"continue\", \"return\", \"raise\", \"import\", \"exec\", \"try\",\n    \"except\", \"finally\", \"while\", \"if\", \"elif\", \"else\", \"for\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "initial_compile_time_env",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "peekOfCode": "def initial_compile_time_env():\n    benv = CompileTimeScope()\n    names = ('UNAME_SYSNAME', 'UNAME_NODENAME', 'UNAME_RELEASE', 'UNAME_VERSION', 'UNAME_MACHINE')\n    for name, value in zip(names, platform.uname()):\n        benv.declare(name, value)\n    try:\n        import __builtin__ as builtins\n    except ImportError:\n        import builtins\n    names = (",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "debug_scanner",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "peekOfCode": "debug_scanner = 0\ntrace_scanner = 0\nscanner_debug_flags = 0\nscanner_dump_file = None\nlexicon = None\ndef get_lexicon():\n    global lexicon\n    if not lexicon:\n        lexicon = make_lexicon()\n    return lexicon",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "trace_scanner",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "peekOfCode": "trace_scanner = 0\nscanner_debug_flags = 0\nscanner_dump_file = None\nlexicon = None\ndef get_lexicon():\n    global lexicon\n    if not lexicon:\n        lexicon = make_lexicon()\n    return lexicon\n#------------------------------------------------------------------",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "scanner_debug_flags",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "peekOfCode": "scanner_debug_flags = 0\nscanner_dump_file = None\nlexicon = None\ndef get_lexicon():\n    global lexicon\n    if not lexicon:\n        lexicon = make_lexicon()\n    return lexicon\n#------------------------------------------------------------------\npy_reserved_words = [",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "scanner_dump_file",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "peekOfCode": "scanner_dump_file = None\nlexicon = None\ndef get_lexicon():\n    global lexicon\n    if not lexicon:\n        lexicon = make_lexicon()\n    return lexicon\n#------------------------------------------------------------------\npy_reserved_words = [\n    \"global\", \"nonlocal\", \"def\", \"class\", \"print\", \"del\", \"pass\", \"break\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "lexicon",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "peekOfCode": "lexicon = None\ndef get_lexicon():\n    global lexicon\n    if not lexicon:\n        lexicon = make_lexicon()\n    return lexicon\n#------------------------------------------------------------------\npy_reserved_words = [\n    \"global\", \"nonlocal\", \"def\", \"class\", \"print\", \"del\", \"pass\", \"break\",\n    \"continue\", \"return\", \"raise\", \"import\", \"exec\", \"try\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "py_reserved_words",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "peekOfCode": "py_reserved_words = [\n    \"global\", \"nonlocal\", \"def\", \"class\", \"print\", \"del\", \"pass\", \"break\",\n    \"continue\", \"return\", \"raise\", \"import\", \"exec\", \"try\",\n    \"except\", \"finally\", \"while\", \"if\", \"elif\", \"else\", \"for\",\n    \"in\", \"assert\", \"and\", \"or\", \"not\", \"is\", \"lambda\",\n    \"from\", \"yield\", \"with\",\n]\npyx_reserved_words = py_reserved_words + [\n    \"include\", \"ctypedef\", \"cdef\", \"cpdef\",\n    \"cimport\", \"DEF\", \"IF\", \"ELIF\", \"ELSE\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "pyx_reserved_words",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "peekOfCode": "pyx_reserved_words = py_reserved_words + [\n    \"include\", \"ctypedef\", \"cdef\", \"cpdef\",\n    \"cimport\", \"DEF\", \"IF\", \"ELIF\", \"ELSE\"\n]\nclass Method(object):\n    def __init__(self, name, **kwargs):\n        self.name = name\n        self.kwargs = kwargs or None\n        self.__name__ = name  # for Plex tracing\n    def __call__(self, stream, text):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Scanning",
        "documentation": {}
    },
    {
        "label": "UnicodeLiteralBuilder",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "class UnicodeLiteralBuilder(object):\n    \"\"\"Assemble a unicode string.\n    \"\"\"\n    def __init__(self):\n        self.chars = []\n    def append(self, characters):\n        if isinstance(characters, _bytes):\n            # this came from a Py2 string literal in the parser code\n            characters = characters.decode(\"ASCII\")\n        assert isinstance(characters, _unicode), str(type(characters))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "BytesLiteralBuilder",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "class BytesLiteralBuilder(object):\n    \"\"\"Assemble a byte string or char value.\n    \"\"\"\n    def __init__(self, target_encoding):\n        self.chars = []\n        self.target_encoding = target_encoding\n    def append(self, characters):\n        if isinstance(characters, _unicode):\n            characters = characters.encode(self.target_encoding)\n        assert isinstance(characters, _bytes), str(type(characters))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "StrLiteralBuilder",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "class StrLiteralBuilder(object):\n    \"\"\"Assemble both a bytes and a unicode representation of a string.\n    \"\"\"\n    def __init__(self, target_encoding):\n        self._bytes   = BytesLiteralBuilder(target_encoding)\n        self._unicode = UnicodeLiteralBuilder()\n    def append(self, characters):\n        self._bytes.append(characters)\n        self._unicode.append(characters)\n    def append_charval(self, char_number):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "EncodedString",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "class EncodedString(_unicode):\n    # unicode string subclass to keep track of the original encoding.\n    # 'encoding' is None for unicode strings and the source encoding\n    # otherwise\n    encoding = None\n    def __deepcopy__(self, memo):\n        return self\n    def byteencode(self):\n        assert self.encoding is not None\n        return self.encode(self.encoding)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "BytesLiteral",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "class BytesLiteral(_bytes):\n    # bytes subclass that is compatible with EncodedString\n    encoding = None\n    def __deepcopy__(self, memo):\n        return self\n    def byteencode(self):\n        if IS_PYTHON3:\n            return _bytes(self)\n        else:\n            # fake-recode the string to make it a plain bytes object",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "string_contains_surrogates",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def string_contains_surrogates(ustring):\n    \"\"\"\n    Check if the unicode string contains surrogate code points\n    on a CPython platform with wide (UCS-4) or narrow (UTF-16)\n    Unicode, i.e. characters that would be spelled as two\n    separate code units on a narrow platform.\n    \"\"\"\n    for c in map(ord, ustring):\n        if c > 65535:  # can only happen on wide platforms\n            return True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "string_contains_lone_surrogates",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def string_contains_lone_surrogates(ustring):\n    \"\"\"\n    Check if the unicode string contains lone surrogate code points\n    on a CPython platform with wide (UCS-4) or narrow (UTF-16)\n    Unicode, i.e. characters that would be spelled as two\n    separate code units on a narrow platform, but that do not form a pair.\n    \"\"\"\n    last_was_start = False\n    unicode_uses_surrogate_encoding = sys.maxunicode == 65535\n    for c in map(ord, ustring):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "bytes_literal",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def bytes_literal(s, encoding):\n    assert isinstance(s, bytes)\n    s = BytesLiteral(s)\n    s.encoding = encoding\n    return s\ndef encoded_string(s, encoding):\n    assert isinstance(s, (_unicode, bytes))\n    s = EncodedString(s)\n    if encoding is not None:\n        s.encoding = encoding",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "encoded_string",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def encoded_string(s, encoding):\n    assert isinstance(s, (_unicode, bytes))\n    s = EncodedString(s)\n    if encoding is not None:\n        s.encoding = encoding\n    return s\nchar_from_escape_sequence = {\n    r'\\a' : u'\\a',\n    r'\\b' : u'\\b',\n    r'\\f' : u'\\f',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "escape_char",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def escape_char(c):\n    if IS_PYTHON3:\n        c = c.decode('ISO-8859-1')\n    if c in '\\n\\r\\t\\\\':\n        return repr(c)[1:-1]\n    elif c == \"'\":\n        return \"\\\\'\"\n    n = ord(c)\n    if n < 32 or n > 127:\n        # hex works well for characters",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "escape_byte_string",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def escape_byte_string(s):\n    \"\"\"Escape a byte string so that it can be written into C code.\n    Note that this returns a Unicode string instead which, when\n    encoded as ISO-8859-1, will result in the correct byte sequence\n    being written.\n    \"\"\"\n    s = _replace_specials(s)\n    try:\n        return s.decode(\"ASCII\") # trial decoding: plain ASCII => done\n    except UnicodeDecodeError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "split_string_literal",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def split_string_literal(s, limit=2000):\n    # MSVC can't handle long string literals.\n    if len(s) < limit:\n        return s\n    else:\n        start = 0\n        chunks = []\n        while start < len(s):\n            end = start + limit\n            if len(s) > end-4 and '\\\\' in s[end-4:end]:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "encode_pyunicode_string",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "def encode_pyunicode_string(s):\n    \"\"\"Create Py_UNICODE[] representation of a given unicode string.\n    \"\"\"\n    s = list(map(ord, s)) + [0]\n    if sys.maxunicode >= 0x10000:  # Wide build or Py3.3\n        utf16, utf32 = [], s\n        for code_point in s:\n            if code_point >= 0x10000:  # outside of BMP\n                high, low = divmod(code_point - 0x10000, 1024)\n                utf16.append(high + 0xD800)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "empty_bytes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "empty_bytes = _bytes()\nempty_unicode = _unicode()\njoin_bytes = empty_bytes.join\nclass UnicodeLiteralBuilder(object):\n    \"\"\"Assemble a unicode string.\n    \"\"\"\n    def __init__(self):\n        self.chars = []\n    def append(self, characters):\n        if isinstance(characters, _bytes):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "empty_unicode",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "empty_unicode = _unicode()\njoin_bytes = empty_bytes.join\nclass UnicodeLiteralBuilder(object):\n    \"\"\"Assemble a unicode string.\n    \"\"\"\n    def __init__(self):\n        self.chars = []\n    def append(self, characters):\n        if isinstance(characters, _bytes):\n            # this came from a Py2 string literal in the parser code",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "join_bytes",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "join_bytes = empty_bytes.join\nclass UnicodeLiteralBuilder(object):\n    \"\"\"Assemble a unicode string.\n    \"\"\"\n    def __init__(self):\n        self.chars = []\n    def append(self, characters):\n        if isinstance(characters, _bytes):\n            # this came from a Py2 string literal in the parser code\n            characters = characters.decode(\"ASCII\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "char_from_escape_sequence",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "char_from_escape_sequence = {\n    r'\\a' : u'\\a',\n    r'\\b' : u'\\b',\n    r'\\f' : u'\\f',\n    r'\\n' : u'\\n',\n    r'\\r' : u'\\r',\n    r'\\t' : u'\\t',\n    r'\\v' : u'\\v',\n    }.get\n_c_special = ('\\\\', '??', '\"') + tuple(map(chr, range(32)))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "_c_special",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "_c_special = ('\\\\', '??', '\"') + tuple(map(chr, range(32)))\ndef _to_escape_sequence(s):\n    if s in '\\n\\r\\t':\n        return repr(s)[1:-1]\n    elif s == '\"':\n        return r'\\\"'\n    elif s == '\\\\':\n        return r'\\\\'\n    else:\n        # within a character sequence, oct passes much better than hex",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "_replace_specials",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "peekOfCode": "_replace_specials = _build_specials_replacer()\ndef escape_char(c):\n    if IS_PYTHON3:\n        c = c.decode('ISO-8859-1')\n    if c in '\\n\\r\\t\\\\':\n        return repr(c)[1:-1]\n    elif c == \"'\":\n        return \"\\\\'\"\n    n = ord(c)\n    if n < 32 or n > 127:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.StringEncoding",
        "documentation": {}
    },
    {
        "label": "BufferAux",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class BufferAux(object):\n    writable_needed = False\n    def __init__(self, buflocal_nd_var, rcbuf_var):\n        self.buflocal_nd_var = buflocal_nd_var\n        self.rcbuf_var = rcbuf_var\n    def __repr__(self):\n        return \"<BufferAux %r>\" % self.__dict__\nclass Entry(object):\n    # A symbol table entry in a Scope or ModuleNamespace.\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "Entry",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class Entry(object):\n    # A symbol table entry in a Scope or ModuleNamespace.\n    #\n    # name             string     Python name of entity\n    # cname            string     C name of entity\n    # type             PyrexType  Type of entity\n    # doc              string     Doc string\n    # annotation       ExprNode   PEP 484/526 annotation\n    # init             string     Initial value\n    # visibility       'private' or 'public' or 'extern'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "InnerEntry",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class InnerEntry(Entry):\n    \"\"\"\n    An entry in a closure scope that represents the real outer Entry.\n    \"\"\"\n    from_closure = True\n    def __init__(self, outer_entry, scope):\n        Entry.__init__(self, outer_entry.name,\n                       outer_entry.cname,\n                       outer_entry.type,\n                       outer_entry.pos)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "Scope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class Scope(object):\n    # name              string             Unqualified name\n    # outer_scope       Scope or None      Enclosing scope\n    # entries           {string : Entry}   Python name to entry, non-types\n    # const_entries     [Entry]            Constant entries\n    # type_entries      [Entry]            Struct/union/enum/typedef/exttype entries\n    # sue_entries       [Entry]            Struct/union/enum entries\n    # arg_entries       [Entry]            Function argument entries\n    # var_entries       [Entry]            User-defined variable entries\n    # pyfunc_entries    [Entry]            Python function entries",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "PreImportScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class PreImportScope(Scope):\n    namespace_cname = Naming.preimport_cname\n    def __init__(self):\n        Scope.__init__(self, Options.pre_import, None, None)\n    def declare_builtin(self, name, pos):\n        entry = self.declare(name, name, py_object_type, pos, 'private')\n        entry.is_variable = True\n        entry.is_pyglobal = True\n        return entry\nclass BuiltinScope(Scope):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "BuiltinScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class BuiltinScope(Scope):\n    #  The builtin namespace.\n    is_builtin_scope = True\n    def __init__(self):\n        if Options.pre_import is None:\n            Scope.__init__(self, \"__builtin__\", None, None)\n        else:\n            Scope.__init__(self, \"__builtin__\", PreImportScope(), None)\n        self.type_names = {}\n        for name, definition in sorted(self.builtin_entries.items()):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "ModuleScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class ModuleScope(Scope):\n    # module_name          string             Python name of the module\n    # module_cname         string             C name of Python module object\n    # #module_dict_cname   string             C name of module dict object\n    # method_table_cname   string             C name of method table\n    # doc                  string             Module doc string\n    # doc_cname            string             C name of module doc string\n    # utility_code_list    [UtilityCode]      Queuing utility codes for forwarding to Code.py\n    # c_includes           {key: IncludeCode} C headers or verbatim code to be generated\n    #                                         See process_include() for more documentation",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "LocalScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class LocalScope(Scope):\n    # Does the function have a 'with gil:' block?\n    has_with_gil_block = False\n    # Transient attribute, used for symbol table variable declarations\n    _in_with_gil_block = False\n    def __init__(self, name, outer_scope, parent_scope = None):\n        if parent_scope is None:\n            parent_scope = outer_scope\n        Scope.__init__(self, name, outer_scope, parent_scope)\n    def mangle(self, prefix, name):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "GeneratorExpressionScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class GeneratorExpressionScope(Scope):\n    \"\"\"Scope for generator expressions and comprehensions.  As opposed\n    to generators, these can be easily inlined in some cases, so all\n    we really need is a scope that holds the loop variable(s).\n    \"\"\"\n    is_genexpr_scope = True\n    def __init__(self, outer_scope):\n        parent_scope = outer_scope\n        # TODO: also ignore class scopes?\n        while parent_scope.is_genexpr_scope:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "ClosureScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class ClosureScope(LocalScope):\n    is_closure_scope = True\n    def __init__(self, name, scope_name, outer_scope, parent_scope=None):\n        LocalScope.__init__(self, name, outer_scope, parent_scope)\n        self.closure_cname = \"%s%s\" % (Naming.closure_scope_prefix, scope_name)\n#    def mangle_closure_cnames(self, scope_var):\n#        for entry in self.entries.values() + self.temp_entries:\n#            entry.in_closure = 1\n#        LocalScope.mangle_closure_cnames(self, scope_var)\n#    def mangle(self, prefix, name):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "StructOrUnionScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class StructOrUnionScope(Scope):\n    #  Namespace of a C struct or union.\n    def __init__(self, name=\"?\"):\n        Scope.__init__(self, name, None, None)\n    def declare_var(self, name, type, pos,\n                    cname = None, visibility = 'private',\n                    api = 0, in_pxd = 0, is_cdef = 0,\n                    allow_pyobject=False, allow_memoryview=False):\n        # Add an entry for an attribute.\n        if not cname:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "ClassScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class ClassScope(Scope):\n    #  Abstract base class for namespace of\n    #  Python class or extension type.\n    #\n    #  class_name     string   Python name of the class\n    #  scope_prefix   string   Additional prefix for names\n    #                          declared in the class\n    #  doc    string or None   Doc string\n    def __init__(self, name, outer_scope):\n        Scope.__init__(self, name, outer_scope, outer_scope)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "PyClassScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class PyClassScope(ClassScope):\n    #  Namespace of a Python class.\n    #\n    #  class_obj_cname     string   C variable holding class object\n    is_py_class_scope = 1\n    def mangle_class_private_name(self, name):\n        return self.mangle_special_name(name)\n    def mangle_special_name(self, name):\n        if name and name.startswith('__') and not name.endswith('__'):\n            name = EncodedString('_%s%s' % (self.class_name.lstrip('_'), name))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "CClassScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class CClassScope(ClassScope):\n    #  Namespace of an extension type.\n    #\n    #  parent_type           CClassType\n    #  #typeobj_cname        string or None\n    #  #objstruct_cname      string\n    #  method_table_cname    string\n    #  getset_table_cname    string\n    #  has_pyobject_attrs    boolean  Any PyObject attributes?\n    #  has_memoryview_attrs  boolean  Any memory view attributes?",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "CppClassScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class CppClassScope(Scope):\n    #  Namespace of a C++ class.\n    is_cpp_class_scope = 1\n    default_constructor = None\n    type = None\n    def __init__(self, name, outer_scope, templates=None):\n        Scope.__init__(self, name, outer_scope, None)\n        self.directives = outer_scope.directives\n        self.inherited_var_entries = []\n        if templates is not None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "PropertyScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class PropertyScope(Scope):\n    #  Scope holding the __get__, __set__ and __del__ methods for\n    #  a property of an extension type.\n    #\n    #  parent_type   PyExtensionType   The type to which the property belongs\n    is_property_scope = 1\n    def declare_pyfunction(self, name, pos, allow_redefine=False):\n        # Add an entry for a method.\n        signature = get_property_accessor_signature(name)\n        if signature:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "CConstScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class CConstScope(Scope):\n    def __init__(self, const_base_type_scope):\n        Scope.__init__(\n            self,\n            'const_' + const_base_type_scope.name,\n            const_base_type_scope.outer_scope,\n            const_base_type_scope.parent_scope)\n        self.const_base_type_scope = const_base_type_scope\n    def lookup_here(self, name):\n        entry = self.const_base_type_scope.lookup_here(name)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "TemplateScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "class TemplateScope(Scope):\n    def __init__(self, name, outer_scope):\n        Scope.__init__(self, name, outer_scope, None)\n        self.directives = outer_scope.directives",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "c_safe_identifier",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "def c_safe_identifier(cname):\n    # There are some C limitations on struct entry names.\n    if ((cname[:2] == '__' and not (cname.startswith(Naming.pyrex_prefix)\n                                    or cname in ('__weakref__', '__dict__')))\n            or cname in iso_c99_keywords):\n        cname = Naming.pyrex_prefix + cname\n    return cname\nclass BufferAux(object):\n    writable_needed = False\n    def __init__(self, buflocal_nd_var, rcbuf_var):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "iso_c99_keywords",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "iso_c99_keywords = set(\n['auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do',\n    'double', 'else', 'enum', 'extern', 'float', 'for', 'goto', 'if',\n    'int', 'long', 'register', 'return', 'short', 'signed', 'sizeof',\n    'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void',\n    'volatile', 'while',\n    '_Bool', '_Complex'', _Imaginary', 'inline', 'restrict'])\ndef c_safe_identifier(cname):\n    # There are some C limitations on struct entry names.\n    if ((cname[:2] == '__' and not (cname.startswith(Naming.pyrex_prefix)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "const_counter",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "peekOfCode": "const_counter = 1 # As a temporary solution for compiling code in pxds\nclass ModuleScope(Scope):\n    # module_name          string             Python name of the module\n    # module_cname         string             C name of Python module object\n    # #module_dict_cname   string             C name of module dict object\n    # method_table_cname   string             C name of method table\n    # doc                  string             Module doc string\n    # doc_cname            string             C name of module doc string\n    # utility_code_list    [UtilityCode]      Queuing utility codes for forwarding to Code.py\n    # c_includes           {key: IncludeCode} C headers or verbatim code to be generated",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Symtab",
        "documentation": {}
    },
    {
        "label": "StringParseContext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "class StringParseContext(Main.Context):\n    def __init__(self, name, include_directories=None, compiler_directives=None, cpp=False):\n        if include_directories is None:\n            include_directories = []\n        if compiler_directives is None:\n            compiler_directives = {}\n        # TODO: see if \"language_level=3\" also works for our internal code here.\n        Main.Context.__init__(self, include_directories, compiler_directives, cpp=cpp, language_level=2)\n        self.module_name = name\n    def find_module(self, module_name, relative_to=None, pos=None, need_pxd=1, absolute_fallback=True):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "TreeCopier",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "class TreeCopier(VisitorTransform):\n    def visit_Node(self, node):\n        if node is None:\n            return node\n        else:\n            c = node.clone_node()\n            self.visitchildren(c)\n            return c\nclass ApplyPositionAndCopy(TreeCopier):\n    def __init__(self, pos):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "ApplyPositionAndCopy",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "class ApplyPositionAndCopy(TreeCopier):\n    def __init__(self, pos):\n        super(ApplyPositionAndCopy, self).__init__()\n        self.pos = pos\n    def visit_Node(self, node):\n        copy = super(ApplyPositionAndCopy, self).visit_Node(node)\n        copy.pos = self.pos\n        return copy\nclass TemplateTransform(VisitorTransform):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "TemplateTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "class TemplateTransform(VisitorTransform):\n    \"\"\"\n    Makes a copy of a template tree while doing substitutions.\n    A dictionary \"substitutions\" should be passed in when calling\n    the transform; mapping names to replacement nodes. Then replacement\n    happens like this:\n     - If an ExprStatNode contains a single NameNode, whose name is\n       a key in the substitutions dictionary, the ExprStatNode is\n       replaced with a copy of the tree given in the dictionary.\n       It is the responsibility of the caller that the replacement",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "TreeFragment",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "class TreeFragment(object):\n    def __init__(self, code, name=None, pxds=None, temps=None, pipeline=None, level=None, initial_pos=None):\n        if pxds is None:\n            pxds = {}\n        if temps is None:\n            temps = []\n        if pipeline is None:\n            pipeline = []\n        if not name:\n            name = \"(tree fragment)\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "SetPosTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "class SetPosTransform(VisitorTransform):\n    def __init__(self, pos):\n        super(SetPosTransform, self).__init__()\n        self.pos = pos\n    def visit_Node(self, node):\n        node.pos = self.pos\n        self.visitchildren(node)\n        return node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "parse_from_strings",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "def parse_from_strings(name, code, pxds=None, level=None, initial_pos=None,\n                       context=None, allow_struct_enum_decorator=False):\n    \"\"\"\n    Utility method to parse a (unicode) string of code. This is mostly\n    used for internal Cython compiler purposes (creating code snippets\n    that transforms should emit, as well as unit testing).\n    code - a unicode string containing Cython (module-level) code\n    name - a descriptive name for the code source (to use in error messages etc.)\n    RETURNS\n    The tree, i.e. a ModuleNode. The ModuleNode's scope attribute is",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "copy_code_tree",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "def copy_code_tree(node):\n    return TreeCopier()(node)\n_match_indent = re.compile(u\"^ *\").match\ndef strip_common_indent(lines):\n    \"\"\"Strips empty lines and common indentation from the list of strings given in lines\"\"\"\n    # TODO: Facilitate textwrap.indent instead\n    lines = [x for x in lines if x.strip() != u\"\"]\n    if lines:\n        minindent = min([len(_match_indent(x).group(0)) for x in lines])\n        lines = [x[minindent:] for x in lines]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "strip_common_indent",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "def strip_common_indent(lines):\n    \"\"\"Strips empty lines and common indentation from the list of strings given in lines\"\"\"\n    # TODO: Facilitate textwrap.indent instead\n    lines = [x for x in lines if x.strip() != u\"\"]\n    if lines:\n        minindent = min([len(_match_indent(x).group(0)) for x in lines])\n        lines = [x[minindent:] for x in lines]\n    return lines\nclass TreeFragment(object):\n    def __init__(self, code, name=None, pxds=None, temps=None, pipeline=None, level=None, initial_pos=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "_match_indent",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "peekOfCode": "_match_indent = re.compile(u\"^ *\").match\ndef strip_common_indent(lines):\n    \"\"\"Strips empty lines and common indentation from the list of strings given in lines\"\"\"\n    # TODO: Facilitate textwrap.indent instead\n    lines = [x for x in lines if x.strip() != u\"\"]\n    if lines:\n        minindent = min([len(_match_indent(x).group(0)) for x in lines])\n        lines = [x[minindent:] for x in lines]\n    return lines\nclass TreeFragment(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreeFragment",
        "documentation": {}
    },
    {
        "label": "iterchildren",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def iterchildren(node, attr_name):\n    # returns an iterable of all child nodes of that name\n    child = getattr(node, attr_name)\n    if child is not None:\n        if type(child) is list:\n            return child\n        else:\n            return [child]\n    else:\n        return ()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "type_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def type_name(node):\n    return node.__class__.__name__.split('.')[-1]\ndef parse_func(next, token):\n    name = token[1]\n    token = next()\n    if token[0] != '(':\n        raise ValueError(\"Expected '(' after function name '%s'\" % name)\n    predicate = handle_predicate(next, token)\n    return name, predicate\ndef handle_func_not(next, token):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "parse_func",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def parse_func(next, token):\n    name = token[1]\n    token = next()\n    if token[0] != '(':\n        raise ValueError(\"Expected '(' after function name '%s'\" % name)\n    predicate = handle_predicate(next, token)\n    return name, predicate\ndef handle_func_not(next, token):\n    \"\"\"\n    not(...)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "handle_func_not",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def handle_func_not(next, token):\n    \"\"\"\n    not(...)\n    \"\"\"\n    name, predicate = parse_func(next, token)\n    def select(result):\n        for node in result:\n            if _get_first_or_none(predicate([node])) is None:\n                yield node\n    return select",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "handle_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def handle_name(next, token):\n    \"\"\"\n    /NodeName/\n    or\n    func(...)\n    \"\"\"\n    name = token[1]\n    if name in functions:\n        return functions[name](next, token)\n    def select(result):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "handle_star",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def handle_star(next, token):\n    \"\"\"\n    /*/\n    \"\"\"\n    def select(result):\n        for node in result:\n            for name in node.child_attrs:\n                for child in iterchildren(node, name):\n                    yield child\n    return select",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "handle_dot",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def handle_dot(next, token):\n    \"\"\"\n    /./\n    \"\"\"\n    def select(result):\n        return result\n    return select\ndef handle_descendants(next, token):\n    \"\"\"\n    //...",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "handle_descendants",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def handle_descendants(next, token):\n    \"\"\"\n    //...\n    \"\"\"\n    token = next()\n    if token[0] == \"*\":\n        def iter_recursive(node):\n            for name in node.child_attrs:\n                for child in iterchildren(node, name):\n                    yield child",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "handle_attribute",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def handle_attribute(next, token):\n    token = next()\n    if token[0]:\n        raise ValueError(\"Expected attribute name\")\n    name = token[1]\n    value = None\n    try:\n        token = next()\n    except StopIteration:\n        pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "parse_path_value",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def parse_path_value(next):\n    token = next()\n    value = token[0]\n    if value:\n        if value[:1] == \"'\" or value[:1] == '\"':\n            return value[1:-1]\n        try:\n            return int(value)\n        except ValueError:\n            pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "handle_predicate",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def handle_predicate(next, token):\n    token = next()\n    selector = []\n    while token[0] != ']':\n        selector.append( operations[token[0]](next, token) )\n        try:\n            token = next()\n        except StopIteration:\n            break\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "logical_and",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def logical_and(lhs_selects, rhs_select):\n    def select(result):\n        for node in result:\n            subresult = iter((node,))\n            for select in lhs_selects:\n                subresult = select(subresult)\n            predicate_result = _get_first_or_none(subresult)\n            subresult = iter((node,))\n            if predicate_result is not None:\n                for result_node in rhs_select(subresult):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "iterfind",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def iterfind(node, path):\n    selector_chain = _build_path_iterator(path)\n    result = iter((node,))\n    for select in selector_chain:\n        result = select(result)\n    return result\ndef find_first(node, path):\n    return _get_first_or_none(iterfind(node, path))\ndef find_all(node, path):\n    return list(iterfind(node, path))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "find_first",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def find_first(node, path):\n    return _get_first_or_none(iterfind(node, path))\ndef find_all(node, path):\n    return list(iterfind(node, path))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "find_all",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "def find_all(node, path):\n    return list(iterfind(node, path))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "path_tokenizer",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "path_tokenizer = re.compile(\n    r\"(\"\n    r\"'[^']*'|\\\"[^\\\"]*\\\"|\"\n    r\"//?|\"\n    r\"\\(\\)|\"\n    r\"==?|\"\n    r\"[/.*\\[\\]()@])|\"\n    r\"([^/\\[\\]()@=\\s]+)|\"\n    r\"\\s+\"\n    ).findall",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "operations",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "operations = {\n    \"@\":  handle_attribute,\n    \"\":   handle_name,\n    \"*\":  handle_star,\n    \".\":  handle_dot,\n    \"//\": handle_descendants,\n    \"[\":  handle_predicate,\n    }\nfunctions = {\n    'not' : handle_func_not",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "functions",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "peekOfCode": "functions = {\n    'not' : handle_func_not\n    }\ndef _build_path_iterator(path):\n    # parse pattern\n    stream = iter([ (special,text)\n                    for (special,text) in path_tokenizer(path)\n                    if special or text ])\n    try:\n        _next = stream.next",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TreePath",
        "documentation": {}
    },
    {
        "label": "TypedExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "class TypedExprNode(ExprNodes.ExprNode):\n    # Used for declaring assignments of a specified type without a known entry.\n    subexprs = []\n    def __init__(self, type, pos=None):\n        super(TypedExprNode, self).__init__(pos, type=type)\nobject_expr = TypedExprNode(py_object_type)\nclass MarkParallelAssignments(EnvTransform):\n    # Collects assignments inside parallel blocks prange, with parallel.\n    # Perhaps it's better to move it to ControlFlowAnalysis.\n    # tells us whether we're in a normal loop",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "MarkParallelAssignments",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "class MarkParallelAssignments(EnvTransform):\n    # Collects assignments inside parallel blocks prange, with parallel.\n    # Perhaps it's better to move it to ControlFlowAnalysis.\n    # tells us whether we're in a normal loop\n    in_loop = False\n    parallel_errors = False\n    def __init__(self, context):\n        # Track the parallel block scopes (with parallel, for i in prange())\n        self.parallel_block_stack = []\n        super(MarkParallelAssignments, self).__init__(context)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "MarkOverflowingArithmetic",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "class MarkOverflowingArithmetic(CythonTransform):\n    # It may be possible to integrate this with the above for\n    # performance improvements (though likely not worth it).\n    might_overflow = False\n    def __call__(self, root):\n        self.env_stack = []\n        self.env = root.scope\n        return super(MarkOverflowingArithmetic, self).__call__(root)\n    def visit_safe_node(self, node):\n        self.might_overflow, saved = False, self.might_overflow",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "PyObjectTypeInferer",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "class PyObjectTypeInferer(object):\n    \"\"\"\n    If it's not declared, it's a PyObject.\n    \"\"\"\n    def infer_types(self, scope):\n        \"\"\"\n        Given a dict of entries, map all unspecified types to a specified type.\n        \"\"\"\n        for name, entry in scope.entries.items():\n            if entry.type is unspecified_type:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "SimpleAssignmentTypeInferer",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "class SimpleAssignmentTypeInferer(object):\n    \"\"\"\n    Very basic type inference.\n    Note: in order to support cross-closure type inference, this must be\n    applies to nested scopes in top-down order.\n    \"\"\"\n    def set_entry_type(self, entry, entry_type):\n        entry.type = entry_type\n        for e in entry.all_entries():\n            e.type = entry_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "find_spanning_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "def find_spanning_type(type1, type2):\n    if type1 is type2:\n        result_type = type1\n    elif type1 is PyrexTypes.c_bint_type or type2 is PyrexTypes.c_bint_type:\n        # type inference can break the coercion back to a Python bool\n        # if it returns an arbitrary int type here\n        return py_object_type\n    else:\n        result_type = PyrexTypes.spanning_type(type1, type2)\n    if result_type in (PyrexTypes.c_double_type, PyrexTypes.c_float_type,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "simply_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "def simply_type(result_type, pos):\n    if result_type.is_reference:\n        result_type = result_type.ref_base_type\n    if result_type.is_const:\n        result_type = result_type.const_base_type\n    if result_type.is_cpp_class:\n        result_type.check_nullary_constructor(pos)\n    if result_type.is_array:\n        result_type = PyrexTypes.c_ptr_type(result_type.base_type)\n    return result_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "aggressive_spanning_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "def aggressive_spanning_type(types, might_overflow, pos, scope):\n    return simply_type(reduce(find_spanning_type, types), pos)\ndef safe_spanning_type(types, might_overflow, pos, scope):\n    result_type = simply_type(reduce(find_spanning_type, types), pos)\n    if result_type.is_pyobject:\n        # In theory, any specific Python type is always safe to\n        # infer. However, inferring str can cause some existing code\n        # to break, since we are also now much more strict about\n        # coercion from str to char *. See trac #553.\n        if result_type.name == 'str':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "safe_spanning_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "def safe_spanning_type(types, might_overflow, pos, scope):\n    result_type = simply_type(reduce(find_spanning_type, types), pos)\n    if result_type.is_pyobject:\n        # In theory, any specific Python type is always safe to\n        # infer. However, inferring str can cause some existing code\n        # to break, since we are also now much more strict about\n        # coercion from str to char *. See trac #553.\n        if result_type.name == 'str':\n            return py_object_type\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "get_type_inferer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "def get_type_inferer():\n    return SimpleAssignmentTypeInferer()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "object_expr",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "peekOfCode": "object_expr = TypedExprNode(py_object_type)\nclass MarkParallelAssignments(EnvTransform):\n    # Collects assignments inside parallel blocks prange, with parallel.\n    # Perhaps it's better to move it to ControlFlowAnalysis.\n    # tells us whether we're in a normal loop\n    in_loop = False\n    parallel_errors = False\n    def __init__(self, context):\n        # Track the parallel block scopes (with parallel, for i in prange())\n        self.parallel_block_stack = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeInference",
        "documentation": {}
    },
    {
        "label": "Signature",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class Signature(object):\n    #  Method slot signature descriptor.\n    #\n    #  has_dummy_arg      boolean\n    #  has_generic_args   boolean\n    #  fixed_arg_format   string\n    #  ret_format         string\n    #  error_value        string\n    #\n    #  The formats are strings made up of the following",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "SlotDescriptor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class SlotDescriptor(object):\n    #  Abstract base class for type slot descriptors.\n    #\n    #  slot_name    string           Member name of the slot in the type object\n    #  is_initialised_dynamically    Is initialised by code in the module init function\n    #  is_inherited                  Is inherited by subtypes (see PyType_Ready())\n    #  py3                           Indicates presence of slot in Python 3\n    #  py2                           Indicates presence of slot in Python 2\n    #  ifdef                         Full #ifdef string that slot is wrapped in. Using this causes py3, py2 and flags to be ignored.)\n    def __init__(self, slot_name, dynamic=False, inherited=False,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "FixedSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class FixedSlot(SlotDescriptor):\n    #  Descriptor for a type slot with a fixed value.\n    #\n    #  value        string\n    def __init__(self, slot_name, value, py3=True, py2=True, ifdef=None):\n        SlotDescriptor.__init__(self, slot_name, py3=py3, py2=py2, ifdef=ifdef)\n        self.value = value\n    def slot_code(self, scope):\n        return self.value\nclass EmptySlot(FixedSlot):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "EmptySlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class EmptySlot(FixedSlot):\n    #  Descriptor for a type slot whose value is always 0.\n    def __init__(self, slot_name, py3=True, py2=True, ifdef=None):\n        FixedSlot.__init__(self, slot_name, \"0\", py3=py3, py2=py2, ifdef=ifdef)\nclass MethodSlot(SlotDescriptor):\n    #  Type slot descriptor for a user-definable method.\n    #\n    #  signature    Signature\n    #  method_name  string           The __xxx__ name of the method\n    #  alternatives [string]         Alternative list of __xxx__ names for the method",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "MethodSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class MethodSlot(SlotDescriptor):\n    #  Type slot descriptor for a user-definable method.\n    #\n    #  signature    Signature\n    #  method_name  string           The __xxx__ name of the method\n    #  alternatives [string]         Alternative list of __xxx__ names for the method\n    def __init__(self, signature, slot_name, method_name, fallback=None,\n                 py3=True, py2=True, ifdef=None, inherited=True):\n        SlotDescriptor.__init__(self, slot_name, py3=py3, py2=py2,\n                                ifdef=ifdef, inherited=inherited)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "InternalMethodSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class InternalMethodSlot(SlotDescriptor):\n    #  Type slot descriptor for a method which is always\n    #  synthesized by Cython.\n    #\n    #  slot_name    string           Member name of the slot in the type object\n    def __init__(self, slot_name, **kargs):\n        SlotDescriptor.__init__(self, slot_name, **kargs)\n    def slot_code(self, scope):\n        return scope.mangle_internal(self.slot_name)\nclass GCDependentSlot(InternalMethodSlot):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "GCDependentSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class GCDependentSlot(InternalMethodSlot):\n    #  Descriptor for a slot whose value depends on whether\n    #  the type participates in GC.\n    def __init__(self, slot_name, **kargs):\n        InternalMethodSlot.__init__(self, slot_name, **kargs)\n    def slot_code(self, scope):\n        if not scope.needs_gc():\n            return \"0\"\n        if not scope.has_cyclic_pyobject_attrs:\n            # if the type does not have GC relevant object attributes, it can",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "GCClearReferencesSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class GCClearReferencesSlot(GCDependentSlot):\n    def slot_code(self, scope):\n        if scope.needs_tp_clear():\n            return GCDependentSlot.slot_code(self, scope)\n        return \"0\"\nclass ConstructorSlot(InternalMethodSlot):\n    #  Descriptor for tp_new and tp_dealloc.\n    def __init__(self, slot_name, method, **kargs):\n        InternalMethodSlot.__init__(self, slot_name, **kargs)\n        self.method = method",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ConstructorSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class ConstructorSlot(InternalMethodSlot):\n    #  Descriptor for tp_new and tp_dealloc.\n    def __init__(self, slot_name, method, **kargs):\n        InternalMethodSlot.__init__(self, slot_name, **kargs)\n        self.method = method\n    def slot_code(self, scope):\n        entry = scope.lookup_here(self.method)\n        if (self.slot_name != 'tp_new'\n                and scope.parent_type.base_type\n                and not scope.has_pyobject_attrs",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "SyntheticSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class SyntheticSlot(InternalMethodSlot):\n    #  Type slot descriptor for a synthesized method which\n    #  dispatches to one or more user-defined methods depending\n    #  on its arguments. If none of the relevant methods are\n    #  defined, the method will not be synthesized and an\n    #  alternative default value will be placed in the type\n    #  slot.\n    def __init__(self, slot_name, user_methods, default_value, **kargs):\n        InternalMethodSlot.__init__(self, slot_name, **kargs)\n        self.user_methods = user_methods",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "RichcmpSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class RichcmpSlot(MethodSlot):\n    def slot_code(self, scope):\n        entry = scope.lookup_here(self.method_name)\n        if entry and entry.is_special and entry.func_cname:\n            return entry.func_cname\n        elif scope.defines_any_special(richcmp_special_methods):\n            return scope.mangle_internal(self.slot_name)\n        else:\n            return \"0\"\nclass TypeFlagsSlot(SlotDescriptor):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "TypeFlagsSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class TypeFlagsSlot(SlotDescriptor):\n    #  Descriptor for the type flags slot.\n    def slot_code(self, scope):\n        value = \"Py_TPFLAGS_DEFAULT\"\n        if scope.directives['type_version_tag']:\n            # it's not in 'Py_TPFLAGS_DEFAULT' in Py2\n            value += \"|Py_TPFLAGS_HAVE_VERSION_TAG\"\n        else:\n            # it's enabled in 'Py_TPFLAGS_DEFAULT' in Py3\n            value = \"(%s&~Py_TPFLAGS_HAVE_VERSION_TAG)\" % value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "DocStringSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class DocStringSlot(SlotDescriptor):\n    #  Descriptor for the docstring slot.\n    def slot_code(self, scope):\n        doc = scope.doc\n        if doc is None:\n            return \"0\"\n        if doc.is_unicode:\n            doc = doc.as_utf8_string()\n        return doc.as_c_string_literal()\nclass SuiteSlot(SlotDescriptor):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "SuiteSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class SuiteSlot(SlotDescriptor):\n    #  Descriptor for a substructure of the type object.\n    #\n    #  sub_slots   [SlotDescriptor]\n    def __init__(self, sub_slots, slot_type, slot_name, ifdef=None):\n        SlotDescriptor.__init__(self, slot_name, ifdef=ifdef)\n        self.sub_slots = sub_slots\n        self.slot_type = slot_type\n        substructures.append(self)\n    def is_empty(self, scope):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "MethodTableSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class MethodTableSlot(SlotDescriptor):\n    #  Slot descriptor for the method table.\n    def slot_code(self, scope):\n        if scope.pyfunc_entries:\n            return scope.method_table_cname\n        else:\n            return \"0\"\nclass MemberTableSlot(SlotDescriptor):\n    #  Slot descriptor for the table of Python-accessible attributes.\n    def slot_code(self, scope):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "MemberTableSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class MemberTableSlot(SlotDescriptor):\n    #  Slot descriptor for the table of Python-accessible attributes.\n    def slot_code(self, scope):\n        return \"0\"\nclass GetSetSlot(SlotDescriptor):\n    #  Slot descriptor for the table of attribute get & set methods.\n    def slot_code(self, scope):\n        if scope.property_entries:\n            return scope.getset_table_cname\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "GetSetSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class GetSetSlot(SlotDescriptor):\n    #  Slot descriptor for the table of attribute get & set methods.\n    def slot_code(self, scope):\n        if scope.property_entries:\n            return scope.getset_table_cname\n        else:\n            return \"0\"\nclass BaseClassSlot(SlotDescriptor):\n    #  Slot descriptor for the base class slot.\n    def __init__(self, name):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "BaseClassSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class BaseClassSlot(SlotDescriptor):\n    #  Slot descriptor for the base class slot.\n    def __init__(self, name):\n        SlotDescriptor.__init__(self, name, dynamic = 1)\n    def generate_dynamic_init_code(self, scope, code):\n        base_type = scope.parent_type.base_type\n        if base_type:\n            code.putln(\"%s.%s = %s;\" % (\n                scope.parent_type.typeobj_cname,\n                self.slot_name,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "DictOffsetSlot",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "class DictOffsetSlot(SlotDescriptor):\n    #  Slot descriptor for a class' dict offset, for dynamic attributes.\n    def slot_code(self, scope):\n        dict_entry = scope.lookup_here(\"__dict__\") if not scope.is_closure_class_scope else None\n        if dict_entry and dict_entry.is_variable:\n            if getattr(dict_entry.type, 'cname', None) != 'PyDict_Type':\n                error(dict_entry.pos, \"__dict__ slot must be of type 'dict'\")\n                return \"0\"\n            type = scope.parent_type\n            if type.typedef_flag:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "get_special_method_signature",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "def get_special_method_signature(name):\n    #  Given a method name, if it is a special method,\n    #  return its signature, else return None.\n    slot = method_name_to_slot.get(name)\n    if slot:\n        return slot.signature\n    elif name in richcmp_special_methods:\n        return ibinaryfunc\n    else:\n        return None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "get_property_accessor_signature",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "def get_property_accessor_signature(name):\n    #  Return signature of accessor for an extension type\n    #  property, else None.\n    return property_accessor_signatures.get(name)\ndef get_base_slot_function(scope, slot):\n    #  Returns the function implementing this slot in the baseclass.\n    #  This is useful for enabling the compiler to optimize calls\n    #  that recursively climb the class hierarchy.\n    base_type = scope.parent_type.base_type\n    if scope.parent_scope is base_type.scope.parent_scope:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "get_base_slot_function",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "def get_base_slot_function(scope, slot):\n    #  Returns the function implementing this slot in the baseclass.\n    #  This is useful for enabling the compiler to optimize calls\n    #  that recursively climb the class hierarchy.\n    base_type = scope.parent_type.base_type\n    if scope.parent_scope is base_type.scope.parent_scope:\n        parent_slot = slot.slot_code(base_type.scope)\n        if parent_slot != '0':\n            entry = scope.parent_scope.lookup_here(scope.parent_type.base_type.name)\n            if entry.visibility != 'extern':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "get_slot_function",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "def get_slot_function(scope, slot):\n    #  Returns the function implementing this slot in the baseclass.\n    #  This is useful for enabling the compiler to optimize calls\n    #  that recursively climb the class hierarchy.\n    slot_code = slot.slot_code(scope)\n    if slot_code != '0':\n        entry = scope.parent_scope.lookup_here(scope.parent_type.name)\n        if entry.visibility != 'extern':\n            return slot_code\n    return None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "get_slot_by_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "def get_slot_by_name(slot_name):\n    # For now, only search the type struct, no referenced sub-structs.\n    for slot in slot_table:\n        if slot.slot_name == slot_name:\n            return slot\n    assert False, \"Slot not found: %s\" % slot_name\ndef get_slot_code_by_name(scope, slot_name):\n    slot = get_slot_by_name(slot_name)\n    return slot.slot_code(scope)\ndef is_reverse_number_slot(name):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "get_slot_code_by_name",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "def get_slot_code_by_name(scope, slot_name):\n    slot = get_slot_by_name(slot_name)\n    return slot.slot_code(scope)\ndef is_reverse_number_slot(name):\n    \"\"\"\n    Tries to identify __radd__ and friends (so the METH_COEXIST flag can be applied).\n    There's no great consequence if it inadvertently identifies a few other methods\n    so just use a simple rule rather than an exact list.\n    \"\"\"\n    if name.startswith(\"__r\") and name.endswith(\"__\"):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "is_reverse_number_slot",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "def is_reverse_number_slot(name):\n    \"\"\"\n    Tries to identify __radd__ and friends (so the METH_COEXIST flag can be applied).\n    There's no great consequence if it inadvertently identifies a few other methods\n    so just use a simple rule rather than an exact list.\n    \"\"\"\n    if name.startswith(\"__r\") and name.endswith(\"__\"):\n        forward_name = name.replace(\"r\", \"\", 1)\n        for meth in PyNumberMethods:\n            if getattr(meth, \"method_name\", None) == forward_name:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "invisible",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "invisible = ['__cinit__', '__dealloc__', '__richcmp__',\n             '__nonzero__', '__bool__']\nrichcmp_special_methods = ['__eq__', '__ne__', '__lt__', '__gt__', '__le__', '__ge__']\nclass Signature(object):\n    #  Method slot signature descriptor.\n    #\n    #  has_dummy_arg      boolean\n    #  has_generic_args   boolean\n    #  fixed_arg_format   string\n    #  ret_format         string",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "richcmp_special_methods",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "richcmp_special_methods = ['__eq__', '__ne__', '__lt__', '__gt__', '__le__', '__ge__']\nclass Signature(object):\n    #  Method slot signature descriptor.\n    #\n    #  has_dummy_arg      boolean\n    #  has_generic_args   boolean\n    #  fixed_arg_format   string\n    #  ret_format         string\n    #  error_value        string\n    #",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "substructures",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "substructures = []   # List of all SuiteSlot instances\nclass MethodTableSlot(SlotDescriptor):\n    #  Slot descriptor for the method table.\n    def slot_code(self, scope):\n        if scope.pyfunc_entries:\n            return scope.method_table_cname\n        else:\n            return \"0\"\nclass MemberTableSlot(SlotDescriptor):\n    #  Slot descriptor for the table of Python-accessible attributes.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "method_name_to_slot",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "method_name_to_slot = {}\n## The following slots are (or could be) initialised with an\n## extern function pointer.\n#\n#slots_initialised_from_extern = (\n#    \"tp_free\",\n#)\n#------------------------------------------------------------------------------------------\n#\n#  Utility functions for accessing slot table data structures",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "#slots_initialised_from_extern",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "#slots_initialised_from_extern = (\n#    \"tp_free\",\n#)\n#------------------------------------------------------------------------------------------\n#\n#  Utility functions for accessing slot table data structures\n#\n#------------------------------------------------------------------------------------------\ndef get_special_method_signature(name):\n    #  Given a method name, if it is a special method,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "pyfunction_signature",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "pyfunction_signature = Signature(\"-*\", \"O\")\npymethod_signature = Signature(\"T*\", \"O\")\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for simple Python functions.\n#\n#------------------------------------------------------------------------------------------\npyfunction_noargs = Signature(\"-\", \"O\")\npyfunction_onearg = Signature(\"-O\", \"O\")\n#------------------------------------------------------------------------------------------",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "pymethod_signature",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "pymethod_signature = Signature(\"T*\", \"O\")\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for simple Python functions.\n#\n#------------------------------------------------------------------------------------------\npyfunction_noargs = Signature(\"-\", \"O\")\npyfunction_onearg = Signature(\"-O\", \"O\")\n#------------------------------------------------------------------------------------------\n#",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "pyfunction_noargs",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "pyfunction_noargs = Signature(\"-\", \"O\")\npyfunction_onearg = Signature(\"-O\", \"O\")\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for the various kinds of function that\n#  can appear in the type object and its substructures.\n#\n#------------------------------------------------------------------------------------------\nunaryfunc = Signature(\"T\", \"O\")            # typedef PyObject * (*unaryfunc)(PyObject *);\nbinaryfunc = Signature(\"OO\", \"O\")          # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "pyfunction_onearg",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "pyfunction_onearg = Signature(\"-O\", \"O\")\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for the various kinds of function that\n#  can appear in the type object and its substructures.\n#\n#------------------------------------------------------------------------------------------\nunaryfunc = Signature(\"T\", \"O\")            # typedef PyObject * (*unaryfunc)(PyObject *);\nbinaryfunc = Signature(\"OO\", \"O\")          # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\nibinaryfunc = Signature(\"TO\", \"O\")         # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "unaryfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "unaryfunc = Signature(\"T\", \"O\")            # typedef PyObject * (*unaryfunc)(PyObject *);\nbinaryfunc = Signature(\"OO\", \"O\")          # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\nibinaryfunc = Signature(\"TO\", \"O\")         # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\nternaryfunc = Signature(\"OOO\", \"O\")        # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\niternaryfunc = Signature(\"TOO\", \"O\")       # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ncallfunc = Signature(\"T*\", \"O\")            # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ninquiry = Signature(\"T\", \"i\")              # typedef int (*inquiry)(PyObject *);\nlenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "binaryfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "binaryfunc = Signature(\"OO\", \"O\")          # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\nibinaryfunc = Signature(\"TO\", \"O\")         # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\nternaryfunc = Signature(\"OOO\", \"O\")        # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\niternaryfunc = Signature(\"TOO\", \"O\")       # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ncallfunc = Signature(\"T*\", \"O\")            # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ninquiry = Signature(\"T\", \"i\")              # typedef int (*inquiry)(PyObject *);\nlenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ibinaryfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "ibinaryfunc = Signature(\"TO\", \"O\")         # typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\nternaryfunc = Signature(\"OOO\", \"O\")        # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\niternaryfunc = Signature(\"TOO\", \"O\")       # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ncallfunc = Signature(\"T*\", \"O\")            # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ninquiry = Signature(\"T\", \"i\")              # typedef int (*inquiry)(PyObject *);\nlenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ternaryfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "ternaryfunc = Signature(\"OOO\", \"O\")        # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\niternaryfunc = Signature(\"TOO\", \"O\")       # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ncallfunc = Signature(\"T*\", \"O\")            # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ninquiry = Signature(\"T\", \"i\")              # typedef int (*inquiry)(PyObject *);\nlenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "iternaryfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "iternaryfunc = Signature(\"TOO\", \"O\")       # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ncallfunc = Signature(\"T*\", \"O\")            # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ninquiry = Signature(\"T\", \"i\")              # typedef int (*inquiry)(PyObject *);\nlenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "callfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "callfunc = Signature(\"T*\", \"O\")            # typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ninquiry = Signature(\"T\", \"i\")              # typedef int (*inquiry)(PyObject *);\nlenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "inquiry",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "inquiry = Signature(\"T\", \"i\")              # typedef int (*inquiry)(PyObject *);\nlenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "lenfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "lenfunc = Signature(\"T\", \"z\")              # typedef Py_ssize_t (*lenfunc)(PyObject *);\n                                           # typedef int (*coercion)(PyObject **, PyObject **);\nintargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "intargfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "intargfunc = Signature(\"Ti\", \"O\")          # typedef PyObject *(*intargfunc)(PyObject *, int);\nssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ssizeargfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "ssizeargfunc = Signature(\"Tz\", \"O\")        # typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\nintintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "intintargfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "intintargfunc = Signature(\"Tii\", \"O\")      # typedef PyObject *(*intintargfunc)(PyObject *, int, int);\nssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ssizessizeargfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "ssizessizeargfunc = Signature(\"Tzz\", \"O\")  # typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\nintobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "intobjargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "intobjargproc = Signature(\"TiO\", 'r')      # typedef int(*intobjargproc)(PyObject *, int, PyObject *);\nssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ssizeobjargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "ssizeobjargproc = Signature(\"TzO\", 'r')    # typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\nintintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "intintobjargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "intintobjargproc = Signature(\"TiiO\", 'r')  # typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);\nssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ssizessizeobjargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "ssizessizeobjargproc = Signature(\"TzzO\", 'r') # typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\nintintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "intintargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "intintargproc = Signature(\"Tii\", 'r')\nssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "ssizessizeargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "ssizessizeargproc = Signature(\"Tzz\", 'r')\nobjargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "objargfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "objargfunc = Signature(\"TO\", \"O\")\nobjobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);\ndestructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "objobjargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "objobjargproc = Signature(\"TOO\", 'r')      # typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);\nreadbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);\ndestructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);\n# printfunc = Signature(\"TFi\", 'r')        # typedef int (*printfunc)(PyObject *, FILE *, int);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "readbufferproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "readbufferproc = Signature(\"TzP\", \"z\")     # typedef Py_ssize_t (*readbufferproc)(PyObject *, Py_ssize_t, void **);\nwritebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);\ndestructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);\n# printfunc = Signature(\"TFi\", 'r')        # typedef int (*printfunc)(PyObject *, FILE *, int);\n                                           # typedef PyObject *(*getattrfunc)(PyObject *, char *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "writebufferproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "writebufferproc = Signature(\"TzP\", \"z\")    # typedef Py_ssize_t (*writebufferproc)(PyObject *, Py_ssize_t, void **);\nsegcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);\ndestructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);\n# printfunc = Signature(\"TFi\", 'r')        # typedef int (*printfunc)(PyObject *, FILE *, int);\n                                           # typedef PyObject *(*getattrfunc)(PyObject *, char *);\ngetattrofunc = Signature(\"TO\", \"O\")        # typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "segcountproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "segcountproc = Signature(\"TZ\", \"z\")        # typedef Py_ssize_t (*segcountproc)(PyObject *, Py_ssize_t *);\ncharbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);\ndestructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);\n# printfunc = Signature(\"TFi\", 'r')        # typedef int (*printfunc)(PyObject *, FILE *, int);\n                                           # typedef PyObject *(*getattrfunc)(PyObject *, char *);\ngetattrofunc = Signature(\"TO\", \"O\")        # typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);\n                                           # typedef int (*setattrfunc)(PyObject *, char *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "charbufferproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "charbufferproc = Signature(\"TzS\", \"z\")     # typedef Py_ssize_t (*charbufferproc)(PyObject *, Py_ssize_t, char **);\nobjargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);\ndestructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);\n# printfunc = Signature(\"TFi\", 'r')        # typedef int (*printfunc)(PyObject *, FILE *, int);\n                                           # typedef PyObject *(*getattrfunc)(PyObject *, char *);\ngetattrofunc = Signature(\"TO\", \"O\")        # typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);\n                                           # typedef int (*setattrfunc)(PyObject *, char *, PyObject *);\nsetattrofunc = Signature(\"TOO\", 'r')       # typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "objargproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "objargproc = Signature(\"TO\", 'r')          # typedef int (*objobjproc)(PyObject *, PyObject *);\n                                           # typedef int (*visitproc)(PyObject *, void *);\n                                           # typedef int (*traverseproc)(PyObject *, visitproc, void *);\ndestructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);\n# printfunc = Signature(\"TFi\", 'r')        # typedef int (*printfunc)(PyObject *, FILE *, int);\n                                           # typedef PyObject *(*getattrfunc)(PyObject *, char *);\ngetattrofunc = Signature(\"TO\", \"O\")        # typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);\n                                           # typedef int (*setattrfunc)(PyObject *, char *, PyObject *);\nsetattrofunc = Signature(\"TOO\", 'r')       # typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);\ndelattrofunc = Signature(\"TO\", 'r')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "destructor",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "destructor = Signature(\"T\", \"v\")           # typedef void (*destructor)(PyObject *);\n# printfunc = Signature(\"TFi\", 'r')        # typedef int (*printfunc)(PyObject *, FILE *, int);\n                                           # typedef PyObject *(*getattrfunc)(PyObject *, char *);\ngetattrofunc = Signature(\"TO\", \"O\")        # typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);\n                                           # typedef int (*setattrfunc)(PyObject *, char *, PyObject *);\nsetattrofunc = Signature(\"TOO\", 'r')       # typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);\ndelattrofunc = Signature(\"TO\", 'r')\ncmpfunc = Signature(\"TO\", \"i\")             # typedef int (*cmpfunc)(PyObject *, PyObject *);\nreprfunc = Signature(\"T\", \"O\")             # typedef PyObject *(*reprfunc)(PyObject *);\nhashfunc = Signature(\"T\", \"h\")             # typedef Py_hash_t (*hashfunc)(PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "getattrofunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "getattrofunc = Signature(\"TO\", \"O\")        # typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);\n                                           # typedef int (*setattrfunc)(PyObject *, char *, PyObject *);\nsetattrofunc = Signature(\"TOO\", 'r')       # typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);\ndelattrofunc = Signature(\"TO\", 'r')\ncmpfunc = Signature(\"TO\", \"i\")             # typedef int (*cmpfunc)(PyObject *, PyObject *);\nreprfunc = Signature(\"T\", \"O\")             # typedef PyObject *(*reprfunc)(PyObject *);\nhashfunc = Signature(\"T\", \"h\")             # typedef Py_hash_t (*hashfunc)(PyObject *);\nrichcmpfunc = Signature(\"TOi\", \"O\")        # typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ngetiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "setattrofunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "setattrofunc = Signature(\"TOO\", 'r')       # typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);\ndelattrofunc = Signature(\"TO\", 'r')\ncmpfunc = Signature(\"TO\", \"i\")             # typedef int (*cmpfunc)(PyObject *, PyObject *);\nreprfunc = Signature(\"T\", \"O\")             # typedef PyObject *(*reprfunc)(PyObject *);\nhashfunc = Signature(\"T\", \"h\")             # typedef Py_hash_t (*hashfunc)(PyObject *);\nrichcmpfunc = Signature(\"TOi\", \"O\")        # typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ngetiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "delattrofunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "delattrofunc = Signature(\"TO\", 'r')\ncmpfunc = Signature(\"TO\", \"i\")             # typedef int (*cmpfunc)(PyObject *, PyObject *);\nreprfunc = Signature(\"T\", \"O\")             # typedef PyObject *(*reprfunc)(PyObject *);\nhashfunc = Signature(\"T\", \"h\")             # typedef Py_hash_t (*hashfunc)(PyObject *);\nrichcmpfunc = Signature(\"TOi\", \"O\")        # typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ngetiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "cmpfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "cmpfunc = Signature(\"TO\", \"i\")             # typedef int (*cmpfunc)(PyObject *, PyObject *);\nreprfunc = Signature(\"T\", \"O\")             # typedef PyObject *(*reprfunc)(PyObject *);\nhashfunc = Signature(\"T\", \"h\")             # typedef Py_hash_t (*hashfunc)(PyObject *);\nrichcmpfunc = Signature(\"TOi\", \"O\")        # typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ngetiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "reprfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "reprfunc = Signature(\"T\", \"O\")             # typedef PyObject *(*reprfunc)(PyObject *);\nhashfunc = Signature(\"T\", \"h\")             # typedef Py_hash_t (*hashfunc)(PyObject *);\nrichcmpfunc = Signature(\"TOi\", \"O\")        # typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ngetiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "hashfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "hashfunc = Signature(\"T\", \"h\")             # typedef Py_hash_t (*hashfunc)(PyObject *);\nrichcmpfunc = Signature(\"TOi\", \"O\")        # typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ngetiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "richcmpfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "richcmpfunc = Signature(\"TOi\", \"O\")        # typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ngetiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);\ngetbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "getiterfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "getiterfunc = Signature(\"T\", \"O\")          # typedef PyObject *(*getiterfunc) (PyObject *);\niternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);\ngetbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);\nreleasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "iternextfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "iternextfunc = Signature(\"T\", \"O\")         # typedef PyObject *(*iternextfunc) (PyObject *);\ndescrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);\ngetbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);\nreleasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);\n#------------------------------------------------------------------------------------------",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "descrgetfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "descrgetfunc = Signature(\"TOO\", \"O\")       # typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ndescrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);\ngetbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);\nreleasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);\n#------------------------------------------------------------------------------------------\n#",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "descrsetfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "descrsetfunc = Signature(\"TOO\", 'r')       # typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ndescrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);\ngetbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);\nreleasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for accessor methods of properties.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "descrdelfunc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "descrdelfunc = Signature(\"TO\", 'r')\ninitproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);\ngetbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);\nreleasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for accessor methods of properties.\n#",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "initproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "initproc = Signature(\"T*\", 'r')            # typedef int (*initproc)(PyObject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);\n                                           # typedef PyObject *(*allocfunc)(struct _typeobject *, int);\ngetbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);\nreleasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for accessor methods of properties.\n#\n#------------------------------------------------------------------------------------------",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "getbufferproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "getbufferproc = Signature(\"TBi\", \"r\")      # typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);\nreleasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for accessor methods of properties.\n#\n#------------------------------------------------------------------------------------------\nproperty_accessor_signatures = {\n    '__get__': Signature(\"T\", \"O\"),\n    '__set__': Signature(\"TO\", 'r'),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "releasebufferproc",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "releasebufferproc = Signature(\"TB\", \"v\")   # typedef void (*releasebufferproc)(PyObject *, Py_buffer *);\n#------------------------------------------------------------------------------------------\n#\n#  Signatures for accessor methods of properties.\n#\n#------------------------------------------------------------------------------------------\nproperty_accessor_signatures = {\n    '__get__': Signature(\"T\", \"O\"),\n    '__set__': Signature(\"TO\", 'r'),\n    '__del__': Signature(\"T\", 'r')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "property_accessor_signatures",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "property_accessor_signatures = {\n    '__get__': Signature(\"T\", \"O\"),\n    '__set__': Signature(\"TO\", 'r'),\n    '__del__': Signature(\"T\", 'r')\n}\n#------------------------------------------------------------------------------------------\n#\n#  Descriptor tables for the slots of the various type object\n#  substructures, in the order they appear in the structure.\n#",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "PyNumberMethods_Py3_GUARD",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "PyNumberMethods_Py3_GUARD = \"PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)\"\nPyNumberMethods = (\n    MethodSlot(binaryfunc, \"nb_add\", \"__add__\"),\n    MethodSlot(binaryfunc, \"nb_subtract\", \"__sub__\"),\n    MethodSlot(binaryfunc, \"nb_multiply\", \"__mul__\"),\n    MethodSlot(binaryfunc, \"nb_divide\", \"__div__\", ifdef = PyNumberMethods_Py3_GUARD),\n    MethodSlot(binaryfunc, \"nb_remainder\", \"__mod__\"),\n    MethodSlot(binaryfunc, \"nb_divmod\", \"__divmod__\"),\n    MethodSlot(ternaryfunc, \"nb_power\", \"__pow__\"),\n    MethodSlot(unaryfunc, \"nb_negative\", \"__neg__\"),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "PyNumberMethods",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "PyNumberMethods = (\n    MethodSlot(binaryfunc, \"nb_add\", \"__add__\"),\n    MethodSlot(binaryfunc, \"nb_subtract\", \"__sub__\"),\n    MethodSlot(binaryfunc, \"nb_multiply\", \"__mul__\"),\n    MethodSlot(binaryfunc, \"nb_divide\", \"__div__\", ifdef = PyNumberMethods_Py3_GUARD),\n    MethodSlot(binaryfunc, \"nb_remainder\", \"__mod__\"),\n    MethodSlot(binaryfunc, \"nb_divmod\", \"__divmod__\"),\n    MethodSlot(ternaryfunc, \"nb_power\", \"__pow__\"),\n    MethodSlot(unaryfunc, \"nb_negative\", \"__neg__\"),\n    MethodSlot(unaryfunc, \"nb_positive\", \"__pos__\"),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "PySequenceMethods",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "PySequenceMethods = (\n    MethodSlot(lenfunc, \"sq_length\", \"__len__\"),\n    EmptySlot(\"sq_concat\"), # nb_add used instead\n    EmptySlot(\"sq_repeat\"), # nb_multiply used instead\n    SyntheticSlot(\"sq_item\", [\"__getitem__\"], \"0\"),    #EmptySlot(\"sq_item\"),   # mp_subscript used instead\n    MethodSlot(ssizessizeargfunc, \"sq_slice\", \"__getslice__\"),\n    EmptySlot(\"sq_ass_item\"), # mp_ass_subscript used instead\n    SyntheticSlot(\"sq_ass_slice\", [\"__setslice__\", \"__delslice__\"], \"0\"),\n    MethodSlot(cmpfunc, \"sq_contains\", \"__contains__\"),\n    EmptySlot(\"sq_inplace_concat\"), # nb_inplace_add used instead",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "PyMappingMethods",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "PyMappingMethods = (\n    MethodSlot(lenfunc, \"mp_length\", \"__len__\"),\n    MethodSlot(objargfunc, \"mp_subscript\", \"__getitem__\"),\n    SyntheticSlot(\"mp_ass_subscript\", [\"__setitem__\", \"__delitem__\"], \"0\"),\n)\nPyBufferProcs = (\n    MethodSlot(readbufferproc, \"bf_getreadbuffer\", \"__getreadbuffer__\", py3 = False),\n    MethodSlot(writebufferproc, \"bf_getwritebuffer\", \"__getwritebuffer__\", py3 = False),\n    MethodSlot(segcountproc, \"bf_getsegcount\", \"__getsegcount__\", py3 = False),\n    MethodSlot(charbufferproc, \"bf_getcharbuffer\", \"__getcharbuffer__\", py3 = False),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "PyBufferProcs",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "PyBufferProcs = (\n    MethodSlot(readbufferproc, \"bf_getreadbuffer\", \"__getreadbuffer__\", py3 = False),\n    MethodSlot(writebufferproc, \"bf_getwritebuffer\", \"__getwritebuffer__\", py3 = False),\n    MethodSlot(segcountproc, \"bf_getsegcount\", \"__getsegcount__\", py3 = False),\n    MethodSlot(charbufferproc, \"bf_getcharbuffer\", \"__getcharbuffer__\", py3 = False),\n    MethodSlot(getbufferproc, \"bf_getbuffer\", \"__getbuffer__\"),\n    MethodSlot(releasebufferproc, \"bf_releasebuffer\", \"__releasebuffer__\")\n)\nPyAsyncMethods = (\n    MethodSlot(unaryfunc, \"am_await\", \"__await__\"),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "PyAsyncMethods",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "PyAsyncMethods = (\n    MethodSlot(unaryfunc, \"am_await\", \"__await__\"),\n    MethodSlot(unaryfunc, \"am_aiter\", \"__aiter__\"),\n    MethodSlot(unaryfunc, \"am_anext\", \"__anext__\"),\n    EmptySlot(\"am_send\", ifdef=\"PY_VERSION_HEX >= 0x030A00A3\"),\n)\n#------------------------------------------------------------------------------------------\n#\n#  The main slot table. This table contains descriptors for all the\n#  top-level type slots, beginning with tp_dealloc, in the order they",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "slot_table",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "slot_table = (\n    ConstructorSlot(\"tp_dealloc\", '__dealloc__'),\n    EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX < 0x030800b4\"),\n    EmptySlot(\"tp_vectorcall_offset\", ifdef=\"PY_VERSION_HEX >= 0x030800b4\"),\n    EmptySlot(\"tp_getattr\"),\n    EmptySlot(\"tp_setattr\"),\n    # tp_compare (Py2) / tp_reserved (Py3<3.5) / tp_as_async (Py3.5+) is always used as tp_as_async in Py3\n    MethodSlot(cmpfunc, \"tp_compare\", \"__cmp__\", ifdef=\"PY_MAJOR_VERSION < 3\"),\n    SuiteSlot(PyAsyncMethods, \"__Pyx_PyAsyncMethodsStruct\", \"tp_as_async\", ifdef=\"PY_MAJOR_VERSION >= 3\"),\n    MethodSlot(reprfunc, \"tp_repr\", \"__repr__\"),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "method_keywords",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "peekOfCode": "method_keywords = \"METH_KEYWORDS\"\nmethod_coexist  = \"METH_COEXIST\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.TypeSlots",
        "documentation": {}
    },
    {
        "label": "NonManglingModuleScope",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilityCode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilityCode",
        "peekOfCode": "class NonManglingModuleScope(Symtab.ModuleScope):\n    def __init__(self, prefix, *args, **kw):\n        self.prefix = prefix\n        self.cython_scope = None\n        self.cpp = kw.pop('cpp', False)\n        Symtab.ModuleScope.__init__(self, *args, **kw)\n    def add_imported_entry(self, name, entry, pos):\n        entry.used = True\n        return super(NonManglingModuleScope, self).add_imported_entry(name, entry, pos)\n    def mangle(self, prefix, name=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilityCode",
        "documentation": {}
    },
    {
        "label": "CythonUtilityCodeContext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilityCode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilityCode",
        "peekOfCode": "class CythonUtilityCodeContext(StringParseContext):\n    scope = None\n    def find_module(self, module_name, relative_to=None, pos=None, need_pxd=True, absolute_fallback=True):\n        if relative_to:\n            raise AssertionError(\"Relative imports not supported in utility code.\")\n        if module_name != self.module_name:\n            if module_name not in self.modules:\n                raise AssertionError(\"Only the cython cimport is supported.\")\n            else:\n                return self.modules[module_name]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilityCode",
        "documentation": {}
    },
    {
        "label": "CythonUtilityCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilityCode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilityCode",
        "peekOfCode": "class CythonUtilityCode(Code.UtilityCodeBase):\n    \"\"\"\n    Utility code written in the Cython language itself.\n    The @cname decorator can set the cname for a function, method of cdef class.\n    Functions decorated with @cname('c_func_name') get the given cname.\n    For cdef classes the rules are as follows:\n        obj struct      -> <cname>_obj\n        obj type ptr    -> <cname>_type\n        methods         -> <class_cname>_<method_cname>\n    For methods the cname decorator is optional, but without the decorator the",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilityCode",
        "documentation": {}
    },
    {
        "label": "declare_declarations_in_scope",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilityCode",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilityCode",
        "peekOfCode": "def declare_declarations_in_scope(declaration_string, env, private_type=True,\n                                  *args, **kwargs):\n    \"\"\"\n    Declare some declarations given as Cython code in declaration_string\n    in scope env.\n    \"\"\"\n    CythonUtilityCode(declaration_string, *args, **kwargs).declare_in_scope(env)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilityCode",
        "documentation": {}
    },
    {
        "label": "TempHandle",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class TempHandle(object):\n    # THIS IS DEPRECATED, USE LetRefNode instead\n    temp = None\n    needs_xdecref = False\n    def __init__(self, type, needs_cleanup=None):\n        self.type = type\n        if needs_cleanup is None:\n            self.needs_cleanup = type.is_pyobject\n        else:\n            self.needs_cleanup = needs_cleanup",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "TempRefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class TempRefNode(AtomicExprNode):\n    # THIS IS DEPRECATED, USE LetRefNode instead\n    # handle   TempHandle\n    def analyse_types(self, env):\n        assert self.type == self.handle.type\n        return self\n    def analyse_target_types(self, env):\n        assert self.type == self.handle.type\n        return self\n    def analyse_target_declaration(self, env):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "TempsBlockNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class TempsBlockNode(Node):\n    # THIS IS DEPRECATED, USE LetNode instead\n    \"\"\"\n    Creates a block which allocates temporary variables.\n    This is used by transforms to output constructs that need\n    to make use of a temporary variable. Simply pass the types\n    of the needed temporaries to the constructor.\n    The variables can be referred to using a TempRefNode\n    (which can be constructed by calling get_ref_node).\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "ResultRefNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class ResultRefNode(AtomicExprNode):\n    # A reference to the result of an expression.  The result_code\n    # must be set externally (usually a temp name).\n    subexprs = []\n    lhs_of_first_assignment = False\n    def __init__(self, expression=None, pos=None, type=None, may_hold_none=True, is_temp=False):\n        self.expression = expression\n        self.pos = None\n        self.may_hold_none = may_hold_none\n        if expression is not None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "LetNodeMixin",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class LetNodeMixin:\n    def set_temp_expr(self, lazy_temp):\n        self.lazy_temp = lazy_temp\n        self.temp_expression = lazy_temp.expression\n    def setup_temp_expr(self, code):\n        self.temp_expression.generate_evaluation_code(code)\n        self.temp_type = self.temp_expression.type\n        if self.temp_type.is_array:\n            self.temp_type = c_ptr_type(self.temp_type.base_type)\n        self._result_in_temp = self.temp_expression.result_in_temp()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "EvalWithTempExprNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class EvalWithTempExprNode(ExprNodes.ExprNode, LetNodeMixin):\n    # A wrapper around a subexpression that moves an expression into a\n    # temp variable and provides it to the subexpression.\n    subexprs = ['temp_expression', 'subexpression']\n    def __init__(self, lazy_temp, subexpression):\n        self.set_temp_expr(lazy_temp)\n        self.pos = subexpression.pos\n        self.subexpression = subexpression\n        # if called after type analysis, we already know the type here\n        self.type = self.subexpression.type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "LetNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class LetNode(Nodes.StatNode, LetNodeMixin):\n    # Implements a local temporary variable scope. Imagine this\n    # syntax being present:\n    # let temp = VALUE:\n    #     BLOCK (can modify temp)\n    #     if temp is an object, decref\n    #\n    # Usually used after analysis phase, but forwards analysis methods\n    # to its children\n    child_attrs = ['temp_expression', 'body']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "TempResultFromStatNode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "class TempResultFromStatNode(ExprNodes.ExprNode):\n    # An ExprNode wrapper around a StatNode that executes the StatNode\n    # body.  Requires a ResultRefNode that it sets up to refer to its\n    # own temp result.  The StatNode must assign a value to the result\n    # node, which then becomes the result of this node.\n    subexprs = []\n    child_attrs = ['body']\n    def __init__(self, result_ref, body):\n        self.result_ref = result_ref\n        self.pos = body.pos",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "LetRefNode",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "peekOfCode": "LetRefNode = ResultRefNode\nclass LetNode(Nodes.StatNode, LetNodeMixin):\n    # Implements a local temporary variable scope. Imagine this\n    # syntax being present:\n    # let temp = VALUE:\n    #     BLOCK (can modify temp)\n    #     if temp is an object, decref\n    #\n    # Usually used after analysis phase, but forwards analysis methods\n    # to its children",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.UtilNodes",
        "documentation": {}
    },
    {
        "label": "watermark",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Version",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Version",
        "peekOfCode": "watermark = str(version)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Version",
        "documentation": {}
    },
    {
        "label": "TreeVisitor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class TreeVisitor(object):\n    \"\"\"\n    Base class for writing visitors for a Cython tree, contains utilities for\n    recursing such trees using visitors. Each node is\n    expected to have a child_attrs iterable containing the names of attributes\n    containing child nodes or lists of child nodes. Lists are not considered\n    part of the tree structure (i.e. contained nodes are considered direct\n    children of the parent node).\n    visit_children visits each of the children of a given node (see the visit_children\n    documentation). When recursing the tree using visit_children, an attribute",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "VisitorTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class VisitorTransform(TreeVisitor):\n    \"\"\"\n    A tree transform is a base class for visitors that wants to do stream\n    processing of the structure (rather than attributes etc.) of a tree.\n    It implements __call__ to simply visit the argument node.\n    It requires the visitor methods to return the nodes which should take\n    the place of the visited node in the result tree (which can be the same\n    or one or more replacement). Specifically, if the return value from\n    a visitor method is:\n    - [] or None; the visited node will be removed (set to None if an attribute and",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "CythonTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class CythonTransform(VisitorTransform):\n    \"\"\"\n    Certain common conventions and utilities for Cython transforms.\n     - Sets up the context of the pipeline in self.context\n     - Tracks directives in effect in self.current_directives\n    \"\"\"\n    def __init__(self, context):\n        super(CythonTransform, self).__init__()\n        self.context = context\n    def __call__(self, node):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "ScopeTrackingTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class ScopeTrackingTransform(CythonTransform):\n    # Keeps track of type of scopes\n    #scope_type: can be either of 'module', 'function', 'cclass', 'pyclass', 'struct'\n    #scope_node: the node that owns the current scope\n    def visit_ModuleNode(self, node):\n        self.scope_type = 'module'\n        self.scope_node = node\n        self._process_children(node)\n        return node\n    def visit_scope(self, node, scope_type):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "EnvTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class EnvTransform(CythonTransform):\n    \"\"\"\n    This transformation keeps a stack of the environments.\n    \"\"\"\n    def __call__(self, root):\n        self.env_stack = []\n        self.enter_scope(root, root.scope)\n        return super(EnvTransform, self).__call__(root)\n    def current_env(self):\n        return self.env_stack[-1][1]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "NodeRefCleanupMixin",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class NodeRefCleanupMixin(object):\n    \"\"\"\n    Clean up references to nodes that were replaced.\n    NOTE: this implementation assumes that the replacement is\n    done first, before hitting any further references during\n    normal tree traversal.  This needs to be arranged by calling\n    \"self.visitchildren()\" at a proper place in the transform\n    and by ordering the \"child_attrs\" of nodes appropriately.\n    \"\"\"\n    def __init__(self, *args):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "MethodDispatcherTransform",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class MethodDispatcherTransform(EnvTransform):\n    \"\"\"\n    Base class for transformations that want to intercept on specific\n    builtin functions or methods of builtin types, including special\n    methods triggered by Python operators.  Must run after declaration\n    analysis when entries were assigned.\n    Naming pattern for handler methods is as follows:\n    * builtin functions: _handle_(general|simple|any)_function_NAME\n    * builtin methods: _handle_(general|simple|any)_method_TYPENAME_METHODNAME\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "RecursiveNodeReplacer",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class RecursiveNodeReplacer(VisitorTransform):\n    \"\"\"\n    Recursively replace all occurrences of a node in a subtree by\n    another node.\n    \"\"\"\n    def __init__(self, orig_node, new_node):\n        super(RecursiveNodeReplacer, self).__init__()\n        self.orig_node, self.new_node = orig_node, new_node\n    def visit_CloneNode(self, node):\n        if node is self.orig_node:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "NodeFinder",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class NodeFinder(TreeVisitor):\n    \"\"\"\n    Find out if a node appears in a subtree.\n    \"\"\"\n    def __init__(self, node):\n        super(NodeFinder, self).__init__()\n        self.node = node\n        self.found = False\n    def visit_Node(self, node):\n        if self.found:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "PrintTree",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "peekOfCode": "class PrintTree(TreeVisitor):\n    \"\"\"Prints a representation of the tree to standard output.\n    Subclass and override repr_of to provide more information\n    about nodes. \"\"\"\n    def __init__(self, start=None, end=None):\n        TreeVisitor.__init__(self)\n        self._indent = \"\"\n        if start is not None or end is not None:\n            self._line_range = (start or 0, end or 2**30)\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "recursively_replace_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "peekOfCode": "def recursively_replace_node(tree, old_node, new_node):\n    replace_in = RecursiveNodeReplacer(old_node, new_node)\n    replace_in(tree)\nclass NodeFinder(TreeVisitor):\n    \"\"\"\n    Find out if a node appears in a subtree.\n    \"\"\"\n    def __init__(self, node):\n        super(NodeFinder, self).__init__()\n        self.node = node",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "tree_contains",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "peekOfCode": "def tree_contains(tree, node):\n    finder = NodeFinder(node)\n    finder.visit(tree)\n    return finder.found\n# Utils\ndef replace_node(ptr, value):\n    \"\"\"Replaces a node. ptr is of the form used on the access path stack\n    (parent, attrname, listidx|None)\n    \"\"\"\n    parent, attrname, listidx = ptr",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "replace_node",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "peekOfCode": "def replace_node(ptr, value):\n    \"\"\"Replaces a node. ptr is of the form used on the access path stack\n    (parent, attrname, listidx|None)\n    \"\"\"\n    parent, attrname, listidx = ptr\n    if listidx is None:\n        setattr(parent, attrname, value)\n    else:\n        getattr(parent, attrname)[listidx] = value\nclass PrintTree(TreeVisitor):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "find_special_method_for_binary_operator",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "peekOfCode": "find_special_method_for_binary_operator = {\n    '<':  '__lt__',\n    '<=': '__le__',\n    '==': '__eq__',\n    '!=': '__ne__',\n    '>=': '__ge__',\n    '>':  '__gt__',\n    '+':  '__add__',\n    '&':  '__and__',\n    '/':  '__div__',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "find_special_method_for_unary_operator",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "peekOfCode": "find_special_method_for_unary_operator = {\n    'not': '__not__',\n    '~':   '__inv__',\n    '-':   '__neg__',\n    '+':   '__pos__',\n}.get\nclass MethodDispatcherTransform(EnvTransform):\n    \"\"\"\n    Base class for transformations that want to intercept on specific\n    builtin functions or methods of builtin types, including special",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Compiler.Visitor",
        "documentation": {}
    },
    {
        "label": "DebuggerTestCase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "class DebuggerTestCase(unittest.TestCase):\n    def setUp(self):\n        \"\"\"\n        Run gdb and have cygdb import the debug information from the code\n        defined in TestParseTreeTransforms's setUp method\n        \"\"\"\n        if not test_gdb():\n            return\n        self.tempdir = tempfile.mkdtemp()\n        self.destfile = os.path.join(self.tempdir, 'codefile.pyx')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "GdbDebuggerTestCase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "class GdbDebuggerTestCase(DebuggerTestCase):\n    def setUp(self):\n        if not test_gdb():\n            return\n        super(GdbDebuggerTestCase, self).setUp()\n        prefix_code = textwrap.dedent('''\\\n            python\n            import os\n            import sys\n            import traceback",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "TestAll",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "class TestAll(GdbDebuggerTestCase):\n    def test_all(self):\n        if not test_gdb():\n            return\n        out, err = self.p.communicate()\n        out = out.decode('UTF-8')\n        err = err.decode('UTF-8')\n        exit_status = self.p.returncode\n        if exit_status == 1:\n            sys.stderr.write(out)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "test_gdb",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "def test_gdb():\n    global have_gdb\n    if have_gdb is not None:\n        return have_gdb\n    have_gdb = False\n    try:\n        p = subprocess.Popen(['gdb', '-nx', '--version'], stdout=subprocess.PIPE)\n    except OSError:\n        # gdb not found\n        gdb_version = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "root = os.path.dirname(os.path.abspath(__file__))\ncodefile = os.path.join(root, 'codefile')\ncfuncs_file = os.path.join(root, 'cfuncs.c')\nwith open(codefile) as f:\n    source_to_lineno = dict((line.strip(), i + 1) for i, line in enumerate(f))\nhave_gdb = None\ndef test_gdb():\n    global have_gdb\n    if have_gdb is not None:\n        return have_gdb",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "codefile",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "codefile = os.path.join(root, 'codefile')\ncfuncs_file = os.path.join(root, 'cfuncs.c')\nwith open(codefile) as f:\n    source_to_lineno = dict((line.strip(), i + 1) for i, line in enumerate(f))\nhave_gdb = None\ndef test_gdb():\n    global have_gdb\n    if have_gdb is not None:\n        return have_gdb\n    have_gdb = False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "cfuncs_file",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "cfuncs_file = os.path.join(root, 'cfuncs.c')\nwith open(codefile) as f:\n    source_to_lineno = dict((line.strip(), i + 1) for i, line in enumerate(f))\nhave_gdb = None\ndef test_gdb():\n    global have_gdb\n    if have_gdb is not None:\n        return have_gdb\n    have_gdb = False\n    try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "have_gdb",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "peekOfCode": "have_gdb = None\ndef test_gdb():\n    global have_gdb\n    if have_gdb is not None:\n        return have_gdb\n    have_gdb = False\n    try:\n        p = subprocess.Popen(['gdb', '-nx', '--version'], stdout=subprocess.PIPE)\n    except OSError:\n        # gdb not found",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.TestLibCython",
        "documentation": {}
    },
    {
        "label": "TraceMethodCallMeta",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TraceMethodCallMeta(type):\n    def __init__(self, name, bases, dict):\n        for func_name, func in dict.items():\n            if inspect.isfunction(func):\n                setattr(self, func_name, print_on_call_decorator(func))\n@add_metaclass(TraceMethodCallMeta)\nclass DebugTestCase(unittest.TestCase):\n    \"\"\"\n    Base class for test cases. On teardown it kills the inferior and unsets\n    all breakpoints.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "DebugTestCase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class DebugTestCase(unittest.TestCase):\n    \"\"\"\n    Base class for test cases. On teardown it kills the inferior and unsets\n    all breakpoints.\n    \"\"\"\n    def __init__(self, name):\n        super(DebugTestCase, self).__init__(name)\n        self.cy = libcython.cy\n        self.module = libcython.cy.cython_namespace['codefile']\n        self.spam_func, self.spam_meth = libcython.cy.functions_by_name['spam']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestDebugInformationClasses",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestDebugInformationClasses(DebugTestCase):\n    def test_CythonModule(self):\n        \"test that debug information was parsed properly into data structures\"\n        self.assertEqual(self.module.name, 'codefile')\n        global_vars = ('c_var', 'python_var', '__name__',\n                       '__builtins__', '__doc__', '__file__')\n        assert set(global_vars).issubset(self.module.globals)\n    def test_CythonVariable(self):\n        module_globals = self.module.globals\n        c_var = module_globals['c_var']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestParameters",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestParameters(unittest.TestCase):\n    def test_parameters(self):\n        gdb.execute('set cy_colorize_code on')\n        assert libcython.parameters.colorize_code\n        gdb.execute('set cy_colorize_code off')\n        assert not libcython.parameters.colorize_code\nclass TestBreak(DebugTestCase):\n    def test_break(self):\n        breakpoint_amount = len(gdb.breakpoints() or ())\n        gdb.execute('cy break codefile.spam')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestBreak",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestBreak(DebugTestCase):\n    def test_break(self):\n        breakpoint_amount = len(gdb.breakpoints() or ())\n        gdb.execute('cy break codefile.spam')\n        self.assertEqual(len(gdb.breakpoints()), breakpoint_amount + 1)\n        bp = gdb.breakpoints()[-1]\n        self.assertEqual(bp.type, gdb.BP_BREAKPOINT)\n        assert self.spam_func.cname in bp.location\n        assert bp.enabled\n    def test_python_break(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestKilled",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestKilled(DebugTestCase):\n    def test_abort(self):\n        gdb.execute(\"set args -c 'import os; os.abort()'\")\n        output = gdb.execute('cy run', to_string=True)\n        assert 'abort' in output.lower()\nclass DebugStepperTestCase(DebugTestCase):\n    def step(self, varnames_and_values, source_line=None, lineno=None):\n        gdb.execute(self.command)\n        for varname, value in varnames_and_values:\n            self.assertEqual(self.read_var(varname), value, self.local_info())",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "DebugStepperTestCase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class DebugStepperTestCase(DebugTestCase):\n    def step(self, varnames_and_values, source_line=None, lineno=None):\n        gdb.execute(self.command)\n        for varname, value in varnames_and_values:\n            self.assertEqual(self.read_var(varname), value, self.local_info())\n        self.lineno_equals(source_line, lineno)\nclass TestStep(DebugStepperTestCase):\n    \"\"\"\n    Test stepping. Stepping happens in the code found in\n    Cython/Debugger/Tests/codefile.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestStep",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestStep(DebugStepperTestCase):\n    \"\"\"\n    Test stepping. Stepping happens in the code found in\n    Cython/Debugger/Tests/codefile.\n    \"\"\"\n    def test_cython_step(self):\n        gdb.execute('cy break codefile.spam')\n        gdb.execute('run', to_string=True)\n        self.lineno_equals('def spam(a=0):')\n        gdb.execute('cy step', to_string=True)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestNext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestNext(DebugStepperTestCase):\n    def test_cython_next(self):\n        self.break_and_run('c = 2')\n        lines = (\n            'int(10)',\n            'puts(\"spam\")',\n            'os.path.join(\"foo\", \"bar\")',\n            'some_c_function()',\n        )\n        for line in lines:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestLocalsGlobals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestLocalsGlobals(DebugTestCase):\n    def test_locals(self):\n        self.break_and_run('int(10)')\n        result = gdb.execute('cy locals', to_string=True)\n        assert 'a = 0', repr(result)\n        assert 'b = (int) 1', result\n        assert 'c = (int) 2' in result, repr(result)\n    def test_globals(self):\n        self.break_and_run('int(10)')\n        result = gdb.execute('cy globals', to_string=True)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestBacktrace",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestBacktrace(DebugTestCase):\n    def test_backtrace(self):\n        libcython.parameters.colorize_code.value = False\n        self.break_and_run('os.path.join(\"foo\", \"bar\")')\n        def match_backtrace_output(result):\n            assert re.search(r'\\#\\d+ *0x.* in spam\\(\\) at .*codefile\\.pyx:22',\n                             result), result\n            assert 'os.path.join(\"foo\", \"bar\")' in result, result\n        result = gdb.execute('cy bt', to_string=True)\n        match_backtrace_output(result)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestFunctions",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestFunctions(DebugTestCase):\n    def test_functions(self):\n        self.break_and_run('c = 2')\n        result = gdb.execute('print $cy_cname(\"b\")', to_string=True)\n        assert re.search('__pyx_.*b', result), result\n        result = gdb.execute('print $cy_lineno()', to_string=True)\n        supposed_lineno = test_libcython.source_to_lineno['c = 2']\n        assert str(supposed_lineno) in result, (supposed_lineno, result)\n        result = gdb.execute('print $cy_cvalue(\"b\")', to_string=True)\n        assert '= 1' in result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestPrint",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestPrint(DebugTestCase):\n    def test_print(self):\n        self.break_and_run('c = 2')\n        result = gdb.execute('cy print b', to_string=True)\n        self.assertEqual('b = (int) 1\\n', result)\nclass TestUpDown(DebugTestCase):\n    def test_updown(self):\n        self.break_and_run('os.path.join(\"foo\", \"bar\")')\n        gdb.execute('cy step')\n        self.assertRaises(RuntimeError, gdb.execute, 'cy down')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestUpDown",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestUpDown(DebugTestCase):\n    def test_updown(self):\n        self.break_and_run('os.path.join(\"foo\", \"bar\")')\n        gdb.execute('cy step')\n        self.assertRaises(RuntimeError, gdb.execute, 'cy down')\n        result = gdb.execute('cy up', to_string=True)\n        assert 'spam()' in result\n        assert 'os.path.join(\"foo\", \"bar\")' in result\nclass TestExec(DebugTestCase):\n    def setUp(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestExec",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestExec(DebugTestCase):\n    def setUp(self):\n        super(TestExec, self).setUp()\n        self.fd, self.tmpfilename = tempfile.mkstemp()\n        self.tmpfile = os.fdopen(self.fd, 'r+')\n    def tearDown(self):\n        super(TestExec, self).tearDown()\n        try:\n            self.tmpfile.close()\n        finally:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "CySet",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class CySet(DebugTestCase):\n    def test_cyset(self):\n        self.break_and_run('os.path.join(\"foo\", \"bar\")')\n        gdb.execute('cy set a = $cy_eval(\"{None: []}\")')\n        stringvalue = self.read_var(\"a\", cast_to=str)\n        self.assertEqual(stringvalue, \"{None: []}\")\nclass TestCyEval(DebugTestCase):\n    \"Test the $cy_eval() gdb function.\"\n    def test_cy_eval(self):\n        # This function leaks a few objects in the GDB python process. This",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestCyEval",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestCyEval(DebugTestCase):\n    \"Test the $cy_eval() gdb function.\"\n    def test_cy_eval(self):\n        # This function leaks a few objects in the GDB python process. This\n        # is no biggie\n        self.break_and_run('os.path.join(\"foo\", \"bar\")')\n        result = gdb.execute('print $cy_eval(\"None\")', to_string=True)\n        assert re.match(r'\\$\\d+ = None\\n', result), result\n        result = gdb.execute('print $cy_eval(\"[a]\")', to_string=True)\n        assert re.match(r'\\$\\d+ = \\[0\\]', result), result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestClosure",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "class TestClosure(DebugTestCase):\n    def break_and_run_func(self, funcname):\n        gdb.execute('cy break ' + funcname)\n        gdb.execute('cy run')\n    def test_inner(self):\n        self.break_and_run_func('inner')\n        self.assertEqual('', gdb.execute('cy locals', to_string=True))\n        # Allow the Cython-generated code to initialize the scope variable\n        gdb.execute('cy step')\n        self.assertEqual(str(self.read_var('a')), \"'an object'\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "print_on_call_decorator",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "def print_on_call_decorator(func):\n    @functools.wraps(func)\n    def wrapper(self, *args, **kwargs):\n        _debug(type(self).__name__, func.__name__)\n        try:\n            return func(self, *args, **kwargs)\n        except Exception:\n            _debug(\"An exception occurred:\", traceback.format_exc())\n            raise\n    return wrapper",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "run_unittest_in_module",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "def run_unittest_in_module(modulename):\n    try:\n        gdb.lookup_type('PyModuleObject')\n    except RuntimeError:\n        msg = (\"Unable to run tests, Python was not compiled with \"\n                \"debugging information. Either compile python with \"\n                \"-g or get a debug build (configure with --with-pydebug).\")\n        warnings.warn(msg)\n        os._exit(1)\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "runtests",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "def runtests():\n    \"\"\"\n    Run the libcython and libpython tests. Ensure that an appropriate status is\n    returned to the parent test process.\n    \"\"\"\n    from Cython.Debugger.Tests import test_libpython_in_gdb\n    success_libcython = run_unittest_in_module(__name__)\n    success_libpython = run_unittest_in_module(test_libpython_in_gdb.__name__)\n    if not success_libcython or not success_libpython:\n        sys.exit(2)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "def main(version, trace_code=False):\n    global inferior_python_version\n    inferior_python_version = version\n    if trace_code:\n        tracer = trace.Trace(count=False, trace=True, outfile=sys.stderr,\n                            ignoredirs=[sys.prefix, sys.exec_prefix])\n        tracer.runfunc(runtests)\n    else:\n        runtests()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "sys.argv",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "sys.argv = ['gdb']\ndef print_on_call_decorator(func):\n    @functools.wraps(func)\n    def wrapper(self, *args, **kwargs):\n        _debug(type(self).__name__, func.__name__)\n        try:\n            return func(self, *args, **kwargs)\n        except Exception:\n            _debug(\"An exception occurred:\", traceback.format_exc())\n            raise",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "_do_debug",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "peekOfCode": "_do_debug = os.environ.get('GDB_DEBUG')\nif _do_debug:\n    _debug_file = open('/dev/tty', 'w')\ndef _debug(*messages):\n    if _do_debug:\n        messages = itertools.chain([sys._getframe(1).f_code.co_name, ':'],\n                                   messages)\n        _debug_file.write(' '.join(str(msg) for msg in messages) + '\\n')\ndef run_unittest_in_module(modulename):\n    try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libcython_in_gdb",
        "documentation": {}
    },
    {
        "label": "TestPrettyPrinters",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libpython_in_gdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libpython_in_gdb",
        "peekOfCode": "class TestPrettyPrinters(test_libcython_in_gdb.DebugTestCase):\n    \"\"\"\n    Test whether types of Python objects are correctly inferred and that\n    the right libpython.PySomeTypeObjectPtr classes are instantiated.\n    Also test whether values are appropriately formatted (don't be too\n    laborious as Lib/test/test_gdb.py already covers this extensively).\n    Don't take care of decreffing newly allocated objects as a new\n    interpreter is started for every test anyway.\n    \"\"\"\n    def setUp(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Tests.test_libpython_in_gdb",
        "documentation": {}
    },
    {
        "label": "make_command_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Cygdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Cygdb",
        "peekOfCode": "def make_command_file(path_to_debug_info, prefix_code='', no_import=False):\n    if not no_import:\n        pattern = os.path.join(path_to_debug_info,\n                               'cython_debug',\n                               'cython_debug_info_*')\n        debug_files = glob.glob(pattern)\n        if not debug_files:\n            sys.exit('%s.\\nNo debug files were found in %s. Aborting.' % (\n                                   usage, os.path.abspath(path_to_debug_info)))\n    fd, tempfilename = tempfile.mkstemp()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Cygdb",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Cygdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Cygdb",
        "peekOfCode": "def main(path_to_debug_info=None, gdb_argv=None, no_import=False):\n    \"\"\"\n    Start the Cython debugger. This tells gdb to import the Cython and Python\n    extensions (libcython.py and libpython.py) and it enables gdb's pending\n    breakpoints.\n    path_to_debug_info is the path to the Cython build directory\n    gdb_argv is the list of options to gdb\n    no_import tells cygdb whether it should import debug information\n    \"\"\"\n    parser = optparse.OptionParser(usage=usage)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Cygdb",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Cygdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Cygdb",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef make_command_file(path_to_debug_info, prefix_code='', no_import=False):\n    if not no_import:\n        pattern = os.path.join(path_to_debug_info,\n                               'cython_debug',\n                               'cython_debug_info_*')\n        debug_files = glob.glob(pattern)\n        if not debug_files:\n            sys.exit('%s.\\nNo debug files were found in %s. Aborting.' % (\n                                   usage, os.path.abspath(path_to_debug_info)))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Cygdb",
        "documentation": {}
    },
    {
        "label": "usage",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Cygdb",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Cygdb",
        "peekOfCode": "usage = \"Usage: cygdb [options] [PATH [-- GDB_ARGUMENTS]]\"\ndef main(path_to_debug_info=None, gdb_argv=None, no_import=False):\n    \"\"\"\n    Start the Cython debugger. This tells gdb to import the Cython and Python\n    extensions (libcython.py and libpython.py) and it enables gdb's pending\n    breakpoints.\n    path_to_debug_info is the path to the Cython build directory\n    gdb_argv is the list of options to gdb\n    no_import tells cygdb whether it should import debug information\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.Cygdb",
        "documentation": {}
    },
    {
        "label": "CythonDebugWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.DebugWriter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.DebugWriter",
        "peekOfCode": "class CythonDebugWriter(object):\n    \"\"\"\n    Class to output debugging information for cygdb\n    It writes debug information to cython_debug/cython_debug_info_<modulename>\n    in the build directory.\n    \"\"\"\n    def __init__(self, output_dir):\n        if etree is None:\n            raise Errors.NoElementTreeInstalledException()\n        self.output_dir = os.path.join(output_dir or os.curdir, 'cython_debug')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.DebugWriter",
        "documentation": {}
    },
    {
        "label": "CythonModule",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonModule(object):\n    def __init__(self, module_name, filename, c_filename):\n        self.name = module_name\n        self.filename = filename\n        self.c_filename = c_filename\n        self.globals = {}\n        # {cython_lineno: min(c_linenos)}\n        self.lineno_cy2c = {}\n        # {c_lineno: cython_lineno}\n        self.lineno_c2cy = {}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonVariable",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonVariable(object):\n    def __init__(self, name, cname, qualified_name, type, lineno):\n        self.name = name\n        self.cname = cname\n        self.qualified_name = qualified_name\n        self.type = type\n        self.lineno = int(lineno)\nclass CythonFunction(CythonVariable):\n    def __init__(self,\n                 module,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonFunction",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonFunction(CythonVariable):\n    def __init__(self,\n                 module,\n                 name,\n                 cname,\n                 pf_cname,\n                 qualified_name,\n                 lineno,\n                 type=CObject,\n                 is_initmodule_function=\"False\"):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonBase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonBase(object):\n    @default_selected_gdb_frame(err=False)\n    def is_cython_function(self, frame):\n        return frame.name() in self.cy.functions_by_cname\n    @default_selected_gdb_frame(err=False)\n    def is_python_function(self, frame):\n        \"\"\"\n        Tells if a frame is associated with a Python function.\n        If we can't read the Python frame information, don't regard it as such.\n        \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "SourceFileDescriptor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class SourceFileDescriptor(object):\n    def __init__(self, filename, lexer, formatter=None):\n        self.filename = filename\n        self.lexer = lexer\n        self.formatter = formatter\n    def valid(self):\n        return self.filename is not None\n    def lex(self, code):\n        if pygments and self.lexer and parameters.colorize_code:\n            bg = parameters.terminal_background.value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyGDBError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyGDBError(gdb.GdbError):\n    \"\"\"\n    Base class for Cython-command related errors\n    \"\"\"\n    def __init__(self, *args):\n        args = args or (self.msg,)\n        super(CyGDBError, self).__init__(*args)\nclass NoCythonFunctionInFrameError(CyGDBError):\n    \"\"\"\n    raised when the user requests the current cython function, which is",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "NoCythonFunctionInFrameError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class NoCythonFunctionInFrameError(CyGDBError):\n    \"\"\"\n    raised when the user requests the current cython function, which is\n    unavailable\n    \"\"\"\n    msg = \"Current function is a function cygdb doesn't know about\"\nclass NoFunctionNameInFrameError(NoCythonFunctionInFrameError):\n    \"\"\"\n    raised when the name of the C function could not be determined\n    in the current C stack frame",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "NoFunctionNameInFrameError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class NoFunctionNameInFrameError(NoCythonFunctionInFrameError):\n    \"\"\"\n    raised when the name of the C function could not be determined\n    in the current C stack frame\n    \"\"\"\n    msg = ('C function name could not be determined in the current C stack '\n           'frame')\n# Parameters\nclass CythonParameter(gdb.Parameter):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonParameter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonParameter(gdb.Parameter):\n    \"\"\"\n    Base class for cython parameters\n    \"\"\"\n    def __init__(self, name, command_class, parameter_class, default=None):\n        self.show_doc = self.set_doc = self.__class__.__doc__\n        super(CythonParameter, self).__init__(name, command_class,\n                                              parameter_class)\n        if default is not None:\n            self.value = default",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CompleteUnqualifiedFunctionNames",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CompleteUnqualifiedFunctionNames(CythonParameter):\n    \"\"\"\n    Have 'cy break' complete unqualified function or method names.\n    \"\"\"\nclass ColorizeSourceCode(CythonParameter):\n    \"\"\"\n    Tell cygdb whether to colorize source code.\n    \"\"\"\nclass TerminalBackground(CythonParameter):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "ColorizeSourceCode",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class ColorizeSourceCode(CythonParameter):\n    \"\"\"\n    Tell cygdb whether to colorize source code.\n    \"\"\"\nclass TerminalBackground(CythonParameter):\n    \"\"\"\n    Tell cygdb about the user's terminal background (light or dark).\n    \"\"\"\nclass CythonParameters(object):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "TerminalBackground",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class TerminalBackground(CythonParameter):\n    \"\"\"\n    Tell cygdb about the user's terminal background (light or dark).\n    \"\"\"\nclass CythonParameters(object):\n    \"\"\"\n    Simple container class that might get more functionality in the distant\n    future (mostly to remind us that we're dealing with parameters).\n    \"\"\"\n    def __init__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonParameters",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonParameters(object):\n    \"\"\"\n    Simple container class that might get more functionality in the distant\n    future (mostly to remind us that we're dealing with parameters).\n    \"\"\"\n    def __init__(self):\n        self.complete_unqualified = CompleteUnqualifiedFunctionNames(\n            'cy_complete_unqualified',\n            gdb.COMMAND_BREAKPOINTS,\n            gdb.PARAM_BOOLEAN,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonCommand",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonCommand(gdb.Command, CythonBase):\n    \"\"\"\n    Base class for Cython commands\n    \"\"\"\n    command_class = gdb.COMMAND_NONE\n    @classmethod\n    def _register(cls, clsname, args, kwargs):\n        if not hasattr(cls, 'completer_class'):\n            return cls(clsname, cls.command_class, *args, **kwargs)\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyCy",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyCy(CythonCommand):\n    \"\"\"\n    Invoke a Cython command. Available commands are:\n        cy import\n        cy break\n        cy step\n        cy next\n        cy run\n        cy cont\n        cy finish",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyImport",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyImport(CythonCommand):\n    \"\"\"\n    Import debug information outputted by the Cython compiler\n    Example: cy import FILE...\n    \"\"\"\n    name = 'cy import'\n    command_class = gdb.COMMAND_STATUS\n    completer_class = gdb.COMPLETE_FILENAME\n    def invoke(self, args, from_tty):\n        if isinstance(args, BYTES):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyBreak",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyBreak(CythonCommand):\n    \"\"\"\n    Set a breakpoint for Cython code using Cython qualified name notation, e.g.:\n        cy break cython_modulename.ClassName.method_name...\n    or normal notation:\n        cy break function_or_method_name...\n    or for a line number:\n        cy break cython_module:lineno...\n    Set a Python breakpoint:\n        Break on any function or method named 'func' in module 'modname'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonInfo",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonInfo(CythonBase, libpython.PythonInfo):\n    \"\"\"\n    Implementation of the interface dictated by libpython.LanguageInfo.\n    \"\"\"\n    def lineno(self, frame):\n        # Take care of the Python and Cython levels. We need to care for both\n        # as we can't simply dispatch to 'py-step', since that would work for\n        # stepping through Python code, but it would not step back into Cython-\n        # related code. The C level should be dispatched to the 'step' command.\n        if self.is_cython_function(frame):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CythonExecutionControlCommand",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CythonExecutionControlCommand(CythonCommand,\n                                    libpython.ExecutionControlCommandBase):\n    @classmethod\n    def register(cls):\n        return cls(cls.name, cython_info)\nclass CyStep(CythonExecutionControlCommand, libpython.PythonStepperMixin):\n    \"Step through Cython, Python or C code.\"\n    name = 'cy -step'\n    stepinto = True\n    def invoke(self, args, from_tty):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyStep",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyStep(CythonExecutionControlCommand, libpython.PythonStepperMixin):\n    \"Step through Cython, Python or C code.\"\n    name = 'cy -step'\n    stepinto = True\n    def invoke(self, args, from_tty):\n        if self.is_python_function():\n            self.python_step(self.stepinto)\n        elif not self.is_cython_function():\n            if self.stepinto:\n                command = 'step'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyNext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyNext(CyStep):\n    \"Step-over Cython, Python or C code.\"\n    name = 'cy -next'\n    stepinto = False\nclass CyRun(CythonExecutionControlCommand):\n    \"\"\"\n    Run a Cython program. This is like the 'run' command, except that it\n    displays Cython or Python source lines as well\n    \"\"\"\n    name = 'cy run'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyRun",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyRun(CythonExecutionControlCommand):\n    \"\"\"\n    Run a Cython program. This is like the 'run' command, except that it\n    displays Cython or Python source lines as well\n    \"\"\"\n    name = 'cy run'\n    invoke = CythonExecutionControlCommand.run\nclass CyCont(CythonExecutionControlCommand):\n    \"\"\"\n    Continue a Cython program. This is like the 'run' command, except that it",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyCont",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyCont(CythonExecutionControlCommand):\n    \"\"\"\n    Continue a Cython program. This is like the 'run' command, except that it\n    displays Cython or Python source lines as well.\n    \"\"\"\n    name = 'cy cont'\n    invoke = CythonExecutionControlCommand.cont\nclass CyFinish(CythonExecutionControlCommand):\n    \"\"\"\n    Execute until the function returns.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyFinish",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyFinish(CythonExecutionControlCommand):\n    \"\"\"\n    Execute until the function returns.\n    \"\"\"\n    name = 'cy finish'\n    invoke = CythonExecutionControlCommand.finish\nclass CyUp(CythonCommand):\n    \"\"\"\n    Go up a Cython, Python or relevant C frame.\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyUp",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyUp(CythonCommand):\n    \"\"\"\n    Go up a Cython, Python or relevant C frame.\n    \"\"\"\n    name = 'cy up'\n    _command = 'up'\n    def invoke(self, *args):\n        try:\n            gdb.execute(self._command, to_string=True)\n            while not self.is_relevant_function(gdb.selected_frame()):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyDown",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyDown(CyUp):\n    \"\"\"\n    Go down a Cython, Python or relevant C frame.\n    \"\"\"\n    name = 'cy down'\n    _command = 'down'\nclass CySelect(CythonCommand):\n    \"\"\"\n    Select a frame. Use frame numbers as listed in `cy backtrace`.\n    This command is useful because `cy backtrace` prints a reversed backtrace.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CySelect",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CySelect(CythonCommand):\n    \"\"\"\n    Select a frame. Use frame numbers as listed in `cy backtrace`.\n    This command is useful because `cy backtrace` prints a reversed backtrace.\n    \"\"\"\n    name = 'cy select'\n    def invoke(self, stackno, from_tty):\n        try:\n            stackno = int(stackno)\n        except ValueError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyBacktrace",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyBacktrace(CythonCommand):\n    'Print the Cython stack'\n    name = 'cy bt'\n    alias = 'cy backtrace'\n    command_class = gdb.COMMAND_STACK\n    completer_class = gdb.COMPLETE_NONE\n    @require_running_program\n    def invoke(self, args, from_tty):\n        # get the first frame\n        frame = gdb.selected_frame()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyList",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyList(CythonCommand):\n    \"\"\"\n    List Cython source code. To disable to customize colouring see the cy_*\n    parameters.\n    \"\"\"\n    name = 'cy list'\n    command_class = gdb.COMMAND_FILES\n    completer_class = gdb.COMPLETE_NONE\n    # @dispatch_on_frame(c_command='list')\n    def invoke(self, _, from_tty):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyPrint",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyPrint(CythonCommand):\n    \"\"\"\n    Print a Cython variable using 'cy-print x' or 'cy-print module.function.x'\n    \"\"\"\n    name = 'cy print'\n    command_class = gdb.COMMAND_DATA\n    def invoke(self, name, from_tty, max_name_length=None):\n        if self.is_python_function():\n            return gdb.execute('py-print ' + name)\n        elif self.is_cython_function():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyLocals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyLocals(CythonCommand):\n    \"\"\"\n    List the locals from the current Cython frame.\n    \"\"\"\n    name = 'cy locals'\n    command_class = gdb.COMMAND_STACK\n    completer_class = gdb.COMPLETE_NONE\n    @dispatch_on_frame(c_command='info locals', python_command='py-locals')\n    def invoke(self, args, from_tty):\n        cython_function = self.get_cython_function()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyGlobals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyGlobals(CyLocals):\n    \"\"\"\n    List the globals from the current Cython module.\n    \"\"\"\n    name = 'cy globals'\n    command_class = gdb.COMMAND_STACK\n    completer_class = gdb.COMPLETE_NONE\n    @dispatch_on_frame(c_command='info variables', python_command='py-globals')\n    def invoke(self, args, from_tty):\n        global_python_dict = self.get_cython_globals_dict()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "EvaluateOrExecuteCodeMixin",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class EvaluateOrExecuteCodeMixin(object):\n    \"\"\"\n    Evaluate or execute Python code in a Cython or Python frame. The 'evalcode'\n    method evaluations Python code, prints a traceback if an exception went\n    uncaught, and returns any return value as a gdb.Value (NULL on exception).\n    \"\"\"\n    def _fill_locals_dict(self, executor, local_dict_pointer):\n        \"Fill a remotely allocated dict with values from the Cython C stack\"\n        cython_func = self.get_cython_function()\n        for name, cyvar in cython_func.locals.items():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyExec",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyExec(CythonCommand, libpython.PyExec, EvaluateOrExecuteCodeMixin):\n    \"\"\"\n    Execute Python code in the nearest Python or Cython frame.\n    \"\"\"\n    name = '-cy-exec'\n    command_class = gdb.COMMAND_STACK\n    completer_class = gdb.COMPLETE_NONE\n    def invoke(self, expr, from_tty):\n        expr, input_type = self.readcode(expr)\n        executor = libpython.PythonCodeExecutor()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CySet",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CySet(CythonCommand):\n    \"\"\"\n    Set a Cython variable to a certain value\n        cy set my_cython_c_variable = 10\n        cy set my_cython_py_variable = $cy_eval(\"{'doner': 'kebab'}\")\n    This is equivalent to\n        set $cy_value(\"my_cython_variable\") = 10\n    \"\"\"\n    name = 'cy set'\n    command_class = gdb.COMMAND_DATA",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyCName",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyCName(gdb.Function, CythonBase):\n    \"\"\"\n    Get the C name of a Cython variable in the current context.\n    Examples:\n        print $cy_cname(\"function\")\n        print $cy_cname(\"Class.method\")\n        print $cy_cname(\"module.function\")\n    \"\"\"\n    @require_cython_frame\n    @gdb_function_value_to_unicode",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyCValue",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyCValue(CyCName):\n    \"\"\"\n    Get the value of a Cython variable.\n    \"\"\"\n    @require_cython_frame\n    @gdb_function_value_to_unicode\n    def invoke(self, cyname, frame=None):\n        globals_dict = self.get_cython_globals_dict()\n        cython_function = self.get_cython_function(frame)\n        if self.is_initialized(cython_function, cyname):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyLine",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyLine(gdb.Function, CythonBase):\n    \"\"\"\n    Get the current Cython line.\n    \"\"\"\n    @require_cython_frame\n    def invoke(self):\n        return self.get_cython_lineno()\nclass CyEval(gdb.Function, CythonBase, EvaluateOrExecuteCodeMixin):\n    \"\"\"\n    Evaluate Python code in the nearest Python or Cython frame and return",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CyEval",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "class CyEval(gdb.Function, CythonBase, EvaluateOrExecuteCodeMixin):\n    \"\"\"\n    Evaluate Python code in the nearest Python or Cython frame and return\n    \"\"\"\n    @gdb_function_value_to_unicode\n    def invoke(self, python_expression):\n        input_type = libpython.PythonCodeExecutor.Py_eval_input\n        return self.evalcode(python_expression, input_type)\ncython_info = CythonInfo()\ncy = CyCy.register()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "dont_suppress_errors",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "def dont_suppress_errors(function):\n    \"*sigh*, readline\"\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        try:\n            return function(*args, **kwargs)\n        except Exception:\n            traceback.print_exc()\n            raise\n    return wrapper",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "default_selected_gdb_frame",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "def default_selected_gdb_frame(err=True):\n    def decorator(function):\n        @functools.wraps(function)\n        def wrapper(self, frame=None, *args, **kwargs):\n            try:\n                frame = frame or gdb.selected_frame()\n            except RuntimeError:\n                raise gdb.GdbError(\"No frame is currently selected.\")\n            if err and frame.name() is None:\n                raise NoFunctionNameInFrameError()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "require_cython_frame",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "def require_cython_frame(function):\n    @functools.wraps(function)\n    @require_running_program\n    def wrapper(self, *args, **kwargs):\n        frame = kwargs.get('frame') or gdb.selected_frame()\n        if not self.is_cython_function(frame):\n            raise gdb.GdbError('Selected frame does not correspond with a '\n                               'Cython function we know about.')\n        return function(self, *args, **kwargs)\n    return wrapper",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "dispatch_on_frame",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "def dispatch_on_frame(c_command, python_command=None):\n    def decorator(function):\n        @functools.wraps(function)\n        def wrapper(self, *args, **kwargs):\n            is_cy = self.is_cython_function()\n            is_py = self.is_python_function()\n            if is_cy or (is_py and not python_command):\n                function(self, *args, **kwargs)\n            elif is_py:\n                gdb.execute(python_command)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "require_running_program",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "def require_running_program(function):\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        try:\n            gdb.selected_frame()\n        except RuntimeError:\n            raise gdb.GdbError(\"No frame is currently selected.\")\n        return function(*args, **kwargs)\n    return wrapper\ndef gdb_function_value_to_unicode(function):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "gdb_function_value_to_unicode",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "def gdb_function_value_to_unicode(function):\n    @functools.wraps(function)\n    def wrapper(self, string, *args, **kwargs):\n        if isinstance(string, gdb.Value):\n            string = string.string()\n        return function(self, string, *args, **kwargs)\n    return wrapper\n# Classes that represent the debug information\n# Don't rename the parameters of these classes, they come directly from the XML\nclass CythonModule(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "register_defines",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "def register_defines():\n    libpython.source_gdb_script(textwrap.dedent(\"\"\"\\\n        define cy step\n        cy -step\n        end\n        define cy next\n        cy -next\n        end\n        document cy step\n        %s",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "CObject",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "CObject = 'CObject'\nPythonObject = 'PythonObject'\n_data_types = dict(CObject=CObject, PythonObject=PythonObject)\n_filesystemencoding = sys.getfilesystemencoding() or 'UTF-8'\n# decorators\ndef dont_suppress_errors(function):\n    \"*sigh*, readline\"\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "PythonObject",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "PythonObject = 'PythonObject'\n_data_types = dict(CObject=CObject, PythonObject=PythonObject)\n_filesystemencoding = sys.getfilesystemencoding() or 'UTF-8'\n# decorators\ndef dont_suppress_errors(function):\n    \"*sigh*, readline\"\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        try:\n            return function(*args, **kwargs)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "_data_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "_data_types = dict(CObject=CObject, PythonObject=PythonObject)\n_filesystemencoding = sys.getfilesystemencoding() or 'UTF-8'\n# decorators\ndef dont_suppress_errors(function):\n    \"*sigh*, readline\"\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        try:\n            return function(*args, **kwargs)\n        except Exception:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "_filesystemencoding",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "_filesystemencoding = sys.getfilesystemencoding() or 'UTF-8'\n# decorators\ndef dont_suppress_errors(function):\n    \"*sigh*, readline\"\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        try:\n            return function(*args, **kwargs)\n        except Exception:\n            traceback.print_exc()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "parameters",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "parameters = CythonParameters()\n# Commands\nclass CythonCommand(gdb.Command, CythonBase):\n    \"\"\"\n    Base class for Cython commands\n    \"\"\"\n    command_class = gdb.COMMAND_NONE\n    @classmethod\n    def _register(cls, clsname, args, kwargs):\n        if not hasattr(cls, 'completer_class'):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "sortkey",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "sortkey = lambda item: item[0].lower()\nclass CyLocals(CythonCommand):\n    \"\"\"\n    List the locals from the current Cython frame.\n    \"\"\"\n    name = 'cy locals'\n    command_class = gdb.COMMAND_STACK\n    completer_class = gdb.COMPLETE_NONE\n    @dispatch_on_frame(c_command='info locals', python_command='py-locals')\n    def invoke(self, args, from_tty):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "cython_info",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "cython_info = CythonInfo()\ncy = CyCy.register()\ncython_info.cy = cy\ndef register_defines():\n    libpython.source_gdb_script(textwrap.dedent(\"\"\"\\\n        define cy step\n        cy -step\n        end\n        define cy next\n        cy -next",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "cy",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "cy = CyCy.register()\ncython_info.cy = cy\ndef register_defines():\n    libpython.source_gdb_script(textwrap.dedent(\"\"\"\\\n        define cy step\n        cy -step\n        end\n        define cy next\n        cy -next\n        end",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "cython_info.cy",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "peekOfCode": "cython_info.cy = cy\ndef register_defines():\n    libpython.source_gdb_script(textwrap.dedent(\"\"\"\\\n        define cy step\n        cy -step\n        end\n        define cy next\n        cy -next\n        end\n        document cy step",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libcython",
        "documentation": {}
    },
    {
        "label": "NullPyObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class NullPyObjectPtr(RuntimeError):\n    pass\ndef safety_limit(val):\n    # Given an integer value from the process being debugged, limit it to some\n    # safety threshold so that arbitrary breakage within said process doesn't\n    # break the gdb process too much (e.g. sizes of iterations, sizes of lists)\n    return min(val, 1000)\ndef safe_range(val):\n    # As per range, but don't trust the value too much: cap it to a safety\n    # threshold in case the data was corrupted",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "StringTruncated",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class StringTruncated(RuntimeError):\n    pass\nclass TruncatedStringIO(object):\n    '''Similar to io.StringIO, but can truncate the output by raising a\n    StringTruncated exception'''\n    def __init__(self, maxlen=None):\n        self._val = ''\n        self.maxlen = maxlen\n    def write(self, data):\n        if self.maxlen:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "TruncatedStringIO",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class TruncatedStringIO(object):\n    '''Similar to io.StringIO, but can truncate the output by raising a\n    StringTruncated exception'''\n    def __init__(self, maxlen=None):\n        self._val = ''\n        self.maxlen = maxlen\n    def write(self, data):\n        if self.maxlen:\n            if len(data) + len(self._val) > self.maxlen:\n                # Truncation:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyObjectPtr(object):\n    \"\"\"\n    Class wrapping a gdb.Value that's either a (PyObject*) within the\n    inferior process, or some subclass pointer e.g. (PyBytesObject*)\n    There will be a subclass for every refined PyObject type that we care\n    about.\n    Note that at every stage the underlying pointer could be NULL, point\n    to corrupt data, etc; this is the debugger, after all.\n    \"\"\"\n    _typename = 'PyObject'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyVarObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyVarObjectPtr(PyObjectPtr):\n    _typename = 'PyVarObject'\nclass ProxyAlreadyVisited(object):\n    '''\n    Placeholder proxy to use when protecting against infinite recursion due to\n    loops in the object graph.\n    Analogous to the values emitted by the users of Py_ReprEnter and Py_ReprLeave\n    '''\n    def __init__(self, rep):\n        self._rep = rep",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "ProxyAlreadyVisited",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class ProxyAlreadyVisited(object):\n    '''\n    Placeholder proxy to use when protecting against infinite recursion due to\n    loops in the object graph.\n    Analogous to the values emitted by the users of Py_ReprEnter and Py_ReprLeave\n    '''\n    def __init__(self, rep):\n        self._rep = rep\n    def __repr__(self):\n        return self._rep",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "InstanceProxy",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class InstanceProxy(object):\n    def __init__(self, cl_name, attrdict, address):\n        self.cl_name = cl_name\n        self.attrdict = attrdict\n        self.address = address\n    def __repr__(self):\n        if isinstance(self.attrdict, dict):\n            kwargs = ', '.join([\"%s=%r\" % (arg, val)\n                                for arg, val in self.attrdict.iteritems()])\n            return '<%s(%s) at remote 0x%x>' % (self.cl_name,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "HeapTypeObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class HeapTypeObjectPtr(PyObjectPtr):\n    _typename = 'PyObject'\n    def get_attr_dict(self):\n        '''\n        Get the PyDictObject ptr representing the attribute dictionary\n        (or None if there's a problem)\n        '''\n        try:\n            typeobj = self.type()\n            dictoffset = int_from_int(typeobj.field('tp_dictoffset'))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "ProxyException",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class ProxyException(Exception):\n    def __init__(self, tp_name, args):\n        self.tp_name = tp_name\n        self.args = args\n    def __repr__(self):\n        return '%s%r' % (self.tp_name, self.args)\nclass PyBaseExceptionObjectPtr(PyObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyBaseExceptionObject* i.e. an exception\n    within the process being debugged.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyBaseExceptionObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyBaseExceptionObjectPtr(PyObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyBaseExceptionObject* i.e. an exception\n    within the process being debugged.\n    \"\"\"\n    _typename = 'PyBaseExceptionObject'\n    def proxyval(self, visited):\n        # Guard against infinite loops:\n        if self.as_address() in visited:\n            return ProxyAlreadyVisited('(...)')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyClassObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyClassObjectPtr(PyObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyClassObject* i.e. a <classobj>\n    instance within the process being debugged.\n    \"\"\"\n    _typename = 'PyClassObject'\nclass BuiltInFunctionProxy(object):\n    def __init__(self, ml_name):\n        self.ml_name = ml_name\n    def __repr__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "BuiltInFunctionProxy",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class BuiltInFunctionProxy(object):\n    def __init__(self, ml_name):\n        self.ml_name = ml_name\n    def __repr__(self):\n        return \"<built-in function %s>\" % self.ml_name\nclass BuiltInMethodProxy(object):\n    def __init__(self, ml_name, pyop_m_self):\n        self.ml_name = ml_name\n        self.pyop_m_self = pyop_m_self\n    def __repr__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "BuiltInMethodProxy",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class BuiltInMethodProxy(object):\n    def __init__(self, ml_name, pyop_m_self):\n        self.ml_name = ml_name\n        self.pyop_m_self = pyop_m_self\n    def __repr__(self):\n        return ('<built-in method %s of %s object at remote 0x%x>'\n                % (self.ml_name,\n                   self.pyop_m_self.safe_tp_name(),\n                   self.pyop_m_self.as_address())\n                )",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyCFunctionObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyCFunctionObjectPtr(PyObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyCFunctionObject*\n    (see Include/methodobject.h and Objects/methodobject.c)\n    \"\"\"\n    _typename = 'PyCFunctionObject'\n    def proxyval(self, visited):\n        m_ml = self.field('m_ml') # m_ml is a (PyMethodDef*)\n        ml_name = m_ml['ml_name'].string()\n        pyop_m_self = self.pyop_field('m_self')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyCodeObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyCodeObjectPtr(PyObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyCodeObject* i.e. a <code> instance\n    within the process being debugged.\n    \"\"\"\n    _typename = 'PyCodeObject'\n    def addr2line(self, addrq):\n        '''\n        Get the line number for a given bytecode offset\n        Analogous to PyCode_Addr2Line; translated from pseudocode in",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyDictObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyDictObjectPtr(PyObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyDictObject* i.e. a dict instance\n    within the process being debugged.\n    \"\"\"\n    _typename = 'PyDictObject'\n    def iteritems(self):\n        '''\n        Yields a sequence of (PyObjectPtr key, PyObjectPtr value) pairs,\n        analogous to dict.iteritems()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyListObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyListObjectPtr(PyObjectPtr):\n    _typename = 'PyListObject'\n    def __getitem__(self, i):\n        # Get the gdb.Value for the (PyObject*) with the given index:\n        field_ob_item = self.field('ob_item')\n        return field_ob_item[i]\n    def proxyval(self, visited):\n        # Guard against infinite loops:\n        if self.as_address() in visited:\n            return ProxyAlreadyVisited('[...]')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyLongObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyLongObjectPtr(PyObjectPtr):\n    _typename = 'PyLongObject'\n    def proxyval(self, visited):\n        '''\n        Python's Include/longobjrep.h has this declaration:\n           struct _longobject {\n               PyObject_VAR_HEAD\n               digit ob_digit[1];\n           };\n        with this description:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyBoolObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyBoolObjectPtr(PyLongObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyBoolObject* i.e. one of the two\n    <bool> instances (Py_True/Py_False) within the process being debugged.\n    \"\"\"\n    def proxyval(self, visited):\n        if PyLongObjectPtr.proxyval(self, visited):\n            return True\n        else:\n            return False",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyNoneStructPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyNoneStructPtr(PyObjectPtr):\n    \"\"\"\n    Class wrapping a gdb.Value that's a PyObject* pointing to the\n    singleton (we hope) _Py_NoneStruct with ob_type PyNone_Type\n    \"\"\"\n    _typename = 'PyObject'\n    def proxyval(self, visited):\n        return None\nclass PyFrameObjectPtr(PyObjectPtr):\n    _typename = 'PyFrameObject'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyFrameObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyFrameObjectPtr(PyObjectPtr):\n    _typename = 'PyFrameObject'\n    def __init__(self, gdbval, cast_to=None):\n        PyObjectPtr.__init__(self, gdbval, cast_to)\n        if not self.is_optimized_out():\n            self.co = PyCodeObjectPtr.from_pyobject_ptr(self.field('f_code'))\n            self.co_name = self.co.pyop_field('co_name')\n            self.co_filename = self.co.pyop_field('co_filename')\n            self.f_lineno = int_from_int(self.field('f_lineno'))\n            self.f_lasti = int_from_int(self.field('f_lasti'))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PySetObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PySetObjectPtr(PyObjectPtr):\n    _typename = 'PySetObject'\n    @classmethod\n    def _dummy_key(self):\n        return gdb.lookup_global_symbol('_PySet_Dummy').value()\n    def __iter__(self):\n        dummy_ptr = self._dummy_key()\n        table = self.field('table')\n        for i in safe_range(self.field('mask') + 1):\n            setentry = table[i]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyBytesObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyBytesObjectPtr(PyObjectPtr):\n    _typename = 'PyBytesObject'\n    def __str__(self):\n        field_ob_size = self.field('ob_size')\n        field_ob_sval = self.field('ob_sval')\n        char_ptr = field_ob_sval.address.cast(_type_unsigned_char_ptr())\n        return ''.join([chr(char_ptr[i]) for i in safe_range(field_ob_size)])\n    def proxyval(self, visited):\n        return str(self)\n    def write_repr(self, out, visited):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyStringObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyStringObjectPtr(PyBytesObjectPtr):\n    _typename = 'PyStringObject'\nclass PyTupleObjectPtr(PyObjectPtr):\n    _typename = 'PyTupleObject'\n    def __getitem__(self, i):\n        # Get the gdb.Value for the (PyObject*) with the given index:\n        field_ob_item = self.field('ob_item')\n        return field_ob_item[i]\n    def proxyval(self, visited):\n        # Guard against infinite loops:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyTupleObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyTupleObjectPtr(PyObjectPtr):\n    _typename = 'PyTupleObject'\n    def __getitem__(self, i):\n        # Get the gdb.Value for the (PyObject*) with the given index:\n        field_ob_item = self.field('ob_item')\n        return field_ob_item[i]\n    def proxyval(self, visited):\n        # Guard against infinite loops:\n        if self.as_address() in visited:\n            return ProxyAlreadyVisited('(...)')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyTypeObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyTypeObjectPtr(PyObjectPtr):\n    _typename = 'PyTypeObject'\ndef _unichr_is_printable(char):\n    # Logic adapted from Python 3's Tools/unicode/makeunicodedata.py\n    if char == u\" \":\n        return True\n    import unicodedata\n    return unicodedata.category(char) not in (\"C\", \"Z\")\nif sys.maxunicode >= 0x10000:\n    _unichr = unichr",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyUnicodeObjectPtr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyUnicodeObjectPtr(PyObjectPtr):\n    _typename = 'PyUnicodeObject'\n    def char_width(self):\n        _type_Py_UNICODE = gdb.lookup_type('Py_UNICODE')\n        return _type_Py_UNICODE.sizeof\n    def proxyval(self, visited):\n        global _is_pep393\n        if _is_pep393 is None:\n            fields = gdb.lookup_type('PyUnicodeObject').target().fields()\n            _is_pep393 = 'data' in [f.name for f in fields]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "wrapperobject",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class wrapperobject(PyObjectPtr):\n    _typename = 'wrapperobject'\n    def safe_name(self):\n        try:\n            name = self.field('descr')['d_base']['name'].string()\n            return repr(name)\n        except (NullPyObjectPtr, RuntimeError):\n            return '<unknown name>'\n    def safe_tp_name(self):\n        try:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyObjectPtrPrinter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyObjectPtrPrinter:\n    \"Prints a (PyObject*)\"\n    def __init__ (self, gdbval):\n        self.gdbval = gdbval\n    def to_string (self):\n        pyop = PyObjectPtr.from_pyobject_ptr(self.gdbval)\n        if True:\n            return pyop.get_truncated_repr(MAX_OUTPUT_LEN)\n        else:\n            # Generate full proxy value then stringify it.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "Frame",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class Frame(object):\n    '''\n    Wrapper for gdb.Frame, adding various methods\n    '''\n    def __init__(self, gdbframe):\n        self._gdbframe = gdbframe\n    def older(self):\n        older = self._gdbframe.older()\n        if older:\n            return Frame(older)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyList",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyList(gdb.Command):\n    '''List the current Python source code, if any\n    Use\n       py-list START\n    to list at a different line number within the python source.\n    Use\n       py-list START, END\n    to list a specific range of lines within the python source.\n    '''\n    def __init__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyUp",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyUp(gdb.Command):\n    'Select and print the python stack frame that called this one (if any)'\n    def __init__(self):\n        gdb.Command.__init__ (self,\n                              \"py-up\",\n                              gdb.COMMAND_STACK,\n                              gdb.COMPLETE_NONE)\n    def invoke(self, args, from_tty):\n        move_in_stack(move_up=True)\nclass PyDown(gdb.Command):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyDown",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyDown(gdb.Command):\n    'Select and print the python stack frame called by this one (if any)'\n    def __init__(self):\n        gdb.Command.__init__ (self,\n                              \"py-down\",\n                              gdb.COMMAND_STACK,\n                              gdb.COMPLETE_NONE)\n    def invoke(self, args, from_tty):\n        move_in_stack(move_up=False)\n# Not all builds of gdb have gdb.Frame.select",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyBacktraceFull",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyBacktraceFull(gdb.Command):\n    'Display the current python frame and all the frames within its call stack (if any)'\n    def __init__(self):\n        gdb.Command.__init__ (self,\n                              \"py-bt-full\",\n                              gdb.COMMAND_STACK,\n                              gdb.COMPLETE_NONE)\n    def invoke(self, args, from_tty):\n        frame = Frame.get_selected_python_frame()\n        if not frame:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyBacktrace",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyBacktrace(gdb.Command):\n    'Display the current python frame and all the frames within its call stack (if any)'\n    def __init__(self):\n        gdb.Command.__init__ (self,\n                              \"py-bt\",\n                              gdb.COMMAND_STACK,\n                              gdb.COMPLETE_NONE)\n    def invoke(self, args, from_tty):\n        frame = Frame.get_selected_python_frame()\n        if not frame:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyPrint",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyPrint(gdb.Command):\n    'Look up the given python variable name, and print it'\n    def __init__(self):\n        gdb.Command.__init__ (self,\n                              \"py-print\",\n                              gdb.COMMAND_DATA,\n                              gdb.COMPLETE_NONE)\n    def invoke(self, args, from_tty):\n        name = str(args)\n        frame = Frame.get_selected_python_frame()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyLocals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyLocals(gdb.Command):\n    'Look up the given python variable name, and print it'\n    def __init__(self, command=\"py-locals\"):\n        gdb.Command.__init__ (self,\n                              command,\n                              gdb.COMMAND_DATA,\n                              gdb.COMPLETE_NONE)\n    def invoke(self, args, from_tty):\n        name = str(args)\n        frame = Frame.get_selected_python_frame()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyGlobals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyGlobals(PyLocals):\n    'List all the globals in the currently select Python frame'\n    def get_namespace(self, pyop_frame):\n        return pyop_frame.iter_globals()\nPyGlobals(\"py-globals\")\nclass PyNameEquals(gdb.Function):\n    def _get_pycurframe_attr(self, attr):\n        frame = Frame(gdb.selected_frame())\n        if frame.is_evalframeex():\n            pyframe = frame.get_pyop()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyNameEquals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyNameEquals(gdb.Function):\n    def _get_pycurframe_attr(self, attr):\n        frame = Frame(gdb.selected_frame())\n        if frame.is_evalframeex():\n            pyframe = frame.get_pyop()\n            if pyframe is None:\n                warnings.warn(\"Use a Python debug build, Python breakpoints \"\n                              \"won't work otherwise.\")\n                return None\n            return getattr(pyframe, attr).proxyval(set())",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyModEquals",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyModEquals(PyNameEquals):\n    def invoke(self, modname):\n        attr = self._get_pycurframe_attr('co_filename')\n        if attr is not None:\n            filename, ext = os.path.splitext(os.path.basename(attr))\n            return filename == modname.string()\n        return False\nPyModEquals(\"pymod_equals\")\nclass PyBreak(gdb.Command):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyBreak",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyBreak(gdb.Command):\n    \"\"\"\n    Set a Python breakpoint. Examples:\n    Break on any function or method named 'func' in module 'modname'\n        py-break modname.func\n    Break on any function or method named 'func'\n        py-break func\n    \"\"\"\n    def invoke(self, funcname, from_tty):\n        if '.' in funcname:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "_LoggingState",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class _LoggingState(object):\n    \"\"\"\n    State that helps to provide a reentrant gdb.execute() function.\n    \"\"\"\n    def __init__(self):\n        f = tempfile.NamedTemporaryFile('r+')\n        self.file = f\n        self.filename = f.name\n        self.fd = f.fileno()\n        _execute(\"set logging file %s\" % self.filename)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "ExecutionControlCommandBase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class ExecutionControlCommandBase(gdb.Command):\n    \"\"\"\n    Superclass for language specific execution control. Language specific\n    features should be implemented by lang_info using the LanguageInfo\n    interface. 'name' is the name of the command.\n    \"\"\"\n    def __init__(self, name, lang_info):\n        super(ExecutionControlCommandBase, self).__init__(\n                                name, gdb.COMMAND_RUNNING, gdb.COMPLETE_NONE)\n        self.lang_info = lang_info",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "LanguageInfo",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class LanguageInfo(object):\n    \"\"\"\n    This class defines the interface that ExecutionControlCommandBase needs to\n    provide language-specific execution control.\n    Classes that implement this interface should implement:\n        lineno(frame)\n            Tells the current line number (only called for a relevant frame).\n            If lineno is a false value it is not checked for a difference.\n        is_relevant_function(frame)\n            tells whether we care about frame 'frame'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PythonInfo",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PythonInfo(LanguageInfo):\n    def pyframe(self, frame):\n        pyframe = Frame(frame).get_pyop()\n        if pyframe:\n            return pyframe\n        else:\n            raise gdb.RuntimeError(\n                \"Unable to find the Python frame, run your code with a debug \"\n                \"build (configure with --with-pydebug or compile with -g).\")\n    def lineno(self, frame):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PythonStepperMixin",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PythonStepperMixin(object):\n    \"\"\"\n    Make this a mixin so CyStep can also inherit from this and use a\n    CythonCodeStepper at the same time.\n    \"\"\"\n    def python_step(self, stepinto):\n        \"\"\"\n        Set a watchpoint on the Python bytecode instruction pointer and try\n        to finish the frame\n        \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyStep",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyStep(ExecutionControlCommandBase, PythonStepperMixin):\n    \"Step through Python code.\"\n    stepinto = True\n    def invoke(self, args, from_tty):\n        self.python_step(stepinto=self.stepinto)\nclass PyNext(PyStep):\n    \"Step-over Python code.\"\n    stepinto = False\nclass PyFinish(ExecutionControlCommandBase):\n    \"Execute until function returns to a caller.\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyNext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyNext(PyStep):\n    \"Step-over Python code.\"\n    stepinto = False\nclass PyFinish(ExecutionControlCommandBase):\n    \"Execute until function returns to a caller.\"\n    invoke = ExecutionControlCommandBase.finish\nclass PyRun(ExecutionControlCommandBase):\n    \"Run the program.\"\n    invoke = ExecutionControlCommandBase.run\nclass PyCont(ExecutionControlCommandBase):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyFinish",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyFinish(ExecutionControlCommandBase):\n    \"Execute until function returns to a caller.\"\n    invoke = ExecutionControlCommandBase.finish\nclass PyRun(ExecutionControlCommandBase):\n    \"Run the program.\"\n    invoke = ExecutionControlCommandBase.run\nclass PyCont(ExecutionControlCommandBase):\n    invoke = ExecutionControlCommandBase.cont\ndef _pointervalue(gdbval):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyRun",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyRun(ExecutionControlCommandBase):\n    \"Run the program.\"\n    invoke = ExecutionControlCommandBase.run\nclass PyCont(ExecutionControlCommandBase):\n    invoke = ExecutionControlCommandBase.cont\ndef _pointervalue(gdbval):\n    \"\"\"\n    Return the value of the pointer as a Python int.\n    gdbval.type must be a pointer type\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyCont",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyCont(ExecutionControlCommandBase):\n    invoke = ExecutionControlCommandBase.cont\ndef _pointervalue(gdbval):\n    \"\"\"\n    Return the value of the pointer as a Python int.\n    gdbval.type must be a pointer type\n    \"\"\"\n    # don't convert with int() as it will raise a RuntimeError\n    if gdbval.address is not None:\n        return int(gdbval.address)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PythonCodeExecutor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PythonCodeExecutor(object):\n    Py_single_input = 256\n    Py_file_input = 257\n    Py_eval_input = 258\n    def malloc(self, size):\n        chunk = (gdb.parse_and_eval(\"(void *) malloc((size_t) %d)\" % size))\n        pointer = pointervalue(chunk)\n        if pointer == 0:\n            raise gdb.GdbError(\"No memory could be allocated in the inferior.\")\n        return pointer",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "FetchAndRestoreError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class FetchAndRestoreError(PythonCodeExecutor):\n    \"\"\"\n    Context manager that fetches the error indicator in the inferior and\n    restores it on exit.\n    \"\"\"\n    def __init__(self):\n        self.sizeof_PyObjectPtr = gdb.lookup_type('PyObject').pointer().sizeof\n        self.pointer = self.malloc(self.sizeof_PyObjectPtr * 3)\n        type = self.pointer\n        value = self.pointer + self.sizeof_PyObjectPtr",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "FixGdbCommand",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class FixGdbCommand(gdb.Command):\n    def __init__(self, command, actual_command):\n        super(FixGdbCommand, self).__init__(command, gdb.COMMAND_DATA,\n                                            gdb.COMPLETE_NONE)\n        self.actual_command = actual_command\n    def fix_gdb(self):\n        \"\"\"\n        It seems that invoking either 'cy exec' and 'py-exec' work perfectly\n        fine, but after this gdb's python API is entirely broken.\n        Maybe some uncleared exception value is still set?",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "PyExec",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "class PyExec(gdb.Command):\n    def readcode(self, expr):\n        if expr:\n            return expr, PythonCodeExecutor.Py_single_input\n        else:\n            lines = []\n            while True:\n                try:\n                    line = input('>')\n                except EOFError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "safety_limit",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "def safety_limit(val):\n    # Given an integer value from the process being debugged, limit it to some\n    # safety threshold so that arbitrary breakage within said process doesn't\n    # break the gdb process too much (e.g. sizes of iterations, sizes of lists)\n    return min(val, 1000)\ndef safe_range(val):\n    # As per range, but don't trust the value too much: cap it to a safety\n    # threshold in case the data was corrupted\n    return xrange(safety_limit(int(val)))\nif sys.version_info[0] >= 3:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "safe_range",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "def safe_range(val):\n    # As per range, but don't trust the value too much: cap it to a safety\n    # threshold in case the data was corrupted\n    return xrange(safety_limit(int(val)))\nif sys.version_info[0] >= 3:\n    def write_unicode(file, text):\n        file.write(text)\nelse:\n    def write_unicode(file, text):\n        # Write a byte or unicode string to file. Unicode strings are encoded to",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "int_from_int",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "def int_from_int(gdbval):\n    return int(str(gdbval))\ndef stringify(val):\n    # TODO: repr() puts everything on one line; pformat can be nicer, but\n    # can lead to v.long results; this function isolates the choice\n    if True:\n        return repr(val)\n    else:\n        from pprint import pformat\n        return pformat(val)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "def stringify(val):\n    # TODO: repr() puts everything on one line; pformat can be nicer, but\n    # can lead to v.long results; this function isolates the choice\n    if True:\n        return repr(val)\n    else:\n        from pprint import pformat\n        return pformat(val)\nclass PyObjectPtrPrinter:\n    \"Prints a (PyObject*)\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "pretty_printer_lookup",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "def pretty_printer_lookup(gdbval):\n    type = gdbval.type.unqualified()\n    if type.code != gdb.TYPE_CODE_PTR:\n        return None\n    type = type.target().unqualified()\n    t = str(type)\n    if t in (\"PyObject\", \"PyFrameObject\", \"PyUnicodeObject\", \"wrapperobject\"):\n        return PyObjectPtrPrinter(gdbval)\n\"\"\"\nDuring development, I've been manually invoking the code in this way:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "registe",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "def register (obj):\n    if obj is None:\n        obj = gdb\n    # Wire up the pretty-printer\n    obj.pretty_printers.append(pretty_printer_lookup)\nregister (gdb.current_objfile ())\n# Unfortunately, the exact API exposed by the gdb module varies somewhat\n# from build to build\n# See http://bugs.python.org/issue8279?#msg102276\nclass Frame(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "move_in_stack",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "def move_in_stack(move_up):\n    '''Move up or down the stack (for the py-up/py-down command)'''\n    frame = Frame.get_selected_python_frame()\n    if not frame:\n        print('Unable to locate python frame')\n        return\n    while frame:\n        if move_up:\n            iter_frame = frame.older()\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "execute",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "def execute(command, from_tty=False, to_string=False):\n    \"\"\"\n    Replace gdb.execute() with this function and have it accept a 'to_string'\n    argument (new in 7.2). Have it properly capture stderr also. Ensure\n    reentrancy.\n    \"\"\"\n    if to_string:\n        with _logging_state as state:\n            _execute(command, from_tty)\n            return state.getoutput()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "get_selected_inferior",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "def get_selected_inferior():\n    \"\"\"\n    Return the selected inferior in gdb.\n    \"\"\"\n    # Woooh, another bug in gdb! Is there an end in sight?\n    # http://sourceware.org/bugzilla/show_bug.cgi?id=12212\n    return gdb.inferiors()[0]\n    selected_thread = gdb.selected_thread()\n    for inferior in gdb.inferiors():\n        for thread in inferior.threads():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "source_gdb_script",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "def source_gdb_script(script_contents, to_string=False):\n    \"\"\"\n    Source a gdb script with script_contents passed as a string. This is useful\n    to provide defines for py-step and py-next to make them repeatable (this is\n    not possible with gdb.execute()). See\n    http://sourceware.org/bugzilla/show_bug.cgi?id=12216\n    \"\"\"\n    fd, filename = tempfile.mkstemp()\n    f = os.fdopen(fd, 'w')\n    f.write(script_contents)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "register_defines",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "def register_defines():\n    source_gdb_script(textwrap.dedent(\"\"\"\\\n        define py-step\n        -py-step\n        end\n        define py-next\n        -py-next\n        end\n        document py-step\n        %s",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "stackdepth",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "def stackdepth(frame):\n    \"Tells the stackdepth of a gdb frame.\"\n    depth = 0\n    while frame:\n        frame = frame.older()\n        depth += 1\n    return depth\nclass ExecutionControlCommandBase(gdb.Command):\n    \"\"\"\n    Superclass for language specific execution control. Language specific",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "pointervalue",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "def pointervalue(gdbval):\n    pointer = _pointervalue(gdbval)\n    try:\n        if pointer < 0:\n            raise gdb.GdbError(\"Negative pointer value, presumably a bug \"\n                               \"in gdb, aborting.\")\n    except RuntimeError:\n        # work around yet another bug in gdb where you get random behaviour\n        # and tracebacks\n        pass",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "get_inferior_unicode_postfix",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "def get_inferior_unicode_postfix():\n    try:\n        gdb.parse_and_eval('PyUnicode_FromEncodedObject')\n    except RuntimeError:\n        try:\n            gdb.parse_and_eval('PyUnicodeUCS2_FromEncodedObject')\n        except RuntimeError:\n            return 'UCS4'\n        else:\n            return 'UCS2'",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "_is_pep393",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "_is_pep393 = None\nPy_TPFLAGS_HEAPTYPE = (1 << 9)\nPy_TPFLAGS_LONG_SUBCLASS     = (1 << 24)\nPy_TPFLAGS_LIST_SUBCLASS     = (1 << 25)\nPy_TPFLAGS_TUPLE_SUBCLASS    = (1 << 26)\nPy_TPFLAGS_BYTES_SUBCLASS    = (1 << 27)\nPy_TPFLAGS_UNICODE_SUBCLASS  = (1 << 28)\nPy_TPFLAGS_DICT_SUBCLASS     = (1 << 29)\nPy_TPFLAGS_BASE_EXC_SUBCLASS = (1 << 30)\nPy_TPFLAGS_TYPE_SUBCLASS     = (1 << 31)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "Py_TPFLAGS_HEAPTYPE",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "Py_TPFLAGS_HEAPTYPE = (1 << 9)\nPy_TPFLAGS_LONG_SUBCLASS     = (1 << 24)\nPy_TPFLAGS_LIST_SUBCLASS     = (1 << 25)\nPy_TPFLAGS_TUPLE_SUBCLASS    = (1 << 26)\nPy_TPFLAGS_BYTES_SUBCLASS    = (1 << 27)\nPy_TPFLAGS_UNICODE_SUBCLASS  = (1 << 28)\nPy_TPFLAGS_DICT_SUBCLASS     = (1 << 29)\nPy_TPFLAGS_BASE_EXC_SUBCLASS = (1 << 30)\nPy_TPFLAGS_TYPE_SUBCLASS     = (1 << 31)\nMAX_OUTPUT_LEN=1024",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "Py_TPFLAGS_BASE_EXC_SUBCLASS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "Py_TPFLAGS_BASE_EXC_SUBCLASS = (1 << 30)\nPy_TPFLAGS_TYPE_SUBCLASS     = (1 << 31)\nMAX_OUTPUT_LEN=1024\nhexdigits = \"0123456789abcdef\"\nENCODING = locale.getpreferredencoding()\nEVALFRAME = '_PyEval_EvalFrameDefault'\nclass NullPyObjectPtr(RuntimeError):\n    pass\ndef safety_limit(val):\n    # Given an integer value from the process being debugged, limit it to some",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "hexdigits",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "hexdigits = \"0123456789abcdef\"\nENCODING = locale.getpreferredencoding()\nEVALFRAME = '_PyEval_EvalFrameDefault'\nclass NullPyObjectPtr(RuntimeError):\n    pass\ndef safety_limit(val):\n    # Given an integer value from the process being debugged, limit it to some\n    # safety threshold so that arbitrary breakage within said process doesn't\n    # break the gdb process too much (e.g. sizes of iterations, sizes of lists)\n    return min(val, 1000)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "ENCODING",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "ENCODING = locale.getpreferredencoding()\nEVALFRAME = '_PyEval_EvalFrameDefault'\nclass NullPyObjectPtr(RuntimeError):\n    pass\ndef safety_limit(val):\n    # Given an integer value from the process being debugged, limit it to some\n    # safety threshold so that arbitrary breakage within said process doesn't\n    # break the gdb process too much (e.g. sizes of iterations, sizes of lists)\n    return min(val, 1000)\ndef safe_range(val):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "EVALFRAME",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "EVALFRAME = '_PyEval_EvalFrameDefault'\nclass NullPyObjectPtr(RuntimeError):\n    pass\ndef safety_limit(val):\n    # Given an integer value from the process being debugged, limit it to some\n    # safety threshold so that arbitrary breakage within said process doesn't\n    # break the gdb process too much (e.g. sizes of iterations, sizes of lists)\n    return min(val, 1000)\ndef safe_range(val):\n    # As per range, but don't trust the value too much: cap it to a safety",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "_PyObject_VAR_SIZE._type_size_t",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "_PyObject_VAR_SIZE._type_size_t = None\nclass HeapTypeObjectPtr(PyObjectPtr):\n    _typename = 'PyObject'\n    def get_attr_dict(self):\n        '''\n        Get the PyDictObject ptr representing the attribute dictionary\n        (or None if there's a problem)\n        '''\n        try:\n            typeobj = self.type()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "_execute",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "_execute = gdb.execute\ngdb.execute = execute\n_logging_state = _LoggingState()\ndef get_selected_inferior():\n    \"\"\"\n    Return the selected inferior in gdb.\n    \"\"\"\n    # Woooh, another bug in gdb! Is there an end in sight?\n    # http://sourceware.org/bugzilla/show_bug.cgi?id=12212\n    return gdb.inferiors()[0]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "gdb.execute",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "gdb.execute = execute\n_logging_state = _LoggingState()\ndef get_selected_inferior():\n    \"\"\"\n    Return the selected inferior in gdb.\n    \"\"\"\n    # Woooh, another bug in gdb! Is there an end in sight?\n    # http://sourceware.org/bugzilla/show_bug.cgi?id=12212\n    return gdb.inferiors()[0]\n    selected_thread = gdb.selected_thread()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "_logging_state",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "peekOfCode": "_logging_state = _LoggingState()\ndef get_selected_inferior():\n    \"\"\"\n    Return the selected inferior in gdb.\n    \"\"\"\n    # Woooh, another bug in gdb! Is there an end in sight?\n    # http://sourceware.org/bugzilla/show_bug.cgi?id=12212\n    return gdb.inferiors()[0]\n    selected_thread = gdb.selected_thread()\n    for inferior in gdb.inferiors():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugger.libpython",
        "documentation": {}
    },
    {
        "label": "new_build_ext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.build_ext",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.build_ext",
        "peekOfCode": "class new_build_ext(_build_ext, object):\n    def finalize_options(self):\n        if self.distribution.ext_modules:\n            nthreads = getattr(self, 'parallel', None)  # -j option in Py3.5+\n            nthreads = int(nthreads) if nthreads else None\n            from Cython.Build.Dependencies import cythonize\n            self.distribution.ext_modules[:] = cythonize(\n                self.distribution.ext_modules, nthreads=nthreads, force=self.force)\n        super(new_build_ext, self).finalize_options()\n# This will become new_build_ext in the future.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.build_ext",
        "documentation": {}
    },
    {
        "label": "Extension",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.extension",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.extension",
        "peekOfCode": "class Extension(_Extension.Extension):\n    # When adding arguments to this constructor, be sure to update\n    # user_options.extend in build_ext.py.\n    def __init__(self, name, sources,\n                 include_dirs=None,\n                 define_macros=None,\n                 undef_macros=None,\n                 library_dirs=None,\n                 libraries=None,\n                 runtime_library_dirs=None,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.extension",
        "documentation": {}
    },
    {
        "label": "__revision__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.extension",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.extension",
        "peekOfCode": "__revision__ = \"$Id:$\"\nimport sys\nimport distutils.extension as _Extension\ntry:\n    import warnings\nexcept ImportError:\n    warnings = None\nclass Extension(_Extension.Extension):\n    # When adding arguments to this constructor, be sure to update\n    # user_options.extend in build_ext.py.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.extension",
        "documentation": {}
    },
    {
        "label": "read_setup_file",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.extension",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.extension",
        "peekOfCode": "read_setup_file = _Extension.read_setup_file\n# reuse and extend original docstring from base class (if we can)\nif sys.version_info[0] < 3 and _Extension.Extension.__doc__:\n    # -OO discards docstrings\n    Extension.__doc__ = _Extension.Extension.__doc__ + \"\"\"\\\n    cython_include_dirs : [string]\n        list of directories to search for Pyrex header files (.pxd) (in\n        Unix form for portability)\n    cython_directives : {string:value}\n        dict of compiler directives",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.extension",
        "documentation": {}
    },
    {
        "label": "Optimization",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "peekOfCode": "class Optimization(object):\n    def __init__(self):\n        self.flags = (\n            'OPT',\n            'CFLAGS',\n            'CPPFLAGS',\n            'EXTRA_CFLAGS',\n            'BASECFLAGS',\n            'PY_CFLAGS',\n        )",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "documentation": {}
    },
    {
        "label": "old_build_ext",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "peekOfCode": "class old_build_ext(_build_ext.build_ext):\n    description = \"build C/C++ and Cython extensions (compile/link to build directory)\"\n    sep_by = _build_ext.build_ext.sep_by\n    user_options = _build_ext.build_ext.user_options[:]\n    boolean_options = _build_ext.build_ext.boolean_options[:]\n    help_options = _build_ext.build_ext.help_options[:]\n    # Add the pyrex specific data.\n    user_options.extend([\n        ('cython-cplus', None,\n         \"generate C++ source files\"),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "documentation": {}
    },
    {
        "label": "__revision__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "peekOfCode": "__revision__ = \"$Id:$\"\nimport inspect\nimport sys\nimport os\nfrom distutils.errors import DistutilsPlatformError\nfrom distutils.dep_util import newer, newer_group\nfrom distutils import log\nfrom distutils.command import build_ext as _build_ext\nfrom distutils import sysconfig\nimport warnings",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "documentation": {}
    },
    {
        "label": "extension_name_re",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "peekOfCode": "extension_name_re = _build_ext.extension_name_re\nshow_compilers = _build_ext.show_compilers\nclass Optimization(object):\n    def __init__(self):\n        self.flags = (\n            'OPT',\n            'CFLAGS',\n            'CPPFLAGS',\n            'EXTRA_CFLAGS',\n            'BASECFLAGS',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "documentation": {}
    },
    {
        "label": "show_compilers",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "peekOfCode": "show_compilers = _build_ext.show_compilers\nclass Optimization(object):\n    def __init__(self):\n        self.flags = (\n            'OPT',\n            'CFLAGS',\n            'CPPFLAGS',\n            'EXTRA_CFLAGS',\n            'BASECFLAGS',\n            'PY_CFLAGS',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "documentation": {}
    },
    {
        "label": "optimization",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "peekOfCode": "optimization = Optimization()\nclass old_build_ext(_build_ext.build_ext):\n    description = \"build C/C++ and Cython extensions (compile/link to build directory)\"\n    sep_by = _build_ext.build_ext.sep_by\n    user_options = _build_ext.build_ext.user_options[:]\n    boolean_options = _build_ext.build_ext.boolean_options[:]\n    help_options = _build_ext.build_ext.help_options[:]\n    # Add the pyrex specific data.\n    user_options.extend([\n        ('cython-cplus', None,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Distutils.old_build_ext",
        "documentation": {}
    },
    {
        "label": "Action",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "peekOfCode": "class Action(object):\n    def perform(self, token_stream, text):\n        pass  # abstract\n    def same_as(self, other):\n        return self is other\nclass Return(Action):\n    \"\"\"\n    Internal Plex action which causes |value| to\n    be returned as the value of the associated token\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "Return",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "peekOfCode": "class Return(Action):\n    \"\"\"\n    Internal Plex action which causes |value| to\n    be returned as the value of the associated token\n    \"\"\"\n    def __init__(self, value):\n        self.value = value\n    def perform(self, token_stream, text):\n        return self.value\n    def same_as(self, other):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "Call",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "peekOfCode": "class Call(Action):\n    \"\"\"\n    Internal Plex action which causes a function to be called.\n    \"\"\"\n    def __init__(self, function):\n        self.function = function\n    def perform(self, token_stream, text):\n        return self.function(token_stream, text)\n    def __repr__(self):\n        return \"Call(%s)\" % self.function.__name__",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "Begin",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "peekOfCode": "class Begin(Action):\n    \"\"\"\n    Begin(state_name) is a Plex action which causes the Scanner to\n    enter the state |state_name|. See the docstring of Plex.Lexicon\n    for more information.\n    \"\"\"\n    def __init__(self, state_name):\n        self.state_name = state_name\n    def perform(self, token_stream, text):\n        token_stream.begin(self.state_name)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "Ignore",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "peekOfCode": "class Ignore(Action):\n    \"\"\"\n    IGNORE is a Plex action which causes its associated token\n    to be ignored. See the docstring of Plex.Lexicon  for more\n    information.\n    \"\"\"\n    def perform(self, token_stream, text):\n        return None\n    def __repr__(self):\n        return \"IGNORE\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "Text",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "peekOfCode": "class Text(Action):\n    \"\"\"\n    TEXT is a Plex action which causes the text of a token to\n    be returned as the value of the token. See the docstring of\n    Plex.Lexicon  for more information.\n    \"\"\"\n    def perform(self, token_stream, text):\n        return text\n    def __repr__(self):\n        return \"TEXT\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "IGNORE",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "peekOfCode": "IGNORE = Ignore()\n#IGNORE.__doc__ = Ignore.__doc__\nclass Text(Action):\n    \"\"\"\n    TEXT is a Plex action which causes the text of a token to\n    be returned as the value of the token. See the docstring of\n    Plex.Lexicon  for more information.\n    \"\"\"\n    def perform(self, token_stream, text):\n        return text",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "#IGNORE.__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "peekOfCode": "#IGNORE.__doc__ = Ignore.__doc__\nclass Text(Action):\n    \"\"\"\n    TEXT is a Plex action which causes the text of a token to\n    be returned as the value of the token. See the docstring of\n    Plex.Lexicon  for more information.\n    \"\"\"\n    def perform(self, token_stream, text):\n        return text\n    def __repr__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "peekOfCode": "TEXT = Text()\n#TEXT.__doc__ = Text.__doc__",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "#TEXT.__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "peekOfCode": "#TEXT.__doc__ = Text.__doc__",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Actions",
        "documentation": {}
    },
    {
        "label": "StateMap",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.DFA",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.DFA",
        "peekOfCode": "class StateMap(object):\n    \"\"\"\n    Helper class used by nfa_to_dfa() to map back and forth between\n    sets of states from the old machine and states of the new machine.\n    \"\"\"\n    new_machine = None      # Machine\n    old_to_new_dict = None  # {(old_state,...) : new_state}\n    new_to_old_dict = None  # {id(new_state) : old_state_set}\n    def __init__(self, new_machine):\n        self.new_machine = new_machine",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.DFA",
        "documentation": {}
    },
    {
        "label": "nfa_to_dfa",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.DFA",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.DFA",
        "peekOfCode": "def nfa_to_dfa(old_machine, debug=None):\n    \"\"\"\n    Given a nondeterministic Machine, return a new equivalent\n    Machine which is deterministic.\n    \"\"\"\n    # We build a new machine whose states correspond to sets of states\n    # in the old machine. Initially we add a new state corresponding to\n    # the epsilon-closure of each initial old state. Then we give transitions\n    # to each new state which are the union of all transitions out of any\n    # of the corresponding old states. The new state reached on a given",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.DFA",
        "documentation": {}
    },
    {
        "label": "set_epsilon_closure",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.DFA",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.DFA",
        "peekOfCode": "def set_epsilon_closure(state_set):\n    \"\"\"\n    Given a set of states, return the union of the epsilon\n    closures of its member states.\n    \"\"\"\n    result = {}\n    for state1 in state_set:\n        for state2 in epsilon_closure(state1):\n            result[state2] = 1\n    return result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.DFA",
        "documentation": {}
    },
    {
        "label": "epsilon_closure",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.DFA",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.DFA",
        "peekOfCode": "def epsilon_closure(state):\n    \"\"\"\n    Return the set of states reachable from the given state\n    by epsilon moves.\n    \"\"\"\n    # Cache the result\n    result = state.epsilon_closure\n    if result is None:\n        result = {}\n        state.epsilon_closure = result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.DFA",
        "documentation": {}
    },
    {
        "label": "add_to_epsilon_closure",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.DFA",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.DFA",
        "peekOfCode": "def add_to_epsilon_closure(state_set, state):\n    \"\"\"\n    Recursively add to |state_set| states reachable from the given state\n    by epsilon moves.\n    \"\"\"\n    if not state_set.get(state, 0):\n        state_set[state] = 1\n        state_set_2 = state.transitions.get_epsilon()\n        if state_set_2:\n            for state2 in state_set_2:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.DFA",
        "documentation": {}
    },
    {
        "label": "PlexError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "peekOfCode": "class PlexError(Exception):\n    message = \"\"\nclass PlexTypeError(PlexError, TypeError):\n    pass\nclass PlexValueError(PlexError, ValueError):\n    pass\nclass InvalidRegex(PlexError):\n    pass\nclass InvalidToken(PlexError):\n    def __init__(self, token_number, message):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "PlexTypeError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "peekOfCode": "class PlexTypeError(PlexError, TypeError):\n    pass\nclass PlexValueError(PlexError, ValueError):\n    pass\nclass InvalidRegex(PlexError):\n    pass\nclass InvalidToken(PlexError):\n    def __init__(self, token_number, message):\n        PlexError.__init__(self, \"Token number %d: %s\" % (token_number, message))\nclass InvalidScanner(PlexError):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "PlexValueError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "peekOfCode": "class PlexValueError(PlexError, ValueError):\n    pass\nclass InvalidRegex(PlexError):\n    pass\nclass InvalidToken(PlexError):\n    def __init__(self, token_number, message):\n        PlexError.__init__(self, \"Token number %d: %s\" % (token_number, message))\nclass InvalidScanner(PlexError):\n    pass\nclass AmbiguousAction(PlexError):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "InvalidRegex",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "peekOfCode": "class InvalidRegex(PlexError):\n    pass\nclass InvalidToken(PlexError):\n    def __init__(self, token_number, message):\n        PlexError.__init__(self, \"Token number %d: %s\" % (token_number, message))\nclass InvalidScanner(PlexError):\n    pass\nclass AmbiguousAction(PlexError):\n    message = \"Two tokens with different actions can match the same string\"\n    def __init__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "InvalidToken",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "peekOfCode": "class InvalidToken(PlexError):\n    def __init__(self, token_number, message):\n        PlexError.__init__(self, \"Token number %d: %s\" % (token_number, message))\nclass InvalidScanner(PlexError):\n    pass\nclass AmbiguousAction(PlexError):\n    message = \"Two tokens with different actions can match the same string\"\n    def __init__(self):\n        pass\nclass UnrecognizedInput(PlexError):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "InvalidScanner",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "peekOfCode": "class InvalidScanner(PlexError):\n    pass\nclass AmbiguousAction(PlexError):\n    message = \"Two tokens with different actions can match the same string\"\n    def __init__(self):\n        pass\nclass UnrecognizedInput(PlexError):\n    scanner = None\n    position = None\n    state_name = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "AmbiguousAction",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "peekOfCode": "class AmbiguousAction(PlexError):\n    message = \"Two tokens with different actions can match the same string\"\n    def __init__(self):\n        pass\nclass UnrecognizedInput(PlexError):\n    scanner = None\n    position = None\n    state_name = None\n    def __init__(self, scanner, state_name):\n        self.scanner = scanner",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "UnrecognizedInput",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "peekOfCode": "class UnrecognizedInput(PlexError):\n    scanner = None\n    position = None\n    state_name = None\n    def __init__(self, scanner, state_name):\n        self.scanner = scanner\n        self.position = scanner.get_position()\n        self.state_name = state_name\n    def __str__(self):\n        return (\"'%s', line %d, char %d: Token not recognised in state %r\" % (",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Errors",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Lexicons",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Lexicons",
        "peekOfCode": "class State(object):\n    \"\"\"\n    This class is used as part of a Plex.Lexicon specification to\n    introduce a user-defined state.\n    Constructor:\n       State(name, token_specifications)\n    \"\"\"\n    name = None\n    tokens = None\n    def __init__(self, name, tokens):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Lexicons",
        "documentation": {}
    },
    {
        "label": "Lexicon",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Lexicons",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Lexicons",
        "peekOfCode": "class Lexicon(object):\n    \"\"\"\n    Lexicon(specification) builds a lexical analyser from the given\n    |specification|. The specification consists of a list of\n    specification items. Each specification item may be either:\n       1) A token definition, which is a tuple:\n             (pattern, action)\n          The |pattern| is a regular axpression built using the\n          constructors defined in the Plex module.\n          The |action| is the action to be performed when this pattern",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Lexicons",
        "documentation": {}
    },
    {
        "label": "DUMP_NFA",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Lexicons",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Lexicons",
        "peekOfCode": "DUMP_NFA = 1\nDUMP_DFA = 2\nclass State(object):\n    \"\"\"\n    This class is used as part of a Plex.Lexicon specification to\n    introduce a user-defined state.\n    Constructor:\n       State(name, token_specifications)\n    \"\"\"\n    name = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Lexicons",
        "documentation": {}
    },
    {
        "label": "DUMP_DFA",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Lexicons",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Lexicons",
        "peekOfCode": "DUMP_DFA = 2\nclass State(object):\n    \"\"\"\n    This class is used as part of a Plex.Lexicon specification to\n    introduce a user-defined state.\n    Constructor:\n       State(name, token_specifications)\n    \"\"\"\n    name = None\n    tokens = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Lexicons",
        "documentation": {}
    },
    {
        "label": "Machine",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Machines",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Machines",
        "peekOfCode": "class Machine(object):\n    \"\"\"A collection of Nodes representing an NFA or DFA.\"\"\"\n    states = None          # [Node]\n    next_state_number = 1\n    initial_states = None  # {(name, bol): Node}\n    def __init__(self):\n        self.states = []\n        self.initial_states = {}\n    def __del__(self):\n        #print \"Destroying\", self ###",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Machines",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Machines",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Machines",
        "peekOfCode": "class Node(object):\n    \"\"\"A state of an NFA or DFA.\"\"\"\n    transitions = None      # TransitionMap\n    action = None           # Action\n    action_priority = None  # integer\n    number = 0              # for debug output\n    epsilon_closure = None  # used by nfa_to_dfa()\n    def __init__(self):\n        # Preinitialise the list of empty transitions, because\n        # the nfa-to-dfa algorithm needs it",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Machines",
        "documentation": {}
    },
    {
        "label": "FastMachine",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Machines",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Machines",
        "peekOfCode": "class FastMachine(object):\n    \"\"\"\n    FastMachine is a deterministic machine represented in a way that\n    allows fast scanning.\n    \"\"\"\n    initial_states = None  # {state_name:state}\n    states = None          # [state]  where state = {event:state, 'else':state, 'action':Action}\n    next_number = 1        # for debugging\n    new_state_template = {\n        '': None, 'bol': None, 'eol': None, 'eof': None, 'else': None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Machines",
        "documentation": {}
    },
    {
        "label": "LOWEST_PRIORITY",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Machines",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Machines",
        "peekOfCode": "LOWEST_PRIORITY = -maxint\nclass Machine(object):\n    \"\"\"A collection of Nodes representing an NFA or DFA.\"\"\"\n    states = None          # [Node]\n    next_state_number = 1\n    initial_states = None  # {(name, bol): Node}\n    def __init__(self):\n        self.states = []\n        self.initial_states = {}\n    def __del__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Machines",
        "documentation": {}
    },
    {
        "label": "RE",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "class RE(object):\n    \"\"\"RE is the base class for regular expression constructors.\n    The following operators are defined on REs:\n         re1 + re2         is an RE which matches |re1| followed by |re2|\n         re1 | re2         is an RE which matches either |re1| or |re2|\n    \"\"\"\n    nullable = 1  # True if this RE can match 0 input symbols\n    match_nl = 1  # True if this RE can match a string ending with '\\n'\n    str = None    # Set to a string to override the class's __str__ result\n    def build_machine(self, machine, initial_state, final_state,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "RawCodeRange",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "class RawCodeRange(RE):\n    \"\"\"\n    RawCodeRange(code1, code2) is a low-level RE which matches any character\n    with a code |c| in the range |code1| <= |c| < |code2|, where the range\n    does not include newline. For internal use only.\n    \"\"\"\n    nullable = 0\n    match_nl = 0\n    range = None            # (code, code)\n    uppercase_range = None  # (code, code) or None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "_RawNewline",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "class _RawNewline(RE):\n    \"\"\"\n    RawNewline is a low-level RE which matches a newline character.\n    For internal use only.\n    \"\"\"\n    nullable = 0\n    match_nl = 1\n    def build_machine(self, m, initial_state, final_state, match_bol, nocase):\n        if match_bol:\n            initial_state = self.build_opt(m, initial_state, BOL)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "SpecialSymbol",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "class SpecialSymbol(RE):\n    \"\"\"\n    SpecialSymbol(sym) is an RE which matches the special input\n    symbol |sym|, which is one of BOL, EOL or EOF.\n    \"\"\"\n    nullable = 0\n    match_nl = 0\n    sym = None\n    def __init__(self, sym):\n        self.sym = sym",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Seq",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "class Seq(RE):\n    \"\"\"Seq(re1, re2, re3...) is an RE which matches |re1| followed by\n    |re2| followed by |re3|...\"\"\"\n    def __init__(self, *re_list):\n        nullable = 1\n        for i, re in enumerate(re_list):\n            self.check_re(i, re)\n            nullable = nullable and re.nullable\n        self.re_list = re_list\n        self.nullable = nullable",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Alt",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "class Alt(RE):\n    \"\"\"Alt(re1, re2, re3...) is an RE which matches either |re1| or\n    |re2| or |re3|...\"\"\"\n    def __init__(self, *re_list):\n        self.re_list = re_list\n        nullable = 0\n        match_nl = 0\n        nullable_res = []\n        non_nullable_res = []\n        i = 1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Rep1",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "class Rep1(RE):\n    \"\"\"Rep1(re) is an RE which matches one or more repetitions of |re|.\"\"\"\n    def __init__(self, re):\n        self.check_re(1, re)\n        self.re = re\n        self.nullable = re.nullable\n        self.match_nl = re.match_nl\n    def build_machine(self, m, initial_state, final_state, match_bol, nocase):\n        s1 = m.new_state()\n        s2 = m.new_state()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "SwitchCase",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "class SwitchCase(RE):\n    \"\"\"\n    SwitchCase(re, nocase) is an RE which matches the same strings as RE,\n    but treating upper and lower case letters according to |nocase|. If\n    |nocase| is true, case is ignored, otherwise it is not.\n    \"\"\"\n    re = None\n    nocase = None\n    def __init__(self, re, nocase):\n        self.re = re",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "chars_to_ranges",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "def chars_to_ranges(s):\n    \"\"\"\n    Return a list of character codes consisting of pairs\n    [code1a, code1b, code2a, code2b,...] which cover all\n    the characters in |s|.\n    \"\"\"\n    char_list = list(s)\n    char_list.sort()\n    i = 0\n    n = len(char_list)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "uppercase_range",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "def uppercase_range(code1, code2):\n    \"\"\"\n    If the range of characters from code1 to code2-1 includes any\n    lower case letters, return the corresponding upper case range.\n    \"\"\"\n    code3 = max(code1, ord('a'))\n    code4 = min(code2, ord('z') + 1)\n    if code3 < code4:\n        d = ord('A') - ord('a')\n        return (code3 + d, code4 + d)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "lowercase_range",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "def lowercase_range(code1, code2):\n    \"\"\"\n    If the range of characters from code1 to code2-1 includes any\n    upper case letters, return the corresponding lower case range.\n    \"\"\"\n    code3 = max(code1, ord('A'))\n    code4 = min(code2, ord('Z') + 1)\n    if code3 < code4:\n        d = ord('a') - ord('A')\n        return (code3 + d, code4 + d)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "CodeRanges",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "def CodeRanges(code_list):\n    \"\"\"\n    Given a list of codes as returned by chars_to_ranges, return\n    an RE which will match a character in any of the ranges.\n    \"\"\"\n    re_list = [CodeRange(code_list[i], code_list[i + 1]) for i in range(0, len(code_list), 2)]\n    return Alt(*re_list)\ndef CodeRange(code1, code2):\n    \"\"\"\n    CodeRange(code1, code2) is an RE which matches any character",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "CodeRange",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "def CodeRange(code1, code2):\n    \"\"\"\n    CodeRange(code1, code2) is an RE which matches any character\n    with a code |c| in the range |code1| <= |c| < |code2|.\n    \"\"\"\n    if code1 <= nl_code < code2:\n        return Alt(RawCodeRange(code1, nl_code),\n                   RawNewline,\n                   RawCodeRange(nl_code + 1, code2))\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Char",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Char(c):\n    \"\"\"\n    Char(c) is an RE which matches the character |c|.\n    \"\"\"\n    if len(c) == 1:\n        result = CodeRange(ord(c), ord(c) + 1)\n    else:\n        result = SpecialSymbol(c)\n    result.str = \"Char(%s)\" % repr(c)\n    return result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Str1",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Str1(s):\n    \"\"\"\n    Str1(s) is an RE which matches the literal string |s|.\n    \"\"\"\n    result = Seq(*tuple(map(Char, s)))\n    result.str = \"Str(%s)\" % repr(s)\n    return result\ndef Str(*strs):\n    \"\"\"\n    Str(s) is an RE which matches the literal string |s|.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Str",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Str(*strs):\n    \"\"\"\n    Str(s) is an RE which matches the literal string |s|.\n    Str(s1, s2, s3, ...) is an RE which matches any of |s1| or |s2| or |s3|...\n    \"\"\"\n    if len(strs) == 1:\n        return Str1(strs[0])\n    else:\n        result = Alt(*tuple(map(Str1, strs)))\n        result.str = \"Str(%s)\" % ','.join(map(repr, strs))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Any",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Any(s):\n    \"\"\"\n    Any(s) is an RE which matches any character in the string |s|.\n    \"\"\"\n    #result = apply(Alt, tuple(map(Char, s)))\n    result = CodeRanges(chars_to_ranges(s))\n    result.str = \"Any(%s)\" % repr(s)\n    return result\ndef AnyBut(s):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "AnyBut",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "def AnyBut(s):\n    \"\"\"\n    AnyBut(s) is an RE which matches any character (including\n    newline) which is not in the string |s|.\n    \"\"\"\n    ranges = chars_to_ranges(s)\n    ranges.insert(0, -maxint)\n    ranges.append(maxint)\n    result = CodeRanges(ranges)\n    result.str = \"AnyBut(%s)\" % repr(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Range",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Range(s1, s2=None):\n    \"\"\"\n    Range(c1, c2) is an RE which matches any single character in the range\n    |c1| to |c2| inclusive.\n    Range(s) where |s| is a string of even length is an RE which matches\n    any single character in the ranges |s[0]| to |s[1]|, |s[2]| to |s[3]|,...\n    \"\"\"\n    if s2:\n        result = CodeRange(ord(s1), ord(s2) + 1)\n        result.str = \"Range(%s,%s)\" % (s1, s2)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Opt",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Opt(re):\n    \"\"\"\n    Opt(re) is an RE which matches either |re| or the empty string.\n    \"\"\"\n    result = Alt(re, Empty)\n    result.str = \"Opt(%s)\" % re\n    return result\ndef Rep(re):\n    \"\"\"\n    Rep(re) is an RE which matches zero or more repetitions of |re|.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Rep",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Rep(re):\n    \"\"\"\n    Rep(re) is an RE which matches zero or more repetitions of |re|.\n    \"\"\"\n    result = Opt(Rep1(re))\n    result.str = \"Rep(%s)\" % re\n    return result\ndef NoCase(re):\n    \"\"\"\n    NoCase(re) is an RE which matches the same strings as RE, but treating",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "NoCase",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "def NoCase(re):\n    \"\"\"\n    NoCase(re) is an RE which matches the same strings as RE, but treating\n    upper and lower case letters as equivalent.\n    \"\"\"\n    return SwitchCase(re, nocase=1)\ndef Case(re):\n    \"\"\"\n    Case(re) is an RE which matches the same strings as RE, but treating\n    upper and lower case letters as distinct, i.e. it cancels the effect",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Case",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "def Case(re):\n    \"\"\"\n    Case(re) is an RE which matches the same strings as RE, but treating\n    upper and lower case letters as distinct, i.e. it cancels the effect\n    of any enclosing NoCase().\n    \"\"\"\n    return SwitchCase(re, nocase=0)\n#\n#     RE Constants\n#",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "BOL",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "BOL = 'bol'\nEOL = 'eol'\nEOF = 'eof'\nnl_code = ord('\\n')\n#\n#     Helper functions\n#\ndef chars_to_ranges(s):\n    \"\"\"\n    Return a list of character codes consisting of pairs",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "EOL",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "EOL = 'eol'\nEOF = 'eof'\nnl_code = ord('\\n')\n#\n#     Helper functions\n#\ndef chars_to_ranges(s):\n    \"\"\"\n    Return a list of character codes consisting of pairs\n    [code1a, code1b, code2a, code2b,...] which cover all",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "EOF",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "EOF = 'eof'\nnl_code = ord('\\n')\n#\n#     Helper functions\n#\ndef chars_to_ranges(s):\n    \"\"\"\n    Return a list of character codes consisting of pairs\n    [code1a, code1b, code2a, code2b,...] which cover all\n    the characters in |s|.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "nl_code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "nl_code = ord('\\n')\n#\n#     Helper functions\n#\ndef chars_to_ranges(s):\n    \"\"\"\n    Return a list of character codes consisting of pairs\n    [code1a, code1b, code2a, code2b,...] which cover all\n    the characters in |s|.\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "RawNewline",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "RawNewline = _RawNewline()\nclass SpecialSymbol(RE):\n    \"\"\"\n    SpecialSymbol(sym) is an RE which matches the special input\n    symbol |sym|, which is one of BOL, EOL or EOF.\n    \"\"\"\n    nullable = 0\n    match_nl = 0\n    sym = None\n    def __init__(self, sym):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Empty",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "Empty = Seq()\nEmpty.__doc__ = \\\n    \"\"\"\n    Empty is an RE which matches the empty string.\n    \"\"\"\nEmpty.str = \"Empty\"\ndef Str1(s):\n    \"\"\"\n    Str1(s) is an RE which matches the literal string |s|.\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Empty.__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "Empty.__doc__ = \\\n    \"\"\"\n    Empty is an RE which matches the empty string.\n    \"\"\"\nEmpty.str = \"Empty\"\ndef Str1(s):\n    \"\"\"\n    Str1(s) is an RE which matches the literal string |s|.\n    \"\"\"\n    result = Seq(*tuple(map(Char, s)))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Empty.str",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "Empty.str = \"Empty\"\ndef Str1(s):\n    \"\"\"\n    Str1(s) is an RE which matches the literal string |s|.\n    \"\"\"\n    result = Seq(*tuple(map(Char, s)))\n    result.str = \"Str(%s)\" % repr(s)\n    return result\ndef Str(*strs):\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "AnyChar",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "AnyChar = AnyBut(\"\")\nAnyChar.__doc__ = \\\n    \"\"\"\n    AnyChar is an RE which matches any single character (including a newline).\n    \"\"\"\nAnyChar.str = \"AnyChar\"\ndef Range(s1, s2=None):\n    \"\"\"\n    Range(c1, c2) is an RE which matches any single character in the range\n    |c1| to |c2| inclusive.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "AnyChar.__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "AnyChar.__doc__ = \\\n    \"\"\"\n    AnyChar is an RE which matches any single character (including a newline).\n    \"\"\"\nAnyChar.str = \"AnyChar\"\ndef Range(s1, s2=None):\n    \"\"\"\n    Range(c1, c2) is an RE which matches any single character in the range\n    |c1| to |c2| inclusive.\n    Range(s) where |s| is a string of even length is an RE which matches",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "AnyChar.str",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "AnyChar.str = \"AnyChar\"\ndef Range(s1, s2=None):\n    \"\"\"\n    Range(c1, c2) is an RE which matches any single character in the range\n    |c1| to |c2| inclusive.\n    Range(s) where |s| is a string of even length is an RE which matches\n    any single character in the ranges |s[0]| to |s[1]|, |s[2]| to |s[3]|,...\n    \"\"\"\n    if s2:\n        result = CodeRange(ord(s1), ord(s2) + 1)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Bol",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "Bol = Char(BOL)\nBol.__doc__ = \\\n    \"\"\"\n    Bol is an RE which matches the beginning of a line.\n    \"\"\"\nBol.str = \"Bol\"\nEol = Char(EOL)\nEol.__doc__ = \\\n    \"\"\"\n    Eol is an RE which matches the end of a line.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Bol.__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "Bol.__doc__ = \\\n    \"\"\"\n    Bol is an RE which matches the beginning of a line.\n    \"\"\"\nBol.str = \"Bol\"\nEol = Char(EOL)\nEol.__doc__ = \\\n    \"\"\"\n    Eol is an RE which matches the end of a line.\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Bol.str",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "Bol.str = \"Bol\"\nEol = Char(EOL)\nEol.__doc__ = \\\n    \"\"\"\n    Eol is an RE which matches the end of a line.\n    \"\"\"\nEol.str = \"Eol\"\nEof = Char(EOF)\nEof.__doc__ = \\\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Eol",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "Eol = Char(EOL)\nEol.__doc__ = \\\n    \"\"\"\n    Eol is an RE which matches the end of a line.\n    \"\"\"\nEol.str = \"Eol\"\nEof = Char(EOF)\nEof.__doc__ = \\\n    \"\"\"\n    Eof is an RE which matches the end of the file.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Eol.__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "Eol.__doc__ = \\\n    \"\"\"\n    Eol is an RE which matches the end of a line.\n    \"\"\"\nEol.str = \"Eol\"\nEof = Char(EOF)\nEof.__doc__ = \\\n    \"\"\"\n    Eof is an RE which matches the end of the file.\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Eol.str",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "Eol.str = \"Eol\"\nEof = Char(EOF)\nEof.__doc__ = \\\n    \"\"\"\n    Eof is an RE which matches the end of the file.\n    \"\"\"\nEof.str = \"Eof\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Eof",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "Eof = Char(EOF)\nEof.__doc__ = \\\n    \"\"\"\n    Eof is an RE which matches the end of the file.\n    \"\"\"\nEof.str = \"Eof\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Eof.__doc__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "Eof.__doc__ = \\\n    \"\"\"\n    Eof is an RE which matches the end of the file.\n    \"\"\"\nEof.str = \"Eof\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Eof.str",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "peekOfCode": "Eof.str = \"Eof\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Regexps",
        "documentation": {}
    },
    {
        "label": "Scanner",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Scanners",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Scanners",
        "peekOfCode": "class Scanner(object):\n    \"\"\"\n    A Scanner is used to read tokens from a stream of characters\n    using the token set specified by a Plex.Lexicon.\n    Constructor:\n      Scanner(lexicon, stream, name = '')\n        See the docstring of the __init__ method for details.\n    Methods:\n      See the docstrings of the individual methods for more\n      information.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Scanners",
        "documentation": {}
    },
    {
        "label": "NOT_FOUND",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Scanners",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Scanners",
        "peekOfCode": "NOT_FOUND = object()\nclass Scanner(object):\n    \"\"\"\n    A Scanner is used to read tokens from a stream of characters\n    using the token set specified by a Plex.Lexicon.\n    Constructor:\n      Scanner(lexicon, stream, name = '')\n        See the docstring of the __init__ method for details.\n    Methods:\n      See the docstrings of the individual methods for more",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Scanners",
        "documentation": {}
    },
    {
        "label": "RegexpSyntaxError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Traditional",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Traditional",
        "peekOfCode": "class RegexpSyntaxError(PlexError):\n    pass\ndef re(s):\n    \"\"\"\n    Convert traditional string representation of regular expression |s|\n    into Plex representation.\n    \"\"\"\n    return REParser(s).parse_re()\nclass REParser(object):\n    def __init__(self, s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Traditional",
        "documentation": {}
    },
    {
        "label": "REParser",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Traditional",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Traditional",
        "peekOfCode": "class REParser(object):\n    def __init__(self, s):\n        self.s = s\n        self.i = -1\n        self.end = 0\n        self.next()\n    def parse_re(self):\n        re = self.parse_alt()\n        if not self.end:\n            self.error(\"Unexpected %s\" % repr(self.c))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Traditional",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Traditional",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Traditional",
        "peekOfCode": "def re(s):\n    \"\"\"\n    Convert traditional string representation of regular expression |s|\n    into Plex representation.\n    \"\"\"\n    return REParser(s).parse_re()\nclass REParser(object):\n    def __init__(self, s):\n        self.s = s\n        self.i = -1",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Traditional",
        "documentation": {}
    },
    {
        "label": "TransitionMap",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Transitions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Transitions",
        "peekOfCode": "class TransitionMap(object):\n    \"\"\"\n    A TransitionMap maps an input event to a set of states.\n    An input event is one of: a range of character codes,\n    the empty string (representing an epsilon move), or one\n    of the special symbols BOL, EOL, EOF.\n    For characters, this implementation compactly represents\n    the map by means of a list:\n      [code_0, states_0, code_1, states_1, code_2, states_2,\n        ..., code_n-1, states_n-1, code_n]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Transitions",
        "documentation": {}
    },
    {
        "label": "state_set_str",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Transitions",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Transitions",
        "peekOfCode": "def state_set_str(set):\n    return \"[%s]\" % ','.join([\"S%d\" % state.number for state in set])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Plex.Transitions",
        "documentation": {}
    },
    {
        "label": "coerce_text",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita.compat3",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita.compat3",
        "peekOfCode": "def coerce_text(v):\n    if not isinstance(v, basestring_):\n        if sys.version < \"3\":\n            attr = '__unicode__'\n        else:\n            attr = '__str__'\n        if hasattr(v, attr):\n            return unicode(v)\n        else:\n            return bytes(v)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita.compat3",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita.compat3",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita.compat3",
        "peekOfCode": "__all__ = ['b', 'basestring_', 'bytes', 'unicode_', 'next', 'is_unicode']\nif sys.version < \"3\":\n    b = bytes = str\n    basestring_ = basestring\n    unicode_ = unicode\nelse:\n    def b(s):\n        if isinstance(s, str):\n            return s.encode('latin1')\n        return bytes(s)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita.compat3",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita.compat3",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita.compat3",
        "peekOfCode": "text = str\nif sys.version < \"3\":\n    def next(obj):\n        return obj.next()\nelse:\n    next = next\nif sys.version < \"3\":\n    def is_unicode(obj):\n        return isinstance(obj, unicode)\nelse:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita.compat3",
        "documentation": {}
    },
    {
        "label": "looper",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._looper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._looper",
        "peekOfCode": "class looper(object):\n    \"\"\"\n    Helper for looping (particularly in templates)\n    Use this like::\n        for loop, item in looper(seq):\n            if loop.first:\n                ...\n    \"\"\"\n    def __init__(self, seq):\n        self.seq = seq",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._looper",
        "documentation": {}
    },
    {
        "label": "looper_iter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._looper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._looper",
        "peekOfCode": "class looper_iter(object):\n    def __init__(self, seq):\n        self.seq = list(seq)\n        self.pos = 0\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.pos >= len(self.seq):\n            raise StopIteration\n        result = loop_pos(self.seq, self.pos), self.seq[self.pos]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._looper",
        "documentation": {}
    },
    {
        "label": "loop_pos",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._looper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._looper",
        "peekOfCode": "class loop_pos(object):\n    def __init__(self, seq, pos):\n        self.seq = seq\n        self.pos = pos\n    def __repr__(self):\n        return '<loop pos=%r at %r>' % (\n            self.seq[self.pos], self.pos)\n    def index(self):\n        return self.pos\n    index = property(index)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._looper",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._looper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._looper",
        "peekOfCode": "__all__ = ['looper']\nclass looper(object):\n    \"\"\"\n    Helper for looping (particularly in templates)\n    Use this like::\n        for loop, item in looper(seq):\n            if loop.first:\n                ...\n    \"\"\"\n    def __init__(self, seq):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._looper",
        "documentation": {}
    },
    {
        "label": "TemplateError",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "class TemplateError(Exception):\n    \"\"\"Exception raised while parsing a template\n    \"\"\"\n    def __init__(self, message, position, name=None):\n        Exception.__init__(self, message)\n        self.position = position\n        self.name = name\n    def __str__(self):\n        msg = ' '.join(self.args)\n        if self.position:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "_TemplateContinue",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "class _TemplateContinue(Exception):\n    pass\nclass _TemplateBreak(Exception):\n    pass\ndef get_file_template(name, from_template):\n    path = os.path.join(os.path.dirname(from_template.name), name)\n    return from_template.__class__.from_filename(\n        path, namespace=from_template.namespace,\n        get_template=from_template.get_template)\nclass Template(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "_TemplateBreak",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "class _TemplateBreak(Exception):\n    pass\ndef get_file_template(name, from_template):\n    path = os.path.join(os.path.dirname(from_template.name), name)\n    return from_template.__class__.from_filename(\n        path, namespace=from_template.namespace,\n        get_template=from_template.get_template)\nclass Template(object):\n    default_namespace = {\n        'start_braces': '{{',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "Template",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "class Template(object):\n    default_namespace = {\n        'start_braces': '{{',\n        'end_braces': '}}',\n        'looper': looper,\n        }\n    default_encoding = 'utf8'\n    default_inherit = None\n    def __init__(self, content, name=None, namespace=None, stacklevel=None,\n                 get_template=None, default_inherit=None, line_offset=0,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "bunch",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "class bunch(dict):\n    def __init__(self, **kw):\n        for name, value in kw.items():\n            setattr(self, name, value)\n    def __setattr__(self, name, value):\n        self[name] = value\n    def __getattr__(self, name):\n        try:\n            return self[name]\n        except KeyError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "class html(object):\n    def __init__(self, value):\n        self.value = value\n    def __str__(self):\n        return self.value\n    def __html__(self):\n        return self.value\n    def __repr__(self):\n        return '<%s %r>' % (\n            self.__class__.__name__, self.value)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "HTMLTemplate",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "class HTMLTemplate(Template):\n    default_namespace = Template.default_namespace.copy()\n    default_namespace.update(dict(\n        html=html,\n        attr=attr,\n        url=url,\n        html_quote=html_quote,\n        ))\n    def _repr(self, value, pos):\n        if hasattr(value, '__html__'):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "TemplateDef",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "class TemplateDef(object):\n    def __init__(self, template, func_name, func_signature,\n                 body, ns, pos, bound_self=None):\n        self._template = template\n        self._func_name = func_name\n        self._func_signature = func_signature\n        self._body = body\n        self._ns = ns\n        self._pos = pos\n        self._bound_self = bound_self",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "TemplateObject",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "class TemplateObject(object):\n    def __init__(self, name):\n        self.__name = name\n        self.get = TemplateObjectGetter(self)\n    def __repr__(self):\n        return '<%s %s>' % (self.__class__.__name__, self.__name)\nclass TemplateObjectGetter(object):\n    def __init__(self, template_obj):\n        self.__template_obj = template_obj\n    def __getattr__(self, attr):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "TemplateObjectGetter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "class TemplateObjectGetter(object):\n    def __init__(self, template_obj):\n        self.__template_obj = template_obj\n    def __getattr__(self, attr):\n        return getattr(self.__template_obj, attr, Empty)\n    def __repr__(self):\n        return '<%s around %r>' % (self.__class__.__name__, self.__template_obj)\nclass _Empty(object):\n    def __call__(self, *args, **kw):\n        return self",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "_Empty",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "class _Empty(object):\n    def __call__(self, *args, **kw):\n        return self\n    def __str__(self):\n        return ''\n    def __repr__(self):\n        return 'Empty'\n    def __unicode__(self):\n        return u''\n    def __iter__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "get_file_template",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def get_file_template(name, from_template):\n    path = os.path.join(os.path.dirname(from_template.name), name)\n    return from_template.__class__.from_filename(\n        path, namespace=from_template.namespace,\n        get_template=from_template.get_template)\nclass Template(object):\n    default_namespace = {\n        'start_braces': '{{',\n        'end_braces': '}}',\n        'looper': looper,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def sub(content, delimeters=None, **kw):\n    name = kw.get('__name')\n    tmpl = Template(content, name=name, delimeters=delimeters)\n    return tmpl.substitute(kw)\ndef paste_script_template_renderer(content, vars, filename=None):\n    tmpl = Template(content, name=filename)\n    return tmpl.substitute(vars)\nclass bunch(dict):\n    def __init__(self, **kw):\n        for name, value in kw.items():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "paste_script_template_renderer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def paste_script_template_renderer(content, vars, filename=None):\n    tmpl = Template(content, name=filename)\n    return tmpl.substitute(vars)\nclass bunch(dict):\n    def __init__(self, **kw):\n        for name, value in kw.items():\n            setattr(self, name, value)\n    def __setattr__(self, name, value):\n        self[name] = value\n    def __getattr__(self, name):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "html_quote",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def html_quote(value, force=True):\n    if not force and hasattr(value, '__html__'):\n        return value.__html__()\n    if value is None:\n        return ''\n    if not isinstance(value, basestring_):\n        value = coerce_text(value)\n    if sys.version >= \"3\" and isinstance(value, bytes):\n        value = cgi.escape(value.decode('latin1'), 1)\n        value = value.encode('latin1')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def url(v):\n    v = coerce_text(v)\n    if is_unicode(v):\n        v = v.encode('utf8')\n    return url_quote(v)\ndef attr(**kw):\n    parts = []\n    for name, value in sorted(kw.items()):\n        if value is None:\n            continue",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "attr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def attr(**kw):\n    parts = []\n    for name, value in sorted(kw.items()):\n        if value is None:\n            continue\n        if name.endswith('_'):\n            name = name[:-1]\n        parts.append('%s=\"%s\"' % (html_quote(name), html_quote(value)))\n    return html(' '.join(parts))\nclass HTMLTemplate(Template):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "sub_html",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def sub_html(content, **kw):\n    name = kw.get('__name')\n    tmpl = HTMLTemplate(content, name=name)\n    return tmpl.substitute(kw)\nclass TemplateDef(object):\n    def __init__(self, template, func_name, func_signature,\n                 body, ns, pos, bound_self=None):\n        self._template = template\n        self._func_name = func_name\n        self._func_signature = func_signature",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "lex",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def lex(s, name=None, trim_whitespace=True, line_offset=0, delimeters=None):\n    \"\"\"\n    Lex a string into chunks:\n        >>> lex('hey')\n        ['hey']\n        >>> lex('hey {{you}}')\n        ['hey ', ('you', (1, 7))]\n        >>> lex('hey {{')\n        Traceback (most recent call last):\n            ...",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "trim_lex",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def trim_lex(tokens):\n    r\"\"\"\n    Takes a lexed set of tokens, and removes whitespace when there is\n    a directive on a line by itself:\n       >>> tokens = lex('{{if x}}\\nx\\n{{endif}}\\ny', trim_whitespace=False)\n       >>> tokens\n       [('if x', (1, 3)), '\\nx\\n', ('endif', (3, 3)), '\\ny']\n       >>> trim_lex(tokens)\n       [('if x', (1, 3)), 'x\\n', ('endif', (3, 3)), 'y']\n    \"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "find_position",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def find_position(string, index, last_index, last_pos):\n    \"\"\"Given a string and index, return (line, column)\"\"\"\n    lines = string.count('\\n', last_index, index)\n    if lines > 0:\n        column = index - string.rfind('\\n', last_index, index)\n    else:\n        column = last_pos[1] + (index - last_index)\n    return (last_pos[0] + lines, column)\ndef parse(s, name=None, line_offset=0, delimeters=None):\n    r\"\"\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse(s, name=None, line_offset=0, delimeters=None):\n    r\"\"\"\n    Parses a string into a kind of AST\n        >>> parse('{{x}}')\n        [('expr', (1, 3), 'x')]\n        >>> parse('foo')\n        ['foo']\n        >>> parse('{{if x}}test{{endif}}')\n        [('cond', (1, 3), ('if', (1, 3), 'x', ['test']))]\n        >>> parse('series->{{for x in y}}x={{x}}{{endfor}}')",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_expr",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_expr(tokens, name, context=()):\n    if isinstance(tokens[0], basestring_):\n        return tokens[0], tokens[1:]\n    expr, pos = tokens[0]\n    expr = expr.strip()\n    if expr.startswith('py:'):\n        expr = expr[3:].lstrip(' \\t')\n        if expr.startswith('\\n') or expr.startswith('\\r'):\n            expr = expr.lstrip('\\r\\n')\n            if '\\r' in expr:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_cond",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_cond(tokens, name, context):\n    start = tokens[0][1]\n    pieces = []\n    context = context + ('if',)\n    while 1:\n        if not tokens:\n            raise TemplateError(\n                'Missing {{endif}}',\n                position=start, name=name)\n        if (isinstance(tokens[0], tuple)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_one_cond",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_one_cond(tokens, name, context):\n    (first, pos), tokens = tokens[0], tokens[1:]\n    content = []\n    if first.endswith(':'):\n        first = first[:-1]\n    if first.startswith('if '):\n        part = ('if', pos, first[3:].lstrip(), content)\n    elif first.startswith('elif '):\n        part = ('elif', pos, first[5:].lstrip(), content)\n    elif first == 'else':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_for",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_for(tokens, name, context):\n    first, pos = tokens[0]\n    tokens = tokens[1:]\n    context = ('for',) + context\n    content = []\n    assert first.startswith('for ')\n    if first.endswith(':'):\n        first = first[:-1]\n    first = first[3:].strip()\n    match = in_re.search(first)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_default",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_default(tokens, name, context):\n    first, pos = tokens[0]\n    assert first.startswith('default ')\n    first = first.split(None, 1)[1]\n    parts = first.split('=', 1)\n    if len(parts) == 1:\n        raise TemplateError(\n            \"Expression must be {{default var=value}}; no = found in %r\" % first,\n            position=pos, name=name)\n    var = parts[0].strip()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_inherit",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_inherit(tokens, name, context):\n    first, pos = tokens[0]\n    assert first.startswith('inherit ')\n    expr = first.split(None, 1)[1]\n    return ('inherit', pos, expr), tokens[1:]\ndef parse_def(tokens, name, context):\n    first, start = tokens[0]\n    tokens = tokens[1:]\n    assert first.startswith('def ')\n    first = first.split(None, 1)[1]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_def",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_def(tokens, name, context):\n    first, start = tokens[0]\n    tokens = tokens[1:]\n    assert first.startswith('def ')\n    first = first.split(None, 1)[1]\n    if first.endswith(':'):\n        first = first[:-1]\n    if '(' not in first:\n        func_name = first\n        sig = ((), None, None, {})",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "parse_signature",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def parse_signature(sig_text, name, pos):\n    tokens = tokenize.generate_tokens(StringIO(sig_text).readline)\n    sig_args = []\n    var_arg = None\n    var_kw = None\n    defaults = {}\n    def get_token(pos=False):\n        try:\n            tok_type, tok_string, (srow, scol), (erow, ecol), line = next(tokens)\n        except StopIteration:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "isolate_expression",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def isolate_expression(string, start_pos, end_pos):\n    srow, scol = start_pos\n    srow -= 1\n    erow, ecol = end_pos\n    erow -= 1\n    lines = string.splitlines(True)\n    if srow == erow:\n        return lines[srow][scol:ecol]\n    parts = [lines[srow][scol:]]\n    parts.extend(lines[srow+1:erow])",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "fill_command",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "def fill_command(args=None):\n    import sys\n    import optparse\n    import pkg_resources\n    import os\n    if args is None:\n        args = sys.argv[1:]\n    dist = pkg_resources.get_distribution('Paste')\n    parser = optparse.OptionParser(\n        version=coerce_text(dist),",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "__all__ = ['TemplateError', 'Template', 'sub', 'HTMLTemplate',\n           'sub_html', 'html', 'bunch']\nin_re = re.compile(r'\\s+in\\s+')\nvar_re = re.compile(r'^[a-z_][a-z0-9_]*$', re.I)\nclass TemplateError(Exception):\n    \"\"\"Exception raised while parsing a template\n    \"\"\"\n    def __init__(self, message, position, name=None):\n        Exception.__init__(self, message)\n        self.position = position",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "in_re",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "in_re = re.compile(r'\\s+in\\s+')\nvar_re = re.compile(r'^[a-z_][a-z0-9_]*$', re.I)\nclass TemplateError(Exception):\n    \"\"\"Exception raised while parsing a template\n    \"\"\"\n    def __init__(self, message, position, name=None):\n        Exception.__init__(self, message)\n        self.position = position\n        self.name = name\n    def __str__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "var_re",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "var_re = re.compile(r'^[a-z_][a-z0-9_]*$', re.I)\nclass TemplateError(Exception):\n    \"\"\"Exception raised while parsing a template\n    \"\"\"\n    def __init__(self, message, position, name=None):\n        Exception.__init__(self, message)\n        self.position = position\n        self.name = name\n    def __str__(self):\n        msg = ' '.join(self.args)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "Empty",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "Empty = _Empty()\ndel _Empty\n############################################################\n## Lexing and Parsing\n############################################################\ndef lex(s, name=None, trim_whitespace=True, line_offset=0, delimeters=None):\n    \"\"\"\n    Lex a string into chunks:\n        >>> lex('hey')\n        ['hey']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "statement_re",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "statement_re = re.compile(r'^(?:if |elif |for |def |inherit |default |py:)')\nsingle_statements = ['else', 'endif', 'endfor', 'enddef', 'continue', 'break']\ntrail_whitespace_re = re.compile(r'\\n\\r?[\\t ]*$')\nlead_whitespace_re = re.compile(r'^[\\t ]*\\n')\ndef trim_lex(tokens):\n    r\"\"\"\n    Takes a lexed set of tokens, and removes whitespace when there is\n    a directive on a line by itself:\n       >>> tokens = lex('{{if x}}\\nx\\n{{endif}}\\ny', trim_whitespace=False)\n       >>> tokens",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "single_statements",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "single_statements = ['else', 'endif', 'endfor', 'enddef', 'continue', 'break']\ntrail_whitespace_re = re.compile(r'\\n\\r?[\\t ]*$')\nlead_whitespace_re = re.compile(r'^[\\t ]*\\n')\ndef trim_lex(tokens):\n    r\"\"\"\n    Takes a lexed set of tokens, and removes whitespace when there is\n    a directive on a line by itself:\n       >>> tokens = lex('{{if x}}\\nx\\n{{endif}}\\ny', trim_whitespace=False)\n       >>> tokens\n       [('if x', (1, 3)), '\\nx\\n', ('endif', (3, 3)), '\\ny']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "trail_whitespace_re",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "trail_whitespace_re = re.compile(r'\\n\\r?[\\t ]*$')\nlead_whitespace_re = re.compile(r'^[\\t ]*\\n')\ndef trim_lex(tokens):\n    r\"\"\"\n    Takes a lexed set of tokens, and removes whitespace when there is\n    a directive on a line by itself:\n       >>> tokens = lex('{{if x}}\\nx\\n{{endif}}\\ny', trim_whitespace=False)\n       >>> tokens\n       [('if x', (1, 3)), '\\nx\\n', ('endif', (3, 3)), '\\ny']\n       >>> trim_lex(tokens)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "lead_whitespace_re",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "lead_whitespace_re = re.compile(r'^[\\t ]*\\n')\ndef trim_lex(tokens):\n    r\"\"\"\n    Takes a lexed set of tokens, and removes whitespace when there is\n    a directive on a line by itself:\n       >>> tokens = lex('{{if x}}\\nx\\n{{endif}}\\ny', trim_whitespace=False)\n       >>> tokens\n       [('if x', (1, 3)), '\\nx\\n', ('endif', (3, 3)), '\\ny']\n       >>> trim_lex(tokens)\n       [('if x', (1, 3)), 'x\\n', ('endif', (3, 3)), 'y']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "_fill_command_usage",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "peekOfCode": "_fill_command_usage = \"\"\"\\\n%prog [OPTIONS] TEMPLATE arg=value\nUse py:arg=value to set a Python value; otherwise all values are\nstrings.\n\"\"\"\ndef fill_command(args=None):\n    import sys\n    import optparse\n    import pkg_resources\n    import os",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tempita._tempita",
        "documentation": {}
    },
    {
        "label": "TestCodeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestCodeWriter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestCodeWriter",
        "peekOfCode": "class TestCodeWriter(CythonTest):\n    # CythonTest uses the CodeWriter heavily, so do some checking by\n    # roundtripping Cython code through the test framework.\n    # Note that this test is dependent upon the normal Cython parser\n    # to generate the input trees to the CodeWriter. This save *a lot*\n    # of time; better to spend that time writing other tests than perfecting\n    # this one...\n    # Whitespace is very significant in this process:\n    #  - always newline on new block (!)\n    #  - indent 4 spaces",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestCodeWriter",
        "documentation": {}
    },
    {
        "label": "TestCythonUtils",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestCythonUtils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestCythonUtils",
        "peekOfCode": "class TestCythonUtils(unittest.TestCase):\n    def test_build_hex_version(self):\n        self.assertEqual('0x001D00A1', build_hex_version('0.29a1'))\n        self.assertEqual('0x001D00A1', build_hex_version('0.29a1'))\n        self.assertEqual('0x001D03C4', build_hex_version('0.29.3rc4'))\n        self.assertEqual('0x001D00F0', build_hex_version('0.29'))\n        self.assertEqual('0x040000F0', build_hex_version('4.0'))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestCythonUtils",
        "documentation": {}
    },
    {
        "label": "DeclarationsFinder",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestJediTyper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestJediTyper",
        "peekOfCode": "class DeclarationsFinder(Visitor.VisitorTransform):\n    directives = None\n    visit_Node = Visitor.VisitorTransform.recurse_to_children\n    def visit_CompilerDirectivesNode(self, node):\n        if not self.directives:\n            self.directives = []\n        self.directives.append(node)\n        self.visitchildren(node)\n        return node\nclass TestJediTyper(TransformTest):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestJediTyper",
        "documentation": {}
    },
    {
        "label": "TestJediTyper",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestJediTyper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestJediTyper",
        "peekOfCode": "class TestJediTyper(TransformTest):\n    def _test(self, code):\n        return _test_typing(code)[0]\n    def test_typing_global_int_loop(self):\n        code = '''\\\n        for i in range(10):\n            a = i + 1\n        '''\n        types = self._test(code)\n        self.assertIn((None, (1, 0)), types)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestJediTyper",
        "documentation": {}
    },
    {
        "label": "TestTypeInjection",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestJediTyper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestJediTyper",
        "peekOfCode": "class TestTypeInjection(TestJediTyper):\n    \"\"\"\n    Subtype of TestJediTyper that additionally tests type injection and compilation.\n    \"\"\"\n    def setUp(self):\n        super(TestTypeInjection, self).setUp()\n        compilation_options = Main.CompilationOptions(Main.default_options)\n        ctx = compilation_options.create_context()\n        transform = InterpretCompilerDirectives(ctx, ctx.compiler_directives)\n        transform.module_scope = Symtab.ModuleScope('__main__', None, ctx)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestJediTyper",
        "documentation": {}
    },
    {
        "label": "TOOLS_DIR",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestJediTyper",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestJediTyper",
        "peekOfCode": "TOOLS_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'Tools'))\n@contextmanager\ndef _tempfile(code):\n    code = dedent(code)\n    if not isinstance(code, bytes):\n        code = code.encode('utf8')\n    with NamedTemporaryFile(suffix='.py') as f:\n        f.write(code)\n        f.seek(0)\n        yield f",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestJediTyper",
        "documentation": {}
    },
    {
        "label": "TestStringIOTree",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestStringIOTree",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestStringIOTree",
        "peekOfCode": "class TestStringIOTree(unittest.TestCase):\n    def setUp(self):\n        self.tree = stringtree.StringIOTree()\n    def test_markers(self):\n        assert not self.tree.allmarkers()\n    def test_insertion(self):\n        self.write_lines((1, 2, 3))\n        line_4_to_6_insertion_point = self.tree.insertion_point()\n        self.write_lines((7, 8))\n        line_9_to_13_insertion_point = self.tree.insertion_point()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestStringIOTree",
        "documentation": {}
    },
    {
        "label": "eggs",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestStringIOTree",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestStringIOTree",
        "peekOfCode": "def eggs():\n    pass\ncpdef bacon():\n    print spam\n    print 'scotch'\n    print 'tea?'\n    print 'or coffee?'          # line 16\n\"\"\"\nlinemap = dict(enumerate(code.splitlines()))\nclass TestStringIOTree(unittest.TestCase):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestStringIOTree",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestStringIOTree",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestStringIOTree",
        "peekOfCode": "code = \"\"\"\ncdef int spam                   # line 1\ncdef ham():\n    a = 1\n    b = 2\n    c = 3\n    d = 4\ndef eggs():\n    pass\ncpdef bacon():",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestStringIOTree",
        "documentation": {}
    },
    {
        "label": "linemap",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestStringIOTree",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestStringIOTree",
        "peekOfCode": "linemap = dict(enumerate(code.splitlines()))\nclass TestStringIOTree(unittest.TestCase):\n    def setUp(self):\n        self.tree = stringtree.StringIOTree()\n    def test_markers(self):\n        assert not self.tree.allmarkers()\n    def test_insertion(self):\n        self.write_lines((1, 2, 3))\n        line_4_to_6_insertion_point = self.tree.insertion_point()\n        self.write_lines((7, 8))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.TestStringIOTree",
        "documentation": {}
    },
    {
        "label": "TestSequenceFunctions",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.xmlrunner",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.xmlrunner",
        "peekOfCode": "class TestSequenceFunctions(unittest.TestCase):\n    def setUp(self):\n        self.seq = range(10)\n    def test_shuffle(self):\n        # make sure the shuffled sequence does not lose any elements\n        random.shuffle(self.seq)\n        self.seq.sort()\n        self.assertEqual(self.seq, range(10))\n    def test_choice(self):\n        element = random.choice(self.seq)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.xmlrunner",
        "documentation": {}
    },
    {
        "label": "XMLDocument",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.xmlrunner",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.xmlrunner",
        "peekOfCode": "class XMLDocument(xml.dom.minidom.Document):\n    def createCDATAOrText(self, data):\n        if ']]>' in data:\n            return self.createTextNode(data)\n        return self.createCDATASection(data)\nclass _TestInfo(object):\n    \"\"\"This class is used to keep useful information about the execution of a\n    test method.\n    \"\"\"\n    # Possible test outcomes",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.xmlrunner",
        "documentation": {}
    },
    {
        "label": "_TestInfo",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.xmlrunner",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.xmlrunner",
        "peekOfCode": "class _TestInfo(object):\n    \"\"\"This class is used to keep useful information about the execution of a\n    test method.\n    \"\"\"\n    # Possible test outcomes\n    (SUCCESS, FAILURE, ERROR) = range(3)\n    def __init__(self, test_result, test_method, outcome=SUCCESS, err=None):\n        \"Create a new instance of _TestInfo.\"\n        self.test_result = test_result\n        self.test_method = test_method",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.xmlrunner",
        "documentation": {}
    },
    {
        "label": "_XMLTestResult",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.xmlrunner",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.xmlrunner",
        "peekOfCode": "class _XMLTestResult(TextTestResult):\n    \"\"\"A test result class that can express test results in a XML report.\n    Used by XMLTestRunner.\n    \"\"\"\n    def __init__(self, stream=sys.stderr, descriptions=1, verbosity=1,\n                 elapsed_times=True):\n        \"Create a new instance of _XMLTestResult.\"\n        TextTestResult.__init__(self, stream, descriptions, verbosity)\n        self.successes = []\n        self.callback = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.xmlrunner",
        "documentation": {}
    },
    {
        "label": "XMLTestRunner",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.xmlrunner",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.xmlrunner",
        "peekOfCode": "class XMLTestRunner(TextTestRunner):\n    \"\"\"A test runner class that outputs the results in JUnit like XML files.\n    \"\"\"\n    def __init__(self, output='.', stream=None, descriptions=True, verbose=False, elapsed_times=True):\n        \"Create a new instance of XMLTestRunner.\"\n        if stream is None:\n            stream = sys.stderr\n        verbosity = (1, 2)[verbose]\n        TextTestRunner.__init__(self, stream, descriptions, verbosity)\n        self.output = output",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Tests.xmlrunner",
        "documentation": {}
    },
    {
        "label": "LinesResult",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.CodeWriter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.CodeWriter",
        "peekOfCode": "class LinesResult(object):\n    def __init__(self):\n        self.lines = []\n        self.s = u\"\"\n    def put(self, s):\n        self.s += s\n    def newline(self):\n        self.lines.append(self.s)\n        self.s = u\"\"\n    def putline(self, s):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.CodeWriter",
        "documentation": {}
    },
    {
        "label": "DeclarationWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.CodeWriter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.CodeWriter",
        "peekOfCode": "class DeclarationWriter(TreeVisitor):\n    indent_string = u\"    \"\n    def __init__(self, result=None):\n        super(DeclarationWriter, self).__init__()\n        if result is None:\n            result = LinesResult()\n        self.result = result\n        self.numindents = 0\n        self.tempnames = {}\n        self.tempblockindex = 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.CodeWriter",
        "documentation": {}
    },
    {
        "label": "CodeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.CodeWriter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.CodeWriter",
        "peekOfCode": "class CodeWriter(DeclarationWriter):\n    def visit_SingleAssignmentNode(self, node):\n        self.startline()\n        self.visit(node.lhs)\n        self.put(u\" = \")\n        self.visit(node.rhs)\n        self.endline()\n    def visit_CascadedAssignmentNode(self, node):\n        self.startline()\n        for lhs in node.lhs_list:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.CodeWriter",
        "documentation": {}
    },
    {
        "label": "PxdWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.CodeWriter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.CodeWriter",
        "peekOfCode": "class PxdWriter(DeclarationWriter):\n    def __call__(self, node):\n        print(u'\\n'.join(self.write(node).lines))\n        return node\n    def visit_CFuncDefNode(self, node):\n        if 'inline' in node.modifiers:\n            return\n        if node.overridable:\n            self.startline(u'cpdef ')\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.CodeWriter",
        "documentation": {}
    },
    {
        "label": "ExpressionWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.CodeWriter",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.CodeWriter",
        "peekOfCode": "class ExpressionWriter(TreeVisitor):\n    def __init__(self, result=None):\n        super(ExpressionWriter, self).__init__()\n        if result is None:\n            result = u\"\"\n        self.result = result\n        self.precedence = [0]\n    def write(self, tree):\n        self.visit(tree)\n        return self.result",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.CodeWriter",
        "documentation": {}
    },
    {
        "label": "Plugin",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "peekOfCode": "class Plugin(CoveragePlugin):\n    # map from traced file paths to absolute file paths\n    _file_path_map = None\n    # map from traced file paths to corresponding C files\n    _c_files_map = None\n    # map from parsed C files to their content\n    _parsed_c_files = None\n    def sys_info(self):\n        return [('Cython version', __version__)]\n    def file_tracer(self, filename):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "documentation": {}
    },
    {
        "label": "CythonModuleTracer",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "peekOfCode": "class CythonModuleTracer(FileTracer):\n    \"\"\"\n    Find the Python/Cython source file for a Cython module.\n    \"\"\"\n    def __init__(self, module_file, py_file, c_file, c_files_map, file_path_map):\n        super(CythonModuleTracer, self).__init__()\n        self.module_file = module_file\n        self.py_file = py_file\n        self.c_file = c_file\n        self._c_files_map = c_files_map",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "documentation": {}
    },
    {
        "label": "CythonModuleReporter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "peekOfCode": "class CythonModuleReporter(FileReporter):\n    \"\"\"\n    Provide detailed trace information for one source file to coverage.py.\n    \"\"\"\n    def __init__(self, c_file, source_file, rel_file_path, code):\n        super(CythonModuleReporter, self).__init__(source_file)\n        self.name = rel_file_path\n        self.c_file = c_file\n        self._code = code\n    def lines(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "documentation": {}
    },
    {
        "label": "coverage_init",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "peekOfCode": "def coverage_init(reg, options):\n    reg.add_file_tracer(Plugin())",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "documentation": {}
    },
    {
        "label": "C_FILE_EXTENSIONS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "peekOfCode": "C_FILE_EXTENSIONS = ['.c', '.cpp', '.cc', '.cxx']\nMODULE_FILE_EXTENSIONS = set(['.py', '.pyx', '.pxd'] + C_FILE_EXTENSIONS)\ndef _find_c_source(base_path):\n    file_exists = os.path.exists\n    for ext in C_FILE_EXTENSIONS:\n        file_name = base_path + ext\n        if file_exists(file_name):\n            return file_name\n    return None\ndef _find_dep_file_path(main_file, file_path, relative_path_search=False):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "documentation": {}
    },
    {
        "label": "MODULE_FILE_EXTENSIONS",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "peekOfCode": "MODULE_FILE_EXTENSIONS = set(['.py', '.pyx', '.pxd'] + C_FILE_EXTENSIONS)\ndef _find_c_source(base_path):\n    file_exists = os.path.exists\n    for ext in C_FILE_EXTENSIONS:\n        file_name = base_path + ext\n        if file_exists(file_name):\n            return file_name\n    return None\ndef _find_dep_file_path(main_file, file_path, relative_path_search=False):\n    abs_path = os.path.abspath(file_path)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Coverage",
        "documentation": {}
    },
    {
        "label": "print_call_chain",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugging",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugging",
        "peekOfCode": "def print_call_chain(*args):\n    import sys\n    print(\" \".join(map(str, args)))\n    f = sys._getframe(1)\n    while f:\n        name = f.f_code.co_name\n        s = f.f_locals.get('self', None)\n        if s:\n            c = getattr(s, \"__class__\", None)\n            if c:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Debugging",
        "documentation": {}
    },
    {
        "label": "_ArrayType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "class _ArrayType(object):\n    is_array = True\n    subtypes = ['dtype']\n    def __init__(self, dtype, ndim, is_c_contig=False, is_f_contig=False,\n                 inner_contig=False, broadcasting=None):\n        self.dtype = dtype\n        self.ndim = ndim\n        self.is_c_contig = is_c_contig\n        self.is_f_contig = is_f_contig\n        self.inner_contig = inner_contig or is_c_contig or is_f_contig",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "_EmptyDecoratorAndManager",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "class _EmptyDecoratorAndManager(object):\n    def __call__(self, x):\n        return x\n    def __enter__(self):\n        pass\n    def __exit__(self, exc_type, exc_value, traceback):\n        pass\nclass _Optimization(object):\n    pass\ncclass = ccall = cfunc = _EmptyDecoratorAndManager()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "_Optimization",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "class _Optimization(object):\n    pass\ncclass = ccall = cfunc = _EmptyDecoratorAndManager()\nreturns = wraparound = boundscheck = initializedcheck = nonecheck = \\\n    embedsignature = cdivision = cdivision_warnings = \\\n    always_allows_keywords = profile = linetrace = infer_types = \\\n    unraisable_tracebacks = freelist = \\\n        lambda _: _EmptyDecoratorAndManager()\nexceptval = lambda _=None, check=True: _EmptyDecoratorAndManager()\noverflowcheck = lambda _: _EmptyDecoratorAndManager()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "_nogil",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "class _nogil(object):\n    \"\"\"Support for 'with nogil' statement and @nogil decorator.\n    \"\"\"\n    def __call__(self, x):\n        if callable(x):\n            # Used as function decorator => return the function unchanged.\n            return x\n        # Used as conditional context manager or to create an \"@nogil(True/False)\" decorator => keep going.\n        return self\n    def __enter__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "CythonMetaType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "class CythonMetaType(type):\n    def __getitem__(type, ix):\n        return array(type, ix)\nCythonTypeObject = CythonMetaType('CythonTypeObject', (object,), {})\nclass CythonType(CythonTypeObject):\n    def _pointer(self, n=1):\n        for i in range(n):\n            self = pointer(self)\n        return self\nclass PointerType(CythonType):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "CythonType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "class CythonType(CythonTypeObject):\n    def _pointer(self, n=1):\n        for i in range(n):\n            self = pointer(self)\n        return self\nclass PointerType(CythonType):\n    def __init__(self, value=None):\n        if isinstance(value, (ArrayType, PointerType)):\n            self._items = [cast(self._basetype, a) for a in value._items]\n        elif isinstance(value, list):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "PointerType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "class PointerType(CythonType):\n    def __init__(self, value=None):\n        if isinstance(value, (ArrayType, PointerType)):\n            self._items = [cast(self._basetype, a) for a in value._items]\n        elif isinstance(value, list):\n            self._items = [cast(self._basetype, a) for a in value]\n        elif value is None or value == 0:\n            self._items = []\n        else:\n            raise ValueError",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "ArrayType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "class ArrayType(PointerType):\n    def __init__(self):\n        self._items = [None] * self._n\nclass StructType(CythonType):\n    def __init__(self, cast_from=_Unspecified, **data):\n        if cast_from is not _Unspecified:\n            # do cast\n            if len(data) > 0:\n                raise ValueError('Cannot accept keyword arguments when casting.')\n            if type(cast_from) is not type(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "StructType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "class StructType(CythonType):\n    def __init__(self, cast_from=_Unspecified, **data):\n        if cast_from is not _Unspecified:\n            # do cast\n            if len(data) > 0:\n                raise ValueError('Cannot accept keyword arguments when casting.')\n            if type(cast_from) is not type(self):\n                raise ValueError('Cannot cast from %s'%cast_from)\n            for key, value in cast_from.__dict__.items():\n                setattr(self, key, value)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "UnionType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "class UnionType(CythonType):\n    def __init__(self, cast_from=_Unspecified, **data):\n        if cast_from is not _Unspecified:\n            # do type cast\n            if len(data) > 0:\n                raise ValueError('Cannot accept keyword arguments when casting.')\n            if isinstance(cast_from, dict):\n                datadict = cast_from\n            elif type(cast_from) is type(self):\n                datadict = cast_from.__dict__",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "typedef",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "class typedef(CythonType):\n    def __init__(self, type, name=None):\n        self._basetype = type\n        self.name = name\n    def __call__(self, *arg):\n        value = cast(self._basetype, *arg)\n        return value\n    def __repr__(self):\n        return self.name or str(self._basetype)\n    __getitem__ = index_type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "_FusedType",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "class _FusedType(CythonType):\n    __getitem__ = index_type\ndef fused_type(*args):\n    if not args:\n        raise TypeError(\"Expected at least one type as argument\")\n    # Find the numeric type with biggest rank if all types are numeric\n    rank = -1\n    for type in args:\n        if type not in (py_int, py_long, py_float, py_complex):\n            break",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "CythonDotParallel",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "class CythonDotParallel(object):\n    \"\"\"\n    The cython.parallel module.\n    \"\"\"\n    __all__ = ['parallel', 'prange', 'threadid']\n    def parallel(self, num_threads=None):\n        return nogil\n    def prange(self, start=0, stop=None, step=1, nogil=False, schedule=None, chunksize=None, num_threads=None):\n        if stop is None:\n            stop = start",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "index_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def index_type(base_type, item):\n    \"\"\"\n    Support array type creation by slicing, e.g. double[:, :] specifies\n    a 2D strided array of doubles. The syntax is the same as for\n    Cython memoryviews.\n    \"\"\"\n    class InvalidTypeSpecification(Exception):\n        pass\n    def verify_slice(s):\n        if s.start or s.stop or s.step not in (None, 1):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "locals",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def locals(**arg_types):\n    return _empty_decorator\ndef test_assert_path_exists(*paths):\n    return _empty_decorator\ndef test_fail_if_path_exists(*paths):\n    return _empty_decorator\nclass _EmptyDecoratorAndManager(object):\n    def __call__(self, x):\n        return x\n    def __enter__(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "test_assert_path_exists",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def test_assert_path_exists(*paths):\n    return _empty_decorator\ndef test_fail_if_path_exists(*paths):\n    return _empty_decorator\nclass _EmptyDecoratorAndManager(object):\n    def __call__(self, x):\n        return x\n    def __enter__(self):\n        pass\n    def __exit__(self, exc_type, exc_value, traceback):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "test_fail_if_path_exists",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def test_fail_if_path_exists(*paths):\n    return _empty_decorator\nclass _EmptyDecoratorAndManager(object):\n    def __call__(self, x):\n        return x\n    def __enter__(self):\n        pass\n    def __exit__(self, exc_type, exc_value, traceback):\n        pass\nclass _Optimization(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "inline",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def inline(f, *args, **kwds):\n    if isinstance(f, basestring):\n        global _cython_inline\n        if _cython_inline is None:\n            from Cython.Build.Inline import cython_inline as _cython_inline\n        return _cython_inline(f, *args, **kwds)\n    else:\n        assert len(args) == len(kwds) == 0\n        return f\ndef compile(f):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "compile",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def compile(f):\n    from Cython.Build.Inline import RuntimeCompiledFunction\n    return RuntimeCompiledFunction(f)\n# Special functions\ndef cdiv(a, b):\n    q = a / b\n    if q < 0:\n        q += 1\n    return q\ndef cmod(a, b):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "cdiv",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def cdiv(a, b):\n    q = a / b\n    if q < 0:\n        q += 1\n    return q\ndef cmod(a, b):\n    r = a % b\n    if (a*b) < 0:\n        r -= b\n    return r",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "cmod",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def cmod(a, b):\n    r = a % b\n    if (a*b) < 0:\n        r -= b\n    return r\n# Emulated language constructs\ndef cast(type, *args, **kwargs):\n    kwargs.pop('typecheck', None)\n    assert not kwargs\n    if hasattr(type, '__call__'):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "cast",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def cast(type, *args, **kwargs):\n    kwargs.pop('typecheck', None)\n    assert not kwargs\n    if hasattr(type, '__call__'):\n        return type(*args)\n    else:\n        return args[0]\ndef sizeof(arg):\n    return 1\ndef typeof(arg):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "sizeof",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def sizeof(arg):\n    return 1\ndef typeof(arg):\n    return arg.__class__.__name__\n    # return type(arg)\ndef address(arg):\n    return pointer(type(arg))([arg])\ndef declare(type=None, value=_Unspecified, **kwds):\n    if type not in (None, object) and hasattr(type, '__call__'):\n        if value is not _Unspecified:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "typeof",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def typeof(arg):\n    return arg.__class__.__name__\n    # return type(arg)\ndef address(arg):\n    return pointer(type(arg))([arg])\ndef declare(type=None, value=_Unspecified, **kwds):\n    if type not in (None, object) and hasattr(type, '__call__'):\n        if value is not _Unspecified:\n            return type(value)\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "address",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def address(arg):\n    return pointer(type(arg))([arg])\ndef declare(type=None, value=_Unspecified, **kwds):\n    if type not in (None, object) and hasattr(type, '__call__'):\n        if value is not _Unspecified:\n            return type(value)\n        else:\n            return type()\n    else:\n        return value",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "declare",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def declare(type=None, value=_Unspecified, **kwds):\n    if type not in (None, object) and hasattr(type, '__call__'):\n        if value is not _Unspecified:\n            return type(value)\n        else:\n            return type()\n    else:\n        return value\nclass _nogil(object):\n    \"\"\"Support for 'with nogil' statement and @nogil decorator.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "pointer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def pointer(basetype):\n    class PointerInstance(PointerType):\n        _basetype = basetype\n    return PointerInstance\ndef array(basetype, n):\n    class ArrayInstance(ArrayType):\n        _basetype = basetype\n        _n = n\n    return ArrayInstance\ndef struct(**members):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def array(basetype, n):\n    class ArrayInstance(ArrayType):\n        _basetype = basetype\n        _n = n\n    return ArrayInstance\ndef struct(**members):\n    class StructInstance(StructType):\n        _members = members\n    for key in members:\n        setattr(StructInstance, key, None)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def struct(**members):\n    class StructInstance(StructType):\n        _members = members\n    for key in members:\n        setattr(StructInstance, key, None)\n    return StructInstance\ndef union(**members):\n    class UnionInstance(UnionType):\n        _members = members\n    for key in members:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "union",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def union(**members):\n    class UnionInstance(UnionType):\n        _members = members\n    for key in members:\n        setattr(UnionInstance, key, None)\n    return UnionInstance\nclass typedef(CythonType):\n    def __init__(self, type, name=None):\n        self._basetype = type\n        self.name = name",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "fused_type",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "def fused_type(*args):\n    if not args:\n        raise TypeError(\"Expected at least one type as argument\")\n    # Find the numeric type with biggest rank if all types are numeric\n    rank = -1\n    for type in args:\n        if type not in (py_int, py_long, py_float, py_complex):\n            break\n        if type_ordering.index(type) > rank:\n            result_type = type",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "__version__ = \"0.29.32\"\ntry:\n    from __builtin__ import basestring\nexcept ImportError:\n    basestring = str\n# BEGIN shameless copy from Cython/minivect/minitypes.py\nclass _ArrayType(object):\n    is_array = True\n    subtypes = ['dtype']\n    def __init__(self, dtype, ndim, is_c_contig=False, is_f_contig=False,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "compiled",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "compiled = False\n_Unspecified = object()\n# Function decorators\ndef _empty_decorator(x):\n    return x\ndef locals(**arg_types):\n    return _empty_decorator\ndef test_assert_path_exists(*paths):\n    return _empty_decorator\ndef test_fail_if_path_exists(*paths):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "_Unspecified",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "_Unspecified = object()\n# Function decorators\ndef _empty_decorator(x):\n    return x\ndef locals(**arg_types):\n    return _empty_decorator\ndef test_assert_path_exists(*paths):\n    return _empty_decorator\ndef test_fail_if_path_exists(*paths):\n    return _empty_decorator",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "cclass",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "cclass = ccall = cfunc = _EmptyDecoratorAndManager()\nreturns = wraparound = boundscheck = initializedcheck = nonecheck = \\\n    embedsignature = cdivision = cdivision_warnings = \\\n    always_allows_keywords = profile = linetrace = infer_types = \\\n    unraisable_tracebacks = freelist = \\\n        lambda _: _EmptyDecoratorAndManager()\nexceptval = lambda _=None, check=True: _EmptyDecoratorAndManager()\noverflowcheck = lambda _: _EmptyDecoratorAndManager()\noptimization = _Optimization()\noverflowcheck.fold = optimization.use_switch = \\",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "returns",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "returns = wraparound = boundscheck = initializedcheck = nonecheck = \\\n    embedsignature = cdivision = cdivision_warnings = \\\n    always_allows_keywords = profile = linetrace = infer_types = \\\n    unraisable_tracebacks = freelist = \\\n        lambda _: _EmptyDecoratorAndManager()\nexceptval = lambda _=None, check=True: _EmptyDecoratorAndManager()\noverflowcheck = lambda _: _EmptyDecoratorAndManager()\noptimization = _Optimization()\noverflowcheck.fold = optimization.use_switch = \\\n    optimization.unpack_method_calls = lambda arg: _EmptyDecoratorAndManager()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "exceptval",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "exceptval = lambda _=None, check=True: _EmptyDecoratorAndManager()\noverflowcheck = lambda _: _EmptyDecoratorAndManager()\noptimization = _Optimization()\noverflowcheck.fold = optimization.use_switch = \\\n    optimization.unpack_method_calls = lambda arg: _EmptyDecoratorAndManager()\nfinal = internal = type_version_tag = no_gc_clear = no_gc = _empty_decorator\nbinding = lambda _: _empty_decorator\n_cython_inline = None\ndef inline(f, *args, **kwds):\n    if isinstance(f, basestring):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "overflowcheck",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "overflowcheck = lambda _: _EmptyDecoratorAndManager()\noptimization = _Optimization()\noverflowcheck.fold = optimization.use_switch = \\\n    optimization.unpack_method_calls = lambda arg: _EmptyDecoratorAndManager()\nfinal = internal = type_version_tag = no_gc_clear = no_gc = _empty_decorator\nbinding = lambda _: _empty_decorator\n_cython_inline = None\ndef inline(f, *args, **kwds):\n    if isinstance(f, basestring):\n        global _cython_inline",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "optimization",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "optimization = _Optimization()\noverflowcheck.fold = optimization.use_switch = \\\n    optimization.unpack_method_calls = lambda arg: _EmptyDecoratorAndManager()\nfinal = internal = type_version_tag = no_gc_clear = no_gc = _empty_decorator\nbinding = lambda _: _empty_decorator\n_cython_inline = None\ndef inline(f, *args, **kwds):\n    if isinstance(f, basestring):\n        global _cython_inline\n        if _cython_inline is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "overflowcheck.fold",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "overflowcheck.fold = optimization.use_switch = \\\n    optimization.unpack_method_calls = lambda arg: _EmptyDecoratorAndManager()\nfinal = internal = type_version_tag = no_gc_clear = no_gc = _empty_decorator\nbinding = lambda _: _empty_decorator\n_cython_inline = None\ndef inline(f, *args, **kwds):\n    if isinstance(f, basestring):\n        global _cython_inline\n        if _cython_inline is None:\n            from Cython.Build.Inline import cython_inline as _cython_inline",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "final",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "final = internal = type_version_tag = no_gc_clear = no_gc = _empty_decorator\nbinding = lambda _: _empty_decorator\n_cython_inline = None\ndef inline(f, *args, **kwds):\n    if isinstance(f, basestring):\n        global _cython_inline\n        if _cython_inline is None:\n            from Cython.Build.Inline import cython_inline as _cython_inline\n        return _cython_inline(f, *args, **kwds)\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "binding",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "binding = lambda _: _empty_decorator\n_cython_inline = None\ndef inline(f, *args, **kwds):\n    if isinstance(f, basestring):\n        global _cython_inline\n        if _cython_inline is None:\n            from Cython.Build.Inline import cython_inline as _cython_inline\n        return _cython_inline(f, *args, **kwds)\n    else:\n        assert len(args) == len(kwds) == 0",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "_cython_inline",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "_cython_inline = None\ndef inline(f, *args, **kwds):\n    if isinstance(f, basestring):\n        global _cython_inline\n        if _cython_inline is None:\n            from Cython.Build.Inline import cython_inline as _cython_inline\n        return _cython_inline(f, *args, **kwds)\n    else:\n        assert len(args) == len(kwds) == 0\n        return f",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "nogil",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "nogil = _nogil()\ngil = _nogil()\ndel _nogil\n# Emulated types\nclass CythonMetaType(type):\n    def __getitem__(type, ix):\n        return array(type, ix)\nCythonTypeObject = CythonMetaType('CythonTypeObject', (object,), {})\nclass CythonType(CythonTypeObject):\n    def _pointer(self, n=1):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "gil",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "gil = _nogil()\ndel _nogil\n# Emulated types\nclass CythonMetaType(type):\n    def __getitem__(type, ix):\n        return array(type, ix)\nCythonTypeObject = CythonMetaType('CythonTypeObject', (object,), {})\nclass CythonType(CythonTypeObject):\n    def _pointer(self, n=1):\n        for i in range(n):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "CythonTypeObject",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "CythonTypeObject = CythonMetaType('CythonTypeObject', (object,), {})\nclass CythonType(CythonTypeObject):\n    def _pointer(self, n=1):\n        for i in range(n):\n            self = pointer(self)\n        return self\nclass PointerType(CythonType):\n    def __init__(self, value=None):\n        if isinstance(value, (ArrayType, PointerType)):\n            self._items = [cast(self._basetype, a) for a in value._items]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "py_int",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "py_int = typedef(int, \"int\")\ntry:\n    py_long = typedef(long, \"long\")\nexcept NameError:  # Py3\n    py_long = typedef(int, \"long\")\npy_float = typedef(float, \"float\")\npy_complex = typedef(complex, \"double complex\")\n# Predefined types\nint_types = ['char', 'short', 'Py_UNICODE', 'int', 'Py_UCS4', 'long', 'longlong', 'Py_ssize_t', 'size_t']\nfloat_types = ['longdouble', 'double', 'float']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "py_float",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "py_float = typedef(float, \"float\")\npy_complex = typedef(complex, \"double complex\")\n# Predefined types\nint_types = ['char', 'short', 'Py_UNICODE', 'int', 'Py_UCS4', 'long', 'longlong', 'Py_ssize_t', 'size_t']\nfloat_types = ['longdouble', 'double', 'float']\ncomplex_types = ['longdoublecomplex', 'doublecomplex', 'floatcomplex', 'complex']\nother_types = ['bint', 'void', 'Py_tss_t']\nto_repr = {\n    'longlong': 'long long',\n    'longdouble': 'long double',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "py_complex",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "py_complex = typedef(complex, \"double complex\")\n# Predefined types\nint_types = ['char', 'short', 'Py_UNICODE', 'int', 'Py_UCS4', 'long', 'longlong', 'Py_ssize_t', 'size_t']\nfloat_types = ['longdouble', 'double', 'float']\ncomplex_types = ['longdoublecomplex', 'doublecomplex', 'floatcomplex', 'complex']\nother_types = ['bint', 'void', 'Py_tss_t']\nto_repr = {\n    'longlong': 'long long',\n    'longdouble': 'long double',\n    'longdoublecomplex': 'long double complex',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "int_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "int_types = ['char', 'short', 'Py_UNICODE', 'int', 'Py_UCS4', 'long', 'longlong', 'Py_ssize_t', 'size_t']\nfloat_types = ['longdouble', 'double', 'float']\ncomplex_types = ['longdoublecomplex', 'doublecomplex', 'floatcomplex', 'complex']\nother_types = ['bint', 'void', 'Py_tss_t']\nto_repr = {\n    'longlong': 'long long',\n    'longdouble': 'long double',\n    'longdoublecomplex': 'long double complex',\n    'doublecomplex': 'double complex',\n    'floatcomplex': 'float complex',",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "float_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "float_types = ['longdouble', 'double', 'float']\ncomplex_types = ['longdoublecomplex', 'doublecomplex', 'floatcomplex', 'complex']\nother_types = ['bint', 'void', 'Py_tss_t']\nto_repr = {\n    'longlong': 'long long',\n    'longdouble': 'long double',\n    'longdoublecomplex': 'long double complex',\n    'doublecomplex': 'double complex',\n    'floatcomplex': 'float complex',\n}.get",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "complex_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "complex_types = ['longdoublecomplex', 'doublecomplex', 'floatcomplex', 'complex']\nother_types = ['bint', 'void', 'Py_tss_t']\nto_repr = {\n    'longlong': 'long long',\n    'longdouble': 'long double',\n    'longdoublecomplex': 'long double complex',\n    'doublecomplex': 'double complex',\n    'floatcomplex': 'float complex',\n}.get\ngs = globals()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "other_types",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "other_types = ['bint', 'void', 'Py_tss_t']\nto_repr = {\n    'longlong': 'long long',\n    'longdouble': 'long double',\n    'longdoublecomplex': 'long double complex',\n    'doublecomplex': 'double complex',\n    'floatcomplex': 'float complex',\n}.get\ngs = globals()\n# note: cannot simply name the unicode type here as 2to3 gets in the way and replaces it by str",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "to_repr",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "to_repr = {\n    'longlong': 'long long',\n    'longdouble': 'long double',\n    'longdoublecomplex': 'long double complex',\n    'doublecomplex': 'double complex',\n    'floatcomplex': 'float complex',\n}.get\ngs = globals()\n# note: cannot simply name the unicode type here as 2to3 gets in the way and replaces it by str\ntry:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "gs",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "gs = globals()\n# note: cannot simply name the unicode type here as 2to3 gets in the way and replaces it by str\ntry:\n    import __builtin__ as builtins\nexcept ImportError:  # Py3\n    import builtins\ngs['unicode'] = typedef(getattr(builtins, 'unicode', str), 'unicode')\ndel builtins\nfor name in int_types:\n    reprname = to_repr(name, name)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "gs['unicode']",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "gs['unicode'] = typedef(getattr(builtins, 'unicode', str), 'unicode')\ndel builtins\nfor name in int_types:\n    reprname = to_repr(name, name)\n    gs[name] = typedef(py_int, reprname)\n    if name not in ('Py_UNICODE', 'Py_UCS4') and not name.endswith('size_t'):\n        gs['u'+name] = typedef(py_int, \"unsigned \" + reprname)\n        gs['s'+name] = typedef(py_int, \"signed \" + reprname)\nfor name in float_types:\n    gs[name] = typedef(py_float, to_repr(name, name))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "bint",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "bint = typedef(bool, \"bint\")\nvoid = typedef(None, \"void\")\nPy_tss_t = typedef(None, \"Py_tss_t\")\nfor t in int_types + float_types + complex_types + other_types:\n    for i in range(1, 4):\n        gs[\"%s_%s\" % ('p'*i, t)] = gs[t]._pointer(i)\nNULL = gs['p_void'](0)\n# looks like 'gs' has some users out there by now...\n#del gs\nintegral = floating = numeric = _FusedType()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "void",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "void = typedef(None, \"void\")\nPy_tss_t = typedef(None, \"Py_tss_t\")\nfor t in int_types + float_types + complex_types + other_types:\n    for i in range(1, 4):\n        gs[\"%s_%s\" % ('p'*i, t)] = gs[t]._pointer(i)\nNULL = gs['p_void'](0)\n# looks like 'gs' has some users out there by now...\n#del gs\nintegral = floating = numeric = _FusedType()\ntype_ordering = [py_int, py_long, py_float, py_complex]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "Py_tss_t",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "Py_tss_t = typedef(None, \"Py_tss_t\")\nfor t in int_types + float_types + complex_types + other_types:\n    for i in range(1, 4):\n        gs[\"%s_%s\" % ('p'*i, t)] = gs[t]._pointer(i)\nNULL = gs['p_void'](0)\n# looks like 'gs' has some users out there by now...\n#del gs\nintegral = floating = numeric = _FusedType()\ntype_ordering = [py_int, py_long, py_float, py_complex]\nclass CythonDotParallel(object):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "NULL",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "NULL = gs['p_void'](0)\n# looks like 'gs' has some users out there by now...\n#del gs\nintegral = floating = numeric = _FusedType()\ntype_ordering = [py_int, py_long, py_float, py_complex]\nclass CythonDotParallel(object):\n    \"\"\"\n    The cython.parallel module.\n    \"\"\"\n    __all__ = ['parallel', 'prange', 'threadid']",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "integral",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "integral = floating = numeric = _FusedType()\ntype_ordering = [py_int, py_long, py_float, py_complex]\nclass CythonDotParallel(object):\n    \"\"\"\n    The cython.parallel module.\n    \"\"\"\n    __all__ = ['parallel', 'prange', 'threadid']\n    def parallel(self, num_threads=None):\n        return nogil\n    def prange(self, start=0, stop=None, step=1, nogil=False, schedule=None, chunksize=None, num_threads=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "type_ordering",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "type_ordering = [py_int, py_long, py_float, py_complex]\nclass CythonDotParallel(object):\n    \"\"\"\n    The cython.parallel module.\n    \"\"\"\n    __all__ = ['parallel', 'prange', 'threadid']\n    def parallel(self, num_threads=None):\n        return nogil\n    def prange(self, start=0, stop=None, step=1, nogil=False, schedule=None, chunksize=None, num_threads=None):\n        if stop is None:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "sys.modules['cython.parallel']",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "peekOfCode": "sys.modules['cython.parallel'] = CythonDotParallel()\ndel sys",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Shadow",
        "documentation": {}
    },
    {
        "label": "StringIOTree",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.StringIOTree",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.StringIOTree",
        "peekOfCode": "class StringIOTree(object):\n    \"\"\"\n    See module docs.\n    \"\"\"\n    def __init__(self, stream=None):\n        self.prepended_children = []\n        if stream is None:\n            stream = StringIO()\n        self.stream = stream\n        self.write = stream.write",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.StringIOTree",
        "documentation": {}
    },
    {
        "label": "NodeTypeWriter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "peekOfCode": "class NodeTypeWriter(TreeVisitor):\n    def __init__(self):\n        super(NodeTypeWriter, self).__init__()\n        self._indents = 0\n        self.result = []\n    def visit_Node(self, node):\n        if not self.access_path:\n            name = u\"(root)\"\n        else:\n            tip = self.access_path[-1]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "CythonTest",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "peekOfCode": "class CythonTest(unittest.TestCase):\n    def setUp(self):\n        self.listing_file = Errors.listing_file\n        self.echo_file = Errors.echo_file\n        Errors.listing_file = Errors.echo_file = None\n    def tearDown(self):\n        Errors.listing_file = self.listing_file\n        Errors.echo_file = self.echo_file\n    def assertLines(self, expected, result):\n        \"Checks that the given strings or lists of strings are equal line by line\"",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "TransformTest",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "peekOfCode": "class TransformTest(CythonTest):\n    \"\"\"\n    Utility base class for transform unit tests. It is based around constructing\n    test trees (either explicitly or by parsing a Cython code string); running\n    the transform, serialize it using a customized Cython serializer (with\n    special markup for nodes that cannot be represented in Cython),\n    and do a string-comparison line-by-line of the result.\n    To create a test case:\n     - Call run_pipeline. The pipeline should at least contain the transform you\n       are testing; pyx should be either a string (passed to the parser to",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "TreeAssertVisitor",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "peekOfCode": "class TreeAssertVisitor(VisitorTransform):\n    # actually, a TreeVisitor would be enough, but this needs to run\n    # as part of the compiler pipeline\n    def visit_CompilerDirectivesNode(self, node):\n        directives = node.directives\n        if 'test_assert_path_exists' in directives:\n            for path in directives['test_assert_path_exists']:\n                if TreePath.find_first(node, path) is None:\n                    Errors.error(\n                        node.pos,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "treetypes",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "peekOfCode": "def treetypes(root):\n    \"\"\"Returns a string representing the tree by class names.\n    There's a leading and trailing whitespace so that it can be\n    compared by simple string comparison while still making test\n    cases look ok.\"\"\"\n    w = NodeTypeWriter()\n    w.visit(root)\n    return u\"\\n\".join([u\"\"] + w.result + [u\"\"])\nclass CythonTest(unittest.TestCase):\n    def setUp(self):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "unpack_source_tree",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "peekOfCode": "def unpack_source_tree(tree_file, dir=None):\n    if dir is None:\n        dir = tempfile.mkdtemp()\n    header = []\n    cur_file = None\n    f = open(tree_file)\n    try:\n        lines = f.readlines()\n    finally:\n        f.close()",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.TestUtils",
        "documentation": {}
    },
    {
        "label": "LazyStr",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "class LazyStr:\n    def __init__(self, callback):\n        self.callback = callback\n    def __str__(self):\n        return self.callback()\n    def __repr__(self):\n        return self.callback()\n    def __add__(self, right):\n        return self.callback() + right\n    def __radd__(self, left):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "OrderedSet",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "class OrderedSet(object):\n  def __init__(self, elements=()):\n    self._list = []\n    self._set = set()\n    self.update(elements)\n  def __iter__(self):\n    return iter(self._list)\n  def update(self, elements):\n    for e in elements:\n      self.add(e)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "clear_function_caches",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def clear_function_caches():\n    for cache in _function_caches:\n        cache.clear()\ndef cached_function(f):\n    cache = {}\n    _function_caches.append(cache)\n    uncomputed = object()\n    def wrapper(*args):\n        res = cache.get(args, uncomputed)\n        if res is uncomputed:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "cached_function",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def cached_function(f):\n    cache = {}\n    _function_caches.append(cache)\n    uncomputed = object()\n    def wrapper(*args):\n        res = cache.get(args, uncomputed)\n        if res is uncomputed:\n            res = cache[args] = f(*args)\n        return res\n    wrapper.uncached = f",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "cached_method",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def cached_method(f):\n    cache_name = '__%s_cache' % f.__name__\n    def wrapper(self, *args):\n        cache = getattr(self, cache_name, None)\n        if cache is None:\n            cache = {}\n            setattr(self, cache_name, cache)\n        if args in cache:\n            return cache[args]\n        res = cache[args] = f(self, *args)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "replace_suffix",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def replace_suffix(path, newsuf):\n    base, _ = os.path.splitext(path)\n    return base + newsuf\ndef open_new_file(path):\n    if os.path.exists(path):\n        # Make sure to create a new file here so we can\n        # safely hard link the output files.\n        os.unlink(path)\n    # we use the ISO-8859-1 encoding here because we only write pure\n    # ASCII strings or (e.g. for file names) byte encoded strings as",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "open_new_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def open_new_file(path):\n    if os.path.exists(path):\n        # Make sure to create a new file here so we can\n        # safely hard link the output files.\n        os.unlink(path)\n    # we use the ISO-8859-1 encoding here because we only write pure\n    # ASCII strings or (e.g. for file names) byte encoded strings as\n    # Unicode, so we need a direct mapping from the first 256 Unicode\n    # characters to a byte sequence, which ISO-8859-1 provides\n    # note: can't use io.open() in Py2 as we may be writing str objects",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "castrate_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def castrate_file(path, st):\n    #  Remove junk contents from an output file after a\n    #  failed compilation.\n    #  Also sets access and modification times back to\n    #  those specified by st (a stat struct).\n    try:\n        f = open_new_file(path)\n    except EnvironmentError:\n        pass\n    else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "file_newer_than",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def file_newer_than(path, time):\n    ftime = modification_time(path)\n    return ftime > time\ndef safe_makedirs(path):\n    try:\n        os.makedirs(path)\n    except OSError:\n        if not os.path.isdir(path):\n            raise\ndef copy_file_to_dir_if_newer(sourcefile, destdir):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "safe_makedirs",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def safe_makedirs(path):\n    try:\n        os.makedirs(path)\n    except OSError:\n        if not os.path.isdir(path):\n            raise\ndef copy_file_to_dir_if_newer(sourcefile, destdir):\n    \"\"\"\n    Copy file sourcefile to directory destdir (creating it if needed),\n    preserving metadata. If the destination file exists and is not",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "copy_file_to_dir_if_newer",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def copy_file_to_dir_if_newer(sourcefile, destdir):\n    \"\"\"\n    Copy file sourcefile to directory destdir (creating it if needed),\n    preserving metadata. If the destination file exists and is not\n    older than the source file, the copying is skipped.\n    \"\"\"\n    destfile = os.path.join(destdir, os.path.basename(sourcefile))\n    try:\n        desttime = modification_time(destfile)\n    except OSError:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "find_root_package_dir",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def find_root_package_dir(file_path):\n    dir = os.path.dirname(file_path)\n    if file_path == dir:\n        return dir\n    elif is_package_dir(dir):\n        return find_root_package_dir(dir)\n    else:\n        return dir\n@cached_function\ndef check_package_dir(dir, package_names):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "check_package_dir",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def check_package_dir(dir, package_names):\n    for dirname in package_names:\n        dir = os.path.join(dir, dirname)\n        if not is_package_dir(dir):\n            return None\n    return dir\n@cached_function\ndef is_package_dir(dir_path):\n    for filename in (\"__init__.py\",\n                     \"__init__.pyc\",",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "is_package_dir",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def is_package_dir(dir_path):\n    for filename in (\"__init__.py\",\n                     \"__init__.pyc\",\n                     \"__init__.pyx\",\n                     \"__init__.pxd\"):\n        path = os.path.join(dir_path, filename)\n        if path_exists(path):\n            return 1\n@cached_function\ndef path_exists(path):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "path_exists",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def path_exists(path):\n    # try on the filesystem first\n    if os.path.exists(path):\n        return True\n    # figure out if a PEP 302 loader is around\n    try:\n        loader = __loader__\n        # XXX the code below assumes a 'zipimport.zipimporter' instance\n        # XXX should be easy to generalize, but too lazy right now to write it\n        archive_path = getattr(loader, 'archive', None)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "decode_filename",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def decode_filename(filename):\n    if isinstance(filename, bytes):\n        try:\n            filename_encoding = sys.getfilesystemencoding()\n            if filename_encoding is None:\n                filename_encoding = sys.getdefaultencoding()\n            filename = filename.decode(filename_encoding)\n        except UnicodeDecodeError:\n            pass\n    return filename",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "detect_opened_file_encoding",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def detect_opened_file_encoding(f):\n    # PEPs 263 and 3120\n    # Most of the time the first two lines fall in the first couple of hundred chars,\n    # and this bulk read/split is much faster.\n    lines = ()\n    start = b''\n    while len(lines) < 3:\n        data = f.read(500)\n        start += data\n        lines = start.split(b\"\\n\")",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "skip_bom",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def skip_bom(f):\n    \"\"\"\n    Read past a BOM at the beginning of a source file.\n    This could be added to the scanner, but it's *substantially* easier\n    to keep it at this level.\n    \"\"\"\n    if f.read(1) != u'\\uFEFF':\n        f.seek(0)\ndef open_source_file(source_filename, encoding=None, error_handling=None):\n    stream = None",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "open_source_file",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def open_source_file(source_filename, encoding=None, error_handling=None):\n    stream = None\n    try:\n        if encoding is None:\n            # Most of the time the encoding is not specified, so try hard to open the file only once.\n            f = io.open(source_filename, 'rb')\n            encoding = detect_opened_file_encoding(f)\n            f.seek(0)\n            stream = io.TextIOWrapper(f, encoding=encoding, errors=error_handling)\n        else:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "open_source_from_loader",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def open_source_from_loader(loader,\n                            source_filename,\n                            encoding=None, error_handling=None):\n    nrmpath = os.path.normpath(source_filename)\n    arcname = nrmpath[len(loader.archive)+1:]\n    data = loader.get_data(arcname)\n    return io.TextIOWrapper(io.BytesIO(data),\n                            encoding=encoding,\n                            errors=error_handling)\ndef str_to_number(value):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "str_to_number",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def str_to_number(value):\n    # note: this expects a string as input that was accepted by the\n    # parser already, with an optional \"-\" sign in front\n    is_neg = False\n    if value[:1] == '-':\n        is_neg = True\n        value = value[1:]\n    if len(value) < 2:\n        value = int(value, 0)\n    elif value[0] == '0':",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "long_literal",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def long_literal(value):\n    if isinstance(value, basestring):\n        value = str_to_number(value)\n    return not -2**31 <= value < 2**31\n@cached_function\ndef get_cython_cache_dir():\n    r\"\"\"\n    Return the base directory containing Cython's caches.\n    Priority:\n    1. CYTHON_CACHE_DIR",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "get_cython_cache_dir",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def get_cython_cache_dir():\n    r\"\"\"\n    Return the base directory containing Cython's caches.\n    Priority:\n    1. CYTHON_CACHE_DIR\n    2. (OS X): ~/Library/Caches/Cython\n       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n    3. ~/.cython\n    \"\"\"\n    if 'CYTHON_CACHE_DIR' in os.environ:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "captured_fd",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def captured_fd(stream=2, encoding=None):\n    orig_stream = os.dup(stream)  # keep copy of original stream\n    try:\n        with tempfile.TemporaryFile(mode=\"a+b\") as temp_file:\n            def read_output(_output=[b'']):\n                if not temp_file.closed:\n                    temp_file.seek(0)\n                    _output[0] = temp_file.read()\n                return _output[0]\n            os.dup2(temp_file.fileno(), stream)  # replace stream by copy of pipe",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "print_bytes",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def print_bytes(s, header_text=None, end=b'\\n', file=sys.stdout, flush=True):\n    if header_text:\n        file.write(header_text)  # note: text! => file.write() instead of out.write()\n    file.flush()\n    try:\n        out = file.buffer  # Py3\n    except AttributeError:\n        out = file         # Py2\n    out.write(s)\n    if end:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "add_metaclass",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def add_metaclass(metaclass):\n    \"\"\"Class decorator for creating a class with a metaclass.\"\"\"\n    def wrapper(cls):\n        orig_vars = cls.__dict__.copy()\n        slots = orig_vars.get('__slots__')\n        if slots is not None:\n            if isinstance(slots, str):\n                slots = [slots]\n            for slots_var in slots:\n                orig_vars.pop(slots_var)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "raise_error_if_module_name_forbidden",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def raise_error_if_module_name_forbidden(full_module_name):\n    #it is bad idea to call the pyx-file cython.pyx, so fail early\n    if full_module_name == 'cython' or full_module_name.startswith('cython.'):\n        raise ValueError('cython is a special module, cannot be used as a module name')\ndef build_hex_version(version_string):\n    \"\"\"\n    Parse and translate '4.3a1' into the readable hex representation '0x040300A1' (like PY_VERSION_HEX).\n    \"\"\"\n    # First, parse '4.12a1' into [4, 12, 0, 0xA01].\n    digits = []",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "build_hex_version",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "def build_hex_version(version_string):\n    \"\"\"\n    Parse and translate '4.3a1' into the readable hex representation '0x040300A1' (like PY_VERSION_HEX).\n    \"\"\"\n    # First, parse '4.12a1' into [4, 12, 0, 0xA01].\n    digits = []\n    release_status = 0xF0\n    for digit in re.split('([.abrc]+)', version_string):\n        if digit in ('a', 'b', 'rc'):\n            release_status = {'a': 0xA0, 'b': 0xB0, 'rc': 0xC0}[digit]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "modification_time",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "modification_time = os.path.getmtime\n_function_caches = []\ndef clear_function_caches():\n    for cache in _function_caches:\n        cache.clear()\ndef cached_function(f):\n    cache = {}\n    _function_caches.append(cache)\n    uncomputed = object()\n    def wrapper(*args):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "_function_caches",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "_function_caches = []\ndef clear_function_caches():\n    for cache in _function_caches:\n        cache.clear()\ndef cached_function(f):\n    cache = {}\n    _function_caches.append(cache)\n    uncomputed = object()\n    def wrapper(*args):\n        res = cache.get(args, uncomputed)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "_match_file_encoding",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "peekOfCode": "_match_file_encoding = re.compile(br\"(\\w*coding)[:=]\\s*([-\\w.]+)\").search\ndef detect_opened_file_encoding(f):\n    # PEPs 263 and 3120\n    # Most of the time the first two lines fall in the first couple of hundred chars,\n    # and this bulk read/split is much faster.\n    lines = ()\n    start = b''\n    while len(lines) < 3:\n        data = f.read(500)\n        start += data",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.Cython.Utils",
        "documentation": {}
    },
    {
        "label": "pyx_to_dll",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyxbuild",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyxbuild",
        "peekOfCode": "def pyx_to_dll(filename, ext=None, force_rebuild=0, build_in_temp=False, pyxbuild_dir=None,\n               setup_args=None, reload_support=False, inplace=False):\n    \"\"\"Compile a PYX file to a DLL and return the name of the generated .so\n       or .dll .\"\"\"\n    assert os.path.exists(filename), \"Could not find %s\" % os.path.abspath(filename)\n    path, name = os.path.split(os.path.abspath(filename))\n    if not ext:\n        modname, extension = os.path.splitext(name)\n        assert extension in (\".pyx\", \".py\"), extension\n        if not HAS_CYTHON:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyxbuild",
        "documentation": {}
    },
    {
        "label": "out_fname",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyxbuild",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyxbuild",
        "peekOfCode": "out_fname = pyx_to_dll(\"foo.pyx\")\n\"\"\"\nimport os\nimport sys\nfrom distutils.errors import DistutilsArgError, DistutilsError, CCompilerError\nfrom distutils.extension import Extension\nfrom distutils.util import grok_environment_error\ntry:\n    from Cython.Distutils.old_build_ext import old_build_ext as build_ext\n    HAS_CYTHON = True",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyxbuild",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyxbuild",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyxbuild",
        "peekOfCode": "DEBUG = 0\n_reloads={}\ndef pyx_to_dll(filename, ext=None, force_rebuild=0, build_in_temp=False, pyxbuild_dir=None,\n               setup_args=None, reload_support=False, inplace=False):\n    \"\"\"Compile a PYX file to a DLL and return the name of the generated .so\n       or .dll .\"\"\"\n    assert os.path.exists(filename), \"Could not find %s\" % os.path.abspath(filename)\n    path, name = os.path.split(os.path.abspath(filename))\n    if not ext:\n        modname, extension = os.path.splitext(name)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyxbuild",
        "documentation": {}
    },
    {
        "label": "PyxImporter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "class PyxImporter(object):\n    \"\"\"A meta-path importer for .pyx files.\n    \"\"\"\n    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False,\n                 language_level=None):\n        self.extension = extension\n        self.pyxbuild_dir = pyxbuild_dir\n        self.inplace = inplace\n        self.language_level = language_level\n    def find_module(self, fullname, package_path=None):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "PyImporter",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "class PyImporter(PyxImporter):\n    \"\"\"A meta-path importer for normal .py files.\n    \"\"\"\n    def __init__(self, pyxbuild_dir=None, inplace=False, language_level=None):\n        if language_level is None:\n            language_level = sys.version_info[0]\n        self.super = super(PyImporter, self)\n        self.super.__init__(extension='.py', pyxbuild_dir=pyxbuild_dir, inplace=inplace,\n                            language_level=language_level)\n        self.uncompilable_modules = {}",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "LibLoader",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "class LibLoader(object):\n    def __init__(self):\n        self._libs = {}\n    def load_module(self, fullname):\n        try:\n            source_path, so_path, is_package = self._libs[fullname]\n        except KeyError:\n            raise ValueError(\"invalid module %s\" % fullname)\n        _debug(\"Loading shared library module '%s' from %s\", fullname, so_path)\n        return load_module(fullname, source_path, so_path=so_path, is_package=is_package)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "PyxLoader",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "class PyxLoader(object):\n    def __init__(self, fullname, path, init_path=None, pyxbuild_dir=None,\n                 inplace=False, language_level=None):\n        _debug(\"PyxLoader created for loading %s from %s (init path: %s)\",\n               fullname, path, init_path)\n        self.fullname = fullname\n        self.path, self.init_path = path, init_path\n        self.pyxbuild_dir = pyxbuild_dir\n        self.inplace = inplace\n        self.language_level = language_level",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "PyxArgs",
        "kind": 6,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "class PyxArgs(object):\n    build_dir=True\n    build_in_temp=True\n    setup_args={}   #None\n##pyxargs=None\ndef _have_importers():\n    has_py_importer = False\n    has_pyx_importer = False\n    for importer in sys.meta_path:\n        if isinstance(importer, PyxImporter):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "make_ext",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "def make_ext(modname, pyxfilename):\n    from distutils.extension import Extension\n    return Extension(name = modname,\n                     sources=[pyxfilename, 'hello.c'],\n                     include_dirs=['/myinclude'] )\ndef make_setup_args():\n    return dict(script_args=[\"--compiler=mingw32\"])\nExtra dependencies can be defined by a <modulename>.pyxdep .\nSee README.\nSince Cython 0.11, the :mod:`pyximport` module also has experimental",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "make_setup_args",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "def make_setup_args():\n    return dict(script_args=[\"--compiler=mingw32\"])\nExtra dependencies can be defined by a <modulename>.pyxdep .\nSee README.\nSince Cython 0.11, the :mod:`pyximport` module also has experimental\ncompilation support for normal Python modules.  This allows you to\nautomatically run Cython on every .pyx and .py module that Python\nimports, including parts of the standard library and installed\npackages.  Cython will still fail to compile a lot of Python modules,\nin which case the import mechanism will fall back to loading the",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "get_distutils_extension",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "def get_distutils_extension(modname, pyxfilename, language_level=None):\n#    try:\n#        import hashlib\n#    except ImportError:\n#        import md5 as hashlib\n#    extra = \"_\" + hashlib.md5(open(pyxfilename).read()).hexdigest()\n#    modname = modname + extra\n    extension_mod,setup_args = handle_special_build(modname, pyxfilename)\n    if not extension_mod:\n        if not isinstance(pyxfilename, str):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "handle_special_build",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "def handle_special_build(modname, pyxfilename):\n    special_build = os.path.splitext(pyxfilename)[0] + PYXBLD_EXT\n    ext = None\n    setup_args={}\n    if os.path.exists(special_build):\n        # globls = {}\n        # locs = {}\n        # execfile(special_build, globls, locs)\n        # ext = locs[\"make_ext\"](modname, pyxfilename)\n        mod = imp.load_source(\"XXXX\", special_build, open(special_build))",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "handle_dependencies",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "def handle_dependencies(pyxfilename):\n    testing = '_test_files' in globals()\n    dependfile = os.path.splitext(pyxfilename)[0] + PYXDEP_EXT\n    # by default let distutils decide whether to rebuild on its own\n    # (it has a better idea of what the output file will be)\n    # but we know more about dependencies so force a rebuild if\n    # some of the dependencies are newer than the pyxfile.\n    if os.path.exists(dependfile):\n        depends = open(dependfile).readlines()\n        depends = [depend.strip() for depend in depends]",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "build_module",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "def build_module(name, pyxfilename, pyxbuild_dir=None, inplace=False, language_level=None):\n    assert os.path.exists(pyxfilename), \"Path does not exist: %s\" % pyxfilename\n    handle_dependencies(pyxfilename)\n    extension_mod, setup_args = get_distutils_extension(name, pyxfilename, language_level)\n    build_in_temp = pyxargs.build_in_temp\n    sargs = pyxargs.setup_args.copy()\n    sargs.update(setup_args)\n    build_in_temp = sargs.pop('build_in_temp',build_in_temp)\n    from . import pyxbuild\n    so_path = pyxbuild.pyx_to_dll(pyxfilename, extension_mod,",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "load_module",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "def load_module(name, pyxfilename, pyxbuild_dir=None, is_package=False,\n                build_inplace=False, language_level=None, so_path=None):\n    try:\n        if so_path is None:\n            if is_package:\n                module_name = name + '.__init__'\n            else:\n                module_name = name\n            so_path = build_module(module_name, pyxfilename, pyxbuild_dir,\n                                   inplace=build_inplace, language_level=language_level)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "def install(pyximport=True, pyimport=False, build_dir=None, build_in_temp=True,\n            setup_args=None, reload_support=False,\n            load_py_module_on_import_failure=False, inplace=False,\n            language_level=None):\n    \"\"\" Main entry point for pyxinstall.\n    Call this to install the ``.pyx`` import hook in\n    your meta-path for a single Python process.  If you want it to be\n    installed whenever you use Python, add it to your ``sitecustomize``\n    (as described above).\n    :param pyximport: If set to False, does not try to import ``.pyx`` files.",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "def uninstall(py_importer, pyx_importer):\n    \"\"\"\n    Uninstall an import hook.\n    \"\"\"\n    try:\n        sys.meta_path.remove(py_importer)\n    except ValueError:\n        pass\n    try:\n        sys.meta_path.remove(pyx_importer)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "show_docs",
        "kind": 2,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "def show_docs():\n    import __main__\n    __main__.__name__ = mod_name\n    for name in dir(__main__):\n        item = getattr(__main__, name)\n        try:\n            setattr(item, \"__module__\", mod_name)\n        except (AttributeError, TypeError):\n            pass\n    help(__main__)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "mod_name",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "mod_name = \"pyximport\"\nPYX_EXT = \".pyx\"\nPYXDEP_EXT = \".pyxdep\"\nPYXBLD_EXT = \".pyxbld\"\nDEBUG_IMPORT = False\ndef _print(message, args):\n    if args:\n        message = message % args\n    print(message)\ndef _debug(message, *args):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "PYX_EXT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "PYX_EXT = \".pyx\"\nPYXDEP_EXT = \".pyxdep\"\nPYXBLD_EXT = \".pyxbld\"\nDEBUG_IMPORT = False\ndef _print(message, args):\n    if args:\n        message = message % args\n    print(message)\ndef _debug(message, *args):\n    if DEBUG_IMPORT:",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "PYXDEP_EXT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "PYXDEP_EXT = \".pyxdep\"\nPYXBLD_EXT = \".pyxbld\"\nDEBUG_IMPORT = False\ndef _print(message, args):\n    if args:\n        message = message % args\n    print(message)\ndef _debug(message, *args):\n    if DEBUG_IMPORT:\n        _print(message, args)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "PYXBLD_EXT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "PYXBLD_EXT = \".pyxbld\"\nDEBUG_IMPORT = False\ndef _print(message, args):\n    if args:\n        message = message % args\n    print(message)\ndef _debug(message, *args):\n    if DEBUG_IMPORT:\n        _print(message, args)\ndef _info(message, *args):",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "DEBUG_IMPORT",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "DEBUG_IMPORT = False\ndef _print(message, args):\n    if args:\n        message = message % args\n    print(message)\ndef _debug(message, *args):\n    if DEBUG_IMPORT:\n        _print(message, args)\ndef _info(message, *args):\n    _print(message, args)",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "_lib_loader",
        "kind": 5,
        "importPath": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "description": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "peekOfCode": "_lib_loader = LibLoader()\nclass PyxLoader(object):\n    def __init__(self, fullname, path, init_path=None, pyxbuild_dir=None,\n                 inplace=False, language_level=None):\n        _debug(\"PyxLoader created for loading %s from %s (init path: %s)\",\n               fullname, path, init_path)\n        self.fullname = fullname\n        self.path, self.init_path = path, init_path\n        self.pyxbuild_dir = pyxbuild_dir\n        self.inplace = inplace",
        "detail": "Real-ESRGAN..eggs.Cython-0.29.32-py3.9.egg.pyximport.pyximport",
        "documentation": {}
    },
    {
        "label": "UNetDiscriminatorSN",
        "kind": 6,
        "importPath": "Real-ESRGAN.build.lib.realesrgan.archs.discriminator_arch",
        "description": "Real-ESRGAN.build.lib.realesrgan.archs.discriminator_arch",
        "peekOfCode": "class UNetDiscriminatorSN(nn.Module):\n    \"\"\"Defines a U-Net discriminator with spectral normalization (SN)\n    It is used in Real-ESRGAN: Training Real-World Blind Super-Resolution with Pure Synthetic Data.\n    Arg:\n        num_in_ch (int): Channel number of inputs. Default: 3.\n        num_feat (int): Channel number of base intermediate features. Default: 64.\n        skip_connection (bool): Whether to use skip connections between U-Net. Default: True.\n    \"\"\"\n    def __init__(self, num_in_ch, num_feat=64, skip_connection=True):\n        super(UNetDiscriminatorSN, self).__init__()",
        "detail": "Real-ESRGAN.build.lib.realesrgan.archs.discriminator_arch",
        "documentation": {}
    },
    {
        "label": "SRVGGNetCompact",
        "kind": 6,
        "importPath": "Real-ESRGAN.build.lib.realesrgan.archs.srvgg_arch",
        "description": "Real-ESRGAN.build.lib.realesrgan.archs.srvgg_arch",
        "peekOfCode": "class SRVGGNetCompact(nn.Module):\n    \"\"\"A compact VGG-style network structure for super-resolution.\n    It is a compact network structure, which performs upsampling in the last layer and no convolution is\n    conducted on the HR feature space.\n    Args:\n        num_in_ch (int): Channel number of inputs. Default: 3.\n        num_out_ch (int): Channel number of outputs. Default: 3.\n        num_feat (int): Channel number of intermediate features. Default: 64.\n        num_conv (int): Number of convolution layers in the body network. Default: 16.\n        upscale (int): Upsampling factor. Default: 4.",
        "detail": "Real-ESRGAN.build.lib.realesrgan.archs.srvgg_arch",
        "documentation": {}
    },
    {
        "label": "RealESRGANDataset",
        "kind": 6,
        "importPath": "Real-ESRGAN.build.lib.realesrgan.data.realesrgan_dataset",
        "description": "Real-ESRGAN.build.lib.realesrgan.data.realesrgan_dataset",
        "peekOfCode": "class RealESRGANDataset(data.Dataset):\n    \"\"\"Dataset used for Real-ESRGAN model:\n    Real-ESRGAN: Training Real-World Blind Super-Resolution with Pure Synthetic Data.\n    It loads gt (Ground-Truth) images, and augments them.\n    It also generates blur kernels and sinc kernels for generating low-quality images.\n    Note that the low-quality images are processed in tensors on GPUS for faster processing.\n    Args:\n        opt (dict): Config for train datasets. It contains the following keys:\n            dataroot_gt (str): Data root path for gt.\n            meta_info (str): Path for meta information file.",
        "detail": "Real-ESRGAN.build.lib.realesrgan.data.realesrgan_dataset",
        "documentation": {}
    },
    {
        "label": "RealESRGANPairedDataset",
        "kind": 6,
        "importPath": "Real-ESRGAN.build.lib.realesrgan.data.realesrgan_paired_dataset",
        "description": "Real-ESRGAN.build.lib.realesrgan.data.realesrgan_paired_dataset",
        "peekOfCode": "class RealESRGANPairedDataset(data.Dataset):\n    \"\"\"Paired image dataset for image restoration.\n    Read LQ (Low Quality, e.g. LR (Low Resolution), blurry, noisy, etc) and GT image pairs.\n    There are three modes:\n    1. 'lmdb': Use lmdb files.\n        If opt['io_backend'] == lmdb.\n    2. 'meta_info': Use meta information file to generate paths.\n        If opt['io_backend'] != lmdb and opt['meta_info'] is not None.\n    3. 'folder': Scan folders to generate paths.\n        The rest.",
        "detail": "Real-ESRGAN.build.lib.realesrgan.data.realesrgan_paired_dataset",
        "documentation": {}
    },
    {
        "label": "RealESRGANModel",
        "kind": 6,
        "importPath": "Real-ESRGAN.build.lib.realesrgan.models.realesrgan_model",
        "description": "Real-ESRGAN.build.lib.realesrgan.models.realesrgan_model",
        "peekOfCode": "class RealESRGANModel(SRGANModel):\n    \"\"\"RealESRGAN Model for Real-ESRGAN: Training Real-World Blind Super-Resolution with Pure Synthetic Data.\n    It mainly performs:\n    1. randomly synthesize LQ images in GPU tensors\n    2. optimize the networks with GAN training.\n    \"\"\"\n    def __init__(self, opt):\n        super(RealESRGANModel, self).__init__(opt)\n        self.jpeger = DiffJPEG(differentiable=False).cuda()  # simulate JPEG compression artifacts\n        self.usm_sharpener = USMSharp().cuda()  # do usm sharpening",
        "detail": "Real-ESRGAN.build.lib.realesrgan.models.realesrgan_model",
        "documentation": {}
    },
    {
        "label": "RealESRNetModel",
        "kind": 6,
        "importPath": "Real-ESRGAN.build.lib.realesrgan.models.realesrnet_model",
        "description": "Real-ESRGAN.build.lib.realesrgan.models.realesrnet_model",
        "peekOfCode": "class RealESRNetModel(SRModel):\n    \"\"\"RealESRNet Model for Real-ESRGAN: Training Real-World Blind Super-Resolution with Pure Synthetic Data.\n    It is trained without GAN losses.\n    It mainly performs:\n    1. randomly synthesize LQ images in GPU tensors\n    2. optimize the networks with GAN training.\n    \"\"\"\n    def __init__(self, opt):\n        super(RealESRNetModel, self).__init__(opt)\n        self.jpeger = DiffJPEG(differentiable=False).cuda()  # simulate JPEG compression artifacts",
        "detail": "Real-ESRGAN.build.lib.realesrgan.models.realesrnet_model",
        "documentation": {}
    },
    {
        "label": "RealESRGANer",
        "kind": 6,
        "importPath": "Real-ESRGAN.build.lib.realesrgan.utils",
        "description": "Real-ESRGAN.build.lib.realesrgan.utils",
        "peekOfCode": "class RealESRGANer():\n    \"\"\"A helper class for upsampling images with RealESRGAN.\n    Args:\n        scale (int): Upsampling scale factor used in the networks. It is usually 2 or 4.\n        model_path (str): The path to the pretrained model. It can be urls (will first download it automatically).\n        model (nn.Module): The defined network. Default: None.\n        tile (int): As too large images result in the out of GPU memory issue, so this tile option will first crop\n            input images into tiles, and then process each of them. Finally, they will be merged into one image.\n            0 denotes for do not use tile. Default: 0.\n        tile_pad (int): The pad size for each tile, to remove border artifacts. Default: 10.",
        "detail": "Real-ESRGAN.build.lib.realesrgan.utils",
        "documentation": {}
    },
    {
        "label": "PrefetchReader",
        "kind": 6,
        "importPath": "Real-ESRGAN.build.lib.realesrgan.utils",
        "description": "Real-ESRGAN.build.lib.realesrgan.utils",
        "peekOfCode": "class PrefetchReader(threading.Thread):\n    \"\"\"Prefetch images.\n    Args:\n        img_list (list[str]): A image list of image paths to be read.\n        num_prefetch_queue (int): Number of prefetch queue.\n    \"\"\"\n    def __init__(self, img_list, num_prefetch_queue):\n        super().__init__()\n        self.que = queue.Queue(num_prefetch_queue)\n        self.img_list = img_list",
        "detail": "Real-ESRGAN.build.lib.realesrgan.utils",
        "documentation": {}
    },
    {
        "label": "IOConsumer",
        "kind": 6,
        "importPath": "Real-ESRGAN.build.lib.realesrgan.utils",
        "description": "Real-ESRGAN.build.lib.realesrgan.utils",
        "peekOfCode": "class IOConsumer(threading.Thread):\n    def __init__(self, opt, que, qid):\n        super().__init__()\n        self._queue = que\n        self.qid = qid\n        self.opt = opt\n    def run(self):\n        while True:\n            msg = self._queue.get()\n            if isinstance(msg, str) and msg == 'quit':",
        "detail": "Real-ESRGAN.build.lib.realesrgan.utils",
        "documentation": {}
    },
    {
        "label": "ROOT_DIR",
        "kind": 5,
        "importPath": "Real-ESRGAN.build.lib.realesrgan.utils",
        "description": "Real-ESRGAN.build.lib.realesrgan.utils",
        "peekOfCode": "ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nclass RealESRGANer():\n    \"\"\"A helper class for upsampling images with RealESRGAN.\n    Args:\n        scale (int): Upsampling scale factor used in the networks. It is usually 2 or 4.\n        model_path (str): The path to the pretrained model. It can be urls (will first download it automatically).\n        model (nn.Module): The defined network. Default: None.\n        tile (int): As too large images result in the out of GPU memory issue, so this tile option will first crop\n            input images into tiles, and then process each of them. Finally, they will be merged into one image.\n            0 denotes for do not use tile. Default: 0.",
        "detail": "Real-ESRGAN.build.lib.realesrgan.utils",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "Real-ESRGAN.build.lib.realesrgan.version",
        "description": "Real-ESRGAN.build.lib.realesrgan.version",
        "peekOfCode": "__version__ = '0.2.5.0'\n__gitsha__ = '685d429'\nversion_info = (0, 2, 5, 0)",
        "detail": "Real-ESRGAN.build.lib.realesrgan.version",
        "documentation": {}
    },
    {
        "label": "__gitsha__",
        "kind": 5,
        "importPath": "Real-ESRGAN.build.lib.realesrgan.version",
        "description": "Real-ESRGAN.build.lib.realesrgan.version",
        "peekOfCode": "__gitsha__ = '685d429'\nversion_info = (0, 2, 5, 0)",
        "detail": "Real-ESRGAN.build.lib.realesrgan.version",
        "documentation": {}
    },
    {
        "label": "version_info",
        "kind": 5,
        "importPath": "Real-ESRGAN.build.lib.realesrgan.version",
        "description": "Real-ESRGAN.build.lib.realesrgan.version",
        "peekOfCode": "version_info = (0, 2, 5, 0)",
        "detail": "Real-ESRGAN.build.lib.realesrgan.version",
        "documentation": {}
    },
    {
        "label": "UNetDiscriminatorSN",
        "kind": 6,
        "importPath": "Real-ESRGAN.realesrgan.archs.discriminator_arch",
        "description": "Real-ESRGAN.realesrgan.archs.discriminator_arch",
        "peekOfCode": "class UNetDiscriminatorSN(nn.Module):\n    \"\"\"Defines a U-Net discriminator with spectral normalization (SN)\n    It is used in Real-ESRGAN: Training Real-World Blind Super-Resolution with Pure Synthetic Data.\n    Arg:\n        num_in_ch (int): Channel number of inputs. Default: 3.\n        num_feat (int): Channel number of base intermediate features. Default: 64.\n        skip_connection (bool): Whether to use skip connections between U-Net. Default: True.\n    \"\"\"\n    def __init__(self, num_in_ch, num_feat=64, skip_connection=True):\n        super(UNetDiscriminatorSN, self).__init__()",
        "detail": "Real-ESRGAN.realesrgan.archs.discriminator_arch",
        "documentation": {}
    },
    {
        "label": "SRVGGNetCompact",
        "kind": 6,
        "importPath": "Real-ESRGAN.realesrgan.archs.srvgg_arch",
        "description": "Real-ESRGAN.realesrgan.archs.srvgg_arch",
        "peekOfCode": "class SRVGGNetCompact(nn.Module):\n    \"\"\"A compact VGG-style network structure for super-resolution.\n    It is a compact network structure, which performs upsampling in the last layer and no convolution is\n    conducted on the HR feature space.\n    Args:\n        num_in_ch (int): Channel number of inputs. Default: 3.\n        num_out_ch (int): Channel number of outputs. Default: 3.\n        num_feat (int): Channel number of intermediate features. Default: 64.\n        num_conv (int): Number of convolution layers in the body network. Default: 16.\n        upscale (int): Upsampling factor. Default: 4.",
        "detail": "Real-ESRGAN.realesrgan.archs.srvgg_arch",
        "documentation": {}
    },
    {
        "label": "RealESRGANDataset",
        "kind": 6,
        "importPath": "Real-ESRGAN.realesrgan.data.realesrgan_dataset",
        "description": "Real-ESRGAN.realesrgan.data.realesrgan_dataset",
        "peekOfCode": "class RealESRGANDataset(data.Dataset):\n    \"\"\"Dataset used for Real-ESRGAN model:\n    Real-ESRGAN: Training Real-World Blind Super-Resolution with Pure Synthetic Data.\n    It loads gt (Ground-Truth) images, and augments them.\n    It also generates blur kernels and sinc kernels for generating low-quality images.\n    Note that the low-quality images are processed in tensors on GPUS for faster processing.\n    Args:\n        opt (dict): Config for train datasets. It contains the following keys:\n            dataroot_gt (str): Data root path for gt.\n            meta_info (str): Path for meta information file.",
        "detail": "Real-ESRGAN.realesrgan.data.realesrgan_dataset",
        "documentation": {}
    },
    {
        "label": "RealESRGANPairedDataset",
        "kind": 6,
        "importPath": "Real-ESRGAN.realesrgan.data.realesrgan_paired_dataset",
        "description": "Real-ESRGAN.realesrgan.data.realesrgan_paired_dataset",
        "peekOfCode": "class RealESRGANPairedDataset(data.Dataset):\n    \"\"\"Paired image dataset for image restoration.\n    Read LQ (Low Quality, e.g. LR (Low Resolution), blurry, noisy, etc) and GT image pairs.\n    There are three modes:\n    1. 'lmdb': Use lmdb files.\n        If opt['io_backend'] == lmdb.\n    2. 'meta_info': Use meta information file to generate paths.\n        If opt['io_backend'] != lmdb and opt['meta_info'] is not None.\n    3. 'folder': Scan folders to generate paths.\n        The rest.",
        "detail": "Real-ESRGAN.realesrgan.data.realesrgan_paired_dataset",
        "documentation": {}
    },
    {
        "label": "RealESRGANModel",
        "kind": 6,
        "importPath": "Real-ESRGAN.realesrgan.models.realesrgan_model",
        "description": "Real-ESRGAN.realesrgan.models.realesrgan_model",
        "peekOfCode": "class RealESRGANModel(SRGANModel):\n    \"\"\"RealESRGAN Model for Real-ESRGAN: Training Real-World Blind Super-Resolution with Pure Synthetic Data.\n    It mainly performs:\n    1. randomly synthesize LQ images in GPU tensors\n    2. optimize the networks with GAN training.\n    \"\"\"\n    def __init__(self, opt):\n        super(RealESRGANModel, self).__init__(opt)\n        self.jpeger = DiffJPEG(differentiable=False).cuda()  # simulate JPEG compression artifacts\n        self.usm_sharpener = USMSharp().cuda()  # do usm sharpening",
        "detail": "Real-ESRGAN.realesrgan.models.realesrgan_model",
        "documentation": {}
    },
    {
        "label": "RealESRNetModel",
        "kind": 6,
        "importPath": "Real-ESRGAN.realesrgan.models.realesrnet_model",
        "description": "Real-ESRGAN.realesrgan.models.realesrnet_model",
        "peekOfCode": "class RealESRNetModel(SRModel):\n    \"\"\"RealESRNet Model for Real-ESRGAN: Training Real-World Blind Super-Resolution with Pure Synthetic Data.\n    It is trained without GAN losses.\n    It mainly performs:\n    1. randomly synthesize LQ images in GPU tensors\n    2. optimize the networks with GAN training.\n    \"\"\"\n    def __init__(self, opt):\n        super(RealESRNetModel, self).__init__(opt)\n        self.jpeger = DiffJPEG(differentiable=False).cuda()  # simulate JPEG compression artifacts",
        "detail": "Real-ESRGAN.realesrgan.models.realesrnet_model",
        "documentation": {}
    },
    {
        "label": "RealESRGANer",
        "kind": 6,
        "importPath": "Real-ESRGAN.realesrgan.utils",
        "description": "Real-ESRGAN.realesrgan.utils",
        "peekOfCode": "class RealESRGANer():\n    \"\"\"A helper class for upsampling images with RealESRGAN.\n    Args:\n        scale (int): Upsampling scale factor used in the networks. It is usually 2 or 4.\n        model_path (str): The path to the pretrained model. It can be urls (will first download it automatically).\n        model (nn.Module): The defined network. Default: None.\n        tile (int): As too large images result in the out of GPU memory issue, so this tile option will first crop\n            input images into tiles, and then process each of them. Finally, they will be merged into one image.\n            0 denotes for do not use tile. Default: 0.\n        tile_pad (int): The pad size for each tile, to remove border artifacts. Default: 10.",
        "detail": "Real-ESRGAN.realesrgan.utils",
        "documentation": {}
    },
    {
        "label": "PrefetchReader",
        "kind": 6,
        "importPath": "Real-ESRGAN.realesrgan.utils",
        "description": "Real-ESRGAN.realesrgan.utils",
        "peekOfCode": "class PrefetchReader(threading.Thread):\n    \"\"\"Prefetch images.\n    Args:\n        img_list (list[str]): A image list of image paths to be read.\n        num_prefetch_queue (int): Number of prefetch queue.\n    \"\"\"\n    def __init__(self, img_list, num_prefetch_queue):\n        super().__init__()\n        self.que = queue.Queue(num_prefetch_queue)\n        self.img_list = img_list",
        "detail": "Real-ESRGAN.realesrgan.utils",
        "documentation": {}
    },
    {
        "label": "IOConsumer",
        "kind": 6,
        "importPath": "Real-ESRGAN.realesrgan.utils",
        "description": "Real-ESRGAN.realesrgan.utils",
        "peekOfCode": "class IOConsumer(threading.Thread):\n    def __init__(self, opt, que, qid):\n        super().__init__()\n        self._queue = que\n        self.qid = qid\n        self.opt = opt\n    def run(self):\n        while True:\n            msg = self._queue.get()\n            if isinstance(msg, str) and msg == 'quit':",
        "detail": "Real-ESRGAN.realesrgan.utils",
        "documentation": {}
    },
    {
        "label": "ROOT_DIR",
        "kind": 5,
        "importPath": "Real-ESRGAN.realesrgan.utils",
        "description": "Real-ESRGAN.realesrgan.utils",
        "peekOfCode": "ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nclass RealESRGANer():\n    \"\"\"A helper class for upsampling images with RealESRGAN.\n    Args:\n        scale (int): Upsampling scale factor used in the networks. It is usually 2 or 4.\n        model_path (str): The path to the pretrained model. It can be urls (will first download it automatically).\n        model (nn.Module): The defined network. Default: None.\n        tile (int): As too large images result in the out of GPU memory issue, so this tile option will first crop\n            input images into tiles, and then process each of them. Finally, they will be merged into one image.\n            0 denotes for do not use tile. Default: 0.",
        "detail": "Real-ESRGAN.realesrgan.utils",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "Real-ESRGAN.realesrgan.version",
        "description": "Real-ESRGAN.realesrgan.version",
        "peekOfCode": "__version__ = '0.2.5.0'\n__gitsha__ = '685d429'\nversion_info = (0, 2, 5, 0)",
        "detail": "Real-ESRGAN.realesrgan.version",
        "documentation": {}
    },
    {
        "label": "__gitsha__",
        "kind": 5,
        "importPath": "Real-ESRGAN.realesrgan.version",
        "description": "Real-ESRGAN.realesrgan.version",
        "peekOfCode": "__gitsha__ = '685d429'\nversion_info = (0, 2, 5, 0)",
        "detail": "Real-ESRGAN.realesrgan.version",
        "documentation": {}
    },
    {
        "label": "version_info",
        "kind": 5,
        "importPath": "Real-ESRGAN.realesrgan.version",
        "description": "Real-ESRGAN.realesrgan.version",
        "peekOfCode": "version_info = (0, 2, 5, 0)",
        "detail": "Real-ESRGAN.realesrgan.version",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN.scripts.extract_subimages",
        "description": "Real-ESRGAN.scripts.extract_subimages",
        "peekOfCode": "def main(args):\n    \"\"\"A multi-thread tool to crop large images to sub-images for faster IO.\n    opt (dict): Configuration dict. It contains:\n        n_thread (int): Thread number.\n        compression_level (int):  CV_IMWRITE_PNG_COMPRESSION from 0 to 9. A higher value means a smaller size\n            and longer compression time. Use 0 for faster CPU decompression. Default: 3, same in cv2.\n        input_folder (str): Path to the input folder.\n        save_folder (str): Path to save folder.\n        crop_size (int): Crop size.\n        step (int): Step for overlapped sliding window.",
        "detail": "Real-ESRGAN.scripts.extract_subimages",
        "documentation": {}
    },
    {
        "label": "extract_subimages",
        "kind": 2,
        "importPath": "Real-ESRGAN.scripts.extract_subimages",
        "description": "Real-ESRGAN.scripts.extract_subimages",
        "peekOfCode": "def extract_subimages(opt):\n    \"\"\"Crop images to subimages.\n    Args:\n        opt (dict): Configuration dict. It contains:\n            input_folder (str): Path to the input folder.\n            save_folder (str): Path to save folder.\n            n_thread (int): Thread number.\n    \"\"\"\n    input_folder = opt['input_folder']\n    save_folder = opt['save_folder']",
        "detail": "Real-ESRGAN.scripts.extract_subimages",
        "documentation": {}
    },
    {
        "label": "worker",
        "kind": 2,
        "importPath": "Real-ESRGAN.scripts.extract_subimages",
        "description": "Real-ESRGAN.scripts.extract_subimages",
        "peekOfCode": "def worker(path, opt):\n    \"\"\"Worker for each process.\n    Args:\n        path (str): Image path.\n        opt (dict): Configuration dict. It contains:\n            crop_size (int): Crop size.\n            step (int): Step for overlapped sliding window.\n            thresh_size (int): Threshold size. Patches whose size is lower than thresh_size will be dropped.\n            save_folder (str): Path to save folder.\n            compression_level (int): for cv2.IMWRITE_PNG_COMPRESSION.",
        "detail": "Real-ESRGAN.scripts.extract_subimages",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN.scripts.generate_meta_info",
        "description": "Real-ESRGAN.scripts.generate_meta_info",
        "peekOfCode": "def main(args):\n    txt_file = open(args.meta_info, 'w')\n    for folder, root in zip(args.input, args.root):\n        img_paths = sorted(glob.glob(os.path.join(folder, '*')))\n        for img_path in img_paths:\n            status = True\n            if args.check:\n                # read the image once for check, as some images may have errors\n                try:\n                    img = cv2.imread(img_path)",
        "detail": "Real-ESRGAN.scripts.generate_meta_info",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN.scripts.generate_meta_info_pairdata",
        "description": "Real-ESRGAN.scripts.generate_meta_info_pairdata",
        "peekOfCode": "def main(args):\n    txt_file = open(args.meta_info, 'w')\n    # sca images\n    img_paths_gt = sorted(glob.glob(os.path.join(args.input[0], '*')))\n    img_paths_lq = sorted(glob.glob(os.path.join(args.input[1], '*')))\n    assert len(img_paths_gt) == len(img_paths_lq), ('GT folder and LQ folder should have the same length, but got '\n                                                    f'{len(img_paths_gt)} and {len(img_paths_lq)}.')\n    for img_path_gt, img_path_lq in zip(img_paths_gt, img_paths_lq):\n        # get the relative paths\n        img_name_gt = os.path.relpath(img_path_gt, args.root[0])",
        "detail": "Real-ESRGAN.scripts.generate_meta_info_pairdata",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN.scripts.generate_multiscale_DF2K",
        "description": "Real-ESRGAN.scripts.generate_multiscale_DF2K",
        "peekOfCode": "def main(args):\n    # For DF2K, we consider the following three scales,\n    # and the smallest image whose shortest edge is 400\n    scale_list = [0.75, 0.5, 1 / 3]\n    shortest_edge = 400\n    path_list = sorted(glob.glob(os.path.join(args.input, '*')))\n    for path in path_list:\n        print(path)\n        basename = os.path.splitext(os.path.basename(path))[0]\n        img = Image.open(path)",
        "detail": "Real-ESRGAN.scripts.generate_multiscale_DF2K",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN.scripts.pytorch2onnx",
        "description": "Real-ESRGAN.scripts.pytorch2onnx",
        "peekOfCode": "def main(args):\n    # An instance of the model\n    model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=23, num_grow_ch=32, scale=4)\n    if args.params:\n        keyname = 'params'\n    else:\n        keyname = 'params_ema'\n    model.load_state_dict(torch.load(args.input)[keyname])\n    # set the train mode to false since we will only run the forward pass.\n    model.train(False)",
        "detail": "Real-ESRGAN.scripts.pytorch2onnx",
        "documentation": {}
    },
    {
        "label": "test_realesrgan_dataset",
        "kind": 2,
        "importPath": "Real-ESRGAN.tests.test_dataset",
        "description": "Real-ESRGAN.tests.test_dataset",
        "peekOfCode": "def test_realesrgan_dataset():\n    with open('tests/data/test_realesrgan_dataset.yml', mode='r') as f:\n        opt = yaml.load(f, Loader=yaml.FullLoader)\n    dataset = RealESRGANDataset(opt)\n    assert dataset.io_backend_opt['type'] == 'disk'  # io backend\n    assert len(dataset) == 2  # whether to read correct meta info\n    assert dataset.kernel_list == [\n        'iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso'\n    ]  # correct initialization the degradation configurations\n    assert dataset.betag_range2 == [0.5, 4]",
        "detail": "Real-ESRGAN.tests.test_dataset",
        "documentation": {}
    },
    {
        "label": "test_realesrgan_paired_dataset",
        "kind": 2,
        "importPath": "Real-ESRGAN.tests.test_dataset",
        "description": "Real-ESRGAN.tests.test_dataset",
        "peekOfCode": "def test_realesrgan_paired_dataset():\n    with open('tests/data/test_realesrgan_paired_dataset.yml', mode='r') as f:\n        opt = yaml.load(f, Loader=yaml.FullLoader)\n    dataset = RealESRGANPairedDataset(opt)\n    assert dataset.io_backend_opt['type'] == 'disk'  # io backend\n    assert len(dataset) == 2  # whether to read correct meta info\n    # test __getitem__\n    result = dataset.__getitem__(0)\n    # check returned keys\n    expected_keys = ['gt', 'lq', 'gt_path', 'lq_path']",
        "detail": "Real-ESRGAN.tests.test_dataset",
        "documentation": {}
    },
    {
        "label": "test_unetdiscriminatorsn",
        "kind": 2,
        "importPath": "Real-ESRGAN.tests.test_discriminator_arch",
        "description": "Real-ESRGAN.tests.test_discriminator_arch",
        "peekOfCode": "def test_unetdiscriminatorsn():\n    \"\"\"Test arch: UNetDiscriminatorSN.\"\"\"\n    # model init and forward (cpu)\n    net = UNetDiscriminatorSN(num_in_ch=3, num_feat=4, skip_connection=True)\n    img = torch.rand((1, 3, 32, 32), dtype=torch.float32)\n    output = net(img)\n    assert output.shape == (1, 1, 32, 32)\n    # model init and forward (gpu)\n    if torch.cuda.is_available():\n        net.cuda()",
        "detail": "Real-ESRGAN.tests.test_discriminator_arch",
        "documentation": {}
    },
    {
        "label": "test_realesrnet_model",
        "kind": 2,
        "importPath": "Real-ESRGAN.tests.test_model",
        "description": "Real-ESRGAN.tests.test_model",
        "peekOfCode": "def test_realesrnet_model():\n    with open('tests/data/test_realesrnet_model.yml', mode='r') as f:\n        opt = yaml.load(f, Loader=yaml.FullLoader)\n    # build model\n    model = RealESRNetModel(opt)\n    # test attributes\n    assert model.__class__.__name__ == 'RealESRNetModel'\n    assert isinstance(model.net_g, RRDBNet)\n    assert isinstance(model.cri_pix, L1Loss)\n    assert isinstance(model.optimizers[0], torch.optim.Adam)",
        "detail": "Real-ESRGAN.tests.test_model",
        "documentation": {}
    },
    {
        "label": "test_realesrgan_model",
        "kind": 2,
        "importPath": "Real-ESRGAN.tests.test_model",
        "description": "Real-ESRGAN.tests.test_model",
        "peekOfCode": "def test_realesrgan_model():\n    with open('tests/data/test_realesrgan_model.yml', mode='r') as f:\n        opt = yaml.load(f, Loader=yaml.FullLoader)\n    # build model\n    model = RealESRGANModel(opt)\n    # test attributes\n    assert model.__class__.__name__ == 'RealESRGANModel'\n    assert isinstance(model.net_g, RRDBNet)  # generator\n    assert isinstance(model.net_d, UNetDiscriminatorSN)  # discriminator\n    assert isinstance(model.cri_pix, L1Loss)",
        "detail": "Real-ESRGAN.tests.test_model",
        "documentation": {}
    },
    {
        "label": "test_realesrganer",
        "kind": 2,
        "importPath": "Real-ESRGAN.tests.test_utils",
        "description": "Real-ESRGAN.tests.test_utils",
        "peekOfCode": "def test_realesrganer():\n    # initialize with default model\n    restorer = RealESRGANer(\n        scale=4,\n        model_path='experiments/pretrained_models/RealESRGAN_x4plus.pth',\n        model=None,\n        tile=10,\n        tile_pad=10,\n        pre_pad=2,\n        half=False)",
        "detail": "Real-ESRGAN.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN.inference_realesrgan",
        "description": "Real-ESRGAN.inference_realesrgan",
        "peekOfCode": "def main():\n    \"\"\"Inference demo for Real-ESRGAN.\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--input', type=str, default='inputs', help='Input image or folder')\n    parser.add_argument(\n        '-n',\n        '--model_name',\n        type=str,\n        default='RealESRGAN_x4plus',",
        "detail": "Real-ESRGAN.inference_realesrgan",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Real-ESRGAN.inference_realesrgan_video",
        "description": "Real-ESRGAN.inference_realesrgan_video",
        "peekOfCode": "def main():\n    \"\"\"Inference demo for Real-ESRGAN.\n    It mainly for restoring anime videos.\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--input', type=str, default='inputs', help='Input video, image or folder')\n    parser.add_argument(\n        '-n',\n        '--model_name',\n        type=str,",
        "detail": "Real-ESRGAN.inference_realesrgan_video",
        "documentation": {}
    },
    {
        "label": "readme",
        "kind": 2,
        "importPath": "Real-ESRGAN.setup",
        "description": "Real-ESRGAN.setup",
        "peekOfCode": "def readme():\n    with open('README.md', encoding='utf-8') as f:\n        content = f.read()\n    return content\ndef get_git_hash():\n    def _minimal_ext_cmd(cmd):\n        # construct minimal environment\n        env = {}\n        for k in ['SYSTEMROOT', 'PATH', 'HOME']:\n            v = os.environ.get(k)",
        "detail": "Real-ESRGAN.setup",
        "documentation": {}
    },
    {
        "label": "get_git_hash",
        "kind": 2,
        "importPath": "Real-ESRGAN.setup",
        "description": "Real-ESRGAN.setup",
        "peekOfCode": "def get_git_hash():\n    def _minimal_ext_cmd(cmd):\n        # construct minimal environment\n        env = {}\n        for k in ['SYSTEMROOT', 'PATH', 'HOME']:\n            v = os.environ.get(k)\n            if v is not None:\n                env[k] = v\n        # LANGUAGE is used on win32\n        env['LANGUAGE'] = 'C'",
        "detail": "Real-ESRGAN.setup",
        "documentation": {}
    },
    {
        "label": "get_hash",
        "kind": 2,
        "importPath": "Real-ESRGAN.setup",
        "description": "Real-ESRGAN.setup",
        "peekOfCode": "def get_hash():\n    if os.path.exists('.git'):\n        sha = get_git_hash()[:7]\n    else:\n        sha = 'unknown'\n    return sha\ndef write_version_py():\n    content = \"\"\"# GENERATED VERSION FILE\n# TIME: {}\n__version__ = '{}'",
        "detail": "Real-ESRGAN.setup",
        "documentation": {}
    },
    {
        "label": "write_version_py",
        "kind": 2,
        "importPath": "Real-ESRGAN.setup",
        "description": "Real-ESRGAN.setup",
        "peekOfCode": "def write_version_py():\n    content = \"\"\"# GENERATED VERSION FILE\n# TIME: {}\n__version__ = '{}'\n__gitsha__ = '{}'\nversion_info = ({})\n\"\"\"\n    sha = get_hash()\n    with open('VERSION', 'r') as f:\n        SHORT_VERSION = f.read().strip()",
        "detail": "Real-ESRGAN.setup",
        "documentation": {}
    },
    {
        "label": "get_version",
        "kind": 2,
        "importPath": "Real-ESRGAN.setup",
        "description": "Real-ESRGAN.setup",
        "peekOfCode": "def get_version():\n    with open(version_file, 'r') as f:\n        exec(compile(f.read(), version_file, 'exec'))\n    return locals()['__version__']\ndef get_requirements(filename='requirements.txt'):\n    here = os.path.dirname(os.path.realpath(__file__))\n    with open(os.path.join(here, filename), 'r') as f:\n        requires = [line.replace('\\n', '') for line in f.readlines()]\n    return requires\nif __name__ == '__main__':",
        "detail": "Real-ESRGAN.setup",
        "documentation": {}
    },
    {
        "label": "get_requirements",
        "kind": 2,
        "importPath": "Real-ESRGAN.setup",
        "description": "Real-ESRGAN.setup",
        "peekOfCode": "def get_requirements(filename='requirements.txt'):\n    here = os.path.dirname(os.path.realpath(__file__))\n    with open(os.path.join(here, filename), 'r') as f:\n        requires = [line.replace('\\n', '') for line in f.readlines()]\n    return requires\nif __name__ == '__main__':\n    write_version_py()\n    setup(\n        name='realesrgan',\n        version=get_version(),",
        "detail": "Real-ESRGAN.setup",
        "documentation": {}
    },
    {
        "label": "version_file",
        "kind": 5,
        "importPath": "Real-ESRGAN.setup",
        "description": "Real-ESRGAN.setup",
        "peekOfCode": "version_file = 'realesrgan/version.py'\ndef readme():\n    with open('README.md', encoding='utf-8') as f:\n        content = f.read()\n    return content\ndef get_git_hash():\n    def _minimal_ext_cmd(cmd):\n        # construct minimal environment\n        env = {}\n        for k in ['SYSTEMROOT', 'PATH', 'HOME']:",
        "detail": "Real-ESRGAN.setup",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "Real-ESRGAN.setup",
        "description": "Real-ESRGAN.setup",
        "peekOfCode": "__version__ = '{}'\n__gitsha__ = '{}'\nversion_info = ({})\n\"\"\"\n    sha = get_hash()\n    with open('VERSION', 'r') as f:\n        SHORT_VERSION = f.read().strip()\n    VERSION_INFO = ', '.join([x if x.isdigit() else f'\"{x}\"' for x in SHORT_VERSION.split('.')])\n    version_file_str = content.format(time.asctime(), SHORT_VERSION, sha, VERSION_INFO)\n    with open(version_file, 'w') as f:",
        "detail": "Real-ESRGAN.setup",
        "documentation": {}
    },
    {
        "label": "__gitsha__",
        "kind": 5,
        "importPath": "Real-ESRGAN.setup",
        "description": "Real-ESRGAN.setup",
        "peekOfCode": "__gitsha__ = '{}'\nversion_info = ({})\n\"\"\"\n    sha = get_hash()\n    with open('VERSION', 'r') as f:\n        SHORT_VERSION = f.read().strip()\n    VERSION_INFO = ', '.join([x if x.isdigit() else f'\"{x}\"' for x in SHORT_VERSION.split('.')])\n    version_file_str = content.format(time.asctime(), SHORT_VERSION, sha, VERSION_INFO)\n    with open(version_file, 'w') as f:\n        f.write(version_file_str)",
        "detail": "Real-ESRGAN.setup",
        "documentation": {}
    },
    {
        "label": "version_info",
        "kind": 5,
        "importPath": "Real-ESRGAN.setup",
        "description": "Real-ESRGAN.setup",
        "peekOfCode": "version_info = ({})\n\"\"\"\n    sha = get_hash()\n    with open('VERSION', 'r') as f:\n        SHORT_VERSION = f.read().strip()\n    VERSION_INFO = ', '.join([x if x.isdigit() else f'\"{x}\"' for x in SHORT_VERSION.split('.')])\n    version_file_str = content.format(time.asctime(), SHORT_VERSION, sha, VERSION_INFO)\n    with open(version_file, 'w') as f:\n        f.write(version_file_str)\ndef get_version():",
        "detail": "Real-ESRGAN.setup",
        "documentation": {}
    },
    {
        "label": "RealESRGANerBlender",
        "kind": 6,
        "importPath": "inference_realesrgan_blender",
        "description": "inference_realesrgan_blender",
        "peekOfCode": "class RealESRGANerBlender():\n    def __init__(self):\n        # determine models according to model names\n        model_name = 'RealESRGAN_x4plus' # x4 RRDBNet model\n        model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=23, num_grow_ch=32, scale=4)\n        netscale = 4\n        # determine model paths\n        model_path = str(Path(__file__).parent / \"Real-ESRGAN/experiments/pretrained_models\" / f\"{model_name}.pth\")\n        if not os.path.isfile(model_path):\n            model_path = str(Path(__file__).parent / \"Real-ESRGAN/realesrgan/weights\" / f\"{model_name}.pth\")",
        "detail": "inference_realesrgan_blender",
        "documentation": {}
    }
]